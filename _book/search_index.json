{"index":{"version":"0.5.12","fields":[{"name":"title","boost":10},{"name":"keywords","boost":15},{"name":"body","boost":1}],"ref":"url","documentStore":{"store":{"./":["#","###","$","4000","browser","cli","clone","code","competit","g","git","gitbook","global","https://github.com/varadghodake/gitbook","instal","instructions:","introduct","localhost:4000","note","notes.git","npm","point","port","repo","serv","server","start","url"],"GeneralInstructions.html":["(https://leetcode.com/contest/weekli","+","190/problems/pseudo","=>","[new]","abstract","approach","avoid","binari","bracket","brute","built","class","class,","code","contest","copi","creat","decor","docstr","everyth","first","forc","function","further","gener","getter","helper","improv","instruct","keep","level","librari","list","lists.","maintain","methods,","mistak","object","oop:","optim","palindrom","paramet","pass","path","possible:","problem","property,","python","question!","readabl","refer","rememb","runtim","set","set([something]","sets,","setter","solv","somehow.","stuff","stupid","tree/)","us","valu","variabl","well","work","write"],"Algorithms/":["(arrays,","(trees,","14th/3328/","180/problems/lucki","2","8th",">","addit","algorithm","alien","bitwis","challenge/535/week","class","contest","data","default)","design","dict.get(key,","dictionari","do:","dp","especially)","etc)","factors/divisor","faulti","function","graphs,","habit","heap","https://leetcode.com/contest/weekli","https://leetcode.com/discuss/interview","https://leetcode.com/explore/challenge/card/may","https://www.geeksforgeeks.org/tag/array","input","jump","k","kadan","keyboard","leetcod","link","list","lists,","ll","matrix","maximum","memoiz","number","o(n)?","order","palindrom","phone","question","question/281470/","question/643158/googl","questions*","questions,","questions:","repetit","runtimes:","spiral","stock","stream","stream/","string","strings,","sum","think","travers","trie:","understand","weekli","zip","ðŸ“¢"],"Algorithms/SortingAndHashing.html":["!=","\"no\"","\"yes\"","#","((max_key_freq","(max_key","(min_key_freq","+=","0","1","1)","1))","1:","2/","2:","=","==",">","_,","adjustment_opt","around","arr","arr[expected_idx]","arr[expected_idx],","arr[i]","arr[i],","below.","bring","char","complet","count","current","def","defaultdict(int)","dict","enumerate(arr)}","expect","expected[i]:","expected_idx","f","f[max_key]","f[min_key]","f[v]","forget","freq","freq.items():","freq[char]","frequenc","function","hash","hashmap","https://leetcode.com/problems/maximum","https://www.hackerrank.com/challenges/minimum","https://www.hackerrank.com/challenges/sherlock","id","index,","indic","indices.","indices[current]","indices[expected[i]]","isvalid(s):","k","k,","len(arr),","len(f)","loop","max(f.keys())","max_key","max_key_freq","min(f.keys())","min_key","min_key_freq","minimumswap","minimumswaps(arr):","n,","number","number'","origin","over","range(len(arr)):","return","s:","sort","sorted(arr)","stack/","string/problem?isfullscreen=fals","swap","swap:","swapping.","updat","v","valid","way","{v:"],"Algorithms/BFS.html":["%","'*'","'0000',","(x","*","+","0","0))","0)])","1","1))","10)","10.","1]:","=","==",">","[1,","a^n","append","array","avoid","b","be","beginword:","bf","bit","bool:","canmeasurewater(self,","changer","class","collect","collections.dequ","combin","combination,","condit","creat","creation","d)","deadends:","deadends_set","deadends_set:","def","defaultdict(list)","defaultdict,","dequ","deque()","deque([(0,","df","direct","direction)","done","each","eg.","elif","empti","enabl","end","endword:","everywhere,","excel","exhaust","extrem","few","find","fingerprint","forget","game","game/","gener","get","go","greedi","grid","hand","here,","here.","hop","https://leetcode.com/problems/jump","https://leetcode.com/problems/open","https://leetcode.com/problems/wat","https://leetcode.com/problems/word","ii/","import","init_st","init_state,","int(state[i])","int)","int,","int:","job","jug","jump","ladder/","ladderlength(self,","len(state)):","length","list[str])","list[str],","littl","lock","lock/","long","minimum","move","moves+1))","n","need","next_stat","next_word","notes:","o(1)","o(n^2","on","openlock(self,","oper","optim","optimally.","part","popleft","possibl","problem","question","questions,","questions:","queue","queue.append((beginword,","queue.append((init_state,","queue.append((next_state,","queue.append((next_word,","queue.popleft()","queue:","range(0,","range(len(word)):","reach","repetit","requir","return","run","runtime:","search","seen","set()","set([beginword])","set(deadends)","short","shortvers","shortword","shortwords:","slower","solut","solution:","solutions:","somewher","start","state,","state[:i]","state[i+1:]","step","str((wheel","str)","str,","string","substr","take.","target:","there'","type","us","useful:","valid","valu","visit","visited.add(next_state)","visited.add(next_word)","visited:","water","well","wheel","wheen","word","word,","word[:i]+","word[i+1:]","word[i+1:]]","wordlist:","wordstor","wordstore[shortversion].append(word)","wordstore[word[:i]","work","x","x:","y)","y:","z:"],"Algorithms/Backtracking.html":["!=","\"\"","#","'(',","')',","':'","'visited'","((i,","(==r)","(i","(i,","(int","(ncr)","(posit","(use","(veri","*","+","+=",",","0","0)","0,","1","1)","1),","1):","1);","1,","1;","2","23:","2:","2]","3","3000","4","4):","4:","4]","4])","59:","5:",":","=","==",">","[]","[],","[candidates[i]],","[fals","[false]","[num],","[nums[j]])","_helpercopypaste(self,","a:","accept","accept,","actual","add","addit","ahead.","allow","answer:","arr:","array","array,","backtrack","backtrack(0,","backtrack([])","backtrack([],","backtrack(bucket","backtrack(bucket):","backtrack(bucket,","backtrack(curr","backtrack(i","backtrack(i,","backtrack:","base","basic","bits.","book","boolean","bucket","bucket,","bucket.append(arr[k])","bucket.pop()","bucket[0:","bucket[2:","call","candidates:","candidates[i])","canjumpfromposition(int","care","case","cases:","cc","chang","cheat","check","choices:","choos","class","close","collect","combin","combinations:","combinationsum(self,","combinator","complet","condit","constraint","continu","copied))","copied,","copied:","count","counter","counter(nums)","counter)","counter):","counter:","counter[num]","counter[num]:","current","current)","current),","current):","current,","current:","d","deep","def","df","dfs(self,","differ","digits/","direct","domain)","don't","each","element","element:","empti","exhaust","exists:","failur","fals","far;","filter","functools.lru_cach","furthestjump","game","gener","getmaximumgold(self,","given","go","gold/","grid","grid:","grid[i][j]","hat","helper","helperncr(","helperncr(0,","helperncr(s,","helperncr(s:","https://leetcode.com/problems/2","https://leetcode.com/problems/combin","https://leetcode.com/problems/jump","https://leetcode.com/problems/largest","https://leetcode.com/problems/numb","https://leetcode.com/problems/path","https://leetcode.com/problems/permut","https://leetcode.com/problems/permutations/","i:","if(","if(curr","if(i","if(n","ii/","import","includ","included[i]","included[i]:","index","int","int(bucket)","int(bucket[2:","int(bucket[2])","int)","int,","int:","int[]","intmax","intmin","item","j","j)","j))","j)):","j),","j,","j:","k","k:","keep","key","keyboard/submissions/","largesttimefromdigits(self,","len(arr)","len(bucket)","len(candidates):","len(grid),","len(grid[0])","len(nums)):","len(nums))]","len(nums):","length","level","limit","list,","list:","list[int])","list[int],","list[list[int]])","list[list[int]]:","loop","m","m,","made","make","math.min(posit","max","max(self.dfs(i,","max(self.dfs(x,","maximum","maximumsum","maximumsum)","memo","min","min(2","minsteps(self,","move","n","n):","n:","ncr","ncr.append(bucket[:])","necessari","need","next","nextposit","node","none:","normal","normalsubset(self,","note","num","number","nums)","nums.length","nums:","nums[position],","of.","on","ones.","open","option","other/","otherwise,","out","param","param,","parenthes","permut","permute(bucket","permute(bucket)","permute(bucket):","permute(self,","permuteunique(self,","posit","position,","possibl","problems)","process","public","questions:","r","r):","r:","range(0,","range(m))","range(n)","recurs","recursion)","recursion,","recursion:","reference:","remov","repeatit","repetition,","requir","result","result.append(bucket[:])","return","reverse=true)","revert","right","s:","same","scenario","search","see","seen),","seen):","seen.add((i,","seen.discard((i,","seen:","select","select.","self._helpercopypaste(n,","self.recurse(k,","self.t","self.t:","set","set())","set)","sheet","similar","solut","solution.","solution:","sorted(a,","stack","stay","step","str(d[i]))","str:","string","subset","success","sum","sum,","sum/","sum/discuss/16510/python","sum:","t:","taken","target","target:","time","track","true","true;","two","type","uniqu","updat","us","visit","visited[j]","visited[j]:","way","wear","x,","y","y,","{","}","â€˜rejectâ€™"],"Algorithms/BinarySearch.html":["!=","\"insert\"","#","(i)","(start","*","+","+=","0","0:","1","1,","1.","154","1:","1]","=","==",">",">=","[","[look","[lower,","__init__(self,","```pi","answer","appropri","arr:","arr[0]","array","array/","article:","b_target:","beginn","below","between","binari","binary_start_search(b_target):","binary_start_search(target)","binary_start_search(target+1)","bloomday:","bloomday[0]","boat","bouquet","bs","bstfrompreorder(self,","calc_sum(mid):","can_ship","can_ship(w):","capac","case","cases:","change.","check","class","closest","constructtree(start,","crucial","current","d","d:","day","day)","day:","days/","days_left","decid","decrement","def","default","definit","diff","direct","discussion/691825/binari","discussion/786126/python","done:","edg","eg:","element","else:","end","end):","end,","end:","enumerate(bloomday):","equal","equality,","equality.","etc","fg","find","find_first_greater(start","find_first_greater(start,","findbestvalue(self,","findmin(self,","first","float('","float('inf')","function","go","good","greater","https://leetcode.com/discuss/gener","https://leetcode.com/problems/capac","https://leetcode.com/problems/construct","https://leetcode.com/problems/find","https://leetcode.com/problems/minimum","https://leetcode.com/problems/sqrtx/","https://leetcode.com/problems/sum","i,","i.e.","ii/","import","includ","inf')","insert","int)","int,","int:","interesting.","it'","iter","iteration.","k","k:","last","leetcod","left","left=none,","len(bloomday)","len(nums)","len(nums),","len(preorder)","len(weights):","list[int])","list[int],","list[int]:","loop)","lot","lower","lower==len(nums)","m","m:","make","mani","max","max(end,","max(max_w,","max,","max_w","maximum,","mid","mid+1","mid;","min","min(start,","mindays(self,","minimum","monoton","mutat","mysqrt(self,","n","n:","necessari","need","never","next","node.","none","num","num)","number","nums:","nums[0]","nums[end]:","nums[lower]","nums[start]","on","ones.","optim","packag","pattern","pivot.","place","point","posit","power","preorder","preorder:","preorder[fg]","preorder[start])","problem","problem,","question","questions.","quicker","recurs","reduc","remember:","req","result","return","right","right=none):","rotat","same","sampl","search","searchrange(self,","self.left","self.right","self.val","set:","ship","shipwithindays(self,","solut","solution:","solv","somehow","sort","sorted;","start","start.","start:","step","streak","such","sum","sum(i","sum_w","take","target","target):","target+1","target,","target/","target:","templat","terminates.","thing","traversal/","traversal/]","tree","treenode(preorder[start])","treenode:","tri","ultim","understand","unlik","us","val","val=0,","valu","variabl","verify(mid):","w","w)","want","weights:","weights[0]","weights[1:]:","wg","within","x","x:"],"Algorithms/Games.html":["%","(n","0","0)","4","==",">","above.","bool:","bring","calcul","canwinnim(self,","case","class","current","def","divis","doubl","dp","fals","find","friend","game","game/","game/submissions/","https://leetcode.com/problems/divisor","https://leetcode.com/problems/nim","https://leetcode.com/problems/ston","i.e.","idea","inner","int)","iter","loop","lose","n:","need","number","on","one.","opponent.","over","posit","positions.","return","same","search","situat","solution:","start","that.","tri","us","valu","win"],"Algorithms/Bitwise.html":["&","&=","''","'0'","'0',","'1'","'1',","'1':","'e',","'i',","'o',","'u'])","(1","(bits[i","(n","(num","(see","*","*=","+","+=","0","0,","0:","1","1)","1):","1:","1}","2","2,","22nd","28th/3343/","2:","3:","4","=","==",">","[0]","[]","[_a,","^=","_a","_b","_b,","_c):","_c]:","a,","a:","a[len(a)","add(_a,","addbinary(self,","alway","and","b","b,","b:","b[len(b)","binary/","bit","bit:","bits/","bits[0]","bits[i]","bitwis","challenge/537/week","check","class","contain","continu","countbits(self,","counts/","def","dict","else:","even","extra","extra)","extra,","findthelongestsubstring(self,","flip","function.","https://leetcode.com/explore/challenge/card/may","https://leetcode.com/problems/add","https://leetcode.com/problems/find","https://leetcode.com/problems/numb","https://leetcode.com/problems/pow","i:","i]","imperfect","int)","int:","j","keep","last_pow","last_power]","leetcod","len(a)","len(a):","len(b):","len(s):","list[int]:","longest","loop.","lsb","main","max_len","n","not:","num","num:","number","on","p","power","power_v","power_val:","question)","range(1,","result","return","rule","s:","same.","set","set(['a',","signific","small","smaller","solution:","store","str)","str,","str:","substr","swap.","th","toggl","trick","trick:","two","two/","us","vowel","vowel_set","write","{64:"],"Algorithms/DP/":["#","(1","(1)","(1,","(2,","(a[p+1]","(e","(i","(int","(math.max(i","(math.max(j,","(n+1)","(n+1)st","(num","(p[x]","(some","(subarray)","(tricks/ds)","(x","*","+","+=",",",".","...","...,","/","//","0)","0),","0,1,...,i","0/1","1","1)","1):","1,","1.","1/0","10.classic","11.dp","12.insert","13.graph","14.memoiz","15.binari","16.math","1]","1])","1][0],","1][1])","1][1],","1][2])","1d","2","2.","2.knapsack","2/","21","2;","2]","2d","3","3.multi","3n","4)","4.interv","5","5)","5.bit","6.digit","7)","7.dp","8.string","9.probabl","=","==","[0]","[average(0,","a.kadane'","a[0]","a[1],","a[i]","a[i])","a[i].","a[p+1]","a[p+2]","a]","a],","achiev","add","ag","algorithm","allowed:","alpha","ancestor","append","approach","arithmet","around","array","array.","array/","ascii","assign","attend","automat","aux_dp","aux_dp[0]","aux_dp[1]","aux_dp[2]","averag","average(i+1,","average(x,","average.","averages/","b","b.lc","b]","b],","backward","backwards.","ball","balloons/","base","be","becomes:","before.","best","bf","billboard/","binari","bit","bits/","bits[i","bits[i]","bitwis","block","bookcas","border","bottom","boundari","box","boxes/","break","break/","bst","bst/","build","buy","c","c.li","cameras/","cap","car/","cards/","care","chain","chain/","chang","change/","change:","charact","check","chessboard/","chose","chunk","climb","code.","coin","column","comment","common","compar","comparisons/","complic","compress","computation,","computations,","concaten","concept","conflicts/","connect","consecut","consid","consist","constraint","constraints,","convert","cooldown/","cost","costs[i][0]","costs[i][1]","costs[i][2]","cuboids/","current","cut","d.2d","day","decomposition/","def","delet","deletion/","deliveri","depend","desirable.","df","di","dialer/","dice","dict","dict.","dictionary/","diff","differ","difference,","difference/","difference:","difficulti","digit","digits/","dimension","dishes/","distanc","distance/","divid","divis","divisor","doll","dominoes/","don't","dot","down","dp","dp'","dp,","dp.get(n","dp;","dp[","dp[0]","dp[1]","dp[1])","dp[2])","dp[2],","dp[:]","dp[first_one]","dp[i","dp[i]","dp[i])","dp[i][0]","dp[i][1]","dp[i][2]","dp[i][diff]","dp[j","dp[j]","dp[j])","dp[j]))","dp[j],","dp[j].get(diff,","dp[n]","dp[n])","dp[small_amount]","drop/","dynam","e","e.cumul","each","earn/","easili","easy!","eat","egg","either:","element","elements,","encount","end","enough","enumerate(costs[1:],","enumerate(dp[1:],","envelopes/","equal","equation:","even","everyth","exactli","exam/","exampl","example:","exhaust","explan","explanation:","express","extrem","f(dp[1],","f(dp[i","f(dp[small_amount","f(g(j,","f.hashmap","f[i][j]","f[i][j]b","f[p][j","fair","fall","fall/","fee/","fewest","fibonacci","figur","find","fingers/","finish","first","first:","flight","flip","forget","form","forward;","g(i","game","game/","game/:","garden/","gener","give","given","go","good","great","grid","grid/","grid:","group","group'","group,","groups'","hand.","happi","happiness/","hard","hat","height","here","here,","higher","home/","hous","house/","https://leetcode.com/problems/2","https://leetcode.com/problems/airplan","https://leetcode.com/problems/alloc","https://leetcode.com/problems/arithmet","https://leetcode.com/problems/best","https://leetcode.com/problems/binari","https://leetcode.com/problems/bitwis","https://leetcode.com/problems/build","https://leetcode.com/problems/burst","https://leetcode.com/problems/can","https://leetcode.com/problems/champagn","https://leetcode.com/problems/cheapest","https://leetcode.com/problems/cherri","https://leetcode.com/problems/climb","https://leetcode.com/problems/coin","https://leetcode.com/problems/combin","https://leetcode.com/problems/concaten","https://leetcode.com/problems/constrain","https://leetcode.com/problems/continu","https://leetcode.com/problems/count","https://leetcode.com/problems/cr","https://leetcode.com/problems/decod","https://leetcode.com/problems/delet","https://leetcode.com/problems/deliv","https://leetcode.com/problems/dic","https://leetcode.com/problems/distinct","https://leetcode.com/problems/distribut","https://leetcode.com/problems/divisor","https://leetcode.com/problems/domino","https://leetcode.com/problems/dungeon","https://leetcode.com/problems/edit","https://leetcode.com/problems/fil","https://leetcode.com/problems/find","https://leetcode.com/problems/form","https://leetcode.com/problems/freedom","https://leetcode.com/problems/frog","https://leetcode.com/problems/get","https://leetcode.com/problems/greatest","https://leetcode.com/problems/guess","https://leetcode.com/problems/hous","https://leetcode.com/problems/i","https://leetcode.com/problems/integ","https://leetcode.com/problems/interleav","https://leetcode.com/problems/jump","https://leetcode.com/problems/k","https://leetcode.com/problems/knight","https://leetcode.com/problems/kth","https://leetcode.com/problems/largest","https://leetcode.com/problems/last","https://leetcode.com/problems/least","https://leetcode.com/problems/length","https://leetcode.com/problems/link","https://leetcode.com/problems/longest","https://leetcode.com/problems/mak","https://leetcode.com/problems/matrix","https://leetcode.com/problems/max","https://leetcode.com/problems/maxim","https://leetcode.com/problems/maximum","https://leetcode.com/problems/min","https://leetcode.com/problems/minimum","https://leetcode.com/problems/new","https://leetcode.com/problems/non","https://leetcode.com/problems/numb","https://leetcode.com/problems/odd","https://leetcode.com/problems/on","https://leetcode.com/problems/out","https://leetcode.com/problems/paint","https://leetcode.com/problems/palindrom","https://leetcode.com/problems/partit","https://leetcode.com/problems/perfect","https://leetcode.com/problems/pizza","https://leetcode.com/problems/predict","https://leetcode.com/problems/profit","https://leetcode.com/problems/push","https://leetcode.com/problems/rac","https://leetcode.com/problems/rang","https://leetcode.com/problems/reduc","https://leetcode.com/problems/regular","https://leetcode.com/problems/remov","https://leetcode.com/problems/restor","https://leetcode.com/problems/russian","https://leetcode.com/problems/scrambl","https://leetcode.com/problems/shop","https://leetcode.com/problems/shortest","https://leetcode.com/problems/smallest","https://leetcode.com/problems/soup","https://leetcode.com/problems/split","https://leetcode.com/problems/stick","https://leetcode.com/problems/ston","https://leetcode.com/problems/str","https://leetcode.com/problems/strang","https://leetcode.com/problems/stud","https://leetcode.com/problems/sup","https://leetcode.com/problems/tallest","https://leetcode.com/problems/target","https://leetcode.com/problems/til","https://leetcode.com/problems/triangle/","https://leetcode.com/problems/tripl","https://leetcode.com/problems/ugli","https://leetcode.com/problems/uniqu","https://leetcode.com/problems/valid","https://leetcode.com/problems/video","https://leetcode.com/problems/way","https://leetcode.com/problems/wher","https://leetcode.com/problems/wiggl","https://leetcode.com/problems/wildcard","https://leetcode.com/problems/word","i+1)","i,","idea.","ie","ie.","ii","ii/","iii/","immutable/","import","includ","include/exclud","increas","increasing/","influenc","initialization:","inner","insert","instead","instructions/","integ","integers/","invers","is,","isn't","it'","it,","item","item:","item])","iv/","j","j'","j)","j+1))","j,","j.","j]","j]))","j])))","job","jobs/","jump","jump/","k","k/","kadane'","keep","kept","key","keyboard/","knapsack","knapsack.","larger","largest","last","last/last","leaf","left","len(dp)","len(dp)):","len(nums))]","length","less","li","lift","line","list","longest","loop","lower","machines/","mailboxes/","make","matching/","math.max(dp[i],","matrix/","max","max(dp[i],","max(dp[i].get(diff,","max(max_seq,","max(nums[0:2])","max_seq","maximum","memoiz","merg","min(dp[","min(dp[0],","min(dp[1],","min(dp[i","minimum","mountain","multipl","music","n","need","neg","next","node","node/","nodes.","nodes/","non","note","note:","now","now,","num","num)","number","number/","numbers(a[0],","nums:","nums[0]","nums[1:]","nums[:","nums[i","nums[i]","nums[j]","obtain","obv)","obvious","offers/","on","ones,","ones/","open","oper","optimization:","options/","or","oranges/","other/","out.","over","overflow;","overlap","p","p)},","p.append(p[","p[y])","paint","pair","palindrom","palindrome/","parameter,","parentheses/","partit","partitioning/","parts:","path","paths/","paths/discuss/102993/python","permut","permutation/","pickup","pickup/","piece,","pizza/","place","place.","playlists/","plu","plug","point","points/","polygon/","ports/","posit","possibilti","possibl","possible_target","power","power.","previou","previous,","printer/","probability/","probabl","product","product,","profit","program","python","queri","question","question,","question.","questions.","range(0,","range(1,","range(i):","range(k","range(len(dp)","range(len(dp)):","range(len(dp),","reach","realli","record","rectangl","rectangle/","refuel","rememeb","remov","reorder","repeat","repetit","repetitions.","repetitions/","requests/","rest","return","revers","right","robber","robber/","roll","root","routes/","s","same","satisfi","say,","schedule/","scheduling/","schemes/","score","score/","search","seat","second","secondari","section","segments/","sell","sequenc","sequence/","servings/","set","set/","shelves/","shortest","showcas","sign/","similar","simulation/","singl","situat","situation,","slice","slices/","slow","small_amount","small_target","smaller","smallest","solut","solv","sort","space","spell","split","squar","square/","squares/","stack","stair","stair.","stairs/","start","start=1):","stay","step","steps/","stick/","stitching/","stock","stock/","stone","stones/","stops/","storag","store","straight","straightforward","strictli","string","string/","strings/","student","sub","subarray","subarray/","subarrays/","submatric","subsequ","subsequence/","subsequences/","subset","subset/","subsets/","substr","substring/","substrings/","subtract","suffici","sum","sum/","sum/discuss/299049/dp","sum/discuss/455024/dp","supersequence/","superstring/","suppos","sure","swap","take","tap","target","target/","team","team/","that,","that.","thing","things:","think","three/","through","tickets/","tiling/","time","tojgroups.","top","tower/","trail/","transact","transfer","travers","tree","tree/","trees/","triangul","trick","tricki","tromino","turbul","twist.","twist;","two","type","unbound","understand","up","updat","us","usual.","v/","valid","valu","values/","variabl","vii/","visit","visual","vowel","want","wash","water","way","ways/","we'd","wear","weight","well","well.","where,","whether","whole","win/","winner/","within","without","word","word/","words/","wraparound","write","wrt","y)","y):","z]","z])","zero/","zeroes/","zigzag","{f[p][j"],"Algorithms/DP/Knapsack.html":["(if","(one","(word","(x+1)","(x,","(xi)]","(y+1)","(yi)]","*","+","0","0:","1):","1,","1.","2.","=",">=","[0][0])","[[0","[x","[x][y]","[y","_","_x","_y","accept","again)","again.","against.","ahead","alway","amount","answer","array","array.","attribut","base","bottom","boundari","break","break)","break).","break/","case","case,","certain","change/","check","coin","coins:","comput","criteria","determin","disguis","don't","down","down:","dp","dp[_x][_y],","dp[x][y]","dp[x][y])","dure","eg.","element","element,","especti","example:","fals","filling:","first","fit","freq[string]['0']","freq[string]['1']","gener","given","go","here:","https://leetcode.com/problems/coin","https://leetcode.com/problems/on","https://leetcode.com/problems/word","i.e.","includ","include/exclud","insid","interesting.","it'","it,","items,","knapsack","list","loop","lot","main","make","max(1","max/min","memoiz","move","non","none","not;","note:","now,","number","on","optim","order;","otherwise,","over","overcounting.","param","perfect","place","prefer","previou","problems:","range(1,","range(x):","range(x+1):","range(x+1)]","range(x,","range(y+1)]","range(y,","recurs","repeat","repeat,","repetit","repres","result","revers","same","second","select","sense.","set","shoudn't","simplifi","smart:","sometimes,","string","strs:","sum(xi","sum(yi","sure","tabl","target","thing","things)","things,","think","time","top","traversal,","tri","true","under","up","up:","want","we'd","we'v","when?","within","word","x","xi","y","y).","yi","zeroes/"],"Algorithms/DP/NumSol.html":["+","+=","0","0:","1","1:","1]","1][","1][y]","=","==",">","[[0","_","add","class","comput","continu","def","do","dp","dp[","dp[0][0]","dp[prev2])","dp[x","dp[x][i","dp[x][y]","here","https://leetcode.com/problems/uniqu","ii/","instead","int:","key","len(obstaclegrid)","len(obstaclegrid[0])","list[list[int]])","min(dp[prev1],","number","obstaclegrid:","obstaclegrid[x][y]","ones.","path","previou","range(x):","range(x)]","range(y):","range(y)]","return","solut","solution:","uniquepathswithobstacles(self,","valu","x","y"],"Algorithms/UncommonAlgos.html":["#","'can'","(t","+","//","1","1)","1)]","1]","=",">",">=","abs(state[b","algo","algorithm","b","bool:","bucket","bucket,","buckets,","class","code","comparison","containsnearbyalmostduplicate(self,","def","del","duplic","enumerate(nums):","equal","facilit","found","good","hash","here.","https://leetcode.com/problems/contain","i,","iii/","illustr","inspir","int)","int,","k","k:","linear","list[int],","maintain","n","n)","neightbor","number","nums:","operations,","perfectly:","possibl","problem","rang","return","run","same","search","slide","solution.","solution:","sort.","state","state:","state[nums[i","t","t:","this.","time.","trick","true","two","uncommon","unless","us","w","w:","w]","want","window","{}"],"DataStructures/StacksAndQueues/":["''.join(stack)","0","1","=","==",">","[]","adjac","again.","anyth","away","base","becom","bool:","can't","case","class","def","distinct.","doesn't","don't","duplic","element","else:","end","enumerate(s):","fals","hasn't","hint:","https://leetcode.com/problems/remov","i,","j","k","last","len(pushed)","list[int])","list[int],","match","n","noth","pop","popped:","popped[k]","popped[k],","push","pushed.","pushed:","queue","reach","removeduplicates(self,","return","right","s","s:","solution:","something,","stack","stack.append(s)","stack.pop()","stack[last]","stacks:","str)","str:","string/","subtl","there'","top","trick","used:","validatestacksequences(self,","way","why?"],"DataStructures/Arrays/":["'quirky'","(1)","+","3",":","array","binari","check","element","element/","find","gener","greater","hash","help","https://leetcode.com/problems/next","https://www.geeksforgeeks.org/maximum","https://www.geeksforgeeks.org/next","increas","instructions:","length","on","permutation/solution/","posit","post","power","pre","prioriti","problem","question","remov","search","similar","sort","stack","strictli","sub","valu","weapon"],"DataStructures/Arrays/TwoPointers.html":["\"\"\"","(left_idx","(right","0","0,","1","1)","1,","2","=",">","_left,","_right","_right):","```pi","add","anything,","array.","array/","class","contain","correct","decid","def","duplic","easi","effect","elem","element","elems)","end","faster","first","forward","gener","height","height:","https://leetcode.com/problems/3sum/","https://leetcode.com/problems/boat","https://leetcode.com/problems/contain","https://leetcode.com/problems/mov","https://leetcode.com/problems/remov","https://leetcode.com/problems/two","instead.","int:","keep","kâ€™","l","l,","last","left","left_idx","left_idx,","left_idxto","len(height)","len(nums)","limit","list[int])","loop","maintain","maxarea(self,","modifi","move","movezeroes(self,","n","none:","num","nums:","nums[left_idx]","nums[left_idx],","nums[pivot_idx]","nums[pivot_idx],","nums[runner]","on","one,","pair","partit","partition(_left,","people/","pivot","pivot_idx","place","places.","point","pointer","pointers:","prop","put","r","range(_left,","realli","removeduplicates(self,","return","right","runner","save","search","select","size","slower","smaller","solut","solution:","sort","structure:","subarray","sum/","swap","techniqu","two","typic","us","water","water/","zeroes/"],"DataStructures/Arrays/Subarrays.html":["!=","\"\"\"","#","(current","(current_sum","(d","(end","(end_index","(i","(len(nums)","(n","(p.get(cont_sum","(sorted)","(start","(start_index","(with",").","*","*(if","+","+=","0","0)","0))","0,","0:","0}","1","1)","1))","1).","1)/2","1):","1]","1}","2","2:","3/","=","==","=>",">",">=","[0]","[float('","_sum","_sum,","`found`","absolut","accord","add","addit","algo:","algorithm:","alway","anoth","answer","array","basic","befor","binari","both","c","calcul","can,","case","cases:","catch","catch:","char","char_stor","charact","character(not","characters/","characters/discuss/87768/4","chars,","chars[start_char]","checks:","class","classic","come","comparison","complex","condit","constraint","constraint.","cont_sum","cont_sum,","continu","contract","corner","count","criteria","criteria,","current","current,","current:","current[char]","current_sum","current_sum,","d","data","deal","def","default),","del","desir","dict","dict.","diff","differ","distinct","domain","donâ€™t","dp","dure","each","easili","element","element/","element:","encount","end","end,","end.","ends,","enough","enumerate(nums):","enumerate(prefix):","equal","everytim","exclud","expand","expand.","extend","fall","final_answ","find","first","float('","float('inf')","float('inf')],","forwarding.","found","found,","frequenc","fron","great","greater,","hit","hold","https://leetcode.com/problems/longest","https://leetcode.com/problems/maximum","https://leetcode.com/problems/minimum","https://leetcode.com/problems/subarray","https://www.geeksforgeeks.org/maximum","https://www.geeksforgeeks.org/numb","https://www.geeksforgeeks.org/xor","i)","i,","i.e.","impli","includ","inclus","increas","inf')","inf'),","insid","instead","int)","int,","int:","interv","isconstraintsatified().","iteration.","ith","k","k)","k,","k/","k:","keep","know","last","last_seen","left","len(nums)","len(s)","len(target)","length","length)","length.","lengthoflongestsubstring(self,","lengthoflongestsubstringkdistinct(self,","lengthoflongestsubstringtwodistinct(self,","less","letter","limit/","line","list[int])","list[int],","long","longest","look","loop","loop,","maintain","mani","matched:","max","max(length,","max(longest,","max(max_len,","max/min.","max/min:","max_len","max_len.","maxim","maximum","maxnonoverlapping(self,","maxsubarraylen(self,","maxval","meet","met","minoperations(self,","minsubarraylen(self,","minval","minwindow(self,","modulo","more","move:","much","multi,","n","n)","need","negative,","new","non","now","num","number","nums:","o(1)","o(1).","occur","odd","older","on","oper","optim","optimizations:","otherwis","outsid","over","overlap","p","p.get(cont_sum,","p[_x]","p[cont_sum]","pointer","possibl","post","pre","prefix","prefix.append(prefix[","prefix_arr[0]","prefix_arr[1]","prev","prev;","prev_sum","previou","problem","produc","product","python","quantiti","quantity.","question","question,","question.","reduc","refer","relat","remov","repeat","requir","result,","result[end]","result[start]","return","right","run","s:","s[start]","satifies)*","satisfi","satisfied.","search","seen","set","side","side,","similar","simul","situat","size","slide","smallest_len","solution.","solution:","span","start","start+1","start+1)","start,","start_char","step","store","str)","str,","str:","strictli","sub","subarray","subarray/","subarrays,","subarrays:","subarraysum(self,","subsequ","subsequences.","substr","substring/","sum","sum(nums)","sum,","sum/","sum_po","sum_pos:","sum_pos[p]","sum_stor","sum_store:","sum_store[current_sum]","sum_store[prev_sum])","sums:","sums[curr","sums[current]","swap","t:","target","target)","target,","target.get(c,","target/","target:","target[c]","target])","thing","till","time","total","travers","tri","two","unless","until","updat","us","valu","variabl","well","whole","window","window,","window.","without","x","x.","x:","xors/","zero/","{0:","{cont_sum:","{}","{},"],"DataStructures/Arrays/Subsets.html":["!=","%","(1","(check","*","+","/","0","0:","1","1,","18/","1:","1]","1])","2","2)","=","==",">","[","[1]","[]","archives:","array","base","checks:","choices:","class","def","divis","don't","dp","drop","e","each","element","element,","enumerate(nums):","freq(x)","freq(x+1)","geek","gotcha","harmoni","here","https://leetcode.com/problems/largest","https://leetcode.com/problems/longest","https://www.geeksforgeeks.org/partit","https://www.geeksforgeeks.org/tag/subset/","i):","i,","implement","implementation:","index","issubsetsum(list,","it'","j","largestdivisiblesubset(self,","leav","len(nums)","length","li","like.","like:","lis.","list[int])","list[int]:","list[n","max","max_len","max_len:","meaning,","method","miscellan","n","n,","num","nums:","nums[j]","o(n2)","optim","pre","pre[i]","pre[index]","prioriti","problem","question","queue","range(0,","recurs","result","result.append(nums[index])","return","section)","set_len","set_len[i]","set_len[i]:","set_len[j]","set_len[j])","similar","smart","solut","solution:","sort","sorted(nums)","standard","subsequ","subsequence,","subsequence/","subset","subset/","subset/discuss/84006/class","subsets/subsqu","sum","take","target","this:","two","way","whole","x","|"],"DataStructures/Arrays/Triplets.html":["#","(i+1)","(nums[i]","+","+=","0","1","1):","1,","1]","1]:","2","2):","=","==",">","[0","[]","\\","approach","avoid","better","binari","check","class","collect","continu","def","defaultdict","defaultdict(list)","dictionary.","elem,","element","element,","enumerate(nums):","find","fix","found","g","greater","https://leetcode.com/problems/3sum/","https://leetcode.com/problems/count","i):","i,","import","increas","int:","j","j,","j:","k","last","len(nums)","len(nums),","len(rating)):","len(rating))]","list[int])","list[list[int]]:","modifi","n","n,","need","num","number","nums:","nums[i","nums[i]","nums[j","nums[j]","nums[j])]","nums[j])])))","nums[j],","nums[k]","nums[k]])","numteams(self,","one.","one:","optim","posit","positions[","positions[num].append(i)","possibl","range(0,","range(1,","range(i","rating:","rating[i]","rating[j]:","repetition.","result","result.append([nums[i],","result.append([x,","result_","result_s.add(tuple(sorted([nums[i],","result_s.pop()","result_s:","return","s","s[i]","s[j]","save","search","second","set","set()","smaller","solution:","sort","sorted(nums)","step","sum","sum.","sum_po","sum_pos:","sum_pos[","target","target,","target:","teams/","that'","third","threesum(self,","total","tri_sum","triplet","us","way","x,","y,","z","z])"],"DataStructures/Arrays/StackTricks.html":["(132","(eg.","(k","/","0","0:","1","1))","1):","1,","15th","1]","1][0]","21st/3330/","3","=",">","[[i,","[]","__init__(self):","```pi","add","add.","addit","ahead","alway","another.","anything.","append","augment","base","bigger","calls/","challenge/536/week","class","collect","come","compar","competit","concept","current","def","defaultdict","defaultdict(int)","dequ","deque()","didn't","direction(intenum):","displac","displacements.","don't","dry:","each","elem","element","element:","end","enum","enumerate(heights):","enumerate(nums):","equal:","first","game","gener","go","great","greater","h","heights:","here.","here:","histogram/","https://leetcode.com/explore/challenge/card/may","https://leetcode.com/problems/132","https://leetcode.com/problems/find","https://leetcode.com/problems/largest","https://leetcode.com/problems/next","https://leetcode.com/problems/numb","https://leetcode.com/problems/onlin","https://leetcode.com/problems/slid","i,","i/","i]","idea","import","incom","info","int)","int:","intenum","interpret","it'","it.","k","k:","keep","key","knuth","l","largestrectanglearea(self,","last","leetcod","left","len(heights)","len(nums)","list[int])","list[int],","list[int]:","location)","main","maitain","maximum/","maxslidingwindow(self,","monoqueu","more","mostcompetitive(self,","n","n)]","need","next","next(self,","next:","nextgreaterelement(self,","now","num","nums1:","nums2:","nums:","on","origin","out","pattern)","pattern/dequ","ping(self,","pop","price:","question","question:","queue","queue.append((","r","range(0,","range(len(nums2)","recent","recentcounter:","rectangl","remember:","repeat","requir","result","result.append(stack[0][0])","return","scenarios:","select","self.stack","self.stack[","self.window","self.window[0]","similar","simpl","slide","smaller","smaller:","smallest","solution:","some;","sort","span/","stack","stack.append(n)","stack.pop()","stack/queu","stack[","stack[:k]","stock","stockspanner:","store","store[nums2[i]]","structure:","subsequence/","t:","take","target","techniqu","trick","veri","want","window","yourself"],"DataStructures/Arrays/MultipleArrays.html":["\"\"\"","#","'i':","'j':","'k':","+=","0)","0,","0:","0}","1","1,","3.","=","==",">",">=","[]","\\","anything,","arr1:","arr1[index['i']]","arr1[index[x]]","arr2:","arr2[index['j']]","arr2[index[x]]","arr3:","arr3[index['k']]:","arr3[index[x]]","array","array/","array;","arrays/","arraysintersection(self,","break","class","comparison","creat","crucial;","def","each","else:","equal,","forward","function","function.","get_smallest(x))]","get_smallest(x):","https://leetcode.com/problems/intersect","https://leetcode.com/problems/merg","index","index:","index['i']","index['j']","index['k']","index[i]","index[min(index,","instead.","int)","int,","key","key=lambda","lambda","lambda.","len(arr1)","len(arr2)","len(arr3):","len(nums1)","list[int])","list[int],","list[int]:","m","m:","m_idx","m_idx,","maintain","make","merge(self,","min","min/max/sort","minimum","modifi","multipl","n","n:","n_idx","n_idx,","none:","note:","nums1","nums1:","nums1[m_idx]","nums1[r_idx]","nums2:","nums2[n_idx]","nums2[n_idx]:","otherwis","overflow","place","point","pointer","push","r_idx","required.","result","result.append(arr1[index['i']])","return","solution:","sort","state","three","tri","true:","us","x","x:","{'i':"],"DataStructures/Arrays/LeftAndRight.html":["!=","(n","*","1","1]","1],","2,","2:float('","2:float('inf'),","3:float('","3:float('inf')}","3]:","=","==",">","[1,","[[float('inf'),","[dm[i][q","[float('inf')]","_","accept","answer","both","c:","c_l","c_r","character/","check","class","col","color","color/","colors:","colors[i]","colors[n","combin","comput","conquer","def","devid","distanc","dm","dm=distanc","dm[i]","dm[i][col","dm[i][q","dm[n","earlier","enumerate(s):","esqu","float('","float('inf')","float('inf'),","float('inf')]","good","here:","https://leetcode.com/problems/shortest","i'v","i))","i,","i]","i],","i][col","index","inf'),","inf')}","last","left","len(colors)","len(s)","list[int],","list[int]:","list[list[int]])","lo=last","lol","lol)","lol,","lol[c_l]","lol[col])","loop","lor","lor[c_r]","lor[col]","matrix","min(dm[i],","min(dm[i][col","min(dm[n","n","n):","observ","occur","occurrence,","q","queries:","queries]","question.","range(0,","range(len(colors))]","return","right","right.","s:","s[i]","s[n","same","sc","shortestdistancecolor(self,","shortesttochar(self,","solution.","solution:","str)","str,","target","thing;","{1:float('","{1:float('inf'),"],"DataStructures/Strings/":["string"],"DataStructures/Strings/StandardQuestions.html":["%","''","'*'","(","(ord(string[i","(we","*","+","+=","0","0)","1","1])","26","26)","=","==",">","[])","[i]","[string]","along","answer.","backward","backwards,","base","binari","bool:","break","brute","build","c","certain","chain","chain/","charact","character/","characters/","check","circular","class","compar","countbinarysubstrings(self,","criteria","current","current:","current_count","d:","def","deleting/","dict.","dict:","dictionari","dictionary)","diff","differ","differbyone(self,","each","easier.","elem","else:","enumerate(s):","enumerate(string[1:],","exist","fals","final","findlongestword(self,","fingerprint","fingerprints.get(fingerprint,","fingerprints.values()","fingerprints[fingerprint]","function","gener","go","good","groupstrings(self,","handl","https://leetcode.com/problems/count","https://leetcode.com/problems/group","https://leetcode.com/problems/longest","https://leetcode.com/problems/str","i,","int:","keep","key=","key=lambda","lambda","last","last:","len(store[c])):","len(store[c]):","len(word):","len(x),","length","letter","list[list[str]]:","list[str])","longeststrchain(self,","loop","match","max(chain,","max(words_store[new_word],","min","min(result,","model","new_word","now,","number","occur","offset","offsets.get(c,","offsets[c]","on","ord(c))","peep","possibl","prev","prev_count","problem.","question","question.","range(len(word)):","range(offset,","remove/add","repeat","replac","result","result.","return","reverse=true)","rotat","run","s","s:","s[0]","s[1:]:","same","second","set","set()","shift","simple.","slide","solution:","sort","sorted(words,","standard","start=1):","store","store,","store.add(fingerprint)","store.get(c,","store:","store[c]","store[c][i]","str(diff","str)","str,","str:","string","strings/","strings:","subsequ","substr","substrings/","through","total","travers","true","updat","visual","window","without","word","word,","word:","word[:i]","word[i+1:]","words:","words_sort","words_sort:","words_stor","words_store:","words_store[new_word]","words_store[new_word])","words_store[word]+1)","words}","x))","x:","{word:","{}"],"DataStructures/LinkedLists/":["\"\"\"","#","%","'next'","(_list.val,","(check","(heada","(id","(l1_val","(lists[list_idx].val,","(merg","(n+1)th","(the","(tree/readme.md)","+","//","0","1","10","2","=","==","=>",">","[]","_","_,","__init__(self,","_list","_next","_sum","```","```pi","a,","address","addtwonumbers(self,","adjust","algorithm","also,","approach:","ask","avoid","b","be","befor","bool:","both","call","care","carri","carry)","carry:","case","case.","check","class","comapar","common,","conditions,","conenct","connect","convers","corner","count","crucial","current","current,","current.next","current:","cycl","cycle/","declar","def","definit","deletion.","difference.","different.","digit","don't","doubli","dummi","dummy.next","edg","eleg","elem","element","else:","end","enumerate(lists):","example,","existance.","fals","fast","fast.next","fast.next.","fast.next:","fingerprint","first","function)","getintersectionnode(self,","give","given","graph","graph:","great","guarate","happens.","hascycle(self,","head","head)","head.next","head.val","head:","heada","heada,","heada.next","heada.next:","heada:","headb","headb):","headb:","heap","heap:","heapq","heapq.heappop(heap)","heapq.heappush(heap,","helper(head)","helper(node):","helper(node.next)","helper.first","helper.last","helper.last.next","helper.last:","helps.","here","https://leetcode.com/problems/add","https://leetcode.com/problems/delet","https://leetcode.com/problems/intersect","https://leetcode.com/problems/link","https://leetcode.com/problems/merg","https://leetcode.com/problems/middl","https://leetcode.com/problems/remov","https://leetcode.com/problems/revers","i))","i,","id(head)","id(node)","ie.","ii","import","index","init(self,","inspir","instanti","instruct","int)","int,","is,","iter","iterative:","k","keep","keyword,","l1","l1.next","l1.val","l1:","l1_val","l2","l2.next","l2.val","l2:","l2_val","last","last.","last_node.next","link","list","list,","list.","list/","list[listnode])","list_idx","list_idx))","listnode()","listnode(digit)","listnode)","listnode,","listnode:","lists)","lists/","lists:","lists[list_idx]","lists[list_idx].next","local","long","loop","m","m:","m_refer","make","mani","mergeklists(self,","mergetwolists(self,","move","multipl","n","n:","need","next","next.","next=none):","node","node,","node.","node.next:","node:","node_before_revers","nodes.","none","none,","none.","none:","noth","nth","null,","null.","numbers/","on","ones:","order.","otherwise,","out","overflow.","perform","phase","place","point","pointer","post","practic","prep","prepar","prev","prev,","previou","print","print_values_in_reverse(head.next)","print_values_in_reverse(listnod","printed.","probabl","problem","processed,","push","question","question)","question.","range(n):","reach","recurs","recursion,","recursive:","reference.","remove).","removenthfromend(self,","reserv","reset","return","revers","reverse.","reversebetween(self,","reverselist(self,","run","run.","runner","runner.next","self.next","self.val","sequence:","set","set()","shouldn't","similar","singli","situat","slow","slow.next","slow.next.next","so,","solution:","sort","static","step","sure","swap","target","that,","there'","thing","through","till","tough","track","traverse()","traverse(node.next)","traverse(node=head):","treat","tree","tree:lca","true","two","understand","until","us","val","val=0,","valu","variabl","visit","visited.add(fingerprint)","visited.add(id(node))","visited:","way","we'v","x","x):"],"DataStructures/Trees/":["!=","'node')","'node',","'node':","(check","(collections.deque)","(levelwis","(no","(recurs","(step","+","2","439df7e5ea1f","=",">","again,","ancestor","answer.","append","base","befor","binari","care","cases.","check","class","combo","common","converg","curat","data","decent","def","discrep","discrepancy.","distanc","don't","down","elimin","encount","equidist","find","global","go","gotcha","hashing)","hit","https://leetcode.com/problems/lowest","https://medium.com/@codingfreak/binari","iii/","inord","interview","iterative)","keep","lca","left","left/","level","levelwis","levelwise,","link","list","list:","lowestcommonancestor(self,","make","merg","node","node.","node/","not)","not),","on","order","p","p,","p1","p1,","p1.parent","p:","parent","parent),","pass","pointer","popleft","postord","practic","preorder","present","problem","push","q","q1","q1.parent","q1:","q:","question","queue.","record","recurs","remov","reset","return","right","root","same","see","similar","situations,","solut","solution,","solution.","solution:","sure","take","they'll","thing","through","travers","tree","tree,","trick","up","updat","value.","vertic","want"],"DataStructures/Trees/Inorder.html":["\"","\"\"\"","\"\")","#","'node')","'node':","(root.left","+","+=","0","=","==",">",">\")","[]","\\","_inorder(node):","_inorder(node.left)","_inorder(node.right)","_inorder(root)","_inorder.sum","add","anoth","attr","augment","base","because,","befor","binari","binarytreepaths(self,","bit","bool:","bst","case","class","convertbst(self,","criteria,","cumul","current","current.left","current.right","current.right:","current.v","current:","cyclic","def","discrep","don't","doubli","elem","element","element.","else:","even","exit","fals","false:=","find","first","first.","flag","follow","for,","give","greater","guarante","here.","https://leetcode.com/problems/binari","https://leetcode.com/problems/convert","https://leetcode.com/problems/leaf","https://leetcode.com/problems/sum","import","initialized,","inord","inorder(node):","inorder(node.left)","inorder(node.right)","inorder(root)","inorder.first","inorder.first.left","inorder.last","inorder.last.right","inorder.last:","int:","iter","iterative(root,","iterative(root1)","iterative(root2,","iterative.leav","iterative.leaves.append(current.val)","iterative.leaves.pop(0)","iterative.leaves[0]:","iterative.similar","iterative:","keep","last","last.right","leafsimilar(self,","leav","leaves/","left","len(iterative.leaves)","link","list","list/","list[str]:","look","loop","make","match","need","next","node","node'","node,","node.","node.left","node.right:","node.v","node:","none","now,","obvious.","parent.","particularli","path","path):","paths.","paths/","postord","recur","recurs","refer","rememb","remov","result","result.append(path","return","right","root","root.right):","root1:","root2:","root:","satisfi","search","search;","set","setup","similar","solution:","sort","stack","stack.append(current)","stack.pop()","static","step:","str(node.val)","str(node.val))","sum","sumofleftleaves(self,","sure","thing","think","total_sum","track","travers","traverse(node,","traverse(node.left,","traverse(node.right,","traverse(root,","tree","tree,","tree/","treenode)","treenode,","treenode:","trees/","treetodoublylist(self,","true","true:=","unnecessari","until","up","updat","us","valid","validation:","validation=false):","validation=true)","variabl","visit","want","won't","work"],"DataStructures/Trees/Preorder.html":["\"\"\"","#","(current","(d","(node.v","(not","(sum","*","+","+=","0","0)","0,","1","1)","1):","10","1:","=","==",">","[]","[])","[],","[node.val])","[node.val],","__init__(self,","addnums(node,","addnums(node.left,","addnums(node.right,","addnums(root,","addonerow(self,","adjust","always,","anything,","base","binari","check","class","concern","consecut","course)","cover","current","current):","current_sum","current_sum):","d","d:","decent","def","default","definit","depth","depth):","direct","direction,","doubl","down","elif","else:","exist","flatten(self,","float('","gener","global","go","helper(node):","helper(node.left)","helper(node_right)","helper(root)","helper.first","helper.last","helper.last.left","helper.last.right","helper.last:","https://leetcode.com/problems/add","https://leetcode.com/problems/binari","https://leetcode.com/problems/flatten","https://leetcode.com/problems/path","https://leetcode.com/problems/sum","ii/","iii/","inf'),","inord","instead.","int)","int,","int:","last","leaf","left","left,","left:","length","length)","length):","level","levelwis","link","list","list/","list[list[int]]:","longest","longestconsecutive(self,","longestzigzag(self,","max","max(preorder.longest,","max(self.max_length,","modifi","modified.","new","new.left","new.right","new_path_sum","new_path_sum.append(new_sum)","new_sum","node","node'","node.","node.left","node.left:","node.right","node.right:","node.v","node.val)","node.val):","node.val,","node:","node_right","none","none:","numbers/","on","order","pass","path","path,","path.append(node.val)","path_sum):","path_sum:","pathsum(self,","perfect","place","pointer","preorder","preorder(node,","preorder(node.left,","preorder(node.right,","preorder(root,","preorder.longest","presev","prev)","prev,","process","question","question,","reference.","replac","requir","result","result.append(path)","return","right","right,","right:","root","root.left","root.right,","root:","row","s","satisfi","self.left","self.max_length","self.result","self.right","self.tot","self.val","sequence/","set:","similar","singl","solution:","sometim","start","state","static","store","sum","sum:","sumnumbers(self,","think","travers","traversal/","traverse(node,","traverse(node.left,","traverse(node.right,","traverse(root,","tree","tree.","tree/","treenode(v)","treenode)","treenode,","treenode:","v:","valu","variabl","want","x","x):","zigzag"],"DataStructures/Trees/Postorder.html":["#","'list[treenode]')","'treenode')","'treenode',","'treenode':","(float('","(l","(left_max","(node.v","(right_min",")","+","+=","0","0,","0:","0}","0},","1","1)","1,","1.","199/problems/numb","1}","2","2.","2:",":","=","==",">",">=","[]","[])","[node.val]","[p.val,","_,","__init__(self,","`0`","adjust","afterwards.","ancestor","appl","apple_in_path","ask","attribut","back","base","befor","binari","bool:","bottom,","bst:","calculation.","call","check","child","children'","class","collect","common","complex","consolid","contest","countpairs(self,","current","current)","current,","d1","d1,","d2","d2,","data","deepest","def","default","default.","defaultdict","defaultdict(int)","defaultdict(list)","definit","deque,","distance:","doesn't","don't","e","e.g.","easier","edges:","even","exist","fals","find","findfrequenttreesum(self,","findleaves(self,","float('","float('inf'))","forget","found","frequent","gener","globals/","go","good","greater","ground","group","guarate","h","handl","hasapple:","hasapple[node]","hasapple[node]:","height","height,","height.","here","https://leetcode.com/contest/weekli","https://leetcode.com/problems/binari","https://leetcode.com/problems/find","https://leetcode.com/problems/lowest","https://leetcode.com/problems/minimum","https://leetcode.com/problems/most","https://leetcode.com/problems/valid","implement","import","includ","increas","indirectli","inf')","inf'),","initi","insert","int)","int,","int:","interest","isvalidbst(self,","it'","itself","iv/","key,","kinda","l","l,","l.items():","l:","l_h","l_h,","l_h:","l_lca","lc","lca","lcadeepestleaves(self,","leaf","leav","leaves.","leaves/","left","left,","left.","left=none,","left_max,","left_min","len(target)","line","list[bool])","list[int]:","list[list[int]],","list[list[int]]:","look","lower","lowestcommonancestor(self,","max","max(","max(l,","max(postorder.max_sum,","max(self.max_count,","max_count","maximum","maxpathsum(self,","merg","mintime(self,","n:","need","neg","node","node'","node.","node.left","node.left:","node.right","node.right:","node.v","node.val)","node.val,","node.val]","node.val])","node:","nodes.","nodes:","nodes])","none","note:","obvious","on","one.","optim","order","otherwis","p:","pairs/","parent","pass","path","posit","postord","postorder(node):","postorder(node.left)","postorder(node.right)","postorder(root)","postorder.","postorder.max_sum","problem:","process","properties,","properties;","prunetree(self,","pruning/","q.val])","q.val]))","q:","question!","question.","questions:","r","r)","r.items():","r:","r_h","r_h,","r_h:","r_lca","rc","realli","record","record/upd","recurse(node.left)","recurse(node.right)","recurse(node:","requir","rest","result","result.append(key)","return","right","right;","right=none):","right_max,","right_min","root","root.left","root.right:","root:","s,","same","search","second","self.lca","self.lca:","self.left","self.max_count","self.right","self.tot","self.val","self.valid","self.walk","send","set()","set([i.v","similar","slightli","solut","solution:","sometim","sort","static","step","store","store.get(h,","store.values()","store;","store[h]","subtre","subtree.","sum","sum/","sums.items():","sums[l","target","target)","then,","time","together.","travers","traverse(0)","traverse(node):","traverse(node.left)","traverse(node.right)","traverse(root)","traverse(v)","treat","tree","tree.","tree/","tree;","tree[e].append(s)","tree[node]:","tree[s].append(e)","treenode)","treenode,","treenode:","tricki","trigger","true","up","up,","updat","us","v","val","val,","val=0,","valu","value.","value:","variabl","versa.","vice","visit","visited.add(node)","visited:","want","we'd","won't","work","x","x):","{0","{0:","{1:","{}"],"DataStructures/Trees/LevelWise.html":["!=","#","(think","(x_found","(y_found","+","+=","0","1","1)","1))","1):","1,","=","==",">","[]","[])","[node.val]","[x[x]","_","__init__(self,","anoth","append","atleast","befor","binari","bool:","brilliant","care","class","collect","complic","creat","current","current,","current.left:","current.right:","current.v","current.val))","current_row","current_row.get(x,","current_row:","current_row[x]","deepestleavessum(self,","def","definit","dequ","deque()","each","extend","fals","float('","float('inf'),","gener","guarante","horizontally.","https://leetcode.com/problems/binari","https://leetcode.com/problems/cousin","https://leetcode.com/problems/deepest","https://leetcode.com/problems/vert","idea","import","inf')","int)","int,","int:","iscousins(self,","it)","leav","left","left=none,","len(queue)","level","level.","level_sum","levelwis","list[list[int]]:","max(x_max,","max_x+1)].","max_x.","min(x_min,","min_x","more","need","node","node.","node.left))","node.left:","node.right))","node.right:","on","order","origin","parent","posit","queue","queue.append((0,","queue.append((current.left,","queue.append((current.right,","queue.append((root,","queue.append((x","queue.append((x+1,","queue.append(current.left)","queue.append(current.right)","queue.append(root)","queue.popleft()","queue:","rang","range(min_x,","range(size):","range(x_min,","return","right","right.","right=none):","root","root))","root:","same","self.left","self.right","self.val","similar","size","size:","slightli","solution:","sort","sorted(current_row[x])","sorted(x)]","sorting,","store","sum/","travers","traversal/","tree","tree/","treenode)","treenode,","treenode:","true","us","val","val=0,","valu","value.","vertic","verticalorder(self,","verticaltraversal(self,","wise","work","x","x)","x,","x.get(x,","x:","x[x]","x_found","x_max","x_max+1)]","x_min","x_min,","y:","y_found","y_found)","y_found):","{}"],"Datastructures/Trees/TreeToGraph.html":["!=","#","(add","0:","1","1)","1:","=","==",">","[]","[node.parent,","[target.val]","__init__(self,","addit","alter","approaches:","arbitari","attribut","binari","class","collect","construct","convert","data:","def","defaultdict(list)","defaultdict,","definit","dequ","deque()","distanc","distancek(self,","effici","especially,","filter","graph","graph.","graph:","graph[node.val].append(parent)","graph[parent].append(node.val)","graph[v]:","handling.","https://leetcode.com/problems/al","import","input","int)","iteration.","k","k:","keep","len(queue)","level","list[int]:","loop","make","mark","memori","mind","need","nei","neightbor","new","node","node.","node.left,","node.right]","node.val)","node:","none","note","o(n)","object","out","parent)","parent):","perform","proper","queue","queue.append(nei)","queue.append(target.val)","queue.popleft()","queue:","range(size):","requir","result","result.append(nei)","return","root:","self.left","self.right","self.val","set()","size","solution:","sometimes,","space","start","step;","store","sure","target","target:","there'","thing","travers","traverse(node,","traverse(node.left,","traverse(node.right,","traverse(root,","tree","tree/","treenod","treenode,","treenode:","two","v","valu","visit","visited.add(v)","want","whole","wise","x","x):"],"DataStructures/Trees/TwoTrees.html":["#","+=","=",">","[]","[],","__init__(self,","algorithm","binari","c","c.left)","c.right)","c:","care","class","clean","clone","clone;","cloned)","cloned:","compar","correspond","def","definit","directli","element","equality:","explaination:","followup","generators:","getallelements(self,","gettargetcopy(self,","heapq","https://leetcode.com/problems/al","https://leetcode.com/problems/find","https://leetcode.com/problems/merg","import","inorder(node,","inorder(node.left,","inorder(node.right,","inorder(o.left,","inorder(o.right,","inorder(o:","inorder(original,","inorder(root1,","inorder(root2,","interest","it(node):","it(node.left)","it(node.right)","iter","iterator(generator)","keep","l)","l):","l.append(node.val)","l1)","l1,","l2","l2)","list[int]:","merg","merge(l1,","mergetrees(self,","node","node.","node1","node1.left","node1.right","node1.v","node1:","node2","node2):","node2.left)","node2.right)","node2.v","node2:","node:","none","now","o","o:","on","origin","original:","over","preorder(node1,","preorder(node1.left,","preorder(node1.right,","preorder(t1,","python","refer","result","return","root1:","root2:","search","self.left","self.result","self.right","self.val","simple:","solution:","solv","t1:","t2)","t2:","take","target:","thing","too/475462","tree","tree/","tree/discuss/537686/python","treenode)","treenode):","treenode,","treenode:","trees/","two","us","way","x","x):","yield"],"DataStructures/Trees/ConstructTree.html":["!=","\"\"\"","\"\"\"decod","\"\"\"encod","#","'#'","'#,'","''","','","',')","(end","(str(node.val)","+","+=","//","0","1","1)","1):","1,","1]","2",":rtype:",":type","=","==",">",">=","[]","[treenode(int(val))","_","__init__(self,","alway","array","array.","balanc","balancebst(self,","befor","binari","break","bstfrompreorder(self,","buildtree(self,","child","child,","class","codec:","collect","construct","construct(0,","construct(i_s,","construct(l,","construct(max_index","construct(pivot","construct.postorder_index","construct_tree()","construct_tree(0,","construct_tree(middl","construct_tree(root_idx+1,","construct_tree(start,","construct_tree(start=0,","construct_tree.index","constructmaximumbinarytree(self,","constructtree(start,","continu","current","current.left","current.right","data","data):","data.split(',')]","data:","def","definit","dequ","deque()","deseri","deserialize(self,","divid","e","element","else:","encod","end","end)","end):","end,","end:","end=len(inorder)","enumerate(inorder):","enumerate(inorder)}","fg","find_first_greater(start","find_first_greater(start,","function.","greater","https://leetcode.com/problems/bal","https://leetcode.com/problems/construct","https://leetcode.com/problems/maximum","https://leetcode.com/problems/seri","i,","i_","i_e)","i_e):","i_e:","import","index","inord","inorder:","input","keep","l","last","leetcod","left","left=none,","len(inorder)","len(node_vals)","len(nums))","len(postorder)","len(preorder)","len(queue)","list[int])","list[int],","make","map","max_index","max_index)","mid","mid+1","middl","node","node.","node.left","node.right","node.v","node:","node_po","node_pos[root.val]","node_v","node_vals.append(node.val)","none","notic","nums:","nums[i]","nums[max_index]","nums[max_index]:","one!!","parent","parts.","pivot","postord","postorder:","preorder","preorder:","preorder[fg]","preorder[start])","present","question","questions:","queue","queue.append(node.left)","queue.append(node.right)","queue.append(root)","queue.popleft()","queue:","r)","r):","r:","range(l,","range(size):","result","result[:len(result)","return","right","right=none):","root","root):","root.left","root.right","root.val:","root:","root_idx","search","self.left","self.right","self.val","serialize(self,","singl","size","solution:","start","start)","static","str","string.","style","subtre","sure","target):","target:","traversal/","traverse(node):","traverse(node.left)","traverse(node.right)","traverse(root)","tree","tree.","tree/","treenod","treenode()","treenode(node_vals[middle])","treenode(object):","treenode(postorder[construct.postorder_index])","treenode(preorder[construct_tree.index])","treenode(preorder[start])","treenode)","treenode:","unus","us","v","val","val=0,","variabl","we'r","x","x):","{v:"],"DataStructures/Graphs/":["#","#3","(easier","+","0:","1","2","=","==",">","[]","[])","[]):","[pid[i]]","_","append","automat","beginn","call","children","children)","children:","class","collect","construct","cours","crucial","d","decent","def","dequ","deque()","dict.get(node,","discussion/655708/graph","enumerate(ppid):","everyon","false))","found,","good","graph","graph.get(p,","graph.get(parent,","graph[parent]","https://leetcode.com/discuss/gener","https://leetcode.com/problems/array","https://leetcode.com/problems/kil","i,","import","inherit","int)","iv","kill:","killprocess(self,","len(queue)","list[int],","list[int]:","multipl","nesting/","node","node:","note:","p","p,","parent","pid","pid:","pid[i]","point","ppid:","practic","problem","problemset:","process/","question:","queue","queue.append((d,","queue.append((pid[i],","queue.popleft()","queue:","range(size):","return","sampl","schedul","set","size","solut","solution:","step","step.","subtre","tag","tag))","tagging/mark","target","to_be_kil","to_be_killed.append(p)","tree","true","true,","true:","us","vs","{}"],"DataStructures/Graphs/Coloring.html":["!=","\"meaningful\"","(c","(node,","(use","(valid","+","0))","1","1))","1):","1:","1]","1])","1]:","2","2,","2])","3,","4])","=","==",">","[","[0","a):","a,","adjacent/","allow","altern","b","basically,","bfs(i):","bfs(s):","bfs)","bifurc","bipartite/","bipartition/","blue","blue,","blue])","blue_edges:","bool:","c","chang","class","code","collect","color","color)","color))","color,","color:","color_left","color_left))","colors.pop()","colors.remove(color)","colors/","continu","cycl","d","def","defaultdict","defaultdict(list)","defaultdict,","dequ","deque()","dfs(d,","dfs(i,","dfs(index,","differ","disconnect","don't","edg","end","exists,","exists:","expect","expected):","expected,","extrem","fals","fill","find","first","flower","flowers.pop()","flowers.remove(planted[n","flowers:","gardennoadj(self,","graph","graph:","graph[end].append(start)","graph[i]","graph[index]:","graph[node]:","graph[s].append([d,","graph[start].append(end)","https://leetcode.com/problems/flow","https://leetcode.com/problems/i","https://leetcode.com/problems/poss","https://leetcode.com/problems/shortest","import","index","int,","isbipartite(self,","keep","key","len(graph)):","len(graph))]","length","list[int]:","list[list[int]])","list[list[int]],","loop","make","mind","miss","n","n)]","n:","neigh","neigh:","node","node,","on","one:","over","pair","path","paths:","plant","planted[i","planted[n","problem","proper","queue","queue.append((0,","queue.append((i,","queue.append((v,","queue.popleft()","queue:","range(0,","range(1,","range(len(graph)):","red","red,","red])","red_edges:","represent","result","result[node]","return","run","s","s))","s):","s,","sections.","see","seen","seen.add((node,","seen:","set","set()","set([1,","set([red,","shortestalternatingpaths(self,","similar","solut","solution:","solv","start,","store","sure","these,","tips:","travers","true","true,","up","v","v,","valid","vertic","visit","visited:","visited[index]","visited[node]","visited[node]:","visited[s]:","want","{}"],"DataStructures/Graphs/GraphBFS.html":["(0,","(d","(djikstra","(k","(time","+","0","0))","1","1))","1):","=","==",">",">=","[]","[float('inf')","amaz","arsenal.","bf","bool:","c","c,","canvisitallrooms(self,","class","collect","continu","cost","d","d,","def","defaultdict","defaultdict(list)","delay","dequ","deque()","deque,","dst:","even","extrem","fals","findcheapestprice(self,","flight","flights:","function","graph","graph[c]:","graph[node]:","graph[u].append((v,","grid","heap","heap.append((0,","heap:","heapq","heapq.heappop(heap)","heapq.heappush(heap,","here.","https://leetcode.com/problems/cheapest","https://leetcode.com/problems/key","https://leetcode.com/problems/network","import","int)","int,","int:","k","k))","k:","len(rooms)","len(visited)","list[list[int]])","list[list[int]],","max(max_time,","max_tim","method:","myriad","n","n)]","n,","n:","n_d","n_d,","networkdelaytime(self,","node","optim","play","power","prioriti","problems.","question","queue","queue)","queue.append(0)","queue.append(v)","queue.popleft()","queue:","quickest","range(0,","reach","return","room","rooms/","rooms:","rooms[room]:","set()","similar","solution:","src,","src:","stops/","substitut","there'","time","time)","time,","time/","times:","tool","true","two","u,","us","v","v))","v,","variabl","visit","visited.add(room)","visited:","visited[c]","visited[node]","w","w))","w,","way","well.","within","x;","{}"],"DataStructures/Graphs/GraphDFS.html":["#","(len(tickets)","(postorder).","*","+","+=","0","1","1):","1}","=","==",">","['jfk'])","[1]","[]","[])","[]):","[c]","[e]","[n])","[s]","add","again","alreadi","approach","array","augment","befor","bidirectional.","boil","bool:","c","c,","cach","cache:","cache[course]","calcul","canfinish(self,","check","children","class","collect","come","compar","compon","connect","consolid","countcomponents(self,","countsubtrees(self,","cours","course_depth","course_depth)","courses/","current","cycl","cycle,","d","d)]","data","deepest","def","defaultdict","defaultdict(int)","defaultdict(list)","depth","df","dfs(c))","dfs(course)","dfs(course):","dfs(i)","dfs(i):","dfs(index):","dfs(j):","dfs(n)","dfs.","dfs.visit","dfs.visited.add(index)","dfs.visited.remove(index)","dfs.visited:","didn't","down","e","edg","edges:","edges[(current,","edges[(s,","effici","eg.","exit","f","fals","fetch","find","finditinerary(self,","first","follow","g_visit","g_visited.add(i)","g_visited:","global","globally,","gotcha","gotcha:","graph","graph.get(e,","graph.get(index,","graph.get(s,","graph/","graph:","graph[c].append(p)","graph[current]:","graph[d].append(s)","graph[e]","graph[i]:","graph[node]:","graph[s]","graph[s].append(d)","great","https://leetcode.com/problems/cours","https://leetcode.com/problems/numb","https://leetcode.com/problems/parallel","https://leetcode.com/problems/reconstruct","import","includ","incom","index","info","info[l]","info[labels[node]]","init","instead","int,","int:","it'","itinerary/","j","l,","label/","labels:","leav","len(path)","lexograph","list[int]:","list[list[int]])","list[list[int]],","list[list[str]])","list[str]:","local","longest","look","loop","make","max","max(max_depth,","max(max_next,","max_depth","max_next","method","minimumsemesters(self,","minu","n","n)]","n)]:","n:","need","node","nodes.","normal","not!","note:","numcourses):","numcourses:","on","p","p,","path","path):","path.","path[:]","posibl","possibl","prereq","prereq.get(course,","prereq.get(p,","prereq[p]","prerequisites:","process","question","question:","range(0,","range(1,","range(n):","realiz","relations:","repeat","requir","result","result[node]","return","revisit","s","s,","same","save","schedul","schedule/","self.itinerari","self.itinerary:","self.valid","self.valid:","sem","set","set()","similar","simplifi","solution:","sort","sorted(graph[s])","static","store","str)","sub","sure","there'","thing","thought","tickets:","time","track","traverse('jfk',","traverse(0)","traverse(current,","traverse(n,","traverse(node):","traverse(v).items():","tree","tri","true","type","understand","undirect","unvisit","up:","v","variable.","visit","visited.add(course)","visited.add(i)","visited.add(index)","visited.add(node)","visited.remove(course)","visited.remove(i)","visited:","{labels[node]:","{}"],"DataStructures/Graphs/TopologySort.html":["1]","=","==",">","[]","[c","c","c,","checkifprerequisite(self,","class","collect","def","defaultdict","defaultdict(list)","defaultdict(set)","defaultdict,","dequ","deque()","deque,","findorder(self,","graph","graph[c].add(p)","graph[c].append(p)","graph[c]:","graph[node]:","https://leetcode.com/problems/cours","ii/","import","incom","incoming[n].remove(c)","incoming[n]:","incoming[nei].remove(node)","incoming[nei]:","incoming[p].add(c)","int,","iv/","len(topo)","list[bool]:","list[int]:","list[list[int]])","list[list[int]],","n","n))","n:","nei","node","numcours","numcourses))","numcourses:","p","p,","pre","pre[n]","pre[n].union(pre[c].union(set([c])))","pre[p]","prerequisites:","queries:","queries]","queue","queue.append(n)","queue.append(nei)","queue.append(node)","queue.append(s)","queue.popleft()","queue:","return","s","schedul","set(range(0,","solution:","sort","start","starts.remove(p)","starts:","topo","topo.append(node)","topo[::","topolog","u_set","u_set.remove(p)","u_set:"],"DataStructures/Heap.html":["#","(","((","(0","(0,","(_d","(h","(heap","(k+1):","(l.val,","(need","(pay","(price","(processing,","(sort","(the","(x","(x*x","(x,","(x[1],","(y","*","+","+=","0","0)]","0,","0:","1","1)","1):","1)]:","1,","1,y),(x,y+1),(x,i","1:","1])","=","==",">",">=","[","[(0,","[(e,","[(x+1,y),(x","[]","[])","[]):","[],","_,","_d","_x,","_y","`visited`","abs(node.v","aim","alloc","altern","alway","amaz","array","arrival,","assign","attent","b/w","base","binari","break","brick","bricks:","bricks_left","build","call)","care","case","check","citi","class","closest","closestkvalues(self,","come","compact","compar","constaint","continu","cost","cost,","cours","courses:","cpu/","current_dist","d","d))","d)]","d,","def","diff","displac","distanc","djikstra","djikstra.","don't","dst:","durat","duration)","duration,","duration:","e,","effort/","element","elements/","elems:","elif","else:","empti","end","enumerate(heights[1:],","enumerate(lists):","enumerate(mat):","enumerate(tasks)])","excel","exist","find","findcheapestprice(self,","flight","flights:","float,","furthestbuilding(self,","getorder(self,","gotcha","great","greater","h","head","head.next","heap","heap,","heap.","heap:","heap[0][0]","heap[0][0]:","heap[0][distance])","heappush","heapq","heapq.heappop(heap)","heapq.heappush(heap,","height","heights:","heights[i","here","here)","heurist","hop","hops,","https://leetcode.com/problems/cheapest","https://leetcode.com/problems/closest","https://leetcode.com/problems/cours","https://leetcode.com/problems/find","https://leetcode.com/problems/furthest","https://leetcode.com/problems/k","https://leetcode.com/problems/merg","https://leetcode.com/problems/path","https://leetcode.com/problems/singl","https://leetcode.com/problems/th","i,","i]","ii/","iii/","import","incom","index","index))","index,","index]","indic","inject","inorder(node):","inorder(node.left)","int)","int,","int:","iter","iterator,","k","k,","k:","kclosest(self,","key","key=lambda","kweakestrows(self,","l","l))","l.next","l.next:","l:","ladders,","ladders:","last_day","len(heap)","len(heights),","len(heights[0])","len(lists)","len(result)","length","list[int],","list[int]:","list[list[int]])","list[list[int]],","list[list[int]]:","list[listnode])","listnode(min_val)","listnode:","lists/","lists:","loop","maintain","make","mat:","matrix/","max","max_heap","max_heap,","mergeklists(self,","metric","min","min/max","min_heap","min_val,","minimum","minimumeffortpath(self,","n:","need","new","next","node:","none","none:","not,","note","number","obviously!","on","origin","origin/","otherwis","overflowing.","overflows,","p","path","pictur","point","points:","pop","pop.","possible;","prepar","price","price,","process","processing,","push","pushed.","qualifi","question!","question.","questions:","reach/","requir","respect","result","result.append(index)","return","root:","row","row:","runner),","s,","s_cours","s_courses:","schedul","schedulecourse(self,","search","select","set()","set.","sign","size","smaller","soldier","soldiers,","solution:","sort","sorted([[task[0],","sorted(courses,","src))","src:","start","start=1):","stops/","store","store.get(city,","store.get(s,","store[s]","substract","t","t,","target):","target:","task","task[1],","task_idx","tasks.","tasks:","tasks_sort","tasks_sorted[0][0]","tasks_sorted[task_idx]","tasks_sorted[task_idx][0]:","that).","thread","times)","top","total","travers","tree","treenode,","trivial","updat","us","valu","visit","visited.add((x,","visited:","want","we'll","we'r","weakest","well,","within","x","x,","x:","x[0]))","y","y)","y))","y*y)","{}"],"DataStructures/Grid.html":["\"\"\"","\"0\"","\"ownership\"","#","'*':","(","(0","(0,","(_x,","(float('inf'),","(ie","(len(word)","(steps,","(x","(x+1,y),","(x,","(x,i","(x,y+1),","(x,y+1)]","(y",")","+","+=","0","0)","0))","0)?","0,","0:","1","1)","1))","1),","1):","1)]","1,","1,y),","1.","1:","1x1","2","2):","2:","2;","3","=","==",">",">=","[(x","[(x+1,","[(x+1,y),","[[x,","\\","_","_b))","_b):","_dir","_dir:","_sum","_sum)","_x","_x,","_y","_y)","_y))","_y,","a:","a[x][y]","abov","algorithm:","alreadi","always,","answer.","anything,","append","area","arr[x+1][y+1]","arr[x+2][y+1]","arr[x+2][y+2]","arr[x+2][y]","arr[x][y+1]","arr[x][y+2]","arr[x][y]","array/problem?h_l=interview&playlist_slugs%5b%5d=interview","atlant","atlantic]","atlantic_queu","atlantic_queue.append((x","atlantic_queue.append((x,","avoid","befor","bf","bfs:","binari","board:","bool:","both","bottom","boundari","break","bridge/","bucket","build_bridge():","c","c_","c_e","cach","cache.get((x,","cache:","cache[(x,","calm","care","certain","check","checkout","children","class","code","col","col_end","col_end.","col_start","col_start,","col_start:","collect","column","completely.","condit","construction:","continu","contract","convert","corner","count","criteria","critical,","current","def","default","depend","dequ","deque()","df","dfs:","direct","directions:","directli","doesn't","done.","down","downward","dp","e.g.","each","eg.","element","elimination/","end","end,","exist(self,","faster","find","first","float('","flow/","follow","following:","food/","form","function:","g_queue","g_queue.popleft()","g_queue:","gener","getfood(self,","go","gold/","grid","grid:","grid[0][0]","grid[_a][_b]","grid[x][y]","heights:","heights[x][y]:","here","hourglasssum(arr):","https://leetcode.com/problems/longest","https://leetcode.com/problems/max","https://leetcode.com/problems/numb","https://leetcode.com/problems/pacif","https://leetcode.com/problems/path","https://leetcode.com/problems/shortest","https://leetcode.com/problems/spir","https://leetcode.com/problems/word","https://www.hackerrank.com/challenges/2d","i]","i],","i][c_s]","i][c_s],","imaginari","implementation:","impli","import","includ","increas","index","index):","indic","inf')","ing","init","inner","input","inspir","instead.","int)","int:","integ","inwards.","island","island/","islands/","k","k:","k_left","k_left)","k_left))","k_left:","keep","kit&playlist_slugs%5b%5d=array","layer","layer.","left","leftward","len(a)","len(a[0])","len(arr),","len(arr[0])","len(board),","len(board[0])","len(grid),","len(grid[0])","len(heights)","len(heights[0])","len(matrix)","len(queue)","list[int]:","list[list[int]])","list[list[int]],","list[list[int]]:","list[list[str]])","list[list[str]],","logic","longest","loop","loops:","maintain","make","matric","matrix","matrix/","matrix:","matrix[r_","matrix[r_e][c_","matrix[r_s+i][c_e],","matrix[r_s][c_s+i],","matter","max(max_sum,","max_sum","maximum","messi","misc","modif","modifi","modification?","move","n","need","neg","next","nice","node","none:","numislands(self,","obstacl","obvious,","of:","on","one.","onto","open","optim","orang","over","overlap","pacif","pacific_queu","pacific_queue.append((0,","pacific_queue.append((x,","pacificatlantic(self,","paint","paint_island(x,","path","perform","place","popleft","posit","prepar","prev_k","prev_step","prev_steps,","previou","problem","problems,","proceed.","push","question","question,","queue","queue.append((0,","queue.append((_a,","queue.append((_x,","queue.append((x,","queue.popleft()","queue:","r","r_","r_e","r_e,","r_s,","range(col_end","range(i","range(n","range(row_end,","range(size):","range(x","range(x):","range(y):","readi","reduc","reflect","repetiton","rest","result","result.append(matrix[r][col_start])","result.append(matrix[row_end][c])","return","reverse;","right","right:","rightward","rotat","rotate(self,","rotten","row","row_end","row_end,","row_start","row_start,","row_start:","run","run,","satisfi","search","search(x,","search.visited.add((x,","self.result","send","sequenc","set","set()","shortestbridge(self,","shortestpath(self,","side","singl","size","solut","solution:","sometim","spiralorder(self,","squar","start","start,","step","step?","steps,","stop","str)","structure.","substructur","such","sure","taken","target","temp))","thing","think","thoroughly.","through","tip:","top","track","travers","traverse(_a,","traverse(atlantic_queue)","traverse(pacific_queue)","traverse(queue):","traverse(x,","trivial","true","until","updat","upward","us","valu","visit","visited.add((x,","visited:","water","what'","whole","word:","write","x","x,","x_dir,","y","y)","y))","y),","y):","y)]","y+1),","y,","y]","y_dir","{}","|"],"Miscellaneous/Palindrome.html":["\"\"","(even","(odd","0","0,","1","2","=",">",">=","adjust","be","bool:","center","center.","charact","check","class","def","direct","end","end):","expand","find_len(l,","function","https://leetcode.com/problems/longest","https://leetcode.com/problems/valid","ii/","index,","ispalindrome(start,","key","l","left","left,","len(s)","length)","long","longestpalindrome(self,","match.","max","mismatch,","now,","on","one,","palindrom","possible:","r","r):","result","right","s:","same,","slice","solut","solution:","sort","start","start,","str)","str:","string","substring/","support","until","us","util","validpalindrome(self,","write"],"Miscellaneous/Stocks.html":["+","0","0,","1","1]","2","=","==","approach","better","between","buy","calcul","can't","cash","cash,","cash.","class","comment","continu","current","day","day,","def","differ","dp","dynam","element","elements/","end","end,","far,","far.","fee","fee)","fee):","fee/","first","found","hold","hold,","https://leetcode.com/problems/best","https://www.geeksforgeeks.org/maximum","https://www.geeksforgeeks.org/stock","i+1","iv/discuss/54117/clean","java","k","keep","len(prices)):","limit,","list.","list[i","list[i]","local","maintain","max(cash,","max(hold,","maxima","maximum","maxprofit(self,","minima","minimum","necessary.","number","on","own","prices,","prices[0]","prices[i]","prices[i])","profit","program","range(1,","return","same","sell","sell/","share","similar","solut","solution(object):","stock","stock,","stock.","temporari","th","till","time","track","transact","transform","transit","twice/","two","updat","us","variabl","want","without"],"Miscellaneous/Intervals.html":["\"","#","'","(abs(x),","(last","(secretli","(start","(x[0],","*","+","+=","0","0,","0:","1","1)**i)","1,","1:current","1]","1][1]","1][1]):","1][1],","252","253","435","56","=","==",">",">\"",">=","[((","[]","[i,","[max_start,","[prev","[s,","[str(lower)","[str(lower)]","```","```pi","a,","absolut","accept","actually.","addtoresult(start,","anoth","anyon","array","arrow","automat","b):","balloons/","base","burst","can't","care","case","chang","check","class","close","comes,","compact","compar","continu","convert","cours","cover","creat","current","current[0]","decrease.","def","durat","duration:","duration]","e","e:","e]","edg","elem,","elif","else:","empti","end","end)","end):","end:","end])","enough","enumerate(nums):","enumerate(s):","eraseoverlapintervals(self,","event","events,","fals","find","findminarrowshots(self,","findmissingranges(self,","first","flat","float('","float('inf')","given","heap","https://leetcode.com/problems/cours","https://leetcode.com/problems/insert","https://leetcode.com/problems/interv","https://leetcode.com/problems/meet","https://leetcode.com/problems/merg","https://leetcode.com/problems/minimum","https://leetcode.com/problems/miss","https://leetcode.com/problems/non","https://leetcode.com/problems/partit","https://leetcode.com/problems/remov","i,","i]","ii","ii/","iii/","imp:","inf')","inf'),","input","insert(self,","int)","int,","int:","interest","intersect","intersections/","interv","interval/","interval[i]","intervalintersection(self,","intervals.","intervals.values()","intervals/","intervals:","intervals[0]","intervals[1:]:","intervals[s]","intervals[s][end]","iter","j","j,","key","key=lambda","labels/","lambda","last_interval,","leaves,","leetcod","len(intervals)","like:","list","list);","list,","list[int])","list[int],","list[int]:","list[list[int]])","list[list[int]],","list[list[int]]:","list[str]:","longer","lower","lower:","make","max(max_rooms,","max(result[","max_heap","max_room","max_start","max_start,","meet","merg","merge(self,","min(min_end,","min_end","min_end:","minavailableduration(self,","minmeetingrooms(self,","miss","n","n_e","n_s,","need","neg","negative.","newinterv","newinterval:","nice.","non","number","nums:","nums[","nums[0]","nums[i","on","onc","over","overlap","overlap,","partitionlabels(self,","points:","possibl","preference.","prev","previou","priorit","problem","problem:","problem;","push","question","question.","questions,","range(2)]","range.","ranges/","remov","removecoveredintervals(self,","requir","result","result.append([start,","result.append(str(start))","result;","result[","result[last_interval][end]","return","room","rooms)","rooms,","s","s,","s:","schedul","scheduler/","select","set","sign.","similar","simpl","slots1","slots1:","slots1[i][1]:","slots2","slots2:","solut","solution:","someth","sort","sorted(intervals,","sorted(points,","sorted(slots1)","sorted(slots2)","start","start,","str(end))","str(upper)]","str)","stretch","templat","them)","tiebreak","time","time.","times,","trivial","upper","upper:","val","variat","veri","way","width","x))","x:","x[0])","x[1]))","{}"],"Miscellaneous/Parenthesis.html":["!=","\"\"","#","''","'',","''.join(s_list)","'('","'(',","'(':","')'","')',","')':","')']:","'*'","'*':","'*']:","(2","(_close","(_open","(string,",")","),","*","+","+=","0","0,","0:","1","1)","1,","1:","1]","1])","2","2)","=","==",">","[","['(',","[')',","[.(c1","[..(]","[..1]","[.2*(c1+c2+c3)]","[]","[c","\\","_close)","_close+1)","_close:","_close=0):","_open","_open):","_open+1,","_open,","_open=0,","add","adding,","afterwards,","alway","are:","backtrack","backtrack()","backtrack(curr","backtrack(i","backtrack(index+1,","backtrack(index=0,","backtrack:","balanc","balanced.","base","basic","befor","boundari","bracket","braket","c","c2","c3]","call","care","cases:","charact","class","close","closed_bracket","combin","come","construct(0,","construct(index","construct(index,","continu","correspond","count","current","current=\"\",","def","differ","don't","down","elif","else:","empti","encount","enumerate(s):","exclud","failur","fals","find","first","found","gener","generateparenthesis(self,","given","here","https://leetcode.com/problems/gener","https://leetcode.com/problems/longest","https://leetcode.com/problems/minimum","https://leetcode.com/problems/remov","https://leetcode.com/problems/scor","https://leetcode.com/problems/valid","i,","i]","idea.","identifi","immediately.","includ","index","instant","int)","int:","interchang","intuit","invalid","irrespect","it'","it,","it.","keep","len(s):","length","limit","limit:","list","list[str]:","longestvalidparentheses(self,","made","make","match","matter","max(max_len,","max_len","memo[(i,","minaddtomakevalid(self,","minimum","minremovetomakevalid(self,","n","n)","n:","need","net","net,","never","normal","number","on","one,","one.","one;","ones)","ones.","open","open_bracket","open_brackets.append(i)","open_brackets:","optim","outermost","parenthes","parentheses/","parenthesi","pop","possibl","problems:","prune","push","question","remov","removal)","removals)","removals))","removals):","removeinvalidparentheses(self,","removeouterparentheses(self,","replac","requir","result","result.add(string)","result.append(current)","return","s","s:","s[i]","s[index]","s[index],","s[start","s]","s_list","s_list[i]","s_list[open_brackets.pop()]","scoreofparentheses(self,","set","set()","simpl","so,","solut","solution:","stack","stack)","stack)]","stack,","stack.append('(')","stack.append(1)","stack.append(c)","stack.append(curr","stack.append(i)","stack.pop()","stack:","stack[","start","state","state:","str)","str:","string","string,","string.","string/","substitut","success","sum","sum(stack)","that'","that.","top","tree","tri","two","unbalanc","until","val","valid","valid/","veri","visit","visited.add((string,","visited:","we'd","with;","without","zero."],"Miscellaneous/AlienDictionary.html":["0","1]):","=",">","alien","bool:","c","case","class","def","dictionari","dictionary/","elif","end,","enumerate(order)}","enumerate(words[:len(words)","fals","https://leetcode.com/problems/verifi","i,","isaliensorted(self,","j","len(words[i+1]):","list[str],","look","order","order:","out","return","seq","seq[word[j]]","seq[words[i+1][j]]:","solution:","str)","true","word","words:","{c:"],"Miscellaneous/InterestingMiscellaneous.html":["!=","\"\"\"","\"non","#","%","')","(","(care","(dist_t","(i","(make","(max_freq","(max_freq_count","(max_height","(n","(target)","(x","*","+","+=",",","//","//=","0","0)","0):","0,","0:","1","1)","1))","1):","1,","10**9","1383:","1390:","14th/3357/","180/problems/maximum","1:","1]","1])","1]:","2","2)","2,","2021/582/week","22nd","28th/3612/","2:","3","31:","4","621:","7","857:","8th","=","==",">",">=","[0,","[[0]","[]","abs(len(s)","abs(squirrel[0]","abs(squirrel[1]","abs(tree[0]","abs(tree[1]","absolut","absolve.","achiev","action.","actual","algo","algorithm","all,","also,","alway","anything,","area","array","array/","b/w","backward","base","begin","best","better","blue","blue.","bool:","boundari","brokencalc(self,","c","c,","cache/","cache:","cake","calcul","calculator/","calculator/discuss/236565/detail","can.","canjump(self,","case","cases,","cases:","challeng","challenge/540/week","chanc","chang","change.","character.","check","checkpossibility(self,","class","closest","color","combo","come","compact","compact,","compact.","complet","condit","consid","contest","correct","cost","count","cours","creat","critic","cut","cuts/","cycl","cycle,","data","decreas","decreasing\")","def","descript","dict","dict()","diff","differ","dist_","dist_diff","dist_s)","dist_s[m_idx]","dist_t","dist_t[m_idx]","distanc","divis","divisor","divisors.add(i)","divisors.add(num","divisors/","divisors:","domino","dominoes:","dominoes[::","duplic","each","easier.","edg","efficiency.","elem","element","element,","elif","else:","encount","end","end+1):","end:","enumerate(h_sorted[1:],","enumerate(nums):","enumerate(nums[1:],","enumerate(nuts):","enumerate(tasks):","enumerate(v_sorted[1:],","equal","equil","equival","exit\")","f","f),","f,","f==s,","fals","farthest","find","findduplicates(self,","first","first.","float('","float,","float:","floor(sqrt(num))","follows:","freq","freq.get(t,","freq.items():","freq:","freq[t]","freq[task]","freq[task]:","frequenc","frequency.","game","game/","gener","go","good","great","greater","greedi","h","h:","h_sort","h_sorted[","h_sorted[0],","h_sorted[i","half","handl","happen.","heap","heap)","heap:","heapq","heapq.heappop(heap)","heapq.heappush(heap,","height","height:","here","hire","horizont","horizontalcuts:","https://leetcode.com/contest/weekli","https://leetcode.com/explore/challenge/card/januari","https://leetcode.com/explore/challenge/card/jun","https://leetcode.com/problems/broken","https://leetcode.com/problems/find","https://leetcode.com/problems/four","https://leetcode.com/problems/jump","https://leetcode.com/problems/kth","https://leetcode.com/problems/lru","https://leetcode.com/problems/maximum","https://leetcode.com/problems/minimum","https://leetcode.com/problems/mov","https://leetcode.com/problems/next","https://leetcode.com/problems/non","https://leetcode.com/problems/numb","https://leetcode.com/problems/powx","https://leetcode.com/problems/squirrel","https://leetcode.com/problems/task","i)","i,","idea","idl","ii,","ii/","imp:","import","increas","inf'),","instead","instead.","int)","int,","int:","interest","isoneeditdistance(self,","it'","it.","iter","j","januari","jump","jump(self,","june","k","k,","l","largest","last","leastinterval(self,","leetcod","left,","len(nums)","len(nuts)]","len(t))","len(tasks)","length","life","list","list[int])","list[int],","list[int]:","list[list[int]])","list[str],","look","loop","lot","lru","m","m,","m_idx","maintain","make","max","max(max_end,","max(max_height,","max(max_width,","max(t[x]","max_end","max_freq","max_freq,","max_freq_count","max_height","max_width","max_width)","maxarea(self,","min","mindistance(self,","minim","miscellan","miss","mod","modifi","movezeroes(self,","mypow(self,","n","n/","n:","n[0]","n[1]","need","neg","never","next","nextpermutation(self,","node","non","none:","noth","now","nth","num","number","numequivdominopairs(self,","nums.reverse()","nums:","nums[abs(n)","nums[i","nums[i+1]:","nums[i]","nums[i])","nums[i],","nums[i]:","nums[j]","nums[j],","nuts:","on","one.","ones.","open","order:","pair","pairs/","part","partial","perform","permutation/","picture!","piec","place","pointer","pop","possible.","possiblities.","power","power'","print(\">>","prioriti","proof","proof:","properli","properly.","push","py","question","question.","queue","queue,","queue.append((c","queue.pop())","queue:","quicksort","r","range(0,","range(1,","range(start,","read","realli","recurs","red","remain","result","result.append('","result.append(t)","return","revers","right","run","s","s),","s)]","s,","s:","s[x])","same","schedul","scheduler/","set()","sign","similar","simpl","simple.","simulation/solution/","singl","size","slots_avail","smallest","snippet","solution:","something,","sort","sort:","sorted(horizontalcuts)","sorted(verticalcuts)","spread","squirrel","squirrel:","start","start=1):","step","step.","stop","store","store.get((f,","store.get((s,","store[(f,","store_object_idx","str)","str,","structures.","such","sure","swap","t","t))","t,","t:","take","task","tasks:","tasks_remain","team/","team/discuss/539797/c%2b%2bpython","that'll","them?","then,","there'","those","total","travers","tree","tree:","tri","trick","true","true:","two","up","us","v_sort","v_sorted[","v_sorted[0],","v_sorted[i","variat","versa.","vertic","verticalcuts:","vice","visit","visual","w","w:","way","whole","width","width:","workers/","x","x)","x:","xth","y","y)","y:","you'd","zeroes/submissions/","{}"],"Tricks/":["#","#return","(check","(j","(p[j]","(priority,","(x[0],","+","//","1","1,","1]","=",">","[0]","[]","_imp:_","a:","algorithm","array","breaker","breaker.","c","c.most_common(n)","calcul","class","collect","come","compar","comparator.","comparison","complic","convert","counter","counter(list/string)","cover","creat","custom","def","dictionari","do","effici","elem)","element","enumerate(s):","example:","fed","fo","frequent","function","function.","functool","functools.cmp_to_key(comparator)","get","go","heap","heapq","heapq.heappush(heap,","https://leetcode.com/problems/largest","https://leetcode.com/problems/remov","i)","i,","import","index","insert","intervals/","item","item))","item:","item[1:]","item[1])}","k,","keep","key","key=lambda","lambda","lambda.","largestnumber(self,","last","list","list.insert(index,","list2)","list[int])","list}","look","looping:","make","math","math.ceil","math.floor","merg","merge(list1,","min/max/sort","multipl","n","number/","nums:","on","p","p.append(p[","p[i]),","part.","prefix","prioriti","python","r","references,","required.","return","s","s[i]","same","second","section","section)","slice+1;","solution:","sort","sorted(list,","sorted(x.items(),","start","str:","string","stuff","sum","sum_and_number_of_elements(x,","throught","tie","top","track","trick","tricki","up","us","v","valu","work.","x","x)","x+i","x,","x:","x[1]))","y","y):","y+x","y:","{item[0]:","{k:"],"BehavioralQuestions.html":["\"mall","\"restlessness\"","\"shops\"","\"wisdom","0","1","2022","absolut","accordingly.","action","add","admir","aforment","anoth","application.","approach","around","artifact","aspect","awar","balanc","bandwidth.","base","behavior","behaviour","benefit","best","binari","binaries\"","binaries.","blinker","bring","broader","built","buy","candies,","check","choos","clarif","collabor","college?","compliment","comput","computing.","conduc","construct","consumption,","coupl","coursework","creativity.","cultur","curiou","current","day","deeper","deploy","design","destruct","differ","distribut","dive","doesn't","domain","downtime.","effici","engin","environ","equal","etc","experi","expert","explain","fact","fair,","far","fast","favourit","feedback","feedback,","field","find","finish","firm","first","flourish","focus","frequenc","fuel","futur","gather","geograph","georgia","get","given","glean","global","go","googl","graduat","great","growth","hassle.","have.","have?","healthi","heard","here.","hierarchi","high","i'll","i'm","i'v","idea","imc'","impact","import","improv","improve?","in.","in?","ineffici","innov","intend","interest","internship","intersect","isn't","it'","it.","jacket","kind","known","languag","less","let'","li","lost","lot","maintain","mall","managers.","matter","mental","million","more","motivational.","much","nature,","nearest","necessity;","need","neglect","non","not.","noth","offic","on","onc","opportun","organiz","out","overhead","overhead.","pace","paced,","packag","packages.","peer","perfectli","perform","person","perticular","physically.","plan","plugin","presenc","priorit","prioritizing,","production\".","profession","professional.","project","project.","project?","projects,","put","qualiti","queri","question","receiv","reduc","relish","repositori","restless","scale","scatter","school","scienc","second","seek","serv","sheet","shoe","shop","shouldn't","side","silos.","similarly,","softwar","solut","space","start","stop","store","strike","stuff","subdomain","subject","system","systems,","table.","task","team","tech","technic","tend","term","there'","therefore,","thing","think","time,","town,","trading.","translation.","tri","trip.","univers","up","us","variou","veri","walk","way","weak","well","whenev","which,","work","year","you?"]},"length":48},"tokenStore":{"root":{"0":{"docs":{"Algorithms/SortingAndHashing.html":{"ref":"Algorithms/SortingAndHashing.html","tf":0.006666666666666667},"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.00964630225080386},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.007331378299120235},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.012006861063464836},"Algorithms/Games.html":{"ref":"Algorithms/Games.html","tf":0.013333333333333334},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.027491408934707903},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062},"Algorithms/DP/NumSol.html":{"ref":"Algorithms/DP/NumSol.html","tf":0.013888888888888888},"DataStructures/StacksAndQueues/":{"ref":"DataStructures/StacksAndQueues/","tf":0.01020408163265306},"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.011764705882352941},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.009846827133479213},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.017316017316017316},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.008771929824561403},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0038412291933418692},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.010075566750629723},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.013861386138613862},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.005549389567147614},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00819672131147541},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.006224066390041493},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.008403361344537815},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.006060606060606061},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.009316770186335404},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.008629989212513484},"Miscellaneous/Palindrome.html":{"ref":"Miscellaneous/Palindrome.html","tf":0.009009009009009009},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.006644518272425249},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.014164305949008499},"Miscellaneous/AlienDictionary.html":{"ref":"Miscellaneous/AlienDictionary.html","tf":0.021739130434782608},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.017341040462427744},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}},")":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002932551319648094},"Algorithms/Games.html":{"ref":"Algorithms/Games.html","tf":0.013333333333333334},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002188183807439825},"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.005847953216374269},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.007920792079207921},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.002890173410404624}},")":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.003215434083601286},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.005952380952380952},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}},"]":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}},")":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.003215434083601286}}}},",":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}},"?":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}},":":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}},",":{"1":{"docs":{},",":{"docs":{},".":{"docs":{},".":{"docs":{},".":{"docs":{},",":{"docs":{},"i":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}}},"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.006872852233676976},"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.0058823529411764705},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.010940919037199124},"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.011695906432748537},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0019801980198019802},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.003105590062111801},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002157497303128371},"Miscellaneous/Palindrome.html":{"ref":"Miscellaneous/Palindrome.html","tf":0.018018018018018018},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.006644518272425249},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0028328611898017},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}},":":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062},"Algorithms/DP/NumSol.html":{"ref":"Algorithms/DP/NumSol.html","tf":0.027777777777777776},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00437636761487965},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717},"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.005847953216374269},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0022197558268590455},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0213903743315508},"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.003236245954692557},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0033222591362126247},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00424929178470255},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}}},"/":{"1":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}},"docs":{}},"}":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124},"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.005847953216374269},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228}},",":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228}}}}},"1":{"0":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.002560819462227913},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.005940594059405941}},")":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.003215434083601286}}},".":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.003215434083601286}},"c":{"docs":{},"l":{"docs":{},"a":{"docs":{},"s":{"docs":{},"s":{"docs":{},"i":{"docs":{},"c":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}}}},"*":{"docs":{},"*":{"9":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}},"docs":{}}}},"1":{"docs":{},".":{"docs":{},"d":{"docs":{},"p":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}},"2":{"docs":{},".":{"docs":{},"i":{"docs":{},"n":{"docs":{},"s":{"docs":{},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}}}},"3":{"8":{"3":{"docs":{},":":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}},"docs":{}},"9":{"0":{"docs":{},":":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}},"docs":{}},"docs":{},".":{"docs":{},"g":{"docs":{},"r":{"docs":{},"a":{"docs":{},"p":{"docs":{},"h":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}}},"4":{"docs":{},"t":{"docs":{},"h":{"docs":{},"/":{"3":{"3":{"2":{"8":{"docs":{},"/":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678}}}},"docs":{}},"5":{"7":{"docs":{},"/":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}}},".":{"docs":{},"m":{"docs":{},"e":{"docs":{},"m":{"docs":{},"o":{"docs":{},"i":{"docs":{},"z":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}}}},"5":{"4":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}}},"docs":{},".":{"docs":{},"b":{"docs":{},"i":{"docs":{},"n":{"docs":{},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}}},"t":{"docs":{},"h":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717}}}}},"6":{"docs":{},".":{"docs":{},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"h":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}},"8":{"0":{"docs":{},"/":{"docs":{},"p":{"docs":{},"r":{"docs":{},"o":{"docs":{},"b":{"docs":{},"l":{"docs":{},"e":{"docs":{},"m":{"docs":{},"s":{"docs":{},"/":{"docs":{},"l":{"docs":{},"u":{"docs":{},"c":{"docs":{},"k":{"docs":{},"i":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678}}}}}}},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"i":{"docs":{},"m":{"docs":{},"u":{"docs":{},"m":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}}}}}}}}}}}}}}},"docs":{},"/":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609}}}},"9":{"0":{"docs":{},"/":{"docs":{},"p":{"docs":{},"r":{"docs":{},"o":{"docs":{},"b":{"docs":{},"l":{"docs":{},"e":{"docs":{},"m":{"docs":{},"s":{"docs":{},"/":{"docs":{},"p":{"docs":{},"s":{"docs":{},"e":{"docs":{},"u":{"docs":{},"d":{"docs":{},"o":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.012658227848101266}}}}}}}}}}}}}}}}}}},"9":{"docs":{},"/":{"docs":{},"p":{"docs":{},"r":{"docs":{},"o":{"docs":{},"b":{"docs":{},"l":{"docs":{},"e":{"docs":{},"m":{"docs":{},"s":{"docs":{},"/":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"b":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228}}}}}}}}}}}}}}}}},"docs":{}},"docs":{"Algorithms/SortingAndHashing.html":{"ref":"Algorithms/SortingAndHashing.html","tf":0.02666666666666667},"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.012861736334405145},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.007331378299120235},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.024013722126929673},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.048109965635738834},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.005232177894048398},"Algorithms/DP/NumSol.html":{"ref":"Algorithms/DP/NumSol.html","tf":0.027777777777777776},"Algorithms/UncommonAlgos.html":{"ref":"Algorithms/UncommonAlgos.html","tf":0.019801980198019802},"DataStructures/StacksAndQueues/":{"ref":"DataStructures/StacksAndQueues/","tf":0.01020408163265306},"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.011764705882352941},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.014223194748358862},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.011834319526627219},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.03463203463203463},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.011940298507462687},"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.03508771929824561},"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.05945945945945946},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.023391812865497075},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.002560819462227913},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.013861386138613862},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004439511653718091},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.01092896174863388},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.016042780748663103},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.006224066390041493},"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.005952380952380952},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.012605042016806723},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.01818181818181818},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.007763975155279503},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.015102481121898598},"Miscellaneous/Palindrome.html":{"ref":"Miscellaneous/Palindrome.html","tf":0.018018018018018018},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.01098901098901099},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.02159468438538206},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.009915014164305949},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.022157996146435453},"Tricks/":{"ref":"Tricks/","tf":0.00966183574879227},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}},")":{"docs":{"Algorithms/SortingAndHashing.html":{"ref":"Algorithms/SortingAndHashing.html","tf":0.013333333333333334},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.008797653958944282},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.013745704467353952},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995},"Algorithms/UncommonAlgos.html":{"ref":"Algorithms/UncommonAlgos.html","tf":0.009900990099009901},"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.0058823529411764705},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002188183807439825},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.01782178217821782},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00546448087431694},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.01037344398340249},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.003105590062111801},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.007082152974504249},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}},")":{"docs":{"Algorithms/SortingAndHashing.html":{"ref":"Algorithms/SortingAndHashing.html","tf":0.006666666666666667},"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.006430868167202572},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.005952380952380952},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002157497303128371},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002932551319648094},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}},":":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.001962066710268149},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.023255813953488372},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.004329004329004329},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.005970149253731343},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0019801980198019802},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00404040404040404},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.005393743257820928},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.002890173410404624}}},";":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047}}},"]":{"docs":{"Algorithms/UncommonAlgos.html":{"ref":"Algorithms/UncommonAlgos.html","tf":0.009900990099009901},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.006472491909385114}},":":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}}}},".":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124}}},"/":{"2":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124}}},"docs":{}},"*":{"docs":{},"*":{"docs":{},"i":{"docs":{},")":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}}}}},":":{"docs":{"Algorithms/SortingAndHashing.html":{"ref":"Algorithms/SortingAndHashing.html","tf":0.006666666666666667},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488},"Algorithms/DP/NumSol.html":{"ref":"Algorithms/DP/NumSol.html","tf":0.013888888888888888},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0039603960396039604},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002157497303128371},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00424929178470255},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0038535645472061657}},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{},"r":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}}}}}}}},"]":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.00686106346483705},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.004578155657292348},"Algorithms/DP/NumSol.html":{"ref":"Algorithms/DP/NumSol.html","tf":0.027777777777777776},"Algorithms/UncommonAlgos.html":{"ref":"Algorithms/UncommonAlgos.html","tf":0.009900990099009901},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.004329004329004329},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.005970149253731343},"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.021621621621621623},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.005952380952380952},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.007874015748031496},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0049833887043189366},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00424929178470255},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828},"Tricks/":{"ref":"Tricks/","tf":0.004830917874396135}},":":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.003215434083601286},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.008658008658008658},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}}},")":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00141643059490085},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0038535645472061657}},":":{"docs":{"Miscellaneous/AlienDictionary.html":{"ref":"Miscellaneous/AlienDictionary.html","tf":0.021739130434782608}}}},"[":{"0":{"docs":{},"]":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717}},",":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995}}}}},"1":{"docs":{},"]":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}},")":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}},":":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}},",":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}}},"2":{"docs":{},"]":{"docs":{},")":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995}}}}},"docs":{"Algorithms/DP/NumSol.html":{"ref":"Algorithms/DP/NumSol.html","tf":0.013888888888888888}},"y":{"docs":{},"]":{"docs":{"Algorithms/DP/NumSol.html":{"ref":"Algorithms/DP/NumSol.html","tf":0.013888888888888888}}}}},",":{"docs":{"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.010810810810810811}}}},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.007331378299120235},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.00686106346483705},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.001962066710268149},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.015503875968992248},"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.0058823529411764705},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.011834319526627219},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.008658008658008658},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.008955223880597015},"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.011695906432748537},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004439511653718091},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00546448087431694},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.01037344398340249},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.007551240560949299},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.012747875354107648},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828},"Tricks/":{"ref":"Tricks/","tf":0.004830917874396135}},"y":{"docs":{},")":{"docs":{},",":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.003236245954692557}},"(":{"docs":{},"x":{"docs":{},",":{"docs":{},"y":{"docs":{},"+":{"1":{"docs":{},")":{"docs":{},",":{"docs":{},"(":{"docs":{},"x":{"docs":{},",":{"docs":{},"i":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}}}}}}}}},"docs":{}}}}}}}}}},";":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047}}},".":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}},"}":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0032822757111597373},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}},"/":{"0":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}},"docs":{}},"d":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}},"x":{"1":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}},"docs":{}}},"2":{"0":{"2":{"1":{"docs":{},"/":{"5":{"8":{"2":{"docs":{},"/":{"docs":{},"w":{"docs":{},"e":{"docs":{},"e":{"docs":{},"k":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}}},"docs":{}},"docs":{}},"docs":{}}},"2":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}},"docs":{}},"docs":{}},"1":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}},"s":{"docs":{},"t":{"docs":{},"/":{"3":{"3":{"3":{"0":{"docs":{},"/":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}}}},"2":{"docs":{},"n":{"docs":{},"d":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}},"3":{"docs":{},":":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047}}}},"5":{"2":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}},"3":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}},"docs":{}},"6":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343}},")":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343}}}},"8":{"docs":{},"t":{"docs":{},"h":{"docs":{},"/":{"3":{"3":{"4":{"3":{"docs":{},"/":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488}}}},"docs":{}},"docs":{}},"6":{"1":{"2":{"docs":{},"/":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}}}},"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004398826979472141},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.001962066710268149},"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.0058823529411764705},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0032822757111597373},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.011834319526627219},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.008658008658008658},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.003329633740288568},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004149377593360996},"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.003236245954692557},"Miscellaneous/Palindrome.html":{"ref":"Miscellaneous/Palindrome.html","tf":0.009009009009009009},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00424929178470255},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.004816955684007707}},"/":{"docs":{"Algorithms/SortingAndHashing.html":{"ref":"Algorithms/SortingAndHashing.html","tf":0.006666666666666667},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}},":":{"docs":{"Algorithms/SortingAndHashing.html":{"ref":"Algorithms/SortingAndHashing.html","tf":0.006666666666666667},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},"f":{"docs":{},"l":{"docs":{},"o":{"docs":{},"a":{"docs":{},"t":{"docs":{},"(":{"docs":{},"'":{"docs":{"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406}},"i":{"docs":{},"n":{"docs":{},"f":{"docs":{},"'":{"docs":{},")":{"docs":{},",":{"docs":{"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406}}}}}}}}}}}}}}}},"]":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}},")":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476}}}},",":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488},"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}},".":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.001962066710268149},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228}},"k":{"docs":{},"n":{"docs":{},"a":{"docs":{},"p":{"docs":{},"s":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}}}}},";":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}},"d":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995}}},")":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.011834319526627219},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00141643059490085},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}},":":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.004329004329004329},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002157497303128371}}}}},"3":{"0":{"0":{"0":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047}}},"docs":{}},"docs":{}},"1":{"docs":{},":":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}},"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995},"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0038535645472061657}},":":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488}},"f":{"docs":{},"l":{"docs":{},"o":{"docs":{},"a":{"docs":{},"t":{"docs":{},"(":{"docs":{},"'":{"docs":{"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406}},"i":{"docs":{},"n":{"docs":{},"f":{"docs":{},"'":{"docs":{},")":{"docs":{},"}":{"docs":{"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406}}}}}}}}}}}}}}}},".":{"docs":{"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.005847953216374269}},"m":{"docs":{},"u":{"docs":{},"l":{"docs":{},"t":{"docs":{},"i":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}},"n":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}},"/":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124}}},"]":{"docs":{},":":{"docs":{"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406}}}},",":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476}}}},"4":{"0":{"0":{"0":{"docs":{"./":{"ref":"./","tf":0.021739130434782608}}},"docs":{}},"docs":{}},"3":{"5":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}},"9":{"docs":{},"d":{"docs":{},"f":{"7":{"docs":{},"e":{"5":{"docs":{},"e":{"docs":{},"a":{"1":{"docs":{},"f":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809}}}},"docs":{}}}},"docs":{}}},"docs":{}}}},"docs":{}},"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002932551319648094},"Algorithms/Games.html":{"ref":"Algorithms/Games.html","tf":0.02666666666666667},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},")":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}},":":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047}}}},":":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047}}},"]":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047}},")":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476}}}},".":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"v":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}}}},"5":{"6":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}},"9":{"docs":{},":":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047}}}},"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}},":":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047}}},")":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}},".":{"docs":{},"b":{"docs":{},"i":{"docs":{},"t":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}},"6":{"2":{"1":{"docs":{},":":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}},"docs":{}},"docs":{},".":{"docs":{},"d":{"docs":{},"i":{"docs":{},"g":{"docs":{},"i":{"docs":{},"t":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}}},"7":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},")":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}},".":{"docs":{},"d":{"docs":{},"p":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}},"8":{"5":{"7":{"docs":{},":":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}},"docs":{}},"docs":{},"t":{"docs":{},"h":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}},".":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}}}},"9":{"docs":{},".":{"docs":{},"p":{"docs":{},"r":{"docs":{},"o":{"docs":{},"b":{"docs":{},"a":{"docs":{},"b":{"docs":{},"l":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}}}}},"docs":{},"#":{"3":{"docs":{"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576}}},"docs":{"./":{"ref":"./","tf":0.043478260869565216},"Algorithms/SortingAndHashing.html":{"ref":"Algorithms/SortingAndHashing.html","tf":0.03333333333333333},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.010263929618768328},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0137221269296741},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.001962066710268149},"Algorithms/UncommonAlgos.html":{"ref":"Algorithms/UncommonAlgos.html","tf":0.009900990099009901},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.010940919037199124},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.008658008658008658},"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.005847953216374269},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.04225352112676056},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.005037783375314861},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.011881188118811881},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.04772475027746948},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.01639344262295082},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.03208556149732621},"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.03317535545023697},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.029045643153526972},"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.015151515151515152},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.003105590062111801},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.016181229773462782},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0049833887043189366},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.014164305949008499},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.007707129094412331},"Tricks/":{"ref":"Tricks/","tf":0.014492753623188406}},"#":{"docs":{},"#":{"docs":{"./":{"ref":"./","tf":0.021739130434782608}}}},"r":{"docs":{},"e":{"docs":{},"t":{"docs":{},"u":{"docs":{},"r":{"docs":{},"n":{"docs":{"Tricks/":{"ref":"Tricks/","tf":0.004830917874396135}}}}}}}}},"$":{"docs":{"./":{"ref":"./","tf":0.08695652173913043}}},"b":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.003215434083601286},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995},"Algorithms/UncommonAlgos.html":{"ref":"Algorithms/UncommonAlgos.html","tf":0.0297029702970297},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476}},"r":{"docs":{},"o":{"docs":{},"w":{"docs":{},"s":{"docs":{},"e":{"docs":{},"r":{"docs":{"./":{"ref":"./","tf":0.021739130434782608}}}}}},"k":{"docs":{},"e":{"docs":{},"n":{"docs":{},"c":{"docs":{},"a":{"docs":{},"l":{"docs":{},"c":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}}}}}}}}}},"a":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}}}}}},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"e":{"docs":{},"t":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.012658227848101266},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.015580736543909348}}}}}},"k":{"docs":{},"e":{"docs":{},"t":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00141643059490085}}}}}},"u":{"docs":{},"t":{"docs":{},"e":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.012658227848101266},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343}}}}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{"Algorithms/SortingAndHashing.html":{"ref":"Algorithms/SortingAndHashing.html","tf":0.013333333333333334},"Algorithms/Games.html":{"ref":"Algorithms/Games.html","tf":0.02666666666666667},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}}},"l":{"docs":{},"l":{"docs":{},"i":{"docs":{},"a":{"docs":{},"n":{"docs":{},"t":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847}}}}}}}},"c":{"docs":{},"k":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.003105590062111801}},"s":{"docs":{},":":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}}},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.004658385093167702}}}}}}}}}},"d":{"docs":{},"g":{"docs":{},"e":{"docs":{},"/":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}}}}}},"e":{"docs":{},"a":{"docs":{},"k":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.001962066710268149},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062},"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.005847953216374269},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.008771929824561403},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.007751937984496124}}},")":{"docs":{"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062}},".":{"docs":{"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062}}}},"e":{"docs":{},"r":{"docs":{"Tricks/":{"ref":"Tricks/","tf":0.004830917874396135}},".":{"docs":{"Tricks/":{"ref":"Tricks/","tf":0.004830917874396135}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.012658227848101266},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":5.0102915951972555},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.003924133420536298},"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.004329004329004329},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0025188916876574307},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0039603960396039604},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.011098779134295227},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00819672131147541},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0106951871657754},"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.02843601895734597},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.016597510373443983},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}},"e":{"docs":{},"s":{"docs":{},"\"":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}},".":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}}}}},"y":{"docs":{},"_":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},"_":{"docs":{},"s":{"docs":{},"e":{"docs":{},"a":{"docs":{},"r":{"docs":{},"c":{"docs":{},"h":{"docs":{},"(":{"docs":{},"b":{"docs":{},"_":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},")":{"docs":{},":":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}}}}}}}}}}}},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},")":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}}},"+":{"1":{"docs":{},")":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}},"/":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488}}},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"p":{"docs":{},"a":{"docs":{},"t":{"docs":{},"h":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0025188916876574307}}}}}}}}}}}}}}}}}}}}},"t":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.003215434083601286},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.020618556701030927},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0025188916876574307}},"w":{"docs":{},"i":{"docs":{},"s":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":10.003436426116838},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}},"s":{"docs":{},".":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047}}},"/":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}},"[":{"0":{"docs":{},"]":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488}}}},"docs":{},"i":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}},"]":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.006872852233676976},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}},":":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488}}}},"l":{"docs":{},"l":{"docs":{},"b":{"docs":{},"o":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}}}},"g":{"docs":{},"g":{"docs":{},"e":{"docs":{},"r":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717}}}}}},"f":{"docs":{},"u":{"docs":{},"r":{"docs":{},"c":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476}}}}}},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{},"/":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.005952380952380952}}}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"/":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476}}}}}}}}}}}},"d":{"docs":{},"i":{"docs":{},"r":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"a":{"docs":{},"l":{"docs":{},".":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}}}}}}}}}}}}},"u":{"docs":{},"i":{"docs":{},"l":{"docs":{},"t":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.012658227848101266},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}},"d":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004149377593360996}}}}}}}}}}}},"_":{"docs":{},"b":{"docs":{},"r":{"docs":{},"i":{"docs":{},"d":{"docs":{},"g":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},":":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}}}}}}}}}}}}}},"c":{"docs":{},"k":{"docs":{},"e":{"docs":{},"t":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.005865102639296188},"Algorithms/UncommonAlgos.html":{"ref":"Algorithms/UncommonAlgos.html","tf":0.039603960396039604},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002932551319648094},"Algorithms/UncommonAlgos.html":{"ref":"Algorithms/UncommonAlgos.html","tf":0.009900990099009901}}},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},"[":{"docs":{},"k":{"docs":{},"]":{"docs":{},")":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047}}}}}}}}}}}}}}}},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047}}}}}}}},"[":{"0":{"docs":{},":":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047}}}},"2":{"docs":{},":":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047}}}},"docs":{}},"s":{"docs":{},",":{"docs":{"Algorithms/UncommonAlgos.html":{"ref":"Algorithms/UncommonAlgos.html","tf":0.009900990099009901}}}}}}}},"y":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0032701111837802484},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.038461538461538464},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}},"r":{"docs":{},"s":{"docs":{},"t":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}}}},"e":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.003215434083601286},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564},"Miscellaneous/Palindrome.html":{"ref":"Miscellaneous/Palindrome.html","tf":0.018018018018018018}},"l":{"docs":{},"o":{"docs":{},"w":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}},".":{"docs":{"Algorithms/SortingAndHashing.html":{"ref":"Algorithms/SortingAndHashing.html","tf":0.006666666666666667}}}}}},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},":":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.003215434083601286}}}}}}},"n":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576}}}}}},"t":{"docs":{},"w":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.01098901098901099}}}}}},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.004329004329004329},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{"DataStructures/StacksAndQueues/":{"ref":"DataStructures/StacksAndQueues/","tf":0.01020408163265306}},"e":{"docs":{},"s":{"docs":{},":":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}},"a":{"docs":{},"u":{"docs":{},"s":{"docs":{},"e":{"docs":{},",":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0025188916876574307}}}}}}}},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0038412291933418692},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011976047904191617},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.005037783375314861},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.003236245954692557},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00141643059490085}},"e":{"docs":{},".":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}},"s":{"docs":{},"t":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}}},"h":{"docs":{},"a":{"docs":{},"v":{"docs":{},"i":{"docs":{},"o":{"docs":{},"r":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":5}}},"u":{"docs":{},"r":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}}}}}}}},"n":{"docs":{},"e":{"docs":{},"f":{"docs":{},"i":{"docs":{},"t":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}}}}}}},"f":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":10.012861736334406},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.001962066710268149},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":5.004201680672269},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.003236245954692557}},"s":{"docs":{},"(":{"docs":{},"i":{"docs":{},")":{"docs":{},":":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476}}}}},"s":{"docs":{},")":{"docs":{},":":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476}}}}}},")":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476}}},":":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}}}},"o":{"docs":{},"o":{"docs":{},"l":{"docs":{},":":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.003215434083601286},"Algorithms/Games.html":{"ref":"Algorithms/Games.html","tf":0.013333333333333334},"Algorithms/UncommonAlgos.html":{"ref":"Algorithms/UncommonAlgos.html","tf":0.009900990099009901},"DataStructures/StacksAndQueues/":{"ref":"DataStructures/StacksAndQueues/","tf":0.01020408163265306},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.002560819462227913},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0025188916876574307},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.005952380952380952},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855},"Miscellaneous/Palindrome.html":{"ref":"Miscellaneous/Palindrome.html","tf":0.018018018018018018},"Miscellaneous/AlienDictionary.html":{"ref":"Miscellaneous/AlienDictionary.html","tf":0.021739130434782608},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.002890173410404624}}},"e":{"docs":{},"a":{"docs":{},"n":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047}}}}}},"k":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047}},"c":{"docs":{},"a":{"docs":{},"s":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}},"a":{"docs":{},"t":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}}},"r":{"docs":{},"d":{"docs":{},":":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}}}}},"u":{"docs":{},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"t":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.003430531732418525}}}}}},"n":{"docs":{},"d":{"docs":{},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00141643059490085},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}}}}}}}},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}},"t":{"docs":{},"t":{"docs":{},"o":{"docs":{},"m":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.011627906976744186},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.004314994606256742}},",":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228}}}}}},"h":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124},"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}}},"x":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}},"e":{"docs":{},"s":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}},"i":{"docs":{},"l":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}}},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0022197558268590455}},"t":{"docs":{},"r":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":3.334799608993157},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0056657223796034}},"(":{"0":{"docs":{},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047}}}},"docs":{},"[":{"docs":{},"]":{"docs":{},")":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047}}},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047}}}}},"b":{"docs":{},"u":{"docs":{},"c":{"docs":{},"k":{"docs":{},"e":{"docs":{},"t":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002932551319648094}},")":{"docs":{},":":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047}}}},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047}}}}}}}}},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{},"r":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002932551319648094},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0028328611898017}}}}}},"i":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00424929178470255}},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002932551319648094}}},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},"+":{"1":{"docs":{},",":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0028328611898017}}}},"docs":{}},"=":{"0":{"docs":{},",":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00141643059490085}}}},"docs":{}}}}}}},")":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00141643059490085}}}},":":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00141643059490085}}}}}}}},"w":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}},"s":{"docs":{},".":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}},",":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343}}}}}}}}}},"s":{"docs":{},"e":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002932551319648094},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062},"DataStructures/StacksAndQueues/":{"ref":"DataStructures/StacksAndQueues/","tf":0.01020408163265306},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0025188916876574307},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0019801980198019802},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.003105590062111801},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.006644518272425249},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00141643059490085},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}},"i":{"docs":{},"c":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00141643059490085}},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{},"y":{"docs":{},",":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476}}}}}}}}}},"l":{"docs":{},"l":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}},"o":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}}}}}},"a":{"docs":{},"n":{"docs":{},"c":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00141643059490085},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}},"e":{"docs":{},"b":{"docs":{},"s":{"docs":{},"t":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}}}}}}}}}}},"d":{"docs":{},".":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00141643059490085}}}}}}}}},"n":{"docs":{},"d":{"docs":{},"w":{"docs":{},"i":{"docs":{},"d":{"docs":{},"t":{"docs":{},"h":{"docs":{},".":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}}}}}}}}}},"_":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},":":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}}}}}}}}}},"l":{"docs":{},"o":{"docs":{},"o":{"docs":{},"m":{"docs":{},"d":{"docs":{},"a":{"docs":{},"y":{"docs":{},":":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.003430531732418525}}},"[":{"0":{"docs":{},"]":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.003430531732418525}}}},"docs":{}}}}}}},"c":{"docs":{},"k":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}},"u":{"docs":{},"e":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}},",":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476}}},"]":{"docs":{},")":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.005952380952380952}}}},"_":{"docs":{},"e":{"docs":{},"d":{"docs":{},"g":{"docs":{},"e":{"docs":{},"s":{"docs":{},":":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.005952380952380952}}}}}}}}},".":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}},"i":{"docs":{},"n":{"docs":{},"k":{"docs":{},"e":{"docs":{},"r":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}}}}}}},"s":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}},"t":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.005037783375314861}},"f":{"docs":{},"r":{"docs":{},"o":{"docs":{},"m":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}}}}}}}}}}}}}}}}}}}},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}},":":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228}}}}},",":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488}}},":":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488}}},"[":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"(":{"docs":{},"b":{"docs":{},")":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488}}}}}}}}},".":{"docs":{},"l":{"docs":{},"c":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}},"]":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}},",":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}},"/":{"docs":{},"w":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}},")":{"docs":{},":":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}}},"c":{"2":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00141643059490085}}},"3":{"docs":{},"]":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00141643059490085}}}},"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.02046783625730994},"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00404040404040404},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.023622047244094488},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.018413597733711047},"Miscellaneous/AlienDictionary.html":{"ref":"Miscellaneous/AlienDictionary.html","tf":0.021739130434782608},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828},"Tricks/":{"ref":"Tricks/","tf":0.014492753623188406}},"l":{"docs":{},"i":{"docs":{"./":{"ref":"./","tf":0.043478260869565216}},"m":{"docs":{},"b":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995}}}}},"o":{"docs":{},"n":{"docs":{},"e":{"docs":{"./":{"ref":"./","tf":0.043478260869565216},"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.014218009478672985}},";":{"docs":{"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996}}},"d":{"docs":{},")":{"docs":{"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996}}},":":{"docs":{"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996}}}}}},"s":{"docs":{},"e":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.014164305949008499}},"s":{"docs":{},"t":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.003430531732418525},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.003105590062111801},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},"k":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{},"e":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}}}}}}}}}}}}}}}}},"d":{"docs":{},"_":{"docs":{},"b":{"docs":{},"r":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"e":{"docs":{},"t":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00424929178470255}}}}}}}}}}}}}},"a":{"docs":{},"s":{"docs":{},"s":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.012658227848101266},"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678},"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.00964630225080386},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.010263929618768328},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.015437392795883362},"Algorithms/Games.html":{"ref":"Algorithms/Games.html","tf":0.013333333333333334},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.010309278350515464},"Algorithms/DP/NumSol.html":{"ref":"Algorithms/DP/NumSol.html","tf":0.013888888888888888},"Algorithms/UncommonAlgos.html":{"ref":"Algorithms/UncommonAlgos.html","tf":0.009900990099009901},"DataStructures/StacksAndQueues/":{"ref":"DataStructures/StacksAndQueues/","tf":0.02040816326530612},"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01764705882352941},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.009846827133479213},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.012987012987012988},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.020895522388059702},"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.011695906432748537},"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.010810810810810811},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.014619883040935672},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.019206145966709345},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.012594458438287154},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.015841584158415842},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.017758046614872364},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.01366120218579235},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0106951871657754},"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.018957345971563982},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.016597510373443983},"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.011904761904761904},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.012605042016806723},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.010101010101010102},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.015748031496062992},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.013975155279503106},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.009708737864077669},"Miscellaneous/Palindrome.html":{"ref":"Miscellaneous/Palindrome.html","tf":0.02702702702702703},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.016611295681063124},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.009915014164305949},"Miscellaneous/AlienDictionary.html":{"ref":"Miscellaneous/AlienDictionary.html","tf":0.021739130434782608},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.01348747591522158},"Tricks/":{"ref":"Tricks/","tf":0.004830917874396135}},",":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.012658227848101266}}},"i":{"docs":{},"c":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124}}}}}},"r":{"docs":{},"i":{"docs":{},"f":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}}}}},"e":{"docs":{},"a":{"docs":{},"n":{"docs":{"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.009478672985781991}}}}}},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{"./":{"ref":"./","tf":0.043478260869565216},"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.05063291139240506},"Algorithms/UncommonAlgos.html":{"ref":"Algorithms/UncommonAlgos.html","tf":0.009900990099009901},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}},".":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}},"c":{"docs":{},":":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}}}}}},"m":{"docs":{},"p":{"docs":{},"e":{"docs":{},"t":{"docs":{},"i":{"docs":{},"t":{"docs":{"./":{"ref":"./","tf":0.043478260869565216},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717}}}}}},"l":{"docs":{},"e":{"docs":{},"t":{"docs":{"Algorithms/SortingAndHashing.html":{"ref":"Algorithms/SortingAndHashing.html","tf":0.006666666666666667},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":3.334799608993157},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}},"e":{"docs":{},"l":{"docs":{},"y":{"docs":{},".":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}}}}}},"x":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002188183807439825},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228}}}},"i":{"docs":{},"c":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847},"Tricks/":{"ref":"Tricks/","tf":0.004830917874396135}}},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}}}}}}},"a":{"docs":{},"r":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343},"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123},"Tricks/":{"ref":"Tricks/","tf":0.014492753623188406}},"i":{"docs":{},"s":{"docs":{},"o":{"docs":{},"n":{"docs":{"Algorithms/UncommonAlgos.html":{"ref":"Algorithms/UncommonAlgos.html","tf":0.009900990099009901},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124},"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.005847953216374269},"Tricks/":{"ref":"Tricks/","tf":0.004830917874396135}},"s":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}},"a":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},".":{"docs":{"Tricks/":{"ref":"Tricks/","tf":0.004830917874396135}}}}}}}},"c":{"docs":{},"t":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}},",":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}},".":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}},"u":{"docs":{},"t":{"docs":{"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.007751937984496124},"Algorithms/DP/NumSol.html":{"ref":"Algorithms/DP/NumSol.html","tf":0.013888888888888888},"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0064516129032258064}},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},",":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}},"s":{"docs":{},",":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},".":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}}}}}}},"o":{"docs":{},"n":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}}},"b":{"docs":{},"i":{"docs":{},"n":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.003215434083601286},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047},"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00141643059490085}},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},",":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.003215434083601286}}},"s":{"docs":{},":":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047}}},"u":{"docs":{},"m":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047}}}}}}}}}}}}}},"o":{"docs":{},"r":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047}}}}}}}},"o":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}}},"o":{"docs":{},"n":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004439511653718091}},",":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564}}}}}},"e":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00424929178470255},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414},"Tricks/":{"ref":"Tricks/","tf":0.004830917874396135}},"s":{"docs":{},",":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}}},"a":{"docs":{},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564}}}}}}},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.012658227848101266},"Algorithms/":{"ref":"Algorithms/","tf":0.024691358024691357},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}},"i":{"docs":{},"n":{"docs":{},"u":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004398826979472141},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488},"Algorithms/DP/NumSol.html":{"ref":"Algorithms/DP/NumSol.html","tf":0.013888888888888888},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002188183807439825},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.008658008658008658},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.008928571428571428},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.008403361344537815},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.004658385093167702},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.003236245954692557},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0028328611898017}}}}},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488},"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.0058823529411764705}},"s":{"docs":{},"n":{"docs":{},"e":{"docs":{},"a":{"docs":{},"r":{"docs":{},"b":{"docs":{},"y":{"docs":{},"a":{"docs":{},"l":{"docs":{},"m":{"docs":{},"o":{"docs":{},"s":{"docs":{},"t":{"docs":{},"d":{"docs":{},"u":{"docs":{},"p":{"docs":{},"l":{"docs":{},"i":{"docs":{},"c":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Algorithms/UncommonAlgos.html":{"ref":"Algorithms/UncommonAlgos.html","tf":0.009900990099009901}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"_":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002188183807439825}},",":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124}}}}}}},"r":{"docs":{},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.007658643326039387},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}}}}}},"d":{"docs":{},"i":{"docs":{},"t":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.003215434083601286},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002932551319648094},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00437636761487965},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},",":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564}}}}}}}}},"u":{"docs":{},"c":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}}}},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.007658643326039387}},"s":{"docs":{},",":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}},".":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124}}}}}}},"u":{"docs":{},"c":{"docs":{},"t":{"docs":{"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":5.014522821576763},"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},",":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}}}}}}}}}}}}},"(":{"0":{"docs":{},",":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004149377593360996},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00141643059490085}}}},"docs":{},"i":{"docs":{},"_":{"docs":{},"s":{"docs":{},",":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004149377593360996}}}}},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0056657223796034}},",":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00141643059490085}}}}}}}},"l":{"docs":{},",":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004149377593360996}}}},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"_":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}}}}}}}}}}},"p":{"docs":{},"i":{"docs":{},"v":{"docs":{},"o":{"docs":{},"t":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}}}}}}}},".":{"docs":{},"p":{"docs":{},"o":{"docs":{},"s":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},"_":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004149377593360996}}}}}}}}}}}}}}}}}},"_":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"(":{"0":{"docs":{},",":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}}}},"docs":{},")":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}}},"m":{"docs":{},"i":{"docs":{},"d":{"docs":{},"d":{"docs":{},"l":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}}}}}}},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},"_":{"docs":{},"i":{"docs":{},"d":{"docs":{},"x":{"docs":{},"+":{"1":{"docs":{},",":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}}}},"docs":{}}}}}}}}}},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},",":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.006224066390041493}}},"=":{"0":{"docs":{},",":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}}}},"docs":{}}}}}}}},".":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004149377593360996}}}}}}}}}}}}},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"i":{"docs":{},"m":{"docs":{},"u":{"docs":{},"m":{"docs":{},"b":{"docs":{},"i":{"docs":{},"n":{"docs":{},"a":{"docs":{},"r":{"docs":{},"y":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}}}}}}}}}}}}}}}}}}}}}}}}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},":":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}}}}}}}}},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}}}}}}},"e":{"docs":{},"c":{"docs":{},"u":{"docs":{},"t":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0019801980198019802}}}}}},"i":{"docs":{},"d":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}},"s":{"docs":{},"t":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}},"o":{"docs":{},"l":{"docs":{},"i":{"docs":{},"d":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}}}},"u":{"docs":{},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},",":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}}}}}}}}}},"c":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"n":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717}}}},"r":{"docs":{},"n":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0019801980198019802}}}}}},"f":{"docs":{},"l":{"docs":{},"i":{"docs":{},"c":{"docs":{},"t":{"docs":{},"s":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}}},"n":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00808080808080808}}}}}},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0106951871657754},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123},"Tricks/":{"ref":"Tricks/","tf":0.004830917874396135}},"b":{"docs":{},"s":{"docs":{},"t":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0025188916876574307}}}}}}}}}}}},"s":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564}}},"g":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809}}}}}},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"r":{"docs":{"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406}}}}}},"e":{"docs":{},"n":{"docs":{},"c":{"docs":{},"t":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564}}}}}}},"p":{"docs":{},"i":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.02531645569620253}},"e":{"docs":{},"d":{"docs":{},")":{"docs":{},")":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047}}}},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047}}},":":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047}}}}}}},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{"Algorithms/SortingAndHashing.html":{"ref":"Algorithms/SortingAndHashing.html","tf":0.006666666666666667},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002188183807439825},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.002560819462227913},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00141643059490085},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.007707129094412331}},"e":{"docs":{},"r":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002932551319648094},"Tricks/":{"ref":"Tricks/","tf":0.004830917874396135}},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},")":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047}}}}}}},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"/":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},")":{"docs":{"Tricks/":{"ref":"Tricks/","tf":0.004830917874396135}}}}}}}}}}}}}}},")":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002932551319648094}},":":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047}}}},":":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047}}},"[":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"]":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002932551319648094}},":":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047}}}}}}}}}},"b":{"docs":{},"i":{"docs":{},"t":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488}}}}}}}}}},"n":{"docs":{},"a":{"docs":{},"r":{"docs":{},"y":{"docs":{},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343}}}}}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"/":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488}}},"u":{"docs":{},"b":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}}}}}}}}}}}}}},"p":{"docs":{},"a":{"docs":{},"i":{"docs":{},"r":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228}}}}}}}}}}}}},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"p":{"docs":{},"o":{"docs":{},"n":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}}}}}}}}}}}}}}}}}},"r":{"docs":{},"s":{"docs":{"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00808080808080808},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.003105590062111801},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},"e":{"docs":{},")":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0019801980198019802}}},"_":{"docs":{},"d":{"docs":{},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{},"h":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}},")":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}}}}}}},"s":{"docs":{},"/":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}},":":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}}}},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"k":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}}}}}}}},"p":{"docs":{},"l":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}}}},"l":{"docs":{"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002157497303128371}},"l":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.00964630225080386},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.004329004329004329},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.011940298507462687},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004439511653718091},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.01092896174863388},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498},"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.008928571428571428},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.012605042016806723},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.006060606060606061},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.015748031496062992},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.005393743257820928},"Tricks/":{"ref":"Tricks/","tf":0.004830917874396135}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},".":{"docs":{},"d":{"docs":{},"e":{"docs":{},"q":{"docs":{},"u":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.003215434083601286}}}}}}}}}}}}},"g":{"docs":{},"e":{"docs":{},"?":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}}}}},"a":{"docs":{},"b":{"docs":{},"o":{"docs":{},"r":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}}}}}},"u":{"docs":{},"m":{"docs":{},"n":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002157497303128371}}}}},"o":{"docs":{},"r":{"docs":{"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":10.026785714285714},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},"/":{"docs":{"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406}}},"s":{"docs":{},":":{"docs":{"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406}}},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406}}}},"n":{"docs":{"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406}}}},".":{"docs":{},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.005952380952380952}}}}}}},"r":{"docs":{},"e":{"docs":{},"m":{"docs":{},"o":{"docs":{},"v":{"docs":{},"e":{"docs":{},"(":{"docs":{},"c":{"docs":{},"o":{"docs":{},"l":{"docs":{},"o":{"docs":{},"r":{"docs":{},")":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.005952380952380952}}}}}}}}}}}}}}}},"/":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476}}}},")":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476}},")":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476}}}},",":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476}}},":":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476}}},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476}},")":{"docs":{},")":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476}}}}}}}}}}},"_":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002157497303128371}},".":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}}}}},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}},",":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002157497303128371}}},":":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}}}}}}}}},"i":{"docs":{},"n":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.007751937984496124}},"s":{"docs":{},":":{"docs":{"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.007751937984496124}}}}}},"o":{"docs":{},"l":{"docs":{},"d":{"docs":{},"o":{"docs":{},"w":{"docs":{},"n":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}}},"s":{"docs":{},"t":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.003924133420536298},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995}}}},"1":{"docs":{},"]":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995}}}},"2":{"docs":{},"]":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995}}}},"docs":{}}}}}},",":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}}}}},"r":{"docs":{},"r":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.0058823529411764705},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}},"s":{"docs":{},"p":{"docs":{},"o":{"docs":{},"n":{"docs":{},"d":{"docs":{"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.014218009478672985},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0028328611898017}}}}}}}}},"n":{"docs":{},"e":{"docs":{},"r":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002157497303128371}}}}}},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0019801980198019802},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.006644518272425249},"Tricks/":{"ref":"Tricks/","tf":0.004830917874396135}}}}}},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"t":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.02531645569620253},"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.003215434083601286},"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.005847953216374269},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414},"Tricks/":{"ref":"Tricks/","tf":0.004830917874396135}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.006430868167202572}}}},"v":{"docs":{},"i":{"docs":{},"t":{"docs":{},"y":{"docs":{},".":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}}}}}}}}}},"u":{"docs":{},"c":{"docs":{},"i":{"docs":{},"a":{"docs":{},"l":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564},"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576}},";":{"docs":{"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.005847953216374269}}}}}}}},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"i":{"docs":{},"a":{"docs":{"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}},",":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0025188916876574307}}}}}}},"i":{"docs":{},"c":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},"a":{"docs":{},"l":{"docs":{},",":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}}}}}}}}},"h":{"docs":{},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},"e":{"docs":{},"/":{"5":{"3":{"5":{"docs":{},"/":{"docs":{},"w":{"docs":{},"e":{"docs":{},"e":{"docs":{},"k":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678}}}}}}}},"6":{"docs":{},"/":{"docs":{},"w":{"docs":{},"e":{"docs":{},"e":{"docs":{},"k":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717}}}}}}}},"7":{"docs":{},"/":{"docs":{},"w":{"docs":{},"e":{"docs":{},"e":{"docs":{},"k":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488}}}}}}}},"docs":{}},"4":{"0":{"docs":{},"/":{"docs":{},"w":{"docs":{},"e":{"docs":{},"e":{"docs":{},"k":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}}},"docs":{}},"docs":{}},"docs":{}}}}}}}},"r":{"docs":{"Algorithms/SortingAndHashing.html":{"ref":"Algorithms/SortingAndHashing.html","tf":0.006666666666666667},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002188183807439825}},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0032822757111597373},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.005847953216374269},"Miscellaneous/Palindrome.html":{"ref":"Miscellaneous/Palindrome.html","tf":0.036036036036036036},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0028328611898017}},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"n":{"docs":{},"o":{"docs":{},"t":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124}}}}}},"s":{"docs":{},"/":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0032822757111597373},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343}},"d":{"docs":{},"i":{"docs":{},"s":{"docs":{},"c":{"docs":{},"u":{"docs":{},"s":{"docs":{},"s":{"docs":{},"/":{"8":{"7":{"7":{"6":{"8":{"docs":{},"/":{"4":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124}}},"docs":{}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}}},"/":{"docs":{"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343}}},".":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}}},"_":{"docs":{},"s":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124}}}}}}},"s":{"docs":{},",":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002188183807439825}}},"[":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},"_":{"docs":{},"c":{"docs":{},"h":{"docs":{},"a":{"docs":{},"r":{"docs":{},"]":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.006564551422319475}}}}}}}}}}}}}}}},"n":{"docs":{},"g":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002932551319648094},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}},"e":{"docs":{},"r":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.003215434083601286}}},".":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.011627906976744186}}},":":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}},"c":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}},"i":{"docs":{},"n":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.008771929824561403}},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343}}}}}},"e":{"docs":{},"a":{"docs":{},"t":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047}}}},"c":{"docs":{},"k":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.010309278350515464},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.001962066710268149},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.007751937984496124},"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.004329004329004329},"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0038412291933418692},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011976047904191617},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0039603960396039604},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0022197558268590455},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.003236245954692557},"Miscellaneous/Palindrome.html":{"ref":"Miscellaneous/Palindrome.html","tf":0.018018018018018018},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0033222591362126247},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}},"s":{"docs":{},":":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609}}}},"i":{"docs":{},"f":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"r":{"docs":{},"e":{"docs":{},"q":{"docs":{},"u":{"docs":{},"i":{"docs":{},"s":{"docs":{},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.007874015748031496}}}}}}}}}}}}}}}}}}}}}},"o":{"docs":{},"u":{"docs":{},"t":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}}}},"p":{"docs":{},"o":{"docs":{},"s":{"docs":{},"s":{"docs":{},"i":{"docs":{},"b":{"docs":{},"i":{"docs":{},"l":{"docs":{},"i":{"docs":{},"t":{"docs":{},"y":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"s":{"docs":{},"b":{"docs":{},"o":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995}}}}}}}}}}},"o":{"docs":{},"i":{"docs":{},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},":":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609}}}}}}},"o":{"docs":{},"s":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002932551319648094},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}}},"s":{"docs":{},"e":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}},"u":{"docs":{},"n":{"docs":{},"k":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}},"i":{"docs":{},"l":{"docs":{},"d":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}},"r":{"docs":{},"e":{"docs":{},"n":{"docs":{"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}},"'":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228}}},")":{"docs":{"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576}}},":":{"docs":{"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576}}}}}},",":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}}}}}}},"u":{"docs":{},"r":{"docs":{},"r":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"Algorithms/SortingAndHashing.html":{"ref":"Algorithms/SortingAndHashing.html","tf":0.02},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.008797653958944282},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.005145797598627788},"Algorithms/Games.html":{"ref":"Algorithms/Games.html","tf":0.02666666666666667},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.01312910284463895},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.008771929824561403},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.006402048655569782},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.022670025188916875},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.007920792079207921},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004439511653718091},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00819672131147541},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.006224066390041493},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00404040404040404},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002157497303128371},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0033222591362126247},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.007082152974504249},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}},")":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228}},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047}}},":":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0019801980198019802}}}},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847}}},":":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.010075566750629723}}},"[":{"0":{"docs":{},"]":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}},"docs":{},"c":{"docs":{},"h":{"docs":{},"a":{"docs":{},"r":{"docs":{},"]":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002188183807439825}}}}}}}},"_":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00437636761487965},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.005940594059405941}},",":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124}}},")":{"docs":{},":":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0019801980198019802}}}}}}},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.014619883040935672}}}}}}},"r":{"docs":{},"o":{"docs":{},"w":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847}},".":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"(":{"docs":{},"x":{"docs":{},",":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847}}}}}}}}},":":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847}}},"[":{"docs":{},"x":{"docs":{},"]":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847}}}}}}}},"d":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}}}}}}},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0038412291933418692}}}}}},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.010075566750629723},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}},":":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00546448087431694}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.005037783375314861},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}},":":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.005037783375314861},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00546448087431694}}}}}}}},"v":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.005037783375314861},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00819672131147541}},"a":{"docs":{},"l":{"docs":{},")":{"docs":{},")":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00546448087431694}}}}}}}},"=":{"docs":{},"\"":{"docs":{},"\"":{"docs":{},",":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00141643059490085}}}}}}}}}},"a":{"docs":{},"t":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809}}}},"i":{"docs":{},"o":{"docs":{},"u":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}}}}},"b":{"docs":{},"o":{"docs":{},"i":{"docs":{},"d":{"docs":{},"s":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}},"t":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}},"s":{"docs":{},"/":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}},"m":{"docs":{},"u":{"docs":{},"l":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0025188916876574307}}}}},"s":{"docs":{},"t":{"docs":{},"o":{"docs":{},"m":{"docs":{"Tricks/":{"ref":"Tricks/","tf":0.004830917874396135}}}}}},"l":{"docs":{},"t":{"docs":{},"u":{"docs":{},"r":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}}}}}},"a":{"docs":{},"n":{"docs":{},"m":{"docs":{},"e":{"docs":{},"a":{"docs":{},"s":{"docs":{},"u":{"docs":{},"r":{"docs":{},"e":{"docs":{},"w":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.003215434083601286}}}}}}}}}}}}}}}}}}}},"d":{"docs":{},"i":{"docs":{},"d":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"s":{"docs":{},":":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047}}},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},")":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047}}}}}}}}}}},"e":{"docs":{},"s":{"docs":{},",":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}}}}}},"j":{"docs":{},"u":{"docs":{},"m":{"docs":{},"p":{"docs":{},"f":{"docs":{},"r":{"docs":{},"o":{"docs":{},"m":{"docs":{},"p":{"docs":{},"o":{"docs":{},"s":{"docs":{},"i":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047}}}}}}}}}}}}}}}}}},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}}}}}}},"_":{"docs":{},"s":{"docs":{},"h":{"docs":{},"i":{"docs":{},"p":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}},"(":{"docs":{},"w":{"docs":{},")":{"docs":{},":":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}}}}}}}}}}},"w":{"docs":{},"i":{"docs":{},"n":{"docs":{},"n":{"docs":{},"i":{"docs":{},"m":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Algorithms/Games.html":{"ref":"Algorithms/Games.html","tf":0.013333333333333334}}}}}}}}}}}}}},"'":{"docs":{},"t":{"docs":{"DataStructures/StacksAndQueues/":{"ref":"DataStructures/StacksAndQueues/","tf":0.01020408163265306},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}},",":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124}}},"v":{"docs":{},"i":{"docs":{},"s":{"docs":{},"i":{"docs":{},"t":{"docs":{},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"m":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907}}}}}}}}}}}}}}}}}}}}},"f":{"docs":{},"i":{"docs":{},"n":{"docs":{},"i":{"docs":{},"s":{"docs":{},"h":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}}}}}}}}}}}},".":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}},"l":{"docs":{},"l":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.005865102639296188},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228},"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00141643059490085}},"s":{"docs":{},"/":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717}}}},")":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}}}},"c":{"docs":{},"_":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},"(":{"docs":{},"m":{"docs":{},"i":{"docs":{},"d":{"docs":{},")":{"docs":{},":":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}}}}}}}}}}}},"u":{"docs":{},"l":{"docs":{"Algorithms/Games.html":{"ref":"Algorithms/Games.html","tf":0.013333333333333334},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414},"Tricks/":{"ref":"Tricks/","tf":0.004830917874396135}},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},".":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228}}}}}},"o":{"docs":{},"r":{"docs":{},"/":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},"d":{"docs":{},"i":{"docs":{},"s":{"docs":{},"c":{"docs":{},"u":{"docs":{},"s":{"docs":{},"s":{"docs":{},"/":{"2":{"3":{"6":{"5":{"6":{"5":{"docs":{},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"t":{"docs":{},"a":{"docs":{},"i":{"docs":{},"l":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}}}}}}}}},"m":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}}},"r":{"docs":{},"e":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847},"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002157497303128371},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00141643059490085}}},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}},"d":{"docs":{},"s":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}},"r":{"docs":{},"i":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.002560819462227913}}},"y":{"docs":{},")":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564}}},":":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564}}}}}},"s":{"docs":{},"e":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.005145797598627788},"Algorithms/Games.html":{"ref":"Algorithms/Games.html","tf":0.013333333333333334},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062},"DataStructures/StacksAndQueues/":{"ref":"DataStructures/StacksAndQueues/","tf":0.01020408163265306},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002188183807439825},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0038412291933418692},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.010075566750629723},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0049833887043189366},"Miscellaneous/AlienDictionary.html":{"ref":"Miscellaneous/AlienDictionary.html","tf":0.021739130434782608},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}},"s":{"docs":{},":":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002932551319648094},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0028328611898017},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}},".":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809}}},",":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}},",":{"docs":{"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.007751937984496124}}},".":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564}}}},"h":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.03296703296703297}},",":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.01098901098901099}}},".":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}}},"p":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}},"a":{"docs":{},"c":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}}}}},"m":{"docs":{},"e":{"docs":{},"r":{"docs":{},"a":{"docs":{},"s":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}},"t":{"docs":{},"c":{"docs":{},"h":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124}},":":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0032822757111597373}}}}}},"c":{"docs":{},"h":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00404040404040404},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002157497303128371}},"e":{"docs":{},":":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}},"[":{"docs":{},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"r":{"docs":{},"s":{"docs":{},"e":{"docs":{},"]":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.006060606060606061}}}}}}}}},"(":{"docs":{},"x":{"docs":{},",":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}}}}},".":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"(":{"docs":{},"(":{"docs":{},"x":{"docs":{},",":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}}}}}}}}},"/":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}},"k":{"docs":{},"e":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}},"c":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047}}},".":{"docs":{},"l":{"docs":{},"i":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},")":{"docs":{"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},")":{"docs":{"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996}}}}}}}},"m":{"docs":{},"o":{"docs":{},"s":{"docs":{},"t":{"docs":{},"_":{"docs":{},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"m":{"docs":{},"o":{"docs":{},"n":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{"Tricks/":{"ref":"Tricks/","tf":0.004830917874396135}}}}}}}}}}}}}}}}},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}}}}}},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"Miscellaneous/Palindrome.html":{"ref":"Miscellaneous/Palindrome.html","tf":0.018018018018018018}},".":{"docs":{"Miscellaneous/Palindrome.html":{"ref":"Miscellaneous/Palindrome.html","tf":0.009009009009009009}}}}}}}},":":{"docs":{"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.016216216216216217},"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996}}},"_":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002157497303128371}},"l":{"docs":{"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406}}},"r":{"docs":{"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406}}},"e":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.003236245954692557}}}},"i":{"docs":{},"r":{"docs":{},"c":{"docs":{},"u":{"docs":{},"l":{"docs":{},"a":{"docs":{},"r":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343}}}}}}}},"t":{"docs":{},"i":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.003105590062111801}}}}},"y":{"docs":{},"c":{"docs":{},"l":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.002560819462227913},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00404040404040404},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},"e":{"docs":{},"/":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564}}},",":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}},"i":{"docs":{},"c":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0025188916876574307}}}}}}},",":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.007874015748031496},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}}},"p":{"docs":{},"u":{"docs":{},"/":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}}}}}},"g":{"docs":{"./":{"ref":"./","tf":0.043478260869565216},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.004329004329004329}},"i":{"docs":{},"t":{"docs":{"./":{"ref":"./","tf":0.021739130434782608}},"b":{"docs":{},"o":{"docs":{},"o":{"docs":{},"k":{"docs":{"./":{"ref":"./","tf":0.13043478260869565}}}}}}},"v":{"docs":{},"e":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0025188916876574307}},"n":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.001962066710268149},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00141643059490085},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0064516129032258064}}}}}},"l":{"docs":{},"o":{"docs":{},"b":{"docs":{},"a":{"docs":{},"l":{"docs":{"./":{"ref":"./","tf":0.021739130434782608},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0019801980198019802},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}},"s":{"docs":{},"/":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228}}}},"l":{"docs":{},"y":{"docs":{},",":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}}}}}}},"e":{"docs":{},"a":{"docs":{},"n":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}}}}},"e":{"docs":{},"n":{"docs":{},"e":{"docs":{},"r":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":5.012658227848101},"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.003215434083601286},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.002616088947024199},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062},"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.04},"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.0058823529411764705},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0019801980198019802},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0028328611898017},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},"a":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"s":{"docs":{},":":{"docs":{"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996}}}}}},"e":{"docs":{},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"h":{"docs":{},"e":{"docs":{},"s":{"docs":{},"i":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00141643059490085}}}}}}}}}}}}}}}}}}}}}}}}},"t":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.003215434083601286},"Tricks/":{"ref":"Tricks/","tf":0.004830917874396135},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.012658227848101266}}}},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"p":{"docs":{},"y":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996}}}}}}}}}}}}}}}}}},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"i":{"docs":{},"m":{"docs":{},"u":{"docs":{},"m":{"docs":{},"g":{"docs":{},"o":{"docs":{},"l":{"docs":{},"d":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047}}}}}}}}}}}}}}}}}}},"_":{"docs":{},"s":{"docs":{},"m":{"docs":{},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"(":{"docs":{},"x":{"docs":{},")":{"docs":{},")":{"docs":{},"]":{"docs":{"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.005847953216374269}}}},":":{"docs":{"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.005847953216374269}}}}}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564}}}}}}}}}}}}}}}}}}}}}}}},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{},"e":{"docs":{},"l":{"docs":{},"e":{"docs":{},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996}}}}}}}}}}}}}}}}}}},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}}}}}}}}}}}}},"f":{"docs":{},"o":{"docs":{},"o":{"docs":{},"d":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}}}}}}}}}}}},"e":{"docs":{},"k":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.011834319526627219}}}},"o":{"docs":{},"g":{"docs":{},"r":{"docs":{},"a":{"docs":{},"p":{"docs":{},"h":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}}}}}},"r":{"docs":{},"g":{"docs":{},"i":{"docs":{},"a":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}}}}}}},"r":{"docs":{},"a":{"docs":{},"p":{"docs":{},"h":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":5.016042780748663},"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":10.022727272727273},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.017857142857142856},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":5.012605042016807},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":5.014141414141414},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.015748031496062992}},"s":{"docs":{},",":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678}}}},":":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.005952380952380952},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}},".":{"docs":{"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877}},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"(":{"docs":{},"p":{"docs":{},",":{"docs":{"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576}}},"a":{"docs":{},"r":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},",":{"docs":{"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576}}}}}}}}},"e":{"docs":{},",":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},",":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}}}}}},"s":{"docs":{},",":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}}}}}}},"[":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},".":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"]":{"docs":{},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},")":{"docs":{"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877}}}}}}}}}}}}}}}}}}}}}},"]":{"docs":{},":":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.005952380952380952},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00404040404040404},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.007874015748031496}}}}}}}},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"]":{"docs":{"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576}},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},".":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},")":{"docs":{"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877}}}}}}}}}}}}}}}}}}}}}}}}}},"v":{"docs":{},"]":{"docs":{},":":{"docs":{"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877}}}}},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"]":{"docs":{},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},")":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476}}}}}}}}}}}}}}}}}}},"]":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}},"i":{"docs":{},"]":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476}},":":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},"]":{"docs":{},":":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476}}}}}}}}},"s":{"docs":{},"]":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00404040404040404}},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"[":{"docs":{},"d":{"docs":{},",":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.005952380952380952}}}}},"d":{"docs":{},")":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00404040404040404}}}}}}}}}}}}},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},"]":{"docs":{},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},")":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476}}}}}}}}}}}}}}}}}}}},"c":{"docs":{},"]":{"docs":{},":":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.007874015748031496}}},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"p":{"docs":{},")":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.007874015748031496}}}}}}}}}},"d":{"docs":{},"d":{"docs":{},"(":{"docs":{},"p":{"docs":{},")":{"docs":{"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.007874015748031496}}}}}}}}}},"u":{"docs":{},"r":{"docs":{},"r":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"]":{"docs":{},":":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}}}}}}}}},"u":{"docs":{},"]":{"docs":{},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"(":{"docs":{},"v":{"docs":{},",":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.008403361344537815}}}}}}}}}}}}}}},"d":{"docs":{},"]":{"docs":{},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"s":{"docs":{},")":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}}}}}}}}}}}}},"/":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}}},"d":{"docs":{},"u":{"docs":{},"a":{"docs":{},"t":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}}}}}},"e":{"docs":{},"e":{"docs":{},"d":{"docs":{},"i":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.003215434083601286},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}}}}},"a":{"docs":{},"t":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.002616088947024199},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.002560819462227913},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}},"e":{"docs":{},"r":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.004329004329004329},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.011940298507462687},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0025188916876574307},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},",":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124}}}}}}}},"i":{"docs":{},"d":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.00964630225080386},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":10.004314994606256}},":":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.004314994606256742}}},"[":{"0":{"docs":{},"]":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}}},"docs":{}}}},"docs":{},"i":{"docs":{},"]":{"docs":{},"[":{"docs":{},"j":{"docs":{},"]":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002932551319648094}}}}}}},"_":{"docs":{},"a":{"docs":{},"]":{"docs":{},"[":{"docs":{},"_":{"docs":{},"b":{"docs":{},"]":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}}}}}}}},"x":{"docs":{},"]":{"docs":{},"[":{"docs":{},"y":{"docs":{},"]":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002157497303128371}}}}}}}},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}},"o":{"docs":{},"u":{"docs":{},"p":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.001962066710268149},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228}},"'":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}},",":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}},"s":{"docs":{},"'":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995}}},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343}}}}}}}}}}}}}}}},"n":{"docs":{},"d":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228}}}}},"w":{"docs":{},"t":{"docs":{},"h":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}}}}}},"a":{"docs":{},"m":{"docs":{},"e":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.00964630225080386},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047},"Algorithms/Games.html":{"ref":"Algorithms/Games.html","tf":10.013333333333334},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.004578155657292348},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}},"/":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.003215434083601286},"Algorithms/Games.html":{"ref":"Algorithms/Games.html","tf":0.05333333333333334},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.001962066710268149},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"m":{"docs":{},"i":{"docs":{},"s":{"docs":{},"s":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"/":{"docs":{"Algorithms/Games.html":{"ref":"Algorithms/Games.html","tf":0.013333333333333334}}}}}}}}}}}}}},":":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"n":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}},"n":{"docs":{},"o":{"docs":{},"a":{"docs":{},"d":{"docs":{},"j":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476}}}}}}}}}}}}}}}}},"t":{"docs":{},"h":{"docs":{},"e":{"docs":{},"r":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}}}}}},"o":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.003215434083601286},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004398826979472141},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.005847953216374269},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0039603960396039604},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0022197558268590455},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.004314994606256742},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414},"Tricks/":{"ref":"Tricks/","tf":0.004830917874396135},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}},"l":{"docs":{},"d":{"docs":{},"/":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}}}},"o":{"docs":{},"d":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.003430531732418525},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.001962066710268149},"Algorithms/UncommonAlgos.html":{"ref":"Algorithms/UncommonAlgos.html","tf":0.009900990099009901},"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.005847953216374269},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0022197558268590455},"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}},"g":{"docs":{},"l":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}}}},"t":{"docs":{},"c":{"docs":{},"h":{"docs":{},"a":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}},":":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}}}}}},"(":{"docs":{},"i":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}},"u":{"docs":{},"a":{"docs":{},"r":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228}}}},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0025188916876574307},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00546448087431694}}}}}}}}},"_":{"docs":{},"v":{"docs":{},"i":{"docs":{},"s":{"docs":{},"i":{"docs":{},"t":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}},"e":{"docs":{},"d":{"docs":{},".":{"docs":{},"a":{"docs":{},"d":{"docs":{},"d":{"docs":{},"(":{"docs":{},"i":{"docs":{},")":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}}}}}}},":":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.006060606060606061}}}}}}}}}},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"u":{"docs":{},"e":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}},".":{"docs":{},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}}}}}}}}}}},":":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}}}}}}}}},"h":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.005970149253731343},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0022197558268590455},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},"t":{"docs":{},"t":{"docs":{},"p":{"docs":{},"s":{"docs":{},":":{"docs":{},"/":{"docs":{},"/":{"docs":{},"g":{"docs":{},"i":{"docs":{},"t":{"docs":{},"h":{"docs":{},"u":{"docs":{},"b":{"docs":{},".":{"docs":{},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"/":{"docs":{},"v":{"docs":{},"a":{"docs":{},"r":{"docs":{},"a":{"docs":{},"d":{"docs":{},"g":{"docs":{},"h":{"docs":{},"o":{"docs":{},"d":{"docs":{},"a":{"docs":{},"k":{"docs":{},"e":{"docs":{},"/":{"docs":{},"g":{"docs":{},"i":{"docs":{},"t":{"docs":{},"b":{"docs":{},"o":{"docs":{},"o":{"docs":{},"k":{"docs":{"./":{"ref":"./","tf":0.021739130434782608}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},".":{"docs":{},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"/":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"/":{"docs":{},"w":{"docs":{},"e":{"docs":{},"e":{"docs":{},"k":{"docs":{},"l":{"docs":{},"i":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}}}}}}}}}}},"d":{"docs":{},"i":{"docs":{},"s":{"docs":{},"c":{"docs":{},"u":{"docs":{},"s":{"docs":{},"s":{"docs":{},"/":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"v":{"docs":{},"i":{"docs":{},"e":{"docs":{},"w":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.024691358024691357}}}}}}}}}}},"g":{"docs":{},"e":{"docs":{},"n":{"docs":{},"e":{"docs":{},"r":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.003430531732418525},"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576}}}}}}}}}}}}}}},"e":{"docs":{},"x":{"docs":{},"p":{"docs":{},"l":{"docs":{},"o":{"docs":{},"r":{"docs":{},"e":{"docs":{},"/":{"docs":{},"c":{"docs":{},"h":{"docs":{},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"e":{"docs":{},"/":{"docs":{},"c":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{},"/":{"docs":{},"m":{"docs":{},"a":{"docs":{},"y":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717}}}}},"j":{"docs":{},"a":{"docs":{},"n":{"docs":{},"u":{"docs":{},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}}},"u":{"docs":{},"n":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}}}}}}}}}}}}}}}}}}}}}}},"p":{"docs":{},"r":{"docs":{},"o":{"docs":{},"b":{"docs":{},"l":{"docs":{},"e":{"docs":{},"m":{"docs":{},"s":{"docs":{},"/":{"1":{"3":{"2":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717}}},"docs":{}},"docs":{}},"2":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}},"3":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},"/":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.0058823529411764705},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.004329004329004329}}}}}}},"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}},"i":{"docs":{},"m":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.001962066710268149}},"u":{"docs":{},"m":{"docs":{"Algorithms/SortingAndHashing.html":{"ref":"Algorithms/SortingAndHashing.html","tf":0.006666666666666667},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.009810333551340745},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0032822757111597373},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}}}}}}},"k":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"x":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}},"i":{"docs":{},"n":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}},"i":{"docs":{},"m":{"docs":{},"u":{"docs":{},"m":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.013080444735120994},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0032822757111597373},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0056657223796034},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}},"d":{"docs":{},"d":{"docs":{},"l":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564}}}}},"s":{"docs":{},"s":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}}},"o":{"docs":{},"v":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.0058823529411764705},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}},"s":{"docs":{},"t":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228}}}}},"e":{"docs":{},"r":{"docs":{},"g":{"docs":{"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.005847953216374269},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.002560819462227913},"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}},"e":{"docs":{},"t":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0049833887043189366}}}}}},"j":{"docs":{},"u":{"docs":{},"m":{"docs":{},"p":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.006430868167202572},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}}}}}},"o":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.003215434083601286}}}}},"d":{"docs":{},"d":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}},"n":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.011627906976744186}},"l":{"docs":{},"i":{"docs":{},"n":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717}}}}}},"u":{"docs":{},"t":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995}}}}},"w":{"docs":{},"a":{"docs":{},"t":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.003215434083601286}}},"y":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.003215434083601286},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.007751937984496124},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}}}},"h":{"docs":{},"e":{"docs":{},"r":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}},"i":{"docs":{},"g":{"docs":{},"g":{"docs":{},"l":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}},"l":{"docs":{},"d":{"docs":{},"c":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}}}},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"b":{"docs":{},"i":{"docs":{},"n":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002932551319648094},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}},"n":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"u":{"docs":{},"c":{"docs":{},"t":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.003430531732418525},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.006224066390041493}}}}},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}},"c":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"n":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}},"t":{"docs":{},"i":{"docs":{},"n":{"docs":{},"u":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{"Algorithms/UncommonAlgos.html":{"ref":"Algorithms/UncommonAlgos.html","tf":0.009900990099009901},"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.0058823529411764705}}}}}},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.005037783375314861}}}}}}},"i":{"docs":{},"n":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.011627906976744186}}}},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.005886200130804447},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.004329004329004329},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343}}}},"s":{"docs":{},"i":{"docs":{},"n":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847}}}}},"r":{"docs":{},"s":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.015748031496062992},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}}}},"a":{"docs":{},"p":{"docs":{},"a":{"docs":{},"c":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}}}}},"n":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}},"h":{"docs":{},"a":{"docs":{},"m":{"docs":{},"p":{"docs":{},"a":{"docs":{},"g":{"docs":{},"n":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}},"e":{"docs":{},"a":{"docs":{},"p":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}}}}}}},"r":{"docs":{},"r":{"docs":{},"i":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995}}}}}}},"l":{"docs":{},"i":{"docs":{},"m":{"docs":{},"b":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}},"o":{"docs":{},"s":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}}}}}}}},"r":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}},"l":{"docs":{},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0032701111837802484},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.011834319526627219},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717},"Tricks/":{"ref":"Tricks/","tf":0.004830917874396135}}}}}}},"s":{"docs":{},"t":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}},"e":{"docs":{},"a":{"docs":{},"s":{"docs":{},"t":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}},"f":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0025188916876574307}}}},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}},"i":{"docs":{},"n":{"docs":{},"k":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564}}}}},"o":{"docs":{},"n":{"docs":{},"g":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.007848266841072597},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.005470459518599562},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.008771929824561403},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855},"Miscellaneous/Palindrome.html":{"ref":"Miscellaneous/Palindrome.html","tf":0.009009009009009009},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00141643059490085}}}}}}},"w":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004439511653718091}}}}}}},"r":{"docs":{},"u":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"b":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.009156311314584695},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00404040404040404},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}},"i":{"docs":{},"m":{"docs":{"Algorithms/Games.html":{"ref":"Algorithms/Games.html","tf":0.02666666666666667}}}},"e":{"docs":{},"w":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}},"x":{"docs":{},"t":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}},"t":{"docs":{},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"k":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907}}}}}}}},"o":{"docs":{},"n":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}},"p":{"docs":{},"a":{"docs":{},"t":{"docs":{},"h":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0039603960396039604},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995}}}}},"l":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"r":{"docs":{},"o":{"docs":{},"m":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.002616088947024199}}}}}}}}},"r":{"docs":{},"t":{"docs":{},"i":{"docs":{},"t":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.002616088947024199},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0033222591362126247}}}}},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{},"e":{"docs":{},"l":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}}}}}},"c":{"docs":{},"i":{"docs":{},"f":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}}}}},"e":{"docs":{},"r":{"docs":{},"m":{"docs":{},"u":{"docs":{},"t":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047}},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"/":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047}}}}}}}}}}}},"f":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}},"o":{"docs":{},"w":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488}},"x":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}},"s":{"docs":{},"s":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476}}}}},"i":{"docs":{},"z":{"docs":{},"z":{"docs":{},"a":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}},"r":{"docs":{},"e":{"docs":{},"d":{"docs":{},"i":{"docs":{},"c":{"docs":{},"t":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}},"o":{"docs":{},"f":{"docs":{},"i":{"docs":{},"t":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}},"f":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.005145797598627788},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.002616088947024199},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0022197558268590455},"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.014218009478672985},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}},"l":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}},"o":{"docs":{},"r":{"docs":{},"m":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}},"u":{"docs":{},"r":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"d":{"docs":{},"o":{"docs":{},"m":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}},"o":{"docs":{},"g":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}},"l":{"docs":{},"a":{"docs":{},"t":{"docs":{},"t":{"docs":{},"e":{"docs":{},"n":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0019801980198019802}}}}}}},"o":{"docs":{},"w":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476}}}}},"u":{"docs":{},"r":{"docs":{},"t":{"docs":{},"h":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}}}}}}}}}},"s":{"docs":{},"q":{"docs":{},"r":{"docs":{},"t":{"docs":{},"x":{"docs":{},"/":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}}}}}},"u":{"docs":{},"i":{"docs":{},"r":{"docs":{},"r":{"docs":{},"e":{"docs":{},"l":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}}}},"u":{"docs":{},"m":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0025188916876574307},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0019801980198019802}}},"p":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995}}},"b":{"docs":{},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},"a":{"docs":{},"y":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124}}}}}}}}},"t":{"docs":{},"o":{"docs":{},"n":{"docs":{"Algorithms/Games.html":{"ref":"Algorithms/Games.html","tf":0.013333333333333334},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.003924133420536298}}}},"i":{"docs":{},"c":{"docs":{},"k":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}},"r":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343}},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}},"u":{"docs":{},"d":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}},"c":{"docs":{},"r":{"docs":{},"a":{"docs":{},"m":{"docs":{},"b":{"docs":{},"l":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}},"o":{"docs":{},"r":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00141643059490085}}}}},"h":{"docs":{},"o":{"docs":{},"p":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}},"r":{"docs":{},"t":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995},"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.010810810810810811},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.004314994606256742}}}}}}}}},"m":{"docs":{},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}}},"o":{"docs":{},"u":{"docs":{},"p":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}},"p":{"docs":{},"l":{"docs":{},"i":{"docs":{},"t":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}},"i":{"docs":{},"r":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}}}},"l":{"docs":{},"i":{"docs":{},"d":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717}}}}},"e":{"docs":{},"r":{"docs":{},"i":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}}}}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"l":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}}}}}}},"d":{"docs":{},"i":{"docs":{},"v":{"docs":{},"i":{"docs":{},"s":{"docs":{},"o":{"docs":{},"r":{"docs":{"Algorithms/Games.html":{"ref":"Algorithms/Games.html","tf":0.02666666666666667},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}},"c":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}},"s":{"docs":{},"t":{"docs":{},"i":{"docs":{},"n":{"docs":{},"c":{"docs":{},"t":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995}}}}}},"r":{"docs":{},"i":{"docs":{},"b":{"docs":{},"u":{"docs":{},"t":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}}}},"e":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995}}}}},"l":{"docs":{},"e":{"docs":{},"t":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564}}}},"i":{"docs":{},"v":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}},"e":{"docs":{},"p":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847}}}}}}}},"o":{"docs":{},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{},"o":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}},"u":{"docs":{},"n":{"docs":{},"g":{"docs":{},"e":{"docs":{},"o":{"docs":{},"n":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}}},"a":{"docs":{},"d":{"docs":{},"d":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0019801980198019802}}}},"i":{"docs":{},"r":{"docs":{},"p":{"docs":{},"l":{"docs":{},"a":{"docs":{},"n":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}},"l":{"docs":{"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996}},"l":{"docs":{},"o":{"docs":{},"c":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}},"r":{"docs":{},"i":{"docs":{},"t":{"docs":{},"h":{"docs":{},"m":{"docs":{},"e":{"docs":{},"t":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995}}}}}}}},"r":{"docs":{},"a":{"docs":{},"y":{"docs":{"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576}}}}}}},"b":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.003924133420536298},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.01098901098901099}}}}},"i":{"docs":{},"n":{"docs":{},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0025188916876574307},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0039603960396039604},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0022197558268590455},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847}}}}}},"t":{"docs":{},"w":{"docs":{},"i":{"docs":{},"s":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}},"u":{"docs":{},"i":{"docs":{},"l":{"docs":{},"d":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}},"r":{"docs":{},"s":{"docs":{},"t":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}},"o":{"docs":{},"a":{"docs":{},"t":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.0058823529411764705}}}}},"a":{"docs":{},"l":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}}}},"r":{"docs":{},"o":{"docs":{},"k":{"docs":{},"e":{"docs":{},"n":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}}}}}}}},"e":{"docs":{},"d":{"docs":{},"i":{"docs":{},"t":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}},"n":{"docs":{},"e":{"docs":{},"r":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0028328611898017}}}}}},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}},"o":{"docs":{},"u":{"docs":{},"p":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343}}}}}},"u":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}},"h":{"docs":{},"o":{"docs":{},"u":{"docs":{},"s":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.002616088947024199}}}}}},"i":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.005952380952380952}},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"g":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}},"r":{"docs":{},"l":{"docs":{},"e":{"docs":{},"a":{"docs":{},"v":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}},"s":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.005847953216374269},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564}}}}}},"v":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0033222591362126247}}}}}},"s":{"docs":{},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}}}}}},"k":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}},"n":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.001962066710268149}}}}}}},"t":{"docs":{},"h":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}},"i":{"docs":{},"l":{"docs":{"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576}}}},"e":{"docs":{},"y":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907}}}}},"r":{"docs":{},"a":{"docs":{},"c":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}},"n":{"docs":{},"g":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995}}}}},"e":{"docs":{},"d":{"docs":{},"u":{"docs":{},"c":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}},"g":{"docs":{},"u":{"docs":{},"l":{"docs":{},"a":{"docs":{},"r":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}},"m":{"docs":{},"o":{"docs":{},"v":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"DataStructures/StacksAndQueues/":{"ref":"DataStructures/StacksAndQueues/","tf":0.01020408163265306},"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.0058823529411764705},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00424929178470255},"Tricks/":{"ref":"Tricks/","tf":0.004830917874396135}}}}},"s":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.002560819462227913}}}}}},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"u":{"docs":{},"c":{"docs":{},"t":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}}}}}}}}}},"u":{"docs":{},"s":{"docs":{},"s":{"docs":{},"i":{"docs":{},"a":{"docs":{},"n":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}}},"t":{"docs":{},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995}}}}}},"s":{"docs":{},"k":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}},"i":{"docs":{},"l":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}},"r":{"docs":{},"i":{"docs":{},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{},"l":{"docs":{},"e":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}},"p":{"docs":{},"l":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}},"w":{"docs":{},"o":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.0058823529411764705}}}},"h":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}}}},"u":{"docs":{},"g":{"docs":{},"l":{"docs":{},"i":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}},"n":{"docs":{},"i":{"docs":{},"q":{"docs":{},"u":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0032701111837802484},"Algorithms/DP/NumSol.html":{"ref":"Algorithms/DP/NumSol.html","tf":0.013888888888888888}}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"i":{"docs":{},"d":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228},"Miscellaneous/Palindrome.html":{"ref":"Miscellaneous/Palindrome.html","tf":0.009009009009009009},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0028328611898017}}}}}},"i":{"docs":{},"d":{"docs":{},"e":{"docs":{},"o":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847}}},"i":{"docs":{},"f":{"docs":{},"i":{"docs":{"Miscellaneous/AlienDictionary.html":{"ref":"Miscellaneous/AlienDictionary.html","tf":0.021739130434782608}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"w":{"docs":{},"w":{"docs":{},"w":{"docs":{},".":{"docs":{},"g":{"docs":{},"e":{"docs":{},"e":{"docs":{},"k":{"docs":{},"s":{"docs":{},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"e":{"docs":{},"k":{"docs":{},"s":{"docs":{},".":{"docs":{},"o":{"docs":{},"r":{"docs":{},"g":{"docs":{},"/":{"docs":{},"t":{"docs":{},"a":{"docs":{},"g":{"docs":{},"/":{"docs":{},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},"a":{"docs":{},"y":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678}}}}}}},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{},"/":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609}}}}}}}}}}}}},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"i":{"docs":{},"m":{"docs":{},"u":{"docs":{},"m":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0032822757111597373},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.01098901098901099}}}}}}}}},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02}}}}},"u":{"docs":{},"m":{"docs":{},"b":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002188183807439825}}}}}},"x":{"docs":{},"o":{"docs":{},"r":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124}}}}},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},"i":{"docs":{},"t":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609}}}}}}}},"s":{"docs":{},"t":{"docs":{},"o":{"docs":{},"c":{"docs":{},"k":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}}}}}}}}}}}}}}}}}}}}}}},"h":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"e":{"docs":{},"r":{"docs":{},"r":{"docs":{},"a":{"docs":{},"n":{"docs":{},"k":{"docs":{},".":{"docs":{},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"/":{"docs":{},"c":{"docs":{},"h":{"docs":{},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"e":{"docs":{},"s":{"docs":{},"/":{"2":{"docs":{},"d":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}}},"docs":{},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{},"i":{"docs":{},"m":{"docs":{},"u":{"docs":{},"m":{"docs":{"Algorithms/SortingAndHashing.html":{"ref":"Algorithms/SortingAndHashing.html","tf":0.006666666666666667}}}}}}}}},"s":{"docs":{},"h":{"docs":{},"e":{"docs":{},"r":{"docs":{},"l":{"docs":{},"o":{"docs":{},"c":{"docs":{},"k":{"docs":{"Algorithms/SortingAndHashing.html":{"ref":"Algorithms/SortingAndHashing.html","tf":0.006666666666666667}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"m":{"docs":{},"e":{"docs":{},"d":{"docs":{},"i":{"docs":{},"u":{"docs":{},"m":{"docs":{},".":{"docs":{},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"/":{"docs":{},"@":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"f":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"k":{"docs":{},"/":{"docs":{},"b":{"docs":{},"i":{"docs":{},"n":{"docs":{},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"e":{"docs":{},"l":{"docs":{},"p":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02}},"e":{"docs":{},"r":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.012658227848101266},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047}},"n":{"docs":{},"c":{"docs":{},"r":{"docs":{},"(":{"0":{"docs":{},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047}}}},"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047}},"s":{"docs":{},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047}}},":":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047}}}}}}}},"(":{"docs":{},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},")":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564}}}}}}},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},")":{"docs":{},":":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0019801980198019802}}}},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},")":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564}}}}}}},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},")":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0019801980198019802}}}}}}}},"_":{"docs":{},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},")":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0019801980198019802}}}}}}}}}}}}},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},")":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0019801980198019802}}}}}}}},".":{"docs":{},"f":{"docs":{},"i":{"docs":{},"r":{"docs":{},"s":{"docs":{},"t":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0038412291933418692},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.005940594059405941}}}}}}},"l":{"docs":{},"a":{"docs":{},"s":{"docs":{},"t":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0038412291933418692},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0039603960396039604}},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.002560819462227913}}}}}},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0019801980198019802}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0019801980198019802}}}}}}}},":":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0019801980198019802}}}}}}}}}},"s":{"docs":{},".":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564}}}}}},"a":{"docs":{},"p":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.002560819462227913},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.008403361344537815},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":10.023291925465838},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.007707129094412331},"Tricks/":{"ref":"Tricks/","tf":0.004830917874396135}},":":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.008403361344537815},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.007763975155279503},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}}},"q":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564},"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.008403361344537815},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.013975155279503106},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414},"Tricks/":{"ref":"Tricks/","tf":0.01932367149758454}},".":{"docs":{},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"p":{"docs":{},")":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.008403361344537815},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.013975155279503106},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}}}}},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"(":{"docs":{},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"p":{"docs":{},",":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.002560819462227913},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.012605042016806723},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.010869565217391304},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828},"Tricks/":{"ref":"Tricks/","tf":0.004830917874396135}}}}}}}}}}}}}}}}}},".":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.003105590062111801}},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"(":{"0":{"docs":{},",":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907}}}},"docs":{}}}}}}}}}},",":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.006211180124223602}}},"[":{"0":{"docs":{},"]":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}},":":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}}}}},"docs":{},"d":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},"]":{"docs":{},")":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}}}}}}}}}}}}}}},"docs":{}},"p":{"docs":{},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}}}}}},")":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}},"d":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.014084507042253521},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.012422360248447204}},")":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564}}},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.005121638924455826},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.003105590062111801}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564}}}}}},":":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.010243277848911651}}},"a":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.002560819462227913}},",":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564}}},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564}},":":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564}}}}}}}},":":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564}}}},"b":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564}},")":{"docs":{},":":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564}}}},":":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.002560819462227913}}}}},"l":{"docs":{},"t":{"docs":{},"h":{"docs":{},"i":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}}}}},"r":{"docs":{},"d":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}}}},"r":{"docs":{},"e":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Algorithms/DP/NumSol.html":{"ref":"Algorithms/DP/NumSol.html","tf":0.013888888888888888},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0022197558268590455},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00141643059490085},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}},",":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.003215434083601286},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}},".":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.003215434083601286},"Algorithms/UncommonAlgos.html":{"ref":"Algorithms/UncommonAlgos.html","tf":0.009900990099009901},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0025188916876574307},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}},":":{"docs":{"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.008955223880597015},"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406}}},")":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}}}}},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.0058823529411764705},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.00776914539400666},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.002890173410404624}},":":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.0058823529411764705},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}},"s":{"docs":{},":":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.003105590062111801},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}},"[":{"docs":{},"i":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}}},"x":{"docs":{},"]":{"docs":{},"[":{"docs":{},"y":{"docs":{},"]":{"docs":{},":":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}}}}}}}}},",":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228}}},".":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228}}}}}}},"u":{"docs":{},"r":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}}}}}}}},"a":{"docs":{},"b":{"docs":{},"i":{"docs":{},"t":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678}}}}},"s":{"docs":{},"h":{"docs":{"Algorithms/SortingAndHashing.html":{"ref":"Algorithms/SortingAndHashing.html","tf":5.006666666666667},"Algorithms/UncommonAlgos.html":{"ref":"Algorithms/UncommonAlgos.html","tf":0.009900990099009901},"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02}},"m":{"docs":{},"a":{"docs":{},"p":{"docs":{"Algorithms/SortingAndHashing.html":{"ref":"Algorithms/SortingAndHashing.html","tf":0.006666666666666667}}}}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},")":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809}}}}}}},"n":{"docs":{},"'":{"docs":{},"t":{"docs":{"DataStructures/StacksAndQueues/":{"ref":"DataStructures/StacksAndQueues/","tf":0.01020408163265306}}}}},"c":{"docs":{},"y":{"docs":{},"c":{"docs":{},"l":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.002560819462227913}}}}}}}}}}}}},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"l":{"docs":{},"e":{"docs":{},":":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228}}},"[":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"]":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0022197558268590455}},":":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228}}}}}}}}}}}}}},"s":{"docs":{},"l":{"docs":{},"e":{"docs":{},".":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}}}}}},"n":{"docs":{},"d":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.003215434083601286}},".":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}},"l":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},".":{"docs":{"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877}}}}}}}}},"t":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}},"p":{"docs":{},"p":{"docs":{},"i":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}},"n":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}},"e":{"docs":{},"n":{"docs":{},"s":{"docs":{},".":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564}}}},".":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}},"r":{"docs":{},"d":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}},"m":{"docs":{},"o":{"docs":{},"n":{"docs":{},"i":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609}}}}}}},"l":{"docs":{},"f":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}},"v":{"docs":{},"e":{"docs":{},".":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}},"?":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}}}}},"o":{"docs":{},"p":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.003215434083601286},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.003105590062111801}},"s":{"docs":{},",":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}}}}},"m":{"docs":{},"e":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}},"u":{"docs":{},"s":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.001962066710268149}},"e":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}},"r":{"docs":{},"g":{"docs":{},"l":{"docs":{},"a":{"docs":{},"s":{"docs":{},"s":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},"(":{"docs":{},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},")":{"docs":{},":":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}}}}}}}}}}}}}}}}},"l":{"docs":{},"d":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.03296703296703297}},",":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}}},"r":{"docs":{},"i":{"docs":{},"z":{"docs":{},"o":{"docs":{},"n":{"docs":{},"t":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{},"y":{"docs":{},".":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847}}}}},"c":{"docs":{},"u":{"docs":{},"t":{"docs":{},"s":{"docs":{},":":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}}}}}}}}}}},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0064516129032258064}},"e":{"docs":{},"r":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}},"n":{"docs":{},"t":{"docs":{},":":{"docs":{"DataStructures/StacksAndQueues/":{"ref":"DataStructures/StacksAndQueues/","tf":0.01020408163265306}}}}},"t":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809}}},"s":{"docs":{},"t":{"docs":{},"o":{"docs":{},"g":{"docs":{},"r":{"docs":{},"a":{"docs":{},"m":{"docs":{},"/":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717}}}}}}}}}},"r":{"docs":{},"e":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}},"e":{"docs":{},"r":{"docs":{},"a":{"docs":{},"r":{"docs":{},"c":{"docs":{},"h":{"docs":{},"i":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}}}}}}}}},":":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}},"_":{"docs":{},"s":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},"e":{"docs":{},"d":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{},",":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}},"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},"i":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"l":{"docs":{"./":{"ref":"./","tf":0.06521739130434782}}},"n":{"docs":{},"t":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00141643059490085}},"i":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564}}}}}},"r":{"docs":{},"u":{"docs":{},"c":{"docs":{},"t":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":5.012658227848101},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},":":{"docs":{"./":{"ref":"./","tf":0.021739130434782608},"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02}}},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}}}}},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995},"Algorithms/DP/NumSol.html":{"ref":"Algorithms/DP/NumSol.html","tf":0.013888888888888888},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002188183807439825},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00404040404040404},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},".":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.0058823529411764705},"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.005847953216374269},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0019801980198019802},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}}}}}}},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.003430531732418525},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228},"Tricks/":{"ref":"Tricks/","tf":0.004830917874396135}},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}}}}}}}}},"i":{"docs":{},"d":{"docs":{"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124}}}},"p":{"docs":{},"i":{"docs":{},"r":{"docs":{"Algorithms/UncommonAlgos.html":{"ref":"Algorithms/UncommonAlgos.html","tf":0.009900990099009901},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}}}}},"t":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047}},"r":{"docs":{},"o":{"docs":{},"d":{"docs":{},"u":{"docs":{},"c":{"docs":{},"t":{"docs":{"./":{"ref":"./","tf":10.021739130434783}}}}}}}},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},")":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.003215434083601286}}}}}}}}}}},"b":{"docs":{},"u":{"docs":{},"c":{"docs":{},"k":{"docs":{},"e":{"docs":{},"t":{"docs":{},")":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002932551319648094}}},"[":{"2":{"docs":{},":":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047}}},"]":{"docs":{},")":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047}}}}},"docs":{}}}}}}}}},")":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.003215434083601286},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.007331378299120235},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.008576329331046312},"Algorithms/Games.html":{"ref":"Algorithms/Games.html","tf":0.013333333333333334},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488},"Algorithms/UncommonAlgos.html":{"ref":"Algorithms/UncommonAlgos.html","tf":0.009900990099009901},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.005470459518599562},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.011940298507462687},"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.005847953216374269},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.002560819462227913},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.005940594059405941},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.008403361344537815},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.007763975155279503},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0033222591362126247},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00141643059490085},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0038535645472061657}}},",":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.006430868167202572},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.008797653958944282},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"Algorithms/UncommonAlgos.html":{"ref":"Algorithms/UncommonAlgos.html","tf":0.009900990099009901},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124},"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.005847953216374269},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0019801980198019802},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.005952380952380952},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.01680672268907563},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00808080808080808},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.015748031496062992},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.006211180124223602},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.004816955684007707}}},":":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.006430868167202572},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.005865102639296188},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.010291595197255575},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488},"Algorithms/DP/NumSol.html":{"ref":"Algorithms/DP/NumSol.html","tf":0.013888888888888888},"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.011764705882352941},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0087527352297593},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.004329004329004329},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.008955223880597015},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.005847953216374269},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0025188916876574307},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.007920792079207921},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004439511653718091},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.008403361344537815},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00404040404040404},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.006211180124223602},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.005393743257820928},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.006644518272425249},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00424929178470255},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.00674373795761079}}},"[":{"docs":{},"]":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047}}}},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047}}}},"i":{"docs":{},"n":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047}}}}},"e":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228},"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":5},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0064516129032258064}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},".":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062}}}}}}}}},"v":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0032822757111597373},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":10.033222591362126}},"i":{"docs":{},"e":{"docs":{},"w":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809}}}}},"a":{"docs":{},"l":{"docs":{},"/":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},".":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{},"e":{"docs":{},"s":{"docs":{},"(":{"docs":{},")":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}}}}}}}}},"/":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0049833887043189366},"Tricks/":{"ref":"Tricks/","tf":0.004830917874396135}}},":":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.02159468438538206}}},"[":{"0":{"docs":{},"]":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}},"1":{"docs":{},":":{"docs":{},"]":{"docs":{},":":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}}}},"docs":{},"s":{"docs":{},"]":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}},"[":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"]":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}}}}}}}}}}}},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"t":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717}}}}}},"s":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0033222591362126247},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"/":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0033222591362126247}}}}}}}}}}},"c":{"docs":{},"h":{"docs":{},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00141643059490085}}}}}}},"n":{"docs":{},"s":{"docs":{},"h":{"docs":{},"i":{"docs":{},"p":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}}}}}}},"g":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.001962066710268149},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717}}}},"d":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0064516129032258064}}}}},"u":{"docs":{},"i":{"docs":{},"t":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00141643059490085}}}}}},"p":{"docs":{},"u":{"docs":{},"t":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.024691358024691357},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004149377593360996},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}}},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.023668639053254437},"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.005847953216374269},"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.003105590062111801},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00424929178470255},"Tricks/":{"ref":"Tricks/","tf":0.004830917874396135}},",":{"docs":{"Algorithms/SortingAndHashing.html":{"ref":"Algorithms/SortingAndHashing.html","tf":0.006666666666666667},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.003105590062111801},"Miscellaneous/Palindrome.html":{"ref":"Miscellaneous/Palindrome.html","tf":0.009009009009009009}}},":":{"docs":{"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.005847953216374269}}},"[":{"docs":{},"'":{"docs":{},"i":{"docs":{},"'":{"docs":{},"]":{"docs":{"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.005847953216374269}}}}},"j":{"docs":{},"'":{"docs":{},"]":{"docs":{"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.005847953216374269}}}}},"k":{"docs":{},"'":{"docs":{},"]":{"docs":{"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.005847953216374269}}}}}},"i":{"docs":{},"]":{"docs":{"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.005847953216374269}}}},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},",":{"docs":{"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.005847953216374269}}}}}}}}}}}}},")":{"docs":{},")":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.003105590062111801}}},":":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}}},"]":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}}}}},"i":{"docs":{},"c":{"docs":{"Algorithms/SortingAndHashing.html":{"ref":"Algorithms/SortingAndHashing.html","tf":0.02},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}},"e":{"docs":{},"s":{"docs":{},".":{"docs":{"Algorithms/SortingAndHashing.html":{"ref":"Algorithms/SortingAndHashing.html","tf":0.006666666666666667}}},"[":{"docs":{},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{},"r":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"]":{"docs":{"Algorithms/SortingAndHashing.html":{"ref":"Algorithms/SortingAndHashing.html","tf":0.006666666666666667}}}}}}}}}},"e":{"docs":{},"x":{"docs":{},"p":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"e":{"docs":{},"d":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"]":{"docs":{"Algorithms/SortingAndHashing.html":{"ref":"Algorithms/SortingAndHashing.html","tf":0.013333333333333334}}}}}}}}}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"l":{"docs":{},"i":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228}}}}}}}}}},"i":{"docs":{},"t":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}},"_":{"docs":{},"s":{"docs":{},"t":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.006430868167202572}},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},",":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.003215434083601286}}}}}}}}},"i":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228}},"a":{"docs":{},"l":{"docs":{},"i":{"docs":{},"z":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},":":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}},"e":{"docs":{},"d":{"docs":{},",":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0025188916876574307}}}}}}}}}},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564}}}}}}}}}},"c":{"docs":{},"l":{"docs":{},"u":{"docs":{},"d":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0028328611898017}},"e":{"docs":{},"d":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002932551319648094}},":":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047}}}}}}},"/":{"docs":{},"e":{"docs":{},"x":{"docs":{},"c":{"docs":{},"l":{"docs":{},"u":{"docs":{},"d":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062}}}}}}}}}}},"s":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124}}}}},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"s":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995},"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.008658008658008658},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002157497303128371},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995}}}}}}}}}},"o":{"docs":{},"m":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.015748031496062992},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"[":{"docs":{},"n":{"docs":{},"]":{"docs":{},".":{"docs":{},"r":{"docs":{},"e":{"docs":{},"m":{"docs":{},"o":{"docs":{},"v":{"docs":{},"e":{"docs":{},"(":{"docs":{},"c":{"docs":{},")":{"docs":{"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.007874015748031496}}}}}}}}}}}},":":{"docs":{"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.007874015748031496}}}},"e":{"docs":{},"i":{"docs":{},"]":{"docs":{},".":{"docs":{},"r":{"docs":{},"e":{"docs":{},"m":{"docs":{},"o":{"docs":{},"v":{"docs":{},"e":{"docs":{},"(":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},")":{"docs":{"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.007874015748031496}}}}}}}}}}}}}}},":":{"docs":{"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.007874015748031496}}}}}}},"p":{"docs":{},"]":{"docs":{},".":{"docs":{},"a":{"docs":{},"d":{"docs":{},"d":{"docs":{},"(":{"docs":{},"c":{"docs":{},")":{"docs":{"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.015748031496062992}}}}}}}}}}}}}}}}}},"f":{"docs":{},"'":{"docs":{},")":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00437636761487965},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0022197558268590455},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0033222591362126247}},",":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124},"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.016216216216216217},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0019801980198019802},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}},"}":{"docs":{"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406}}}}},"l":{"docs":{},"u":{"docs":{},"e":{"docs":{},"n":{"docs":{},"c":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}},"o":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00404040404040404}},"[":{"docs":{},"l":{"docs":{},"]":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}},"a":{"docs":{},"b":{"docs":{},"e":{"docs":{},"l":{"docs":{},"s":{"docs":{},"[":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"]":{"docs":{},"]":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00404040404040404}}}}}}}}}}}}}}}}}},"n":{"docs":{},"e":{"docs":{},"r":{"docs":{"Algorithms/Games.html":{"ref":"Algorithms/Games.html","tf":0.013333333333333334},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}}},"o":{"docs":{},"v":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0064516129032258064}}}}},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}},"a":{"docs":{},"l":{"docs":{},"i":{"docs":{},"d":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00141643059490085}}}}}}},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":5.01007556675063},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0019801980198019802},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.012448132780082987}},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},")":{"docs":{},":":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0025188916876574307},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}}}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},")":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.005037783375314861},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}}},",":{"docs":{"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},")":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.005037783375314861}}},",":{"docs":{"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996}}}}}}}}},",":{"docs":{"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996}}}}}}},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"1":{"docs":{},",":{"docs":{"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996}}}},"2":{"docs":{},",":{"docs":{"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996}}}},"docs":{},")":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0025188916876574307}}}}}}},"o":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},",":{"docs":{"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},",":{"docs":{"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996}}}}}}}}},":":{"docs":{"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{},"a":{"docs":{},"l":{"docs":{},",":{"docs":{"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996}}}}}}}}}}}},".":{"docs":{},"f":{"docs":{},"i":{"docs":{},"r":{"docs":{},"s":{"docs":{},"t":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.010075566750629723}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0025188916876574307}}}}}}}}}}}},"l":{"docs":{},"a":{"docs":{},"s":{"docs":{},"t":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.010075566750629723}},".":{"docs":{},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.005037783375314861}}}}}}}},":":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0025188916876574307}}}}}}}},":":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004149377593360996}}}}}}}},"h":{"docs":{},"e":{"docs":{},"r":{"docs":{},"i":{"docs":{},"t":{"docs":{"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576}}}}}}},"j":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}}}}}},"g":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}},"w":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{},"s":{"docs":{},".":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}}}}}}},".":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}},"?":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}},"e":{"docs":{},"f":{"docs":{},"f":{"docs":{},"i":{"docs":{},"c":{"docs":{},"i":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}}}}}}}},"m":{"docs":{},"p":{"docs":{},"r":{"docs":{},"o":{"docs":{},"v":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.012658227848101266},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}},"e":{"docs":{},"?":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}}}}}},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.012861736334405145},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.004329004329004329},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.014925373134328358},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.005121638924455826},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0025188916876574307},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.003329633740288568},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.01092896174863388},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004149377593360996},"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.008928571428571428},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.02100840336134454},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00808080808080808},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.015748031496062992},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.013975155279503106},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.005393743257820928},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828},"Tricks/":{"ref":"Tricks/","tf":0.028985507246376812},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.00967741935483871}}}}},"e":{"docs":{},"r":{"docs":{},"f":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.006872852233676976}}}}}}}},"l":{"docs":{},"i":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}},"e":{"docs":{},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228}},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},":":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002157497303128371}}}}}}}}}}}}}},":":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}}}}},"m":{"docs":{},"u":{"docs":{},"t":{"docs":{},"a":{"docs":{},"b":{"docs":{},"l":{"docs":{},"e":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995}}}}}}}}},"e":{"docs":{},"d":{"docs":{},"i":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"l":{"docs":{},"y":{"docs":{},".":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00141643059490085}}}}}}}}}}}},"a":{"docs":{},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}}}}}}}},"c":{"docs":{},"'":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}}}},"d":{"docs":{"Algorithms/SortingAndHashing.html":{"ref":"Algorithms/SortingAndHashing.html","tf":0.006666666666666667}},"e":{"docs":{},"a":{"docs":{"Algorithms/Games.html":{"ref":"Algorithms/Games.html","tf":0.013333333333333334},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}},".":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00141643059490085}}}},"n":{"docs":{},"t":{"docs":{},"i":{"docs":{},"f":{"docs":{},"i":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00141643059490085}}}}}}}},"(":{"docs":{},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},")":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564}}}}}}},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},")":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564}}}}}}}},"l":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}}}},"s":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"i":{"docs":{},"d":{"docs":{},"(":{"docs":{},"s":{"docs":{},")":{"docs":{},":":{"docs":{"Algorithms/SortingAndHashing.html":{"ref":"Algorithms/SortingAndHashing.html","tf":0.006666666666666667}}}}}},"b":{"docs":{},"s":{"docs":{},"t":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228}}}}}}}}}}}}}}}},",":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564}}},"n":{"docs":{},"'":{"docs":{},"t":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}}}},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"s":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"f":{"docs":{},"i":{"docs":{},"e":{"docs":{},"d":{"docs":{},"(":{"docs":{},")":{"docs":{},".":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124}}}}}}}}}}}}}}}}}}}}},"u":{"docs":{},"s":{"docs":{},"i":{"docs":{},"n":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847}}}}}}}}}}}}}}},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},"(":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},",":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.01775147928994083}}}}}}}}}}}}}}}}},"b":{"docs":{},"i":{"docs":{},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.005952380952380952}}}}}}}}}}}}}}}}},"l":{"docs":{},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002157497303128371}},"/":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}},"s":{"docs":{},"/":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}}}}}}},"p":{"docs":{},"a":{"docs":{},"l":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"r":{"docs":{},"o":{"docs":{},"m":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},",":{"docs":{"Miscellaneous/Palindrome.html":{"ref":"Miscellaneous/Palindrome.html","tf":0.009009009009009009}}}}}}}}}}}}}}}}}}},"a":{"docs":{},"l":{"docs":{},"i":{"docs":{},"e":{"docs":{},"n":{"docs":{},"s":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{},"e":{"docs":{},"d":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Miscellaneous/AlienDictionary.html":{"ref":"Miscellaneous/AlienDictionary.html","tf":0.021739130434782608}}}}}}}}}}}}}}}}}}},"o":{"docs":{},"n":{"docs":{},"e":{"docs":{},"e":{"docs":{},"d":{"docs":{},"i":{"docs":{},"t":{"docs":{},"d":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}}}}}}}}}}}}}}}}}}},"i":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}},"/":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.003215434083601286},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.010464355788096796},"Algorithms/DP/NumSol.html":{"ref":"Algorithms/DP/NumSol.html","tf":0.013888888888888888},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0019801980198019802},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.007874015748031496},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005},"Miscellaneous/Palindrome.html":{"ref":"Miscellaneous/Palindrome.html","tf":0.009009009009009009},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}},"i":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.003924133420536298},"Algorithms/UncommonAlgos.html":{"ref":"Algorithms/UncommonAlgos.html","tf":0.009900990099009901},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0019801980198019802},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}},",":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}},":":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488}}},"f":{"docs":{},"(":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002932551319648094}},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{},"r":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002932551319648094}}}}}},"i":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047}}},"n":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047}}}}},"t":{"docs":{},"e":{"docs":{},"m":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.001962066710268149},"Tricks/":{"ref":"Tricks/","tf":0.004830917874396135}},":":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Tricks/":{"ref":"Tricks/","tf":0.004830917874396135}}},"]":{"docs":{},")":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}},"s":{"docs":{},",":{"docs":{"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062}}}},")":{"docs":{},")":{"docs":{"Tricks/":{"ref":"Tricks/","tf":0.004830917874396135}}}},"[":{"1":{"docs":{},":":{"docs":{},"]":{"docs":{"Tricks/":{"ref":"Tricks/","tf":0.004830917874396135}}}},"]":{"docs":{},")":{"docs":{},"}":{"docs":{"Tricks/":{"ref":"Tricks/","tf":0.004830917874396135}}}}}},"docs":{}}},"r":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"Algorithms/Games.html":{"ref":"Algorithms/Games.html","tf":0.013333333333333334},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.002560819462227913},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.005037783375314861},"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.003105590062111801},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},".":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002188183807439825},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877}}}}},"v":{"docs":{},"e":{"docs":{},":":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0025188916876574307}}},")":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.017964071856287425}}},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"1":{"docs":{},")":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0025188916876574307}}}},"2":{"docs":{},",":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0025188916876574307}}}},"docs":{},",":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0025188916876574307}}}}}}}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"a":{"docs":{},"v":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.005037783375314861}},"e":{"docs":{},"s":{"docs":{},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{},"r":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},".":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},")":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0025188916876574307}}}}}}}}}}}}}}}}}}}}},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"0":{"docs":{},")":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0025188916876574307}}}},"docs":{}}}}}},"[":{"0":{"docs":{},"]":{"docs":{},":":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0025188916876574307}}}}},"docs":{}}}}}}}},"s":{"docs":{},"i":{"docs":{},"m":{"docs":{},"i":{"docs":{},"l":{"docs":{},"a":{"docs":{},"r":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.007556675062972292}}}}}}}}}}}}},"o":{"docs":{},"r":{"docs":{},"(":{"docs":{},"g":{"docs":{},"e":{"docs":{},"n":{"docs":{},"e":{"docs":{},"r":{"docs":{},"a":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},")":{"docs":{"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.009478672985781991}}}}}}}}}}}}},",":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}}}}}}}}},"'":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.003430531732418525},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.007751937984496124},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.005970149253731343},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0056657223796034},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.004816955684007707},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}},",":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00141643059490085}}},"h":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124}}},".":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00141643059490085},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228}}}}}},")":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847}}},"(":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},")":{"docs":{},":":{"docs":{"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996}}}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},")":{"docs":{"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},")":{"docs":{"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996}}}}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"e":{"docs":{},"r":{"docs":{},"a":{"docs":{},"r":{"docs":{},"y":{"docs":{},"/":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}}}}}}}}},",":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995},"Algorithms/UncommonAlgos.html":{"ref":"Algorithms/UncommonAlgos.html","tf":0.009900990099009901},"DataStructures/StacksAndQueues/":{"ref":"DataStructures/StacksAndQueues/","tf":0.01020408163265306},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00437636761487965},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.004329004329004329},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.005970149253731343},"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.010810810810810811},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.005847953216374269},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004149377593360996},"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.004658385093167702},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0049833887043189366},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.007082152974504249},"Miscellaneous/AlienDictionary.html":{"ref":"Miscellaneous/AlienDictionary.html","tf":0.043478260869565216},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.005780346820809248},"Tricks/":{"ref":"Tricks/","tf":0.004830917874396135}}},".":{"docs":{},"e":{"docs":{},".":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"Algorithms/Games.html":{"ref":"Algorithms/Games.html","tf":0.013333333333333334},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002188183807439825}}}}},"]":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.006872852233676976},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717},"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.016216216216216217},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00141643059490085}},",":{"docs":{"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}},"[":{"docs":{},"c":{"docs":{},"o":{"docs":{},"l":{"docs":{"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.010810810810810811}}}},"_":{"docs":{},"s":{"docs":{},"]":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}},",":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}}}}}}}},"+":{"1":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}},")":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}},"docs":{}},"e":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995}},".":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.002560819462227913}}}},"v":{"docs":{"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576}},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.001962066710268149},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.007874015748031496}},"d":{"docs":{},"i":{"docs":{},"s":{"docs":{},"c":{"docs":{},"u":{"docs":{},"s":{"docs":{},"s":{"docs":{},"/":{"5":{"4":{"1":{"1":{"7":{"docs":{},"/":{"docs":{},"c":{"docs":{},"l":{"docs":{},"e":{"docs":{},"a":{"docs":{},"n":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}}}}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}}},"l":{"docs":{},"l":{"docs":{},"u":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"Algorithms/UncommonAlgos.html":{"ref":"Algorithms/UncommonAlgos.html","tf":0.009900990099009901}}}}}}}},")":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414},"Tricks/":{"ref":"Tricks/","tf":0.004830917874396135}},":":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.004329004329004329}}},")":{"docs":{"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.010810810810810811},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564}}}},"/":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717}}},"'":{"docs":{},"v":{"docs":{"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0064516129032258064}}},"l":{"docs":{},"l":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}}},"m":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0064516129032258064}}}},"_":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}},"e":{"docs":{},")":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}},":":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}}}},":":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}}}}},"r":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"p":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00141643059490085}}}}}}}}}}},"l":{"1":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.005121638924455826}},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.002560819462227913}}}}}},":":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0038412291933418692}}},"_":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564}}}}}},")":{"docs":{"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996}}},",":{"docs":{"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996}}}},"2":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0038412291933418692},"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996}},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564}}}}}},":":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.005121638924455826}}},"_":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.002560819462227913}}}}}},")":{"docs":{"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.009478672985781991}}}},"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.0058823529411764705},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.014428412874583796},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004149377593360996},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.004658385093167702},"Miscellaneous/Palindrome.html":{"ref":"Miscellaneous/Palindrome.html","tf":0.018018018018018018},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}},"o":{"docs":{},"c":{"docs":{},"a":{"docs":{},"l":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00404040404040404},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.016483516483516484}},"h":{"docs":{},"o":{"docs":{},"s":{"docs":{},"t":{"docs":{},":":{"4":{"0":{"0":{"0":{"docs":{"./":{"ref":"./","tf":0.021739130434782608}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}}}}}},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},")":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717}}}}}}}},"k":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.003215434083601286}},"/":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.003215434083601286}}}}},"o":{"docs":{},"p":{"docs":{"Algorithms/SortingAndHashing.html":{"ref":"Algorithms/SortingAndHashing.html","tf":0.006666666666666667},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002932551319648094},"Algorithms/Games.html":{"ref":"Algorithms/Games.html","tf":0.02666666666666667},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.002616088947024199},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.011627906976744186},"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.0058823529411764705},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124},"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.002560819462227913},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0025188916876574307},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00404040404040404},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.002890173410404624}},")":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.003430531732418525}}},".":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488}}},",":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002188183807439825}}},"s":{"docs":{},":":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},":":{"docs":{"Tricks/":{"ref":"Tricks/","tf":0.004830917874396135}}}}}}},"k":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002188183807439825},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0025188916876574307},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202},"Miscellaneous/AlienDictionary.html":{"ref":"Miscellaneous/AlienDictionary.html","tf":0.021739130434782608},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414},"Tricks/":{"ref":"Tricks/","tf":0.004830917874396135}}}},"n":{"docs":{},"g":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.003215434083601286},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564},"Miscellaneous/Palindrome.html":{"ref":"Miscellaneous/Palindrome.html","tf":0.009009009009009009}},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.006872852233676976},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.006564551422319475},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0019801980198019802},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"c":{"docs":{},"h":{"docs":{},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343}}}}}}}}}}}}}}}},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"e":{"docs":{},"c":{"docs":{},"u":{"docs":{},"t":{"docs":{},"i":{"docs":{},"v":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0019801980198019802}}}}}}}}}}}}}}}}}}},"z":{"docs":{},"i":{"docs":{},"g":{"docs":{},"z":{"docs":{},"a":{"docs":{},"g":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0019801980198019802}}}}}}}}}}}}}},"p":{"docs":{},"a":{"docs":{},"l":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"r":{"docs":{},"o":{"docs":{},"m":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Miscellaneous/Palindrome.html":{"ref":"Miscellaneous/Palindrome.html","tf":0.009009009009009009}}}}}}}}}}}}}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"i":{"docs":{},"d":{"docs":{},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"h":{"docs":{},"e":{"docs":{},"s":{"docs":{},"e":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00141643059490085}}}}}}}}}}}}}}}}}}}}}}}}}},"r":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}}}},"t":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}},"w":{"docs":{},"e":{"docs":{},"r":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0033222591362126247}},"=":{"docs":{},"=":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},")":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}}}}}}}}}}}}},":":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}},"s":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"m":{"docs":{},"o":{"docs":{},"n":{"docs":{},"a":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0022197558268590455}}}}}}}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"e":{"docs":{"Algorithms/Games.html":{"ref":"Algorithms/Games.html","tf":0.05333333333333334}}},"t":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}}},"=":{"docs":{},"l":{"docs":{},"a":{"docs":{},"s":{"docs":{},"t":{"docs":{"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406}}}}}}},"l":{"docs":{"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.010810810810810811}},")":{"docs":{"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406}}},",":{"docs":{"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406}}},"[":{"docs":{},"c":{"docs":{},"_":{"docs":{},"l":{"docs":{},"]":{"docs":{"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406}}}}},"o":{"docs":{},"l":{"docs":{},"]":{"docs":{},")":{"docs":{"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406}}}}}}}}},"r":{"docs":{"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.021621621621621623}},"[":{"docs":{},"c":{"docs":{},"_":{"docs":{},"r":{"docs":{},"]":{"docs":{"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406}}}}},"o":{"docs":{},"l":{"docs":{},"]":{"docs":{"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406}}}}}}}},"g":{"docs":{},"i":{"docs":{},"c":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}}}}},"e":{"docs":{},"v":{"docs":{},"e":{"docs":{},"l":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.012658227848101266},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011976047904191617},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0019801980198019802},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":3.3415300546448083},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0106951871657754}},"w":{"docs":{},"i":{"docs":{},"s":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0019801980198019802},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847}},"e":{"docs":{},",":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809}}}}}}},".":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847}}},"_":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.01092896174863388}}}}}}}}},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}}}}}}},"n":{"docs":{},"(":{"docs":{},"a":{"docs":{},"r":{"docs":{},"r":{"1":{"docs":{},")":{"docs":{"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.005847953216374269}}}},"2":{"docs":{},")":{"docs":{"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.005847953216374269}}}},"3":{"docs":{},")":{"docs":{},":":{"docs":{"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.005847953216374269}}}}},"docs":{},")":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047}},",":{"docs":{"Algorithms/SortingAndHashing.html":{"ref":"Algorithms/SortingAndHashing.html","tf":0.006666666666666667},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}}},"[":{"0":{"docs":{},"]":{"docs":{},")":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}}}},"docs":{}}}},")":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}},":":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488}}}},"[":{"0":{"docs":{},"]":{"docs":{},")":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}}}},"docs":{}}},"f":{"docs":{},")":{"docs":{"Algorithms/SortingAndHashing.html":{"ref":"Algorithms/SortingAndHashing.html","tf":0.013333333333333334}}}},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},")":{"docs":{},")":{"docs":{},":":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.003215434083601286}}}}}}}},"o":{"docs":{},"r":{"docs":{},"e":{"docs":{},"[":{"docs":{},"c":{"docs":{},"]":{"docs":{},")":{"docs":{},")":{"docs":{},":":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343}}}},":":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343}}}}}}}}}}},")":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0032822757111597373},"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.010810810810810811},"Miscellaneous/Palindrome.html":{"ref":"Miscellaneous/Palindrome.html","tf":0.018018018018018018}},":":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00141643059490085}}}}},"b":{"docs":{},"u":{"docs":{},"c":{"docs":{},"k":{"docs":{},"e":{"docs":{},"t":{"docs":{},")":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004398826979472141}}}}}}}},"l":{"docs":{},"o":{"docs":{},"o":{"docs":{},"m":{"docs":{},"d":{"docs":{},"a":{"docs":{},"y":{"docs":{},")":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}}}}}}}}}},")":{"docs":{},":":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488}}}},"o":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{},")":{"docs":{},",":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}}},"[":{"0":{"docs":{},"]":{"docs":{},")":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}}}},"docs":{}}}}}}},"c":{"docs":{},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{},"i":{"docs":{},"d":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"s":{"docs":{},")":{"docs":{},":":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047}}}}}}}}}}}}},"o":{"docs":{},"l":{"docs":{},"o":{"docs":{},"r":{"docs":{},"s":{"docs":{},")":{"docs":{"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406}}}}}}}}},"g":{"docs":{},"r":{"docs":{},"i":{"docs":{},"d":{"docs":{},")":{"docs":{},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.004314994606256742}}}},"[":{"0":{"docs":{},"]":{"docs":{},")":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.004314994606256742}}}}},"docs":{}}}},"a":{"docs":{},"p":{"docs":{},"h":{"docs":{},")":{"docs":{},")":{"docs":{},":":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476}}},"]":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476}}}}}}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"1":{"docs":{},")":{"docs":{"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.005847953216374269}}}},"docs":{},")":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.005145797598627788},"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.011764705882352941},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002188183807439825},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.011834319526627219},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.004329004329004329},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.005970149253731343},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0038535645472061657}},")":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}},":":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047}}},"]":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}},":":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002932551319648094}}},",":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.004329004329004329}}}}}},"t":{"docs":{},"s":{"docs":{},")":{"docs":{},"]":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"_":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"s":{"docs":{},")":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}}}}}}}}}}}},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},")":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}}}}}}}}},"i":{"docs":{},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},")":{"docs":{},")":{"docs":{},":":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}}}}}}}},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"e":{"docs":{},"d":{"docs":{},")":{"docs":{"DataStructures/StacksAndQueues/":{"ref":"DataStructures/StacksAndQueues/","tf":0.01020408163265306}}}}}}}},"o":{"docs":{},"s":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},")":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}}}}}}}}}}},"a":{"docs":{},"t":{"docs":{},"h":{"docs":{},")":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}}}}},"w":{"docs":{},"e":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},"s":{"docs":{},")":{"docs":{},":":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}}}}}}}}}},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},")":{"docs":{},":":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343}}}},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{},"+":{"1":{"docs":{},"]":{"docs":{},")":{"docs":{},":":{"docs":{"Miscellaneous/AlienDictionary.html":{"ref":"Miscellaneous/AlienDictionary.html","tf":0.021739130434782608}}}}}},"docs":{}}}}}}}}},"d":{"docs":{},"p":{"docs":{},")":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}},")":{"docs":{},":":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}},"o":{"docs":{},"b":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"c":{"docs":{},"l":{"docs":{},"e":{"docs":{},"g":{"docs":{},"r":{"docs":{},"i":{"docs":{},"d":{"docs":{},")":{"docs":{"Algorithms/DP/NumSol.html":{"ref":"Algorithms/DP/NumSol.html","tf":0.013888888888888888}}},"[":{"0":{"docs":{},"]":{"docs":{},")":{"docs":{"Algorithms/DP/NumSol.html":{"ref":"Algorithms/DP/NumSol.html","tf":0.013888888888888888}}}}},"docs":{}}}}}}}}}}}}}},"h":{"docs":{},"e":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},")":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.0058823529411764705}}},"s":{"docs":{},")":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}},",":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}}}},"[":{"0":{"docs":{},"]":{"docs":{},")":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}}}},"docs":{}}}}}}},"a":{"docs":{},"p":{"docs":{},")":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.009316770186335404}}}}}}},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},")":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228}}}}}}},"s":{"docs":{},"k":{"docs":{},"s":{"docs":{},")":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}}}}}}},"o":{"docs":{},"p":{"docs":{},"o":{"docs":{},")":{"docs":{"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.007874015748031496}}}}}},")":{"docs":{},")":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}}}}},"r":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},")":{"docs":{},")":{"docs":{},":":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.004329004329004329}}},"]":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.008658008658008658}}}}}}}}}},"o":{"docs":{},"o":{"docs":{},"m":{"docs":{},"s":{"docs":{},")":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907}}}}}}},"e":{"docs":{},"s":{"docs":{},"u":{"docs":{},"l":{"docs":{},"t":{"docs":{},")":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}}}}}}}}},"x":{"docs":{},")":{"docs":{},",":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.005847953216374269}}}}},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"v":{"docs":{},"e":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"a":{"docs":{},"v":{"docs":{},"e":{"docs":{},"s":{"docs":{},")":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0025188916876574307}}}}}}}}}}}}}}}}}},"n":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},")":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}}}}}}}},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"s":{"docs":{},")":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0033222591362126247}}}}}}}}}}}},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"u":{"docs":{},"e":{"docs":{},")":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.01092896174863388},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498},"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}}}}}}},"v":{"docs":{},"i":{"docs":{},"s":{"docs":{},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{},"d":{"docs":{},")":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.008403361344537815}}}}}}}}}},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"s":{"docs":{},")":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}}}}}}}},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"x":{"docs":{},")":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}}}}}}}}},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.003215434083601286},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002932551319648094},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995},"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.005470459518599562},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.009900990099009901},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.008928571428571428},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0028328611898017},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}},")":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.007920792079207921},"Miscellaneous/Palindrome.html":{"ref":"Miscellaneous/Palindrome.html","tf":0.018018018018018018}},":":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0039603960396039604}}}},".":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124}}},"o":{"docs":{},"f":{"docs":{},"l":{"docs":{},"o":{"docs":{},"n":{"docs":{},"g":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124}}}}}}}},"k":{"docs":{},"d":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"i":{"docs":{},"n":{"docs":{},"c":{"docs":{},"t":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124}}}}}}}}}}}}}}}}},"t":{"docs":{},"w":{"docs":{},"o":{"docs":{},"d":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"i":{"docs":{},"n":{"docs":{},"c":{"docs":{},"t":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"f":{"docs":{},"t":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.0058823529411764705},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717},"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":5.0162162162162165},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011976047904191617},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.007556675062972292},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0019801980198019802},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.008879023307436182},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00546448087431694},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.006224066390041493},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.005393743257820928},"Miscellaneous/Palindrome.html":{"ref":"Miscellaneous/Palindrome.html","tf":0.009009009009009009}},"=":{"docs":{},"n":{"docs":{},"o":{"docs":{},"n":{"docs":{},"e":{"docs":{},",":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004439511653718091},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}}}}}}}},"_":{"docs":{},"i":{"docs":{},"d":{"docs":{},"x":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.023529411764705882}},",":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.011764705882352941}}},"t":{"docs":{},"o":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.0058823529411764705}}}}}}},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},",":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228}}}}},"i":{"docs":{},"n":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228}}}}}},"/":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809}}},",":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.005940594059405941},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0022197558268590455},"Miscellaneous/Palindrome.html":{"ref":"Miscellaneous/Palindrome.html","tf":0.009009009009009009},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}},":":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0019801980198019802}}},".":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228}}},"w":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}}}}}}},"a":{"docs":{},"f":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0019801980198019802},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0022197558268590455}},"s":{"docs":{},"i":{"docs":{},"m":{"docs":{},"i":{"docs":{},"l":{"docs":{},"a":{"docs":{},"r":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0025188916876574307}}}}}}}}}}}}}}}},"v":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0025188916876574307},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004439511653718091},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}},"e":{"docs":{},"s":{"docs":{},"/":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0025188916876574307},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0022197558268590455}}},".":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228}}},",":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}}}},"s":{"docs":{},"t":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"s":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0032822757111597373},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}}},"t":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.008771929824561403}}}}},"'":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}}},"x":{"docs":{},"o":{"docs":{},"g":{"docs":{},"r":{"docs":{},"a":{"docs":{},"p":{"docs":{},"h":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}}}}}}}},"i":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.011834319526627219},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}},"b":{"docs":{},"r":{"docs":{},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.012658227848101266}}}}}}},"s":{"docs":{},"t":{"2":{"docs":{},")":{"docs":{"Tricks/":{"ref":"Tricks/","tf":0.004830917874396135}}}},"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.012658227848101266},"Algorithms/":{"ref":"Algorithms/","tf":0.024691358024691357},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":5.011523687580025},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0025188916876574307},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0039603960396039604},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0033222591362126247},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00141643059490085},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414},"Tricks/":{"ref":"Tricks/","tf":0.028985507246376812}},"s":{"docs":{},".":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.012658227848101266}}},",":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678}}},")":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564}}},"/":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0038412291933418692},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}}},":":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}}},"[":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"_":{"docs":{},"i":{"docs":{},"d":{"docs":{},"x":{"docs":{},"]":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0038412291933418692}},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564}}}}}}}}}}}}}}}}}},"[":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"]":{"docs":{},")":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.003215434083601286},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.011695906432748537}}},",":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.003215434083601286},"Miscellaneous/AlienDictionary.html":{"ref":"Miscellaneous/AlienDictionary.html","tf":0.021739130434782608},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}}},":":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0025188916876574307},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0028328611898017}}}}}}},"i":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}},"n":{"docs":{},"t":{"docs":{},"]":{"docs":{},")":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004398826979472141},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.005145797598627788},"DataStructures/StacksAndQueues/":{"ref":"DataStructures/StacksAndQueues/","tf":0.01020408163265306},"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01764705882352941},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.012987012987012988},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.005970149253731343},"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.005847953216374269},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.008298755186721992},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.00674373795761079},"Tricks/":{"ref":"Tricks/","tf":0.004830917874396135}}},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.00686106346483705},"Algorithms/UncommonAlgos.html":{"ref":"Algorithms/UncommonAlgos.html","tf":0.009900990099009901},"DataStructures/StacksAndQueues/":{"ref":"DataStructures/StacksAndQueues/","tf":0.01020408163265306},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00437636761487965},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.008955223880597015},"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.023391812865497075},"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004149377593360996},"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.015151515151515152},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.002890173410404624}}},":":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.008955223880597015},"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.005847953216374269},"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.010810810810810811},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996},"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.005952380952380952},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.007874015748031496},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.004658385093167702},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0033222591362126247},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}},"]":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"[":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"]":{"docs":{},"]":{"docs":{},")":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047},"Algorithms/DP/NumSol.html":{"ref":"Algorithms/DP/NumSol.html","tf":0.013888888888888888},"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.011904761904761904},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.006060606060606061},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.015748031496062992},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.004658385093167702},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.004314994606256742},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.008305647840531562},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}}},":":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004398826979472141},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.008658008658008658},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0019801980198019802},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00546448087431694},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0033222591362126247}}},",":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.008403361344537815},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.007874015748031496},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.004658385093167702},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0049833887043189366}}}}}}}},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"]":{"docs":{},"]":{"docs":{},":":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343}}},")":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.003236245954692557}}},",":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}}}}}}}},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"]":{"docs":{},")":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}}}}}}}}}}}},"n":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609}}},"b":{"docs":{},"o":{"docs":{},"o":{"docs":{},"l":{"docs":{},"]":{"docs":{},")":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228}}},":":{"docs":{"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.007874015748031496}}}}}}}}},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}},":":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809}}},".":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.005121638924455826},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}},"i":{"docs":{},"n":{"docs":{},"s":{"docs":{},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},",":{"docs":{"Tricks/":{"ref":"Tricks/","tf":0.004830917874396135}}}}}}}}}}}}}}}},"/":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.005121638924455826},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0025188916876574307},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0019801980198019802}}},"_":{"docs":{},"i":{"docs":{},"d":{"docs":{},"x":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564}},")":{"docs":{},")":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564}}}}}}}},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0038412291933418692}}},"d":{"docs":{},"i":{"docs":{},"g":{"docs":{},"i":{"docs":{},"t":{"docs":{},")":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564}}}}}}}},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{},"_":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},")":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.003105590062111801}}}}}}}}}}},")":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.008962868117797696}}},",":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.006402048655569782}}},":":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.016645326504481434},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}}}}}}},")":{"docs":{},";":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}},"}":{"docs":{"Tricks/":{"ref":"Tricks/","tf":0.004830917874396135}}}},".":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609}}}},"n":{"docs":{},"k":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.024691358024691357},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":5.019206145966709},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0025188916876574307},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.005940594059405941}}},"e":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228}},"a":{"docs":{},"r":{"docs":{"Algorithms/UncommonAlgos.html":{"ref":"Algorithms/UncommonAlgos.html","tf":0.009900990099009901}}}}}},"t":{"docs":{},"t":{"docs":{},"l":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.003215434083601286}}}}},"m":{"docs":{},"i":{"docs":{},"t":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047},"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.0058823529411764705},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00141643059490085}},"/":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124}}},",":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}},":":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00141643059490085}}}}}},"f":{"docs":{},"t":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}},"e":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}},"k":{"docs":{},"e":{"docs":{},".":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609}}},":":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}}}},"l":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678}}},"a":{"docs":{},"d":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},"/":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.003215434083601286}}},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.003215434083601286}}}}}}}}}}}}}},"s":{"docs":{},",":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}}},":":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.003105590062111801}}}}}}}},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.001962066710268149},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}},"t":{"docs":{},"i":{"docs":{},"m":{"docs":{},"e":{"docs":{},"f":{"docs":{},"r":{"docs":{},"o":{"docs":{},"m":{"docs":{},"d":{"docs":{},"i":{"docs":{},"g":{"docs":{},"i":{"docs":{},"t":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047}}}}}}}}}}}}}}}}}}}}}},"d":{"docs":{},"i":{"docs":{},"v":{"docs":{},"i":{"docs":{},"s":{"docs":{},"i":{"docs":{},"b":{"docs":{},"l":{"docs":{},"e":{"docs":{},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609}}}}}}}}}}}}}}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{},"l":{"docs":{},"e":{"docs":{},"a":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717}}}}}}}}}}}}}}}}}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"b":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Tricks/":{"ref":"Tricks/","tf":0.004830917874396135}}}}}}}}}}}}}}}},"r":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}},"s":{"docs":{},"t":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.002616088947024199},"DataStructures/StacksAndQueues/":{"ref":"DataStructures/StacksAndQueues/","tf":0.01020408163265306},"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.0058823529411764705},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.004329004329004329},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.005970149253731343},"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.016216216216216217},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.011695906432748537},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.002560819462227913},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.010075566750629723},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0019801980198019802},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828},"Tricks/":{"ref":"Tricks/","tf":0.004830917874396135}},"_":{"docs":{},"p":{"docs":{},"o":{"docs":{},"w":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.006872852233676976}},"e":{"docs":{},"r":{"docs":{},"]":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488}}}}}}}},"s":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124}}}}}},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564}}}}}}}}}}},"d":{"docs":{},"a":{"docs":{},"y":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},",":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}}}}}}}}}},"/":{"docs":{},"l":{"docs":{},"a":{"docs":{},"s":{"docs":{},"t":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}},":":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343}}},".":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0025188916876574307}}}}}}}}}},"m":{"docs":{},"b":{"docs":{},"d":{"docs":{},"a":{"docs":{"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.005847953216374269},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.006644518272425249},"Tricks/":{"ref":"Tricks/","tf":0.014492753623188406}},".":{"docs":{"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.005847953216374269},"Tricks/":{"ref":"Tricks/","tf":0.004830917874396135}}}}}}},"b":{"docs":{},"e":{"docs":{},"l":{"docs":{},"/":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}},"s":{"docs":{},":":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}},"/":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0033222591362126247}}}}}}},"y":{"docs":{},"e":{"docs":{},"r":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}},".":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}}}}},"n":{"docs":{},"g":{"docs":{},"u":{"docs":{},"a":{"docs":{},"g":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0064516129032258064}}}}}}}},"s":{"docs":{},"b":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488}}}},",":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.0058823529411764705},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0022197558268590455},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}},"c":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228}},"a":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.003329633740288568}},"d":{"docs":{},"e":{"docs":{},"e":{"docs":{},"p":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"l":{"docs":{},"e":{"docs":{},"a":{"docs":{},"v":{"docs":{},"e":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228}}}}}}}}}}}}}}}}}}}}}}},".":{"docs":{},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{},"m":{"docs":{},"s":{"docs":{},"(":{"docs":{},")":{"docs":{},":":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228}}}}}}}}}},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},".":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},")":{"docs":{"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996}}}}}}}}}}}}}}}}}},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}},":":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}}}}}}}},":":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}}},"_":{"docs":{},"h":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.003329633740288568}},",":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228}}},":":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228}}}},"l":{"docs":{},"c":{"docs":{},"a":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0022197558268590455}}}}}},")":{"docs":{"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.009478672985781991}},":":{"docs":{"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996}}},")":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.003105590062111801}}}},"r":{"docs":{},"u":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}},"n":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.012861736334405145},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.01906158357771261},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.037800687285223365},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.001962066710268149},"Algorithms/UncommonAlgos.html":{"ref":"Algorithms/UncommonAlgos.html","tf":0.019801980198019802},"DataStructures/StacksAndQueues/":{"ref":"DataStructures/StacksAndQueues/","tf":0.01020408163265306},"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.011764705882352941},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.007658643326039387},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.011834319526627219},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.017316017316017316},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.008955223880597015},"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.011695906432748537},"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.021621621621621623},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0038412291933418692},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.005952380952380952},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.010101010101010102},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.007874015748031496},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.005393743257820928},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0049833887043189366},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0056657223796034},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.012524084778420038},"Tricks/":{"ref":"Tricks/","tf":0.004830917874396135}},"o":{"docs":{},"t":{"docs":{},"e":{"docs":{"./":{"ref":"./","tf":0.021739130434782608},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}},"s":{"docs":{},".":{"docs":{},"g":{"docs":{},"i":{"docs":{},"t":{"docs":{"./":{"ref":"./","tf":0.021739130434782608}}}}}},":":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.003215434083601286}}}},":":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.001962066710268149},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062},"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.005847953216374269},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228},"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}},":":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488}}},";":{"docs":{"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062}}},"h":{"docs":{"DataStructures/StacksAndQueues/":{"ref":"DataStructures/StacksAndQueues/","tf":0.01020408163265306},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}},")":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809}},",":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809}}}},"i":{"docs":{},"c":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}}}},"!":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}},",":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}}},".":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}}},"d":{"docs":{},"e":{"1":{"docs":{"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.009478672985781991}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996}}}}}}},"v":{"docs":{"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996}}}},":":{"docs":{"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996}}}},"2":{"docs":{"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996}},")":{"docs":{},":":{"docs":{"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996}}}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},")":{"docs":{"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},")":{"docs":{"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996}}}}}}}},"v":{"docs":{"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996}}}},":":{"docs":{"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996}}}},"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.023047375160051217},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.023952095808383235},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.020151133501259445},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.01782178217821782},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.014428412874583796},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.01366120218579235},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0213903743315508},"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.018957345971563982},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.008298755186721992},"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.015151515151515152},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.008403361344537815},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.014141414141414142},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.015748031496062992},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002157497303128371},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},".":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.002560819462227913},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.005037783375314861},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0039603960396039604},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.006659267480577136},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00546448087431694},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0106951871657754},"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004149377593360996}},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},":":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564}}}}}}},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.007556675062972292},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.007920792079207921},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.003329633740288568},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}},":":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0019801980198019802},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00546448087431694}}},")":{"docs":{},")":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00546448087431694}}}},",":{"docs":{"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.005940594059405941},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}},":":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0025188916876574307},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.005940594059405941},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.003329633740288568},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00546448087431694}}},")":{"docs":{},")":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00546448087431694}}}},"]":{"docs":{"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877}}}}}}}},"v":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.005037783375314861},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0039603960396039604},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.003329633740288568},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}},"a":{"docs":{},"l":{"docs":{},")":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.009900990099009901},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0022197558268590455},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0106951871657754}},":":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0019801980198019802}}}},",":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0039603960396039604},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228}}},"]":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228}},")":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228}}}}}}}},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809}}},"s":{"docs":{},".":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00404040404040404}}},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}},":":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228}}},"]":{"docs":{},")":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228}}}}},",":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0025188916876574307},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.005952380952380952}}},":":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.007556675062972292},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.009900990099009901},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.009988901220865706},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.009478672985781991},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004149377593360996},"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}}},"_":{"docs":{},"b":{"docs":{},"e":{"docs":{},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"e":{"docs":{},"_":{"docs":{},"r":{"docs":{},"e":{"docs":{},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564}}}}}}}}}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0019801980198019802}}}}}}},"p":{"docs":{},"o":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}},"s":{"docs":{},"[":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},".":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"]":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}}}}}}}}}}}}}}},"v":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}},"a":{"docs":{},"l":{"docs":{},"s":{"docs":{},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},".":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},")":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}}}}}}}}}}}}}}}}}}}}}}}},"'":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.010075566750629723},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0019801980198019802},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0022197558268590455}}}}},"n":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0032701111837802484},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.00967741935483871}},"e":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.012804097311139564},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.005037783375314861},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.009900990099009901},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.011098779134295227},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0106951871657754},"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.018957345971563982},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.01867219917012448},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}},":":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047},"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.0058823529411764705},"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.005847953216374269},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.005121638924455826},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0019801980198019802},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}}},",":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564}}},".":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564}}}}},"r":{"docs":{},"m":{"docs":{},"a":{"docs":{},"l":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00141643059490085}},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047}}}}}}}}}}}}}}}}}},"w":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717},"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},",":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0025188916876574307},"Miscellaneous/Palindrome.html":{"ref":"Miscellaneous/Palindrome.html","tf":0.009009009009009009}}}}},"p":{"docs":{},"m":{"docs":{"./":{"ref":"./","tf":0.043478260869565216}}}},"u":{"docs":{},"m":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.003430531732418525},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.010309278350515464},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.002616088947024199},"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.0058823529411764705},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00437636761487965},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.008658008658008658},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.002890173410404624}},"b":{"docs":{},"e":{"docs":{},"r":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678},"Algorithms/SortingAndHashing.html":{"ref":"Algorithms/SortingAndHashing.html","tf":0.013333333333333334},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002932551319648094},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"Algorithms/Games.html":{"ref":"Algorithms/Games.html","tf":0.013333333333333334},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.010309278350515464},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.009810333551340745},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062},"Algorithms/DP/NumSol.html":{"ref":"Algorithms/DP/NumSol.html","tf":5.013888888888889},"Algorithms/UncommonAlgos.html":{"ref":"Algorithms/UncommonAlgos.html","tf":0.009900990099009901},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.004329004329004329},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.02197802197802198},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0056657223796034},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},"'":{"docs":{"Algorithms/SortingAndHashing.html":{"ref":"Algorithms/SortingAndHashing.html","tf":0.006666666666666667}}},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995},"Tricks/":{"ref":"Tricks/","tf":0.004830917874396135}}},"s":{"docs":{},"(":{"docs":{},"a":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{},",":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}},"docs":{}}}},"/":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0019801980198019802}}}}}}},"s":{"1":{"docs":{"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.005847953216374269}},":":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717},"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.005847953216374269}}},"[":{"docs":{},"m":{"docs":{},"_":{"docs":{},"i":{"docs":{},"d":{"docs":{},"x":{"docs":{},"]":{"docs":{"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.011695906432748537}}}}}}}},"r":{"docs":{},"_":{"docs":{},"i":{"docs":{},"d":{"docs":{},"x":{"docs":{},"]":{"docs":{"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.011695906432748537}}}}}}}}}},"2":{"docs":{},":":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717},"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.005847953216374269}}},"[":{"docs":{},"n":{"docs":{},"_":{"docs":{},"i":{"docs":{},"d":{"docs":{},"x":{"docs":{},"]":{"docs":{"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.005847953216374269}},":":{"docs":{"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.005847953216374269}}}}}}}}}}},"docs":{},")":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047}}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002932551319648094}}}}}}}},"r":{"docs":{},"e":{"docs":{},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}}}}}}},":":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004398826979472141},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.00686106346483705},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995},"Algorithms/UncommonAlgos.html":{"ref":"Algorithms/UncommonAlgos.html","tf":0.009900990099009901},"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.011764705882352941},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.006564551422319475},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.008658008658008658},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.005970149253731343},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004149377593360996},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0033222591362126247},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.005780346820809248},"Tricks/":{"ref":"Tricks/","tf":0.004830917874396135}}},"[":{"0":{"docs":{},"]":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}},"1":{"docs":{},":":{"docs":{},"]":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}},"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}},"p":{"docs":{},"o":{"docs":{},"s":{"docs":{},"i":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"]":{"docs":{},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047}}}}}}}}}}},"i":{"docs":{},"v":{"docs":{},"o":{"docs":{},"t":{"docs":{},"_":{"docs":{},"i":{"docs":{},"d":{"docs":{},"x":{"docs":{},"]":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.0058823529411764705}},",":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.0058823529411764705}}}}}}}}}}}}},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"]":{"docs":{},":":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.003430531732418525}}}}}}},"l":{"docs":{},"o":{"docs":{},"w":{"docs":{},"e":{"docs":{},"r":{"docs":{},"]":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}}}}}}},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},"_":{"docs":{},"i":{"docs":{},"d":{"docs":{},"x":{"docs":{},"]":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.0058823529411764705}},",":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.0058823529411764705}}}}}}}}}}}},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},"]":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.005145797598627788}}}}}}}},":":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}},"i":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.001962066710268149},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.004329004329004329},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},"]":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.008658008658008658},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}},")":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}},",":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}},":":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}}}},"+":{"1":{"docs":{},"]":{"docs":{},":":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}},"docs":{}}},"j":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.004329004329004329}},"]":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.008658008658008658},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},")":{"docs":{},"]":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.004329004329004329}},")":{"docs":{},")":{"docs":{},")":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.004329004329004329}}}}}}},",":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.008658008658008658},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}},"r":{"docs":{},"u":{"docs":{},"n":{"docs":{},"n":{"docs":{},"e":{"docs":{},"r":{"docs":{},"]":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.0058823529411764705}}}}}}}}},"k":{"docs":{},"]":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.004329004329004329}},"]":{"docs":{},")":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.004329004329004329}}}}}},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"_":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},"]":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}},":":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}}}}}}}}}}}}},"a":{"docs":{},"b":{"docs":{},"s":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}}}}},")":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}},":":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488}}},"t":{"docs":{},"e":{"docs":{},"a":{"docs":{},"m":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.004329004329004329}}}}}}}}}}}}},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"r":{"docs":{},"s":{"docs":{"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.007874015748031496}},"e":{"docs":{},"s":{"docs":{},")":{"docs":{},":":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}},")":{"docs":{"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.007874015748031496}}}},":":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.007874015748031496}}}}}}}}}},"i":{"docs":{},"s":{"docs":{},"l":{"docs":{},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002157497303128371}}}}}}}}}}}}}}},"e":{"docs":{},"q":{"docs":{},"u":{"docs":{},"i":{"docs":{},"v":{"docs":{},"d":{"docs":{},"o":{"docs":{},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{},"o":{"docs":{},"p":{"docs":{},"a":{"docs":{},"i":{"docs":{},"r":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}}}}}}}}}}}}}}}}}}}},"l":{"docs":{},"l":{"docs":{},",":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564}}},".":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564}}}}},"t":{"docs":{},"s":{"docs":{},":":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}},",":{"docs":{"Algorithms/SortingAndHashing.html":{"ref":"Algorithms/SortingAndHashing.html","tf":0.006666666666666667},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.004329004329004329},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.008403361344537815}}},"e":{"docs":{},"e":{"docs":{},"d":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.003215434083601286},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"Algorithms/Games.html":{"ref":"Algorithms/Games.html","tf":0.02666666666666667},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.004329004329004329},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.005121638924455826},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0025188916876574307},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004439511653718091},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00546448087431694},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.006060606060606061},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.003105590062111801},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0033222591362126247},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0028328611898017},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.002890173410404624},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}}},"x":{"docs":{},"t":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.002616088947024199},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.008955223880597015},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.008962868117797696},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0025188916876574307},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},"_":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"t":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.012861736334405145}}}}}},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.00964630225080386}}}}}}},"p":{"docs":{},"o":{"docs":{},"s":{"docs":{},"i":{"docs":{},"t":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002932551319648094}}}}}},"e":{"docs":{},"r":{"docs":{},"m":{"docs":{},"u":{"docs":{},"t":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}}}}}}}}}}}}}},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717}}}}}}}},":":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717}}},"g":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"e":{"docs":{},"l":{"docs":{},"e":{"docs":{},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717}}}}}}}}}}}}}}}}}}}}}},".":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564}}},"=":{"docs":{},"n":{"docs":{},"o":{"docs":{},"n":{"docs":{},"e":{"docs":{},")":{"docs":{},":":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.005121638924455826}}}}}}}}}}},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}}},"y":{"docs":{},".":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}}}},"i":{"docs":{},"t":{"docs":{},"y":{"docs":{},";":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}}}}}}}}},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00141643059490085},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}},"g":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.003329633740288568},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"v":{"docs":{},"e":{"docs":{},",":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124}}},".":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}}}}}},"l":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}}}}}},"i":{"docs":{"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.016042780748663103},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.007874015748031496}},"g":{"docs":{},"h":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476}},"t":{"docs":{},"b":{"docs":{},"o":{"docs":{},"r":{"docs":{"Algorithms/UncommonAlgos.html":{"ref":"Algorithms/UncommonAlgos.html","tf":0.009900990099009901},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877}}}}}},":":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476}}}}}},"w":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.011881188118811881},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}},"_":{"docs":{},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.005847953216374269}}}}}},"p":{"docs":{},"a":{"docs":{},"t":{"docs":{},"h":{"docs":{},"_":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.005940594059405941}},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"n":{"docs":{},"e":{"docs":{},"w":{"docs":{},"_":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},")":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0019801980198019802}}}}}}}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0039603960396039604}}}}}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0039603960396039604}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0019801980198019802}}}}}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"v":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0033222591362126247}},"a":{"docs":{},"l":{"docs":{},":":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}}}}}}}}}},"s":{"docs":{},"t":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"/":{"docs":{"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576}}}}}}}},"t":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.014164305949008499}},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"k":{"docs":{},"d":{"docs":{},"e":{"docs":{},"l":{"docs":{},"a":{"docs":{},"y":{"docs":{},"t":{"docs":{},"i":{"docs":{},"m":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907}}}}}}}}}}}}}}}}}}}}},",":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0056657223796034}}}},"a":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}}}}}}},")":{"docs":{"Algorithms/UncommonAlgos.html":{"ref":"Algorithms/UncommonAlgos.html","tf":0.009900990099009901},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0028328611898017}},":":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004398826979472141},"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406}}},"]":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.005952380952380952},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00404040404040404}},":":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}},")":{"docs":{"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.007874015748031496}}}},":":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002932551319648094},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"Algorithms/Games.html":{"ref":"Algorithms/Games.html","tf":0.013333333333333334},"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.005847953216374269},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0038412291933418692},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.005952380952380952},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.01680672268907563},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.006060606060606061},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.007874015748031496},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00141643059490085},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0038535645472061657}}},"c":{"docs":{},"r":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002932551319648094}},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"b":{"docs":{},"u":{"docs":{},"c":{"docs":{},"k":{"docs":{},"e":{"docs":{},"t":{"docs":{},"[":{"docs":{},":":{"docs":{},"]":{"docs":{},")":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047}}}}}}}}}}}}}}}}}}}}}},"_":{"docs":{},"i":{"docs":{},"d":{"docs":{},"x":{"docs":{"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.011695906432748537}},",":{"docs":{"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.005847953216374269}}}}}},"d":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907}},",":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907}}}},"e":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}},"s":{"docs":{},",":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}}},"t":{"docs":{},"h":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}},"i":{"docs":{},"c":{"docs":{},"e":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}},".":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}}}},"/":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}},"[":{"0":{"docs":{},"]":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}},"1":{"docs":{},"]":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}},"docs":{}},"a":{"docs":{},"t":{"docs":{},"u":{"docs":{},"r":{"docs":{},"e":{"docs":{},",":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}}}}}}}},"p":{"1":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.017964071856287425}},",":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809}}},".":{"docs":{},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011976047904191617}}}}}}}}}},"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0032822757111597373},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809},"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.023622047244094488},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.003105590062111801},"Tricks/":{"ref":"Tricks/","tf":0.004830917874396135}},"o":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"./":{"ref":"./","tf":0.021739130434782608},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.0058823529411764705},"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.011695906432748537},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.005121638924455826},"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}},"s":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}},":":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.003105590062111801},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}},"e":{"docs":{},"r":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":5.011764705882353},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.005470459518599562},"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.011695906432748537},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.005121638924455826},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0039603960396039604},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},"s":{"docs":{},":":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.0058823529411764705}}}}}}}}},"r":{"docs":{},"t":{"docs":{"./":{"ref":"./","tf":0.021739130434782608}},"s":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}},"s":{"docs":{},"s":{"docs":{},"i":{"docs":{},"b":{"docs":{},"l":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.003215434083601286},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.002616088947024199},"Algorithms/UncommonAlgos.html":{"ref":"Algorithms/UncommonAlgos.html","tf":0.009900990099009901},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.004329004329004329},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00141643059490085}},"e":{"docs":{},":":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.012658227848101266},"Miscellaneous/Palindrome.html":{"ref":"Miscellaneous/Palindrome.html","tf":0.009009009009009009}}},"_":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995}}}}}}}}},";":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}}},".":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}},"i":{"docs":{},"t":{"docs":{},"i":{"docs":{},"e":{"docs":{},"s":{"docs":{},".":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}}}},"i":{"docs":{},"l":{"docs":{},"t":{"docs":{},"i":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}}},"i":{"docs":{},"t":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.00686106346483705},"Algorithms/Games.html":{"ref":"Algorithms/Games.html","tf":0.04},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.04},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.012987012987012988},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002157497303128371}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047}}},"s":{"docs":{},".":{"docs":{"Algorithms/Games.html":{"ref":"Algorithms/Games.html","tf":0.013333333333333334}}},"[":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.004329004329004329}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"]":{"docs":{},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"i":{"docs":{},")":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.004329004329004329}}}}}}}}}}}}}}}}}}}}}},"b":{"docs":{},"l":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}}},"t":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002188183807439825},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564}},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011976047904191617},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0025188916876574307},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":5.002219755826859},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004149377593360996}},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},")":{"docs":{},":":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.006659267480577136}}}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},")":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.006659267480577136}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},")":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.006659267480577136}}}}}}}}}}}}},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},")":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.005549389567147614}}}}}}}},".":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228}},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"_":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.003329633740288568}}}}}}}}}},":":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}}}}}}}}}},"p":{"docs":{"DataStructures/StacksAndQueues/":{"ref":"DataStructures/StacksAndQueues/","tf":0.030612244897959183},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.005970149253731343},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.007082152974504249},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.003215434083601286},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}}}}},"p":{"docs":{},"e":{"docs":{},"d":{"docs":{},":":{"docs":{"DataStructures/StacksAndQueues/":{"ref":"DataStructures/StacksAndQueues/","tf":0.01020408163265306}}},"[":{"docs":{},"k":{"docs":{},"]":{"docs":{"DataStructures/StacksAndQueues/":{"ref":"DataStructures/StacksAndQueues/","tf":0.01020408163265306}},",":{"docs":{"DataStructures/StacksAndQueues/":{"ref":"DataStructures/StacksAndQueues/","tf":0.01020408163265306}}}}}}}}},".":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}}}},"w":{"docs":{},"e":{"docs":{},"r":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0032701111837802484},"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},"_":{"docs":{},"v":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.013745704467353952}},"a":{"docs":{},"l":{"docs":{},":":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488}}}}}}},".":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}},"'":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}},"l":{"docs":{},"y":{"docs":{},"g":{"docs":{},"o":{"docs":{},"n":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}}},"a":{"docs":{},"l":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"r":{"docs":{},"o":{"docs":{},"m":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.012658227848101266},"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.002616088947024199},"Miscellaneous/Palindrome.html":{"ref":"Miscellaneous/Palindrome.html","tf":10.036036036036036}},"e":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}}}}},"r":{"docs":{},"a":{"docs":{},"m":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062}},"e":{"docs":{},"t":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.012658227848101266}},"e":{"docs":{},"r":{"docs":{},",":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047}}}}},"t":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.003215434083601286},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},"i":{"docs":{},"t":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995},"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.0058823529411764705}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}},"(":{"docs":{},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},",":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.0058823529411764705}}}}}}}}},"l":{"docs":{},"a":{"docs":{},"b":{"docs":{},"e":{"docs":{},"l":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}}}}}}}}}}}}}}}},"c":{"docs":{},"u":{"docs":{},"l":{"docs":{},"a":{"docs":{},"r":{"docs":{},"l":{"docs":{},"i":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0025188916876574307}}}}}}}}},"a":{"docs":{},"l":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}},"s":{"docs":{},":":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}},".":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}}}},".":{"docs":{"Tricks/":{"ref":"Tricks/","tf":0.004830917874396135}}}},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00819672131147541},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498},"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.022727272727272728}},"h":{"docs":{},"e":{"docs":{},"s":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00424929178470255}},"e":{"docs":{},"s":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.014164305949008499}}}}},"i":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":10.005665722379604}}}}}},")":{"docs":{"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877}},",":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809}}},":":{"docs":{"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877}}}},".":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.005037783375314861}}}}}}},"s":{"docs":{},"s":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.012658227848101266},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011976047904191617},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0019801980198019802},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0022197558268590455}}}},"t":{"docs":{},"h":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.012658227848101266},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.005232177894048398},"Algorithms/DP/NumSol.html":{"ref":"Algorithms/DP/NumSol.html","tf":0.013888888888888888},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.005037783375314861},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0039603960396039604},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0022197558268590455},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.006060606060606061},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.005393743257820928}},"s":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0025188916876574307}},"d":{"docs":{},"i":{"docs":{},"s":{"docs":{},"c":{"docs":{},"u":{"docs":{},"s":{"docs":{},"s":{"docs":{},"/":{"1":{"0":{"2":{"9":{"9":{"3":{"docs":{},"/":{"docs":{},"p":{"docs":{},"y":{"docs":{},"t":{"docs":{},"h":{"docs":{},"o":{"docs":{},"n":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}},".":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0025188916876574307}}},"u":{"docs":{},"m":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0039603960396039604}}}}}}}}}},":":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.005952380952380952}}}},")":{"docs":{},":":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0025188916876574307},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}},",":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0019801980198019802}}},".":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},".":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},")":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0019801980198019802}}}}}}}}}}}}}}}}}}},"_":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},")":{"docs":{},":":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0019801980198019802}}}},":":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0019801980198019802}}}}}}},"[":{"docs":{},":":{"docs":{},"]":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}}}},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"n":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}},")":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717}}},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"q":{"docs":{},"u":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717}}}}}}}}}}}},"c":{"docs":{},"k":{"docs":{},"a":{"docs":{},"g":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}},"e":{"docs":{},"s":{"docs":{},".":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}}}}}}},"i":{"docs":{},"f":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002157497303128371}},"i":{"docs":{},"c":{"docs":{},"_":{"docs":{},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"u":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}},"e":{"docs":{},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"(":{"0":{"docs":{},",":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}}},"docs":{},"x":{"docs":{},",":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}}}}}}}}}}}}}}}}}},"a":{"docs":{},"t":{"docs":{},"l":{"docs":{},"a":{"docs":{},"n":{"docs":{},"t":{"docs":{},"i":{"docs":{},"c":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}}}}}}}}}}}}}}}}}}},"e":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}},"d":{"docs":{},",":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}},"_":{"docs":{},"i":{"docs":{},"s":{"docs":{},"l":{"docs":{},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"x":{"docs":{},",":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}}}}}}}}}}}}},"r":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995},"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.0058823529411764705},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0038535645472061657}},"s":{"docs":{},"/":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}},"r":{"docs":{},"o":{"docs":{},"b":{"docs":{},"l":{"docs":{},"e":{"docs":{},"m":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.012658227848101266},"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.006430868167202572},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.005145797598627788},"Algorithms/UncommonAlgos.html":{"ref":"Algorithms/UncommonAlgos.html","tf":0.009900990099009901},"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.04},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002188183807439825},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.01775147928994083},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809},"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.015151515151515152},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.005952380952380952},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002157497303128371},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}},"s":{"docs":{},")":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047}}},":":{"docs":{"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00141643059490085}}},"e":{"docs":{},"t":{"docs":{},":":{"docs":{"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576}}}}},".":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907}}},",":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}}},",":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}}},".":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343}}},":":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}},";":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}}}},"a":{"docs":{},"b":{"docs":{},"i":{"docs":{},"l":{"docs":{},"i":{"docs":{},"t":{"docs":{},"y":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}},"l":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564}}}}}},"p":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.0058823529411764705}},"e":{"docs":{},"r":{"docs":{"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476}},"t":{"docs":{},"y":{"docs":{},",":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.012658227848101266}}}},"i":{"docs":{},"e":{"docs":{},"s":{"docs":{},",":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228}}},";":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228}}}}}}},"l":{"docs":{},"i":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}},"y":{"docs":{},".":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}}},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0019801980198019802},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00404040404040404},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}},"e":{"docs":{},"d":{"docs":{},",":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564}}}}},"/":{"docs":{"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576}}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},",":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.003105590062111801}}}}}}}},"e":{"docs":{},"d":{"docs":{},".":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}}}}}},"d":{"docs":{},"u":{"docs":{},"c":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002188183807439825}},"t":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.002616088947024199},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00437636761487965}},",":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"\"":{"docs":{},".":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}}}}}}}}}},"f":{"docs":{},"i":{"docs":{},"t":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.016483516483516484}}}},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}},"a":{"docs":{},"l":{"docs":{},".":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}}}}}}}}}}},"g":{"docs":{},"r":{"docs":{},"a":{"docs":{},"m":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}}}},"o":{"docs":{},"f":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},":":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}},"j":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}},".":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}},"?":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}},"s":{"docs":{},",":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}}}}}}}},"e":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002188183807439825},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.007874015748031496}},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.003430531732418525},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011976047904191617},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":5.001980198019802},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.01037344398340249}},":":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004149377593360996}}},"[":{"docs":{},"f":{"docs":{},"g":{"docs":{},"]":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}}}}},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},"]":{"docs":{},")":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}}}}}}}}}},"(":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"1":{"docs":{},",":{"docs":{"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996}}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},",":{"docs":{"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},",":{"docs":{"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996}}}}}}}}}},"docs":{},",":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0039603960396039604}}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},",":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0039603960396039604}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},",":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0039603960396039604}}}}}}}}}}}}},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},",":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0039603960396039604}}}}}}},"t":{"1":{"docs":{},",":{"docs":{"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996}}}},"docs":{}}},".":{"docs":{},"l":{"docs":{},"o":{"docs":{},"n":{"docs":{},"g":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.005940594059405941}}}}}}}}}}}}}}},"v":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002188183807439825},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.006402048655569782},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}},"i":{"docs":{},"o":{"docs":{},"u":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.004578155657292348},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062},"Algorithms/DP/NumSol.html":{"ref":"Algorithms/DP/NumSol.html","tf":0.013888888888888888},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}},"s":{"docs":{},",":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}},";":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124}}},"_":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00437636761487965}}}},"t":{"docs":{},"e":{"docs":{},"p":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}},"s":{"docs":{},",":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}}}}}}},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.005847953216374269}}}}}}},"k":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}}},",":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0019801980198019802}}},")":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0019801980198019802}}}},"f":{"docs":{},"e":{"docs":{},"r":{"docs":{"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062}},"e":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},".":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}}}}}}},"i":{"docs":{},"x":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.005470459518599562},"Tricks/":{"ref":"Tricks/","tf":0.004830917874396135}},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"f":{"docs":{},"i":{"docs":{},"x":{"docs":{},"[":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124}}}}}}}}}}}}}}}}},"_":{"docs":{},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124}}}},"1":{"docs":{},"]":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124}}}},"docs":{}}}}}}}}},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609}}},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},"]":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609}}}}}}}},"n":{"docs":{},"]":{"docs":{"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.007874015748031496}},".":{"docs":{},"u":{"docs":{},"n":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"(":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"[":{"docs":{},"c":{"docs":{},"]":{"docs":{},".":{"docs":{},"u":{"docs":{},"n":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{},"(":{"docs":{},"[":{"docs":{},"c":{"docs":{},"]":{"docs":{},")":{"docs":{},")":{"docs":{},")":{"docs":{"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.007874015748031496}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"p":{"docs":{},"]":{"docs":{"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.007874015748031496}}}}},"p":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564}},"a":{"docs":{},"r":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}}}},"s":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}}},"c":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}}},"v":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0019801980198019802}}}}},"r":{"docs":{},"e":{"docs":{},"q":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}},".":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"(":{"docs":{},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"r":{"docs":{},"s":{"docs":{},"e":{"docs":{},",":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}}}}}}},"p":{"docs":{},",":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}}}}}}},"[":{"docs":{},"p":{"docs":{},"]":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}}},"u":{"docs":{},"i":{"docs":{},"s":{"docs":{},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{},"s":{"docs":{},":":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00404040404040404},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.031496062992125984}}}}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.002560819462227913}},"e":{"docs":{},"r":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}},"d":{"docs":{},".":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564}}}}},"_":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{},"e":{"docs":{},"s":{"docs":{},"_":{"docs":{},"i":{"docs":{},"n":{"docs":{},"_":{"docs":{},"r":{"docs":{},"e":{"docs":{},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"e":{"docs":{},"(":{"docs":{},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},")":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564}}}}}}}}}}}},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564}}}}}}}}}}}}}}}}}}}}}}}}}}}},"(":{"docs":{},"\"":{"docs":{},">":{"docs":{},">":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}}},"o":{"docs":{},"r":{"docs":{},"i":{"docs":{},"t":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}},"i":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.04},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.008403361344537815},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828},"Tricks/":{"ref":"Tricks/","tf":0.00966183574879227}},"z":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},",":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}}}}}}}}}}},"c":{"docs":{},"e":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}},":":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717}}},",":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}}},"s":{"docs":{},",":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}},"[":{"0":{"docs":{},"]":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}},"docs":{},"i":{"docs":{},"]":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.01098901098901099}},")":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.01098901098901099}}}}}}}}}},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{},"i":{"docs":{},"c":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809},"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576}}}}}}},"u":{"docs":{},"n":{"docs":{},"e":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00141643059490085}},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228}}}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"/":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228}}}}}}}}},"y":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},"t":{"docs":{},"h":{"docs":{},"o":{"docs":{},"n":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.0379746835443038},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124},"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.014218009478672985},"Tricks/":{"ref":"Tricks/","tf":0.004830917874396135}}}}}}},"h":{"docs":{},"o":{"docs":{},"n":{"docs":{},"e":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678}}}}},"a":{"docs":{},"s":{"docs":{},"e":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564}}}}},"y":{"docs":{},"s":{"docs":{},"i":{"docs":{},"c":{"docs":{},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{},"y":{"docs":{},".":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}}}}}}}}}}},"e":{"docs":{},"r":{"docs":{},"m":{"docs":{},"u":{"docs":{},"t":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004398826979472141},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}},"e":{"docs":{},"(":{"docs":{},"b":{"docs":{},"u":{"docs":{},"c":{"docs":{},"k":{"docs":{},"e":{"docs":{},"t":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047}},")":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047}},":":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047}}}}}}}}}},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047}}}}}}}},"u":{"docs":{},"n":{"docs":{},"i":{"docs":{},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047}}}}}}}}}}}}}}},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},"s":{"docs":{},"o":{"docs":{},"l":{"docs":{},"u":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"/":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02}}}}}}}}}}}}}}}}}}}},"f":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0019801980198019802}},"l":{"docs":{},"y":{"docs":{},":":{"docs":{"Algorithms/UncommonAlgos.html":{"ref":"Algorithms/UncommonAlgos.html","tf":0.009900990099009901}}}},"i":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}}}}}},"o":{"docs":{},"r":{"docs":{},"m":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0106951871657754},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}}}}},"s":{"docs":{},"o":{"docs":{},"n":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.00967741935483871}}}}},"t":{"docs":{},"i":{"docs":{},"c":{"docs":{},"u":{"docs":{},"l":{"docs":{},"a":{"docs":{},"r":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}}}}}}}}},"o":{"docs":{},"p":{"docs":{},"l":{"docs":{},"e":{"docs":{},"/":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.0058823529411764705}}}}}}},"e":{"docs":{},"p":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343}}},"r":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}}}},"u":{"docs":{},"b":{"docs":{},"l":{"docs":{},"i":{"docs":{},"c":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002932551319648094}}}}}},"s":{"docs":{},"h":{"docs":{"DataStructures/StacksAndQueues/":{"ref":"DataStructures/StacksAndQueues/","tf":0.030612244897959183},"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.005847953216374269},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.003105590062111801},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0049833887043189366},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0028328611898017},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},"e":{"docs":{},"d":{"docs":{},".":{"docs":{"DataStructures/StacksAndQueues/":{"ref":"DataStructures/StacksAndQueues/","tf":0.01020408163265306},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}}},":":{"docs":{"DataStructures/StacksAndQueues/":{"ref":"DataStructures/StacksAndQueues/","tf":0.01020408163265306}}}}}}},"t":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.0058823529411764705},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}}},"i":{"docs":{},"v":{"docs":{},"o":{"docs":{},"t":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01764705882352941},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.006224066390041493}},".":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}}},"_":{"docs":{},"i":{"docs":{},"d":{"docs":{},"x":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.011764705882352941}}}}}}}}},"c":{"docs":{},"k":{"docs":{},"u":{"docs":{},"p":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995}},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}},"t":{"docs":{},"u":{"docs":{},"r":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}},"e":{"docs":{},"!":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}}},"e":{"docs":{},"c":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},"e":{"docs":{},",":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}},"z":{"docs":{},"z":{"docs":{},"a":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}},"n":{"docs":{},"g":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717}}}}}}}}}},"d":{"docs":{"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576}},":":{"docs":{"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576}}},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576}}}}}}},"l":{"docs":{},"a":{"docs":{},"c":{"docs":{},"e":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062},"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.011764705882352941},"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.005847953216374269},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0019801980198019802},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}},".":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}},"s":{"docs":{},".":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.0058823529411764705}}}}}},"y":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907}},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"s":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}}},"n":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.00967741935483871}},"t":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.008928571428571428}},"e":{"docs":{},"d":{"docs":{},"[":{"docs":{},"i":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.005952380952380952}}},"n":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476}}}}}}}}},"u":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}},"g":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}},"i":{"docs":{},"n":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}}}}}},")":{"docs":{},"}":{"docs":{},",":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"p":{"docs":{},"[":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Tricks/":{"ref":"Tricks/","tf":0.004830917874396135}}}}}}}}}}},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"(":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"t":{"docs":{},"_":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},",":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124}}}}}}}}}}}}}}}},"[":{"docs":{},"y":{"docs":{},"]":{"docs":{},")":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}},"_":{"docs":{},"x":{"docs":{},"]":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124}}}}},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"t":{"docs":{},"_":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},"]":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124}}}}}}}}}}},"i":{"docs":{},"]":{"docs":{},")":{"docs":{},",":{"docs":{"Tricks/":{"ref":"Tricks/","tf":0.004830917874396135}}}}}}},",":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809},"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.015748031496062992}}},":":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228}}},"p":{"docs":{},"i":{"docs":{},"d":{"docs":{},":":{"docs":{"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576}}}}}}},"r":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002932551319648094},"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.0058823529411764705},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.021087680355160933},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855},"Miscellaneous/Palindrome.html":{"ref":"Miscellaneous/Palindrome.html","tf":0.018018018018018018},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414},"Tricks/":{"ref":"Tricks/","tf":0.004830917874396135}},"e":{"docs":{},"p":{"docs":{},"o":{"docs":{"./":{"ref":"./","tf":0.021739130434782608}},"s":{"docs":{},"i":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"i":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0064516129032258064}}}}}}}}},"e":{"docs":{},"t":{"docs":{},"i":{"docs":{},"t":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678},"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.003215434083601286},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047}}},"s":{"docs":{},".":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}},".":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.004329004329004329}}}}}},"o":{"docs":{},"n":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}}}}}},"a":{"docs":{},"t":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.001962066710268149},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.007751937984496124},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002188183807439825},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}},"i":{"docs":{},"t":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047}}}},",":{"docs":{"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062}}}}}},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062}},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476}}}}}}}},"l":{"docs":{},"a":{"docs":{},"c":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0019801980198019802},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00141643059490085}}}}}},"a":{"docs":{},"d":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},"a":{"docs":{},"b":{"docs":{},"l":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.012658227848101266}}}}},"i":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}}},"c":{"docs":{},"h":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.003215434083601286},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995},"DataStructures/StacksAndQueues/":{"ref":"DataStructures/StacksAndQueues/","tf":0.01020408163265306},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0038412291933418692},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907}},"/":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}}}}},"l":{"docs":{},"l":{"docs":{},"i":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.0058823529411764705},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}},"i":{"docs":{},"z":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}}}},"f":{"docs":{},"e":{"docs":{},"r":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.012658227848101266},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.005037783375314861},"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996}},"e":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},":":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047}}},".":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0019801980198019802}}},"s":{"docs":{},",":{"docs":{"Tricks/":{"ref":"Tricks/","tf":0.004830917874396135}}}}}}}}}},"u":{"docs":{},"e":{"docs":{},"l":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}},"l":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}}}}}},"m":{"docs":{},"e":{"docs":{},"m":{"docs":{},"b":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.012658227848101266},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0025188916876574307}},"e":{"docs":{},"r":{"docs":{},":":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717}}}}}},"e":{"docs":{},"b":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}},"o":{"docs":{},"v":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995},"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0025188916876574307},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.006644518272425249},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.015580736543909348}},"e":{"docs":{},"d":{"docs":{},"u":{"docs":{},"p":{"docs":{},"l":{"docs":{},"i":{"docs":{},"c":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/StacksAndQueues/":{"ref":"DataStructures/StacksAndQueues/","tf":0.01020408163265306},"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.0058823529411764705}}}}}}}}}}}}}}}}}},"/":{"docs":{},"a":{"docs":{},"d":{"docs":{},"d":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343}}}}}},")":{"docs":{},".":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564}}}},"n":{"docs":{},"t":{"docs":{},"h":{"docs":{},"f":{"docs":{},"r":{"docs":{},"o":{"docs":{},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564}}}}}}}}}}}}}}}}}},"c":{"docs":{},"o":{"docs":{},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"e":{"docs":{},"d":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}}}}}}}}}}}}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"i":{"docs":{},"d":{"docs":{},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"h":{"docs":{},"e":{"docs":{},"s":{"docs":{},"e":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00141643059490085}}}}}}}}}}}}}}}}}}}}}}}}}},"o":{"docs":{},"u":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"h":{"docs":{},"e":{"docs":{},"s":{"docs":{},"e":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00141643059490085}}}}}}}}}}}}}}}}}}}}}}}}},"a":{"docs":{},"l":{"docs":{},")":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00141643059490085}}},"s":{"docs":{},")":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0056657223796034}},")":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00141643059490085}}},":":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00141643059490085}}}}}}}}},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.002890173410404624}}}}}},"t":{"docs":{},"u":{"docs":{},"r":{"docs":{},"n":{"docs":{"Algorithms/SortingAndHashing.html":{"ref":"Algorithms/SortingAndHashing.html","tf":0.02666666666666667},"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.01929260450160772},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.039589442815249266},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0274442538593482},"Algorithms/Games.html":{"ref":"Algorithms/Games.html","tf":0.013333333333333334},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.027491408934707903},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.001962066710268149},"Algorithms/DP/NumSol.html":{"ref":"Algorithms/DP/NumSol.html","tf":0.013888888888888888},"Algorithms/UncommonAlgos.html":{"ref":"Algorithms/UncommonAlgos.html","tf":0.009900990099009901},"DataStructures/StacksAndQueues/":{"ref":"DataStructures/StacksAndQueues/","tf":0.02040816326530612},"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.011764705882352941},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.007658643326039387},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.008658008658008658},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.005970149253731343},"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.029239766081871343},"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.010810810810810811},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.014619883040935672},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.020486555697823303},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011976047904191617},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.04785894206549118},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.04554455445544554},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.042175360710321866},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.0273224043715847},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0213903743315508},"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.037914691943127965},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.035269709543568464},"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.015151515151515152},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.02976190476190476},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.029411764705882353},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.048484848484848485},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.015748031496062992},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.010869565217391304},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.012944983818770227},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.01098901098901099},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.014950166112956811},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.018413597733711047},"Miscellaneous/AlienDictionary.html":{"ref":"Miscellaneous/AlienDictionary.html","tf":0.08695652173913043},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.017341040462427744},"Tricks/":{"ref":"Tricks/","tf":0.004830917874396135}}}}}},"q":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}},"u":{"docs":{},"i":{"docs":{},"r":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.003215434083601286},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0032822757111597373},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0019801980198019802},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00141643059490085}},"e":{"docs":{},"d":{"docs":{},".":{"docs":{"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.005847953216374269},"Tricks/":{"ref":"Tricks/","tf":0.004830917874396135}}}}}}},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"s":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}}},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0025188916876574307}},"s":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.010263929618768328},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.005121638924455826},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011976047904191617},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0025188916876574307},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},")":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047}}},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564}}},":":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047}}}}},"v":{"docs":{},"e":{"docs":{},":":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564}}}}}},"e":{"docs":{},"(":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},")":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},")":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228}}}}}}}}},":":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228}}}}}}}}}}}},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228}},"/":{"docs":{},"u":{"docs":{},"p":{"docs":{},"d":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228}}}}}}}}},"t":{"docs":{},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{},"l":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717}},"e":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}}},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717}},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},":":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717}}}}}}}}}}}},"i":{"docs":{},"v":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}}}}},"s":{"docs":{},"u":{"docs":{},"l":{"docs":{},"t":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.008797653958944282},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.005145797598627788},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.01718213058419244},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.007751937984496124},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.011834319526627219},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.017316017316017316},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.008955223880597015},"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.017543859649122806},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.008771929824561403},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.005037783375314861},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0039603960396039604},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0022197558268590455},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0106951871657754},"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.006224066390041493},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.005952380952380952},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.006060606060606061},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.009316770186335404},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855},"Miscellaneous/Palindrome.html":{"ref":"Miscellaneous/Palindrome.html","tf":0.009009009009009009},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.014950166112956811},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.009915014164305949},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.002890173410404624}},".":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343}},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"b":{"docs":{},"u":{"docs":{},"c":{"docs":{},"k":{"docs":{},"e":{"docs":{},"t":{"docs":{},"[":{"docs":{},":":{"docs":{},"]":{"docs":{},")":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004398826979472141}}}}}}}}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},"]":{"docs":{},")":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609}}}}}}}}}}}}},"e":{"docs":{},"i":{"docs":{},")":{"docs":{"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877}}}}}},"[":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},",":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.004329004329004329}}}}}}}}}},"x":{"docs":{},",":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.004329004329004329}}}},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},",":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}}}}}}},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{},")":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717}}}}},"docs":{}}}},"docs":{}}}}},"r":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},")":{"docs":{},")":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}}}}}}}}}}},"a":{"docs":{},"r":{"docs":{},"r":{"1":{"docs":{},"[":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},"[":{"docs":{},"'":{"docs":{},"i":{"docs":{},"'":{"docs":{},"]":{"docs":{},"]":{"docs":{},")":{"docs":{"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.005847953216374269}}}}}}}}}}}}}}}},"docs":{}}}},"p":{"docs":{},"a":{"docs":{},"t":{"docs":{},"h":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0025188916876574307}},")":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0019801980198019802}}}}}}},"k":{"docs":{},"e":{"docs":{},"y":{"docs":{},")":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228}}}}}},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},")":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}}}}}}}},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"x":{"docs":{},"[":{"docs":{},"r":{"docs":{},"]":{"docs":{},"[":{"docs":{},"c":{"docs":{},"o":{"docs":{},"l":{"docs":{},"_":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},"]":{"docs":{},")":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}}}}}}}}}}}}}},"o":{"docs":{},"w":{"docs":{},"_":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"]":{"docs":{},"[":{"docs":{},"c":{"docs":{},"]":{"docs":{},")":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}}}}}}}}}}}}}}}}}}}},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{},"r":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},")":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00141643059490085}}}}}}}}}},"'":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}},"t":{"docs":{},")":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}}}}},"d":{"docs":{},"d":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},")":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00141643059490085}}}}}}}}}}}}}},",":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124}}},"[":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0033222591362126247}},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"]":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124}}}}}},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},"]":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124}}}}}}}},":":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"(":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"u":{"docs":{},"l":{"docs":{},"t":{"docs":{},")":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}}}}}}}}}}}}}},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"]":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.005952380952380952},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}}}}},"l":{"docs":{},"a":{"docs":{},"s":{"docs":{},"t":{"docs":{},"_":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"]":{"docs":{},"[":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"]":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}}}}}}}}}}}}}}}}}}}},"_":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.004329004329004329}},"s":{"docs":{},".":{"docs":{},"a":{"docs":{},"d":{"docs":{},"d":{"docs":{},"(":{"docs":{},"t":{"docs":{},"u":{"docs":{},"p":{"docs":{},"l":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{},"e":{"docs":{},"d":{"docs":{},"(":{"docs":{},"[":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},",":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.004329004329004329}}}}}}}}}}}}}}}}}}}}}}}}}}}},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.004329004329004329}}}}}}}},":":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.004329004329004329}}}}},";":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}}}},"t":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}},"l":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}}}}}},"e":{"docs":{},"r":{"docs":{},"v":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564}}}},"t":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0038412291933418692},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809}}}},"p":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}}}}}}},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.005121638924455826},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},"e":{"docs":{},"=":{"docs":{},"t":{"docs":{},"r":{"docs":{},"u":{"docs":{},"e":{"docs":{},")":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343}}}}}}}},".":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.002560819462227913}}},"b":{"docs":{},"e":{"docs":{},"t":{"docs":{},"w":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564}}}}}}}}}}}}}}},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.002560819462227913}}}}}}}}}}}},";":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}}}},"t":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047}}}}},"i":{"docs":{},"s":{"docs":{},"i":{"docs":{},"t":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}}}}},"d":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.002890173410404624}},"u":{"docs":{},"c":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}}},",":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476}}},"]":{"docs":{},")":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476}}}},"_":{"docs":{},"e":{"docs":{},"d":{"docs":{},"g":{"docs":{},"e":{"docs":{},"s":{"docs":{},":":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.005952380952380952}}}}}}}}}},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}},"l":{"docs":{},"a":{"docs":{},"t":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},":":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00404040404040404}}}}}}}}},"i":{"docs":{},"s":{"docs":{},"h":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}}}}}},"u":{"docs":{},"n":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.003215434083601286},"Algorithms/UncommonAlgos.html":{"ref":"Algorithms/UncommonAlgos.html","tf":0.009900990099009901},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0032822757111597373},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.002560819462227913},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002157497303128371},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},"t":{"docs":{},"i":{"docs":{},"m":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.012658227848101266}},"e":{"docs":{},"s":{"docs":{},":":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678}}}},":":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.003215434083601286}}}}}}},"n":{"docs":{},"e":{"docs":{},"r":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.047058823529411764},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.006402048655569782}},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.005121638924455826}}}}}}},")":{"docs":{},",":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}}}}}}},".":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564}}},",":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}}},"l":{"docs":{},"e":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488}}}}},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{"Algorithms/UncommonAlgos.html":{"ref":"Algorithms/UncommonAlgos.html","tf":0.009900990099009901},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847}},"e":{"docs":{},"(":{"0":{"docs":{},",":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.003215434083601286},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004398826979472141},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.017316017316017316},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717},"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.011904761904761904},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}},"1":{"docs":{},",":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.007751937984496124},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.004329004329004329},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}},"2":{"docs":{},")":{"docs":{},"]":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}}},"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"(":{"docs":{},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},")":{"docs":{},")":{"docs":{},":":{"docs":{"Algorithms/SortingAndHashing.html":{"ref":"Algorithms/SortingAndHashing.html","tf":0.006666666666666667}}}}}}}},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},")":{"docs":{},")":{"docs":{},":":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.006430868167202572},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.005847953216374269}}}}}}}}},"d":{"docs":{},"p":{"docs":{},")":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}},")":{"docs":{},":":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}},",":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"2":{"docs":{},")":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717}}}},"docs":{}}}}},"c":{"docs":{},"o":{"docs":{},"l":{"docs":{},"o":{"docs":{},"r":{"docs":{},"s":{"docs":{},")":{"docs":{},")":{"docs":{},"]":{"docs":{"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406}}}}}}}}}}},"g":{"docs":{},"r":{"docs":{},"a":{"docs":{},"p":{"docs":{},"h":{"docs":{},")":{"docs":{},")":{"docs":{},":":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476}}}}}}}}}}}}},",":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}}}},"m":{"docs":{},")":{"docs":{},")":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047}}}},"i":{"docs":{},"n":{"docs":{},"_":{"docs":{},"x":{"docs":{},",":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847}}}}}}}},"n":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}},")":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047}},":":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}}},"i":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.004329004329004329},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}},")":{"docs":{},":":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995}}}}},"k":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}},"x":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}},")":{"docs":{},":":{"docs":{"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062},"Algorithms/DP/NumSol.html":{"ref":"Algorithms/DP/NumSol.html","tf":0.013888888888888888},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002157497303128371}}},"]":{"docs":{"Algorithms/DP/NumSol.html":{"ref":"Algorithms/DP/NumSol.html","tf":0.013888888888888888}}}},"+":{"1":{"docs":{},")":{"docs":{},":":{"docs":{"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062}}},"]":{"docs":{"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062}}}}},"docs":{}},",":{"docs":{"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.007751937984496124}}},"_":{"docs":{},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{},",":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847}}}}}}}},"y":{"docs":{},"+":{"1":{"docs":{},")":{"docs":{},"]":{"docs":{"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062}}}}},"docs":{}},",":{"docs":{"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.007751937984496124}}},")":{"docs":{},":":{"docs":{"Algorithms/DP/NumSol.html":{"ref":"Algorithms/DP/NumSol.html","tf":0.013888888888888888},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002157497303128371}}},"]":{"docs":{"Algorithms/DP/NumSol.html":{"ref":"Algorithms/DP/NumSol.html","tf":0.013888888888888888}}}}},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},",":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.0058823529411764705}}}}}}}},"o":{"docs":{},"f":{"docs":{},"f":{"docs":{},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{},",":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343}}}}}}}}},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},")":{"docs":{},":":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00546448087431694},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498},"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}}}}}},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},",":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}}},"c":{"docs":{},"o":{"docs":{},"l":{"docs":{},"_":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}}}}}}}},"r":{"docs":{},"o":{"docs":{},"w":{"docs":{},"_":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},",":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}}}}}}}}}},".":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}},"s":{"docs":{},"/":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}}}}},"t":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},":":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.004329004329004329}}},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.008658008658008658}}}},"j":{"docs":{},"]":{"docs":{},":":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.004329004329004329}}}}}}}}}}},")":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}},":":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004149377593360996},"Miscellaneous/Palindrome.html":{"ref":"Miscellaneous/Palindrome.html","tf":0.009009009009009009}}}},":":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}}},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"DataStructures/StacksAndQueues/":{"ref":"DataStructures/StacksAndQueues/","tf":0.01020408163265306},"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.0058823529411764705},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002188183807439825},"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":5.010810810810811},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.017964071856287425},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.012594458438287154},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.005940594059405941},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.011098779134295227},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.006224066390041493},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.004314994606256742},"Miscellaneous/Palindrome.html":{"ref":"Miscellaneous/Palindrome.html","tf":0.009009009009009009},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},"=":{"docs":{},"n":{"docs":{},"o":{"docs":{},"n":{"docs":{},"e":{"docs":{},")":{"docs":{},":":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004439511653718091},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}}}}}}}}},".":{"docs":{"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847}}},",":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.005940594059405941}}},":":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0019801980198019802},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002157497303128371}}},";":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228}}},"_":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},",":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228}}}}},"i":{"docs":{},"n":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228}}}}}},"w":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}}}}}}}}},"o":{"docs":{},"t":{"docs":{},"a":{"docs":{},"t":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.003430531732418525},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.005847953216374269},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002157497303128371}},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}}}}}}}}}},"t":{"docs":{},"e":{"docs":{},"n":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}}}}},"b":{"docs":{},"b":{"docs":{},"e":{"docs":{},"r":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.001962066710268149}},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}},"l":{"docs":{},"l":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995}}}},"o":{"docs":{},"t":{"1":{"docs":{},":":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0025188916876574307},"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996}}}},"2":{"docs":{},":":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0025188916876574307},"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996}}}},"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.012594458438287154},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.007920792079207921},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00546448087431694},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.012448132780082987}},".":{"docs":{},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004149377593360996}},")":{"docs":{},":":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0025188916876574307}}}},",":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0019801980198019802}}},":":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228}}}}}}}},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0019801980198019802},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004149377593360996}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},":":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}}}}}}},":":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.015113350125944584},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.02178217821782178},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.01220865704772475},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.01912568306010929},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004149377593360996},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}}},")":{"docs":{},")":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00546448087431694}}},":":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}}}},"_":{"docs":{},"i":{"docs":{},"d":{"docs":{},"x":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004149377593360996}}}}}}},"m":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.011627906976744186}},"s":{"docs":{},"/":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907}}},":":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.008403361344537815}}},"[":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"m":{"docs":{},"]":{"docs":{},":":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907}}}}}}}}},")":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}},",":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}}}},"u":{"docs":{},"t":{"docs":{},"e":{"docs":{},"s":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}},"w":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0019801980198019802},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.003105590062111801},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.003236245954692557}},":":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}}},"_":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}},",":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}}}}},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002157497303128371}},",":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002157497303128371}}},":":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}}}}}}}}}},"_":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002157497303128371}},"i":{"docs":{},"d":{"docs":{},"x":{"docs":{"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.017543859649122806}}}}},"h":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0022197558268590455}},",":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228}}},":":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228}}}},"l":{"docs":{},"c":{"docs":{},"a":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0022197558268590455}}}}},"e":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}},",":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}}},"s":{"docs":{},",":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}}}},".":{"docs":{},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{},"m":{"docs":{},"s":{"docs":{},"(":{"docs":{},")":{"docs":{},":":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228}}}}}}}}}}},"c":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228}}}},"s":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"DataStructures/StacksAndQueues/":{"ref":"DataStructures/StacksAndQueues/","tf":0.01020408163265306},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.004329004329004329},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0039603960396039604},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.008928571428571428},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.007874015748031496},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0033222591362126247},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0028328611898017},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414},"Tricks/":{"ref":"Tricks/","tf":0.004830917874396135}},"e":{"docs":{},"r":{"docs":{},"v":{"docs":{"./":{"ref":"./","tf":0.043478260869565216},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}},"e":{"docs":{},"r":{"docs":{"./":{"ref":"./","tf":0.021739130434782608}}}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"s":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}},"i":{"docs":{},"a":{"docs":{},"l":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}}}}}}}}}}}}}}},"t":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.012658227848101266},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004398826979472141},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.007751937984496124},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002188183807439825},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.008658008658008658},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0025188916876574307},"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.005952380952380952},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.003236245954692557},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00141643059490085}},"(":{"docs":{},"[":{"1":{"docs":{},",":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.005952380952380952}}}},"docs":{},"s":{"docs":{},"o":{"docs":{},"m":{"docs":{},"e":{"docs":{},"t":{"docs":{},"h":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"]":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.012658227848101266}}}}}}}}}}}},"b":{"docs":{},"e":{"docs":{},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"]":{"docs":{},")":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.003215434083601286}}}}}}}}}}}}},"'":{"docs":{},"a":{"docs":{},"'":{"docs":{},",":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488}}}}}},"i":{"docs":{},".":{"docs":{},"v":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228}}}}},"r":{"docs":{},"e":{"docs":{},"d":{"docs":{},",":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476}}}}}}},")":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.006430868167202572},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.004329004329004329},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.002560819462227913},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.012121212121212121},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002157497303128371},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0028328611898017},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},")":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047}}}},"d":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"s":{"docs":{},")":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.003215434083601286}}}}}}}}}}},"r":{"docs":{},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{},"e":{"docs":{},"(":{"0":{"docs":{},",":{"docs":{"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.015748031496062992}}}},"docs":{}}}}}}}},"s":{"docs":{},",":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.012658227848101266}}}},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.012658227848101266}}}}},")":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047}}},":":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0019801980198019802}}},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609}},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.01775147928994083}},":":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609}}}}},"j":{"docs":{},"]":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609}},")":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609}}}}}}}}}},"u":{"docs":{},"p":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0025188916876574307}}}},".":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}}}},"a":{"docs":{},"r":{"docs":{},"c":{"docs":{},"h":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.006430868167202572},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":3.336265884652981},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":5.0102915951972555},"Algorithms/Games.html":{"ref":"Algorithms/Games.html","tf":0.013333333333333334},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995},"Algorithms/UncommonAlgos.html":{"ref":"Algorithms/UncommonAlgos.html","tf":0.009900990099009901},"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02},"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.0058823529411764705},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.004329004329004329},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0025188916876574307},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228},"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004149377593360996},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}},"r":{"docs":{},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}}}}}}}}}}}}},";":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0025188916876574307}}},"(":{"docs":{},"x":{"docs":{},",":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}}}},".":{"docs":{},"v":{"docs":{},"i":{"docs":{},"s":{"docs":{},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{},"d":{"docs":{},".":{"docs":{},"a":{"docs":{},"d":{"docs":{},"d":{"docs":{},"(":{"docs":{},"(":{"docs":{},"x":{"docs":{},",":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}}}}}}}}}}}}}}}}}}}},"t":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}},"e":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476}},"n":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.003215434083601286},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.005952380952380952}},")":{"docs":{},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047}}},":":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047}}}},".":{"docs":{},"a":{"docs":{},"d":{"docs":{},"d":{"docs":{},"(":{"docs":{},"(":{"docs":{},"i":{"docs":{},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047}}}},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},",":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476}}}}}}}}}}}},"d":{"docs":{},"i":{"docs":{},"s":{"docs":{},"c":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{},"(":{"docs":{},"(":{"docs":{},"i":{"docs":{},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047}}}}}}}}}}}}}},":":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476}}}},"k":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}}},"l":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004398826979472141},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.011627906976744186},"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.0058823529411764705},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.003105590062111801},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}},".":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047}}}}}},"f":{"docs":{},".":{"docs":{},"_":{"docs":{},"h":{"docs":{},"e":{"docs":{},"l":{"docs":{},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{},"c":{"docs":{},"o":{"docs":{},"p":{"docs":{},"y":{"docs":{},"p":{"docs":{},"a":{"docs":{},"s":{"docs":{},"t":{"docs":{},"e":{"docs":{},"(":{"docs":{},"n":{"docs":{},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004398826979472141}}}}}}}}}}}}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{},"s":{"docs":{},"e":{"docs":{},"(":{"docs":{},"k":{"docs":{},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047}}}}}}}}}},"s":{"docs":{},"u":{"docs":{},"l":{"docs":{},"t":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.007920792079207921},"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.014218009478672985},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}}}}}},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0019801980198019802},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.005549389567147614},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004149377593360996}}}}}}},"t":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004398826979472141}},":":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047}}},"o":{"docs":{},"t":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.005940594059405941},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228}}}}},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0019801980198019802},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.005549389567147614},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004149377593360996}}}}},"c":{"docs":{},"a":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.006659267480577136}},":":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.006402048655569782},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0019801980198019802},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.005549389567147614},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004149377593360996}},"i":{"docs":{},"d":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.003329633740288568},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00404040404040404}},":":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00404040404040404}}}}}}}},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.005970149253731343}},"[":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717}}}}}}}},"w":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"o":{"docs":{},"w":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.005970149253731343}},"[":{"0":{"docs":{},"]":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717}}}},"docs":{}}}}}}},"a":{"docs":{},"l":{"docs":{},"k":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004439511653718091}}}}}},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.006402048655569782}}}}}},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.005940594059405941}}}}}}}},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.003329633740288568}}}}}}}}}}},"i":{"docs":{},"t":{"docs":{},"i":{"docs":{},"n":{"docs":{},"e":{"docs":{},"r":{"docs":{},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.006060606060606061}}},"y":{"docs":{},":":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}}}}}}}}}}}},"l":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0032701111837802484},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.03296703296703297}},"/":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}}},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"d":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.004329004329004329},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228},"Tricks/":{"ref":"Tricks/","tf":0.004830917874396135},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Tricks/":{"ref":"Tricks/","tf":0.004830917874396135}},")":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609},"Tricks/":{"ref":"Tricks/","tf":0.004830917874396135}}},"s":{"docs":{},".":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476}}}}}}}}},"g":{"docs":{},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"s":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}}},"q":{"docs":{"Miscellaneous/AlienDictionary.html":{"ref":"Miscellaneous/AlienDictionary.html","tf":0.021739130434782608}},"u":{"docs":{},"e":{"docs":{},"n":{"docs":{},"c":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}},"e":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0019801980198019802}}},":":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564}}}}}}}},"[":{"docs":{},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"[":{"docs":{},"j":{"docs":{},"]":{"docs":{},"]":{"docs":{"Miscellaneous/AlienDictionary.html":{"ref":"Miscellaneous/AlienDictionary.html","tf":0.021739130434782608}}}}}},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{},"+":{"1":{"docs":{},"]":{"docs":{},"[":{"docs":{},"j":{"docs":{},"]":{"docs":{},"]":{"docs":{},":":{"docs":{"Miscellaneous/AlienDictionary.html":{"ref":"Miscellaneous/AlienDictionary.html","tf":0.021739130434782608}}}}}}}}},"docs":{}}}}}}}}}}},"n":{"docs":{},"s":{"docs":{},"e":{"docs":{},".":{"docs":{"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062}}}}},"d":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0022197558268590455},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}}},"m":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{"./":{"ref":"./","tf":0.021739130434782608},"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.003215434083601286},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.044596912521440824},"Algorithms/Games.html":{"ref":"Algorithms/Games.html","tf":0.013333333333333334},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0175054704595186},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0019801980198019802},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0106951871657754},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.014522821576763486},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.007874015748031496},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.003236245954692557},"Miscellaneous/Palindrome.html":{"ref":"Miscellaneous/Palindrome.html","tf":0.036036036036036036},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.014950166112956811},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00424929178470255},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0038535645472061657},"Tricks/":{"ref":"Tricks/","tf":0.004830917874396135},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0064516129032258064}},".":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}}},":":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}}},"=":{"1":{"docs":{},")":{"docs":{},":":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.002890173410404624}}}}},"docs":{}},"+":{"1":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124}},")":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002188183807439825}}}},"docs":{}},",":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00437636761487965},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855},"Miscellaneous/Palindrome.html":{"ref":"Miscellaneous/Palindrome.html","tf":0.009009009009009009},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.006644518272425249}}},"_":{"docs":{},"c":{"docs":{},"h":{"docs":{},"a":{"docs":{},"r":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002188183807439825}}}}}}},")":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}}},"s":{"docs":{},".":{"docs":{},"r":{"docs":{},"e":{"docs":{},"m":{"docs":{},"o":{"docs":{},"v":{"docs":{},"e":{"docs":{},"(":{"docs":{},"p":{"docs":{},")":{"docs":{"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.007874015748031496}}}}}}}}}}}},":":{"docs":{"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.015748031496062992}}}}}},"c":{"docs":{},"k":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.007331378299120235},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"DataStructures/StacksAndQueues/":{"ref":"DataStructures/StacksAndQueues/","tf":5.051020408163265},"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.04},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":5.032835820895523},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.010075566750629723},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0169971671388102}},"/":{"docs":{"Algorithms/SortingAndHashing.html":{"ref":"Algorithms/SortingAndHashing.html","tf":0.006666666666666667}},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"u":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.005970149253731343}}}}}}},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"1":{"docs":{},")":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00141643059490085}}}},"docs":{},"s":{"docs":{},")":{"docs":{"DataStructures/StacksAndQueues/":{"ref":"DataStructures/StacksAndQueues/","tf":0.01020408163265306}}}},"n":{"docs":{},")":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717}}}},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{},"r":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00141643059490085}},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},")":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.005037783375314861}}}}}}}}},")":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00141643059490085}}}},"'":{"docs":{},"(":{"docs":{},"'":{"docs":{},")":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00141643059490085}}}}}},"i":{"docs":{},")":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0028328611898017}}}}}}}}}}},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{"DataStructures/StacksAndQueues/":{"ref":"DataStructures/StacksAndQueues/","tf":0.01020408163265306},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.005037783375314861},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0056657223796034}}}}}}}},"[":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.005970149253731343},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0028328611898017}},"l":{"docs":{},"a":{"docs":{},"s":{"docs":{},"t":{"docs":{},"]":{"docs":{"DataStructures/StacksAndQueues/":{"ref":"DataStructures/StacksAndQueues/","tf":0.01020408163265306}}}}}}},":":{"docs":{},"k":{"docs":{},"]":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717}}}}}},"s":{"docs":{},":":{"docs":{"DataStructures/StacksAndQueues/":{"ref":"DataStructures/StacksAndQueues/","tf":0.01020408163265306}}}},")":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00141643059490085}},"]":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0113314447592068}}}},",":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00141643059490085}}},":":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0056657223796034}}}}},"t":{"docs":{},"e":{"docs":{"Algorithms/UncommonAlgos.html":{"ref":"Algorithms/UncommonAlgos.html","tf":0.019801980198019802},"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.005847953216374269},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0019801980198019802},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00141643059490085}},",":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.003215434083601286}}},"[":{"docs":{},":":{"docs":{},"i":{"docs":{},"]":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.003215434083601286}}}}},"i":{"docs":{},"+":{"1":{"docs":{},":":{"docs":{},"]":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.003215434083601286}}}}},"docs":{}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{"Algorithms/UncommonAlgos.html":{"ref":"Algorithms/UncommonAlgos.html","tf":0.009900990099009901}}}}}}}}},":":{"docs":{"Algorithms/UncommonAlgos.html":{"ref":"Algorithms/UncommonAlgos.html","tf":0.009900990099009901},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00141643059490085}}}},"i":{"docs":{},"c":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.007556675062972292},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0019801980198019802},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004149377593360996},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}}},"y":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}},"i":{"docs":{},"r":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}},".":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}},"s":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995}}}}}},"n":{"docs":{},"d":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":5.002923976608187}}}}}}}},"u":{"docs":{},"f":{"docs":{},"f":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.012658227848101266},"Tricks/":{"ref":"Tricks/","tf":0.004830917874396135},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}}},"p":{"docs":{},"i":{"docs":{},"d":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.012658227848101266}}}}},"d":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}},"o":{"docs":{},"c":{"docs":{},"k":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.002616088947024199},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":10.027472527472527}},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}},"s":{"docs":{},"p":{"docs":{},"a":{"docs":{},"n":{"docs":{},"n":{"docs":{},"e":{"docs":{},"r":{"docs":{},":":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717}}}}}}}}}},",":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}},".":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.01098901098901099}}}}},"r":{"docs":{},"e":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.006564551422319475},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.011695906432748537},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0019801980198019802},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0022197558268590455},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00819672131147541},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00404040404040404},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0064516129032258064}},"[":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"2":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"]":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717}}}}}}},"docs":{}}}}},"c":{"docs":{},"]":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343}},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.005847953216374269}}}}}}},"h":{"docs":{},"]":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228}}}},"s":{"docs":{},"]":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}}}},"(":{"docs":{},"f":{"docs":{},",":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}},",":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343}}},".":{"docs":{},"a":{"docs":{},"d":{"docs":{},"d":{"docs":{},"(":{"docs":{},"f":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"e":{"docs":{},"r":{"docs":{},"p":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},")":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343}}}}}}}}}}}}}}}}}},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"(":{"docs":{},"c":{"docs":{},",":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343}}},"i":{"docs":{},"t":{"docs":{},"y":{"docs":{},",":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}}}}}}},"h":{"docs":{},",":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228}}}},"s":{"docs":{},",":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}}}},"(":{"docs":{},"f":{"docs":{},",":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}}}},"s":{"docs":{},",":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{},"e":{"docs":{},"s":{"docs":{},"(":{"docs":{},")":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228}}}}}}}}}}},":":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.005847953216374269}}},";":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228}}},"_":{"docs":{},"o":{"docs":{},"b":{"docs":{},"j":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"_":{"docs":{},"i":{"docs":{},"d":{"docs":{},"x":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}}}}}}}}},"a":{"docs":{},"g":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}},"n":{"docs":{},"e":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}},"s":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}},"p":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.002890173410404624},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0064516129032258064}},"s":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}}}}}},"r":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004149377593360996}},"e":{"docs":{},"a":{"docs":{},"m":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678}},"/":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678}}}},"k":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.003430531732418525}}}},"t":{"docs":{},"c":{"docs":{},"h":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0033222591362126247}}}}}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678},"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.003215434083601286},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002932551319648094},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.001962066710268149},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.007751937984496124},"DataStructures/Strings/":{"ref":"DataStructures/Strings/","tf":11},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.008771929824561403},"Miscellaneous/Palindrome.html":{"ref":"Miscellaneous/Palindrome.html","tf":0.018018018018018018},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.009915014164305949},"Tricks/":{"ref":"Tricks/","tf":0.00966183574879227}},"s":{"docs":{},",":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678}}},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.001962066710268149},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343}}},":":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.005847953216374269}}}},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.002616088947024199},"DataStructures/StacksAndQueues/":{"ref":"DataStructures/StacksAndQueues/","tf":0.01020408163265306},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00141643059490085}},"p":{"docs":{},"r":{"docs":{},"o":{"docs":{},"b":{"docs":{},"l":{"docs":{},"e":{"docs":{},"m":{"docs":{},"?":{"docs":{},"i":{"docs":{},"s":{"docs":{},"f":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"=":{"docs":{},"f":{"docs":{},"a":{"docs":{},"l":{"docs":{},"s":{"docs":{"Algorithms/SortingAndHashing.html":{"ref":"Algorithms/SortingAndHashing.html","tf":0.006666666666666667}}}}}}}}}}}}}}}}}}}}}}}}}}}},".":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00141643059490085}}},",":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0028328611898017}}}}},"c":{"docs":{},"t":{"docs":{},"l":{"docs":{},"i":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124}}}}}},"k":{"docs":{},"e":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}}}},"(":{"docs":{},"(":{"docs":{},"w":{"docs":{},"h":{"docs":{},"e":{"docs":{},"e":{"docs":{},"l":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.003215434083601286}}}}}}}},"d":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},")":{"docs":{},")":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047}}}}}}},"i":{"docs":{},"f":{"docs":{},"f":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343}}}}}},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},".":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},")":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.005037783375314861}},")":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0025188916876574307}}}}}}}}}}}},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},")":{"docs":{},")":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}}}}},"u":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{},")":{"docs":{},"]":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}}}}}}}},")":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.003215434083601286},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.006872852233676976},"DataStructures/StacksAndQueues/":{"ref":"DataStructures/StacksAndQueues/","tf":0.01020408163265306},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0032822757111597373},"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855},"Miscellaneous/Palindrome.html":{"ref":"Miscellaneous/Palindrome.html","tf":0.02702702702702703},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0084985835694051},"Miscellaneous/AlienDictionary.html":{"ref":"Miscellaneous/AlienDictionary.html","tf":0.021739130434782608},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}},",":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.006430868167202572},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002188183807439825},"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}},":":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488},"DataStructures/StacksAndQueues/":{"ref":"DataStructures/StacksAndQueues/","tf":0.01020408163265306},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343},"Miscellaneous/Palindrome.html":{"ref":"Miscellaneous/Palindrome.html","tf":0.009009009009009009},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0028328611898017},"Tricks/":{"ref":"Tricks/","tf":0.004830917874396135}}},"a":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"w":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}}}}}}}},"s":{"docs":{},":":{"docs":{"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.007751937984496124}}}},"u":{"docs":{},"c":{"docs":{},"t":{"docs":{},"u":{"docs":{},"r":{"docs":{},"e":{"docs":{},":":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.0058823529411764705},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717}}},".":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}},"s":{"docs":{},".":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}}}}}},"e":{"docs":{},"p":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.012861736334405145},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002932551319648094},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.001962066710268149},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.008658008658008658},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228},"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.004314994606256742},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.004816955684007707}},"s":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}},",":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}}},":":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0025188916876574307}}},";":{"docs":{"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877}}},".":{"docs":{"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}}},"?":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}}}},"i":{"docs":{},"c":{"docs":{},"k":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}},"t":{"docs":{},"c":{"docs":{},"h":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}}}},"y":{"docs":{},"l":{"docs":{},"e":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}}}}}},"o":{"docs":{},"l":{"docs":{},"v":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.012658227848101266},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995},"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.009478672985781991},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476}}},"u":{"docs":{},"t":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.003215434083601286},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004398826979472141},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.005145797598627788},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.004578155657292348},"Algorithms/DP/NumSol.html":{"ref":"Algorithms/DP/NumSol.html","tf":5.013888888888889},"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.0058823529411764705},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228},"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.008928571428571428},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.004314994606256742},"Miscellaneous/Palindrome.html":{"ref":"Miscellaneous/Palindrome.html","tf":0.009009009009009009},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0033222591362126247},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0028328611898017},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},":":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.00964630225080386},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.007331378299120235},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0137221269296741},"Algorithms/Games.html":{"ref":"Algorithms/Games.html","tf":0.013333333333333334},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.010309278350515464},"Algorithms/DP/NumSol.html":{"ref":"Algorithms/DP/NumSol.html","tf":0.013888888888888888},"Algorithms/UncommonAlgos.html":{"ref":"Algorithms/UncommonAlgos.html","tf":0.009900990099009901},"DataStructures/StacksAndQueues/":{"ref":"DataStructures/StacksAndQueues/","tf":0.02040816326530612},"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01764705882352941},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.009846827133479213},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.012987012987012988},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.01791044776119403},"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.011695906432748537},"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.010810810810810811},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.014619883040935672},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.012804097311139564},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.012594458438287154},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.015841584158415842},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.01220865704772475},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.01366120218579235},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.014218009478672985},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.01037344398340249},"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.011904761904761904},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.012605042016806723},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.010101010101010102},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.015748031496062992},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.013975155279503106},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.009708737864077669},"Miscellaneous/Palindrome.html":{"ref":"Miscellaneous/Palindrome.html","tf":0.02702702702702703},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.016611295681063124},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.009915014164305949},"Miscellaneous/AlienDictionary.html":{"ref":"Miscellaneous/AlienDictionary.html","tf":0.021739130434782608},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.014450867052023121},"Tricks/":{"ref":"Tricks/","tf":0.004830917874396135}}},"s":{"docs":{},":":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.003215434083601286}}}},".":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047},"Algorithms/UncommonAlgos.html":{"ref":"Algorithms/UncommonAlgos.html","tf":0.019801980198019802},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124},"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809}}},",":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809}}},"(":{"docs":{},"o":{"docs":{},"b":{"docs":{},"j":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},")":{"docs":{},":":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}}}}}}}}}}}}}},"d":{"docs":{},"i":{"docs":{},"e":{"docs":{},"r":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.004658385093167702}},"s":{"docs":{},",":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}}}}}}}}},"m":{"docs":{},"e":{"docs":{},"h":{"docs":{},"o":{"docs":{},"w":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.003430531732418525}},".":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.012658227848101266}}}}}},"w":{"docs":{},"h":{"docs":{},"e":{"docs":{},"r":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.003215434083601286}}}}}},"t":{"docs":{},"i":{"docs":{},"m":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0019801980198019802},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0022197558268590455},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}},"e":{"docs":{},"s":{"docs":{},",":{"docs":{"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.007751937984496124},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877}}}}}}},"h":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},",":{"docs":{"DataStructures/StacksAndQueues/":{"ref":"DataStructures/StacksAndQueues/","tf":0.01020408163265306},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}}},";":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717}}}}},"r":{"docs":{},"t":{"docs":{"Algorithms/SortingAndHashing.html":{"ref":"Algorithms/SortingAndHashing.html","tf":5.006666666666667},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.00686106346483705},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.002616088947024199},"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.04},"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.0058823529411764705},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.004329004329004329},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717},"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.011695906432748537},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0038412291933418692},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.005037783375314861},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.01092896174863388},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":5.0078740157480315},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.003105590062111801},"Miscellaneous/Palindrome.html":{"ref":"Miscellaneous/Palindrome.html","tf":0.009009009009009009},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.011627906976744186},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828},"Tricks/":{"ref":"Tricks/","tf":0.033816425120772944}},"e":{"docs":{},"d":{"docs":{},"(":{"docs":{},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},")":{"docs":{"Algorithms/SortingAndHashing.html":{"ref":"Algorithms/SortingAndHashing.html","tf":0.006666666666666667}}}}},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},")":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.004329004329004329}}}}}}},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"s":{"docs":{},",":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343}}}}}}}},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{},"r":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"_":{"docs":{},"r":{"docs":{},"o":{"docs":{},"w":{"docs":{},"[":{"docs":{},"x":{"docs":{},"]":{"docs":{},")":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847}}}}}}}}}}}}}}}},"o":{"docs":{},"u":{"docs":{},"r":{"docs":{},"s":{"docs":{},"e":{"docs":{},"s":{"docs":{},",":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}}}}}}}}}},"x":{"docs":{},")":{"docs":{},"]":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847}}}},".":{"docs":{},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{},"m":{"docs":{},"s":{"docs":{},"(":{"docs":{},")":{"docs":{},",":{"docs":{"Tricks/":{"ref":"Tricks/","tf":0.004830917874396135}}}}}}}}}}}},"g":{"docs":{},"r":{"docs":{},"a":{"docs":{},"p":{"docs":{},"h":{"docs":{},"[":{"docs":{},"s":{"docs":{},"]":{"docs":{},")":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}}}}}}}}},"[":{"docs":{},"[":{"docs":{},"t":{"docs":{},"a":{"docs":{},"s":{"docs":{},"k":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{},",":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}}}}},"docs":{}}}}}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"s":{"docs":{},",":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.006644518272425249}}}}}}}}}}}},"p":{"docs":{},"o":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"s":{"docs":{},",":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}}}}}}},"s":{"docs":{},"l":{"docs":{},"o":{"docs":{},"t":{"docs":{},"s":{"1":{"docs":{},")":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}},"2":{"docs":{},")":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}},"docs":{}}}}}},"h":{"docs":{},"o":{"docs":{},"r":{"docs":{},"i":{"docs":{},"z":{"docs":{},"o":{"docs":{},"n":{"docs":{},"t":{"docs":{},"a":{"docs":{},"l":{"docs":{},"c":{"docs":{},"u":{"docs":{},"t":{"docs":{},"s":{"docs":{},")":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}}}}}}}}}}}},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{},"i":{"docs":{},"c":{"docs":{},"a":{"docs":{},"l":{"docs":{},"c":{"docs":{},"u":{"docs":{},"t":{"docs":{},"s":{"docs":{},")":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}}}}}}}}}},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},",":{"docs":{"Tricks/":{"ref":"Tricks/","tf":0.004830917874396135}}}}}}}},";":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}}}}},".":{"docs":{"Algorithms/UncommonAlgos.html":{"ref":"Algorithms/UncommonAlgos.html","tf":0.009900990099009901}}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},",":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00546448087431694}}}}}},":":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}},",":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.002560819462227913},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00141643059490085}}},"f":{"docs":{},"t":{"docs":{},"w":{"docs":{},"a":{"docs":{},"r":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0064516129032258064}}}}}}}},"p":{"docs":{},"i":{"docs":{},"r":{"docs":{},"a":{"docs":{},"l":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678}},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}}}}}}}}}}}}}}}},"a":{"docs":{},"c":{"docs":{},"e":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}}},"n":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124}},"/":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717}}}}},"e":{"docs":{},"l":{"docs":{},"l":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}},"l":{"docs":{},"i":{"docs":{},"t":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}}}}}}},"u":{"docs":{},"m":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002932551319648094},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.011772400261608895},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.012035010940919038},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.01775147928994083},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.008658008658008658},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0025188916876574307},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0039603960396039604},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0022197558268590455},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0028328611898017},"Tricks/":{"ref":"Tricks/","tf":0.004830917874396135}},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124}}},"/":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.007848266841072597},"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.0058823529411764705},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002188183807439825},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0022197558268590455},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847}},"d":{"docs":{},"i":{"docs":{},"s":{"docs":{},"c":{"docs":{},"u":{"docs":{},"s":{"docs":{},"s":{"docs":{},"/":{"1":{"6":{"5":{"1":{"0":{"docs":{},"/":{"docs":{},"p":{"docs":{},"y":{"docs":{},"t":{"docs":{},"h":{"docs":{},"o":{"docs":{},"n":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047}}}}}}}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"2":{"9":{"9":{"0":{"4":{"9":{"docs":{},"/":{"docs":{},"d":{"docs":{},"p":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"4":{"5":{"5":{"0":{"2":{"4":{"docs":{},"/":{"docs":{},"d":{"docs":{},"p":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}},":":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.007920792079207921}}},"(":{"docs":{},"i":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}}},"x":{"docs":{},"i":{"docs":{"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062}}}},"y":{"docs":{},"i":{"docs":{"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},")":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124}}}}}}},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},")":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00141643059490085}}}}}}}}},"_":{"docs":{},"w":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.005145797598627788}}},"p":{"docs":{},"o":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002188183807439825},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.004329004329004329}},"s":{"docs":{},":":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.004329004329004329}}},"[":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.004329004329004329}},"p":{"docs":{},"]":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124}}}}}}}},"s":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124}},"e":{"docs":{},":":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002188183807439825}}},"[":{"docs":{},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{},"r":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"_":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},"]":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124}}}}}}}}}}}}}},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"v":{"docs":{},"_":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},"]":{"docs":{},")":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124}}}}}}}}}}}}}}}}}},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{},"_":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"b":{"docs":{},"e":{"docs":{},"r":{"docs":{},"_":{"docs":{},"o":{"docs":{},"f":{"docs":{},"_":{"docs":{},"e":{"docs":{},"l":{"docs":{},"e":{"docs":{},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"s":{"docs":{},"(":{"docs":{},"x":{"docs":{},",":{"docs":{"Tricks/":{"ref":"Tricks/","tf":0.004830917874396135}}}}}}}}}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},":":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002188183807439825}}},"[":{"docs":{},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{},"r":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124}},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"]":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124}}}}}}}}}},"l":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0022197558268590455}}}},".":{"docs":{},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{},"m":{"docs":{},"s":{"docs":{},"(":{"docs":{},")":{"docs":{},":":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228}}}}}}}}}}}},".":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.004329004329004329}}},"o":{"docs":{},"f":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},"l":{"docs":{},"e":{"docs":{},"a":{"docs":{},"v":{"docs":{},"e":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0025188916876574307}}}}}}}}}}}}}}}}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"b":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0019801980198019802}}}}}}}}}}}}}}}},"b":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.003215434083601286},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.006872852233676976},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00437636761487965},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124},"Miscellaneous/Palindrome.html":{"ref":"Miscellaneous/Palindrome.html","tf":0.009009009009009009}}},"s":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343}}}}}}},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}}}}},"u":{"docs":{},"c":{"docs":{},"t":{"docs":{},"u":{"docs":{},"r":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002157497303128371}}}}}}}},"i":{"docs":{},"t":{"docs":{},"u":{"docs":{},"t":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00141643059490085}}}}}}},"e":{"docs":{},"t":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":10}},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609}},"d":{"docs":{},"i":{"docs":{},"s":{"docs":{},"c":{"docs":{},"u":{"docs":{},"s":{"docs":{},"s":{"docs":{},"/":{"8":{"4":{"0":{"0":{"6":{"docs":{},"/":{"docs":{},"c":{"docs":{},"l":{"docs":{},"a":{"docs":{},"s":{"docs":{},"s":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609}}}}}}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}},"s":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"s":{"docs":{},"q":{"docs":{},"u":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609}}}}}}}}}}},"q":{"docs":{},"u":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.001962066710268149},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343}},"e":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.005886200130804447},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717}}},"s":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.001962066710268149}}},".":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124}}}},",":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609}}}}}}}}}}},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},"a":{"docs":{},"y":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.001962066710268149},"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.0058823529411764705},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":10.025164113785557}},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.002616088947024199},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124}}},"s":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995}}},",":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124}}},":":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002188183807439825}}},"u":{"docs":{},"m":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124}}}}}}}}}}}}}}}},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"c":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.001962066710268149}}}}}}}},"t":{"docs":{},"r":{"docs":{},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}},"e":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.003329633740288568},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004149377593360996},"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576}},"e":{"docs":{},".":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228}}}}}},"l":{"docs":{"DataStructures/StacksAndQueues/":{"ref":"DataStructures/StacksAndQueues/","tf":0.01020408163265306}}}},"d":{"docs":{},"o":{"docs":{},"m":{"docs":{},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}}}}}}},"j":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}}}}}},"c":{"docs":{},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00141643059490085}}}}}},"h":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}},"f":{"docs":{},"f":{"docs":{},"i":{"docs":{},"c":{"docs":{},"i":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"e":{"docs":{},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}}}},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}}}}},"p":{"docs":{},"o":{"docs":{},"s":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}},"r":{"docs":{},"t":{"docs":{"Miscellaneous/Palindrome.html":{"ref":"Miscellaneous/Palindrome.html","tf":0.009009009009009009}}}}}}},"r":{"docs":{},"e":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0025188916876574307},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}},":":{"docs":{"Algorithms/SortingAndHashing.html":{"ref":"Algorithms/SortingAndHashing.html","tf":0.006666666666666667},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488},"DataStructures/StacksAndQueues/":{"ref":"DataStructures/StacksAndQueues/","tf":0.02040816326530612},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00437636761487965},"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.005847953216374269},"Miscellaneous/Palindrome.html":{"ref":"Miscellaneous/Palindrome.html","tf":0.02702702702702703},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.009915014164305949},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}}},"w":{"docs":{},"a":{"docs":{},"p":{"docs":{"Algorithms/SortingAndHashing.html":{"ref":"Algorithms/SortingAndHashing.html","tf":0.03333333333333333},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.011764705882352941},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}},":":{"docs":{"Algorithms/SortingAndHashing.html":{"ref":"Algorithms/SortingAndHashing.html","tf":0.006666666666666667}}},"p":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},".":{"docs":{"Algorithms/SortingAndHashing.html":{"ref":"Algorithms/SortingAndHashing.html","tf":0.006666666666666667}}}}}}},".":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488}}}}}},"h":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.003215434083601286}},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.003215434083601286}}}}}},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.003215434083601286}},"s":{"docs":{},":":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.003215434083601286}}}}}}}},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}},"d":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},"c":{"docs":{},"o":{"docs":{},"l":{"docs":{},"o":{"docs":{},"r":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406}}}}}}}}}}}}}}}}}}}}},"t":{"docs":{},"o":{"docs":{},"c":{"docs":{},"h":{"docs":{},"a":{"docs":{},"r":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406}}}}}}}}}}}}}},"a":{"docs":{},"l":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"n":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"p":{"docs":{},"a":{"docs":{},"t":{"docs":{},"h":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476}}}}}}}}}}}}}}}}}}}}}}}},"b":{"docs":{},"r":{"docs":{},"i":{"docs":{},"d":{"docs":{},"g":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}}}}}}}}}}}}},"p":{"docs":{},"a":{"docs":{},"t":{"docs":{},"h":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}}}}}}}}}}}}}}}},"w":{"docs":{},"c":{"docs":{},"a":{"docs":{},"s":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}},"u":{"docs":{},"d":{"docs":{},"n":{"docs":{},"'":{"docs":{},"t":{"docs":{"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062}}}}}},"l":{"docs":{},"d":{"docs":{},"n":{"docs":{},"'":{"docs":{},"t":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}}}}}}},"e":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}},"p":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0064516129032258064}}}},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}}},"l":{"docs":{},"v":{"docs":{},"e":{"docs":{},"s":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}},"i":{"docs":{},"p":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}},"w":{"docs":{},"i":{"docs":{},"t":{"docs":{},"h":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"a":{"docs":{},"y":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}}}}}}}}}}}}}}}}}}},"f":{"docs":{},"t":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343}}}}},"a":{"docs":{},"r":{"docs":{},"e":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.016483516483516484}}}}}},"l":{"docs":{},"o":{"docs":{},"w":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.005121638924455826}},"e":{"docs":{},"r":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.003215434083601286},"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.0058823529411764705}}}},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.002560819462227913}},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564}}}}}}}}}}}}},"t":{"docs":{},"s":{"1":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}},":":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"[":{"1":{"docs":{},"]":{"docs":{},":":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}}},"docs":{}}}}}},"2":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}},":":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}},"docs":{},"_":{"docs":{},"a":{"docs":{},"v":{"docs":{},"a":{"docs":{},"i":{"docs":{},"l":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}}}}}}}}}}},"i":{"docs":{},"c":{"docs":{},"e":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Miscellaneous/Palindrome.html":{"ref":"Miscellaneous/Palindrome.html","tf":0.009009009009009009}},"s":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995}}}},"+":{"1":{"docs":{},";":{"docs":{"Tricks/":{"ref":"Tricks/","tf":0.004830917874396135}}}},"docs":{}}}},"d":{"docs":{},"e":{"docs":{"Algorithms/UncommonAlgos.html":{"ref":"Algorithms/UncommonAlgos.html","tf":0.019801980198019802},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.005470459518599562},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.005970149253731343},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343}}}},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},"l":{"docs":{},"i":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847}}}}}}}}},"a":{"docs":{},"m":{"docs":{},"e":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002932551319648094},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"Algorithms/Games.html":{"ref":"Algorithms/Games.html","tf":0.013333333333333334},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.002616088947024199},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062},"Algorithms/UncommonAlgos.html":{"ref":"Algorithms/UncommonAlgos.html","tf":0.009900990099009901},"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.005847953216374269},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.003329633740288568},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00546448087431694},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414},"Tricks/":{"ref":"Tricks/","tf":0.004830917874396135}},".":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.006872852233676976}}},",":{"docs":{"Miscellaneous/Palindrome.html":{"ref":"Miscellaneous/Palindrome.html","tf":0.009009009009009009}}}},"p":{"docs":{},"l":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576}}}}},"t":{"docs":{},"i":{"docs":{},"s":{"docs":{},"f":{"docs":{},"i":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.005470459518599562},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0025188916876574307},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0019801980198019802},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}},"e":{"docs":{},"d":{"docs":{},".":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124}}}}}}}},"f":{"docs":{},"i":{"docs":{},"e":{"docs":{},"s":{"docs":{},")":{"docs":{},"*":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124}}}}}}}}}},"y":{"docs":{},",":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}},"v":{"docs":{},"e":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.0058823529411764705},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.004329004329004329},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}}},"c":{"docs":{"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406}},"e":{"docs":{},"n":{"docs":{},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{},"o":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047}},"s":{"docs":{},":":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717}}}}}}}}}},"h":{"docs":{},"e":{"docs":{},"d":{"docs":{},"u":{"docs":{},"l":{"docs":{"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.015748031496062992},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},"e":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"r":{"docs":{},"s":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}}}}}}}}}}}}}},"r":{"docs":{},"/":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0033222591362126247},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}}},"m":{"docs":{},"e":{"docs":{},"s":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}},"o":{"docs":{},"o":{"docs":{},"l":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}}}}},"o":{"docs":{},"r":{"docs":{},"e":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.001962066710268149}},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995}}},"o":{"docs":{},"f":{"docs":{},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"h":{"docs":{},"e":{"docs":{},"s":{"docs":{},"e":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00141643059490085}}}}}}}}}}}}}}}}}}}}}}}},"a":{"docs":{},"l":{"docs":{},"e":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}}},"t":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}}}}}},"i":{"docs":{},"e":{"docs":{},"n":{"docs":{},"c":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}}}}}},"i":{"docs":{},"m":{"docs":{},"i":{"docs":{},"l":{"docs":{},"a":{"docs":{},"r":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002932551319648094},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.002616088947024199},"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0025188916876574307},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0019801980198019802},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.01098901098901099},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}},"l":{"docs":{},"y":{"docs":{},",":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}}}}}}}},"u":{"docs":{},"l":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124}},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}},"s":{"docs":{},"o":{"docs":{},"l":{"docs":{},"u":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"/":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}}}}}}}}}}}}}},"p":{"docs":{},"l":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00141643059490085},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}},"i":{"docs":{},"f":{"docs":{},"i":{"docs":{"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}}},"e":{"docs":{},".":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}},":":{"docs":{"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996}}}}}}},"t":{"docs":{},"u":{"docs":{},"a":{"docs":{},"t":{"docs":{"Algorithms/Games.html":{"ref":"Algorithms/Games.html","tf":0.013333333333333334},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},",":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}},"s":{"docs":{},",":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809}}}}}}}}}}},"g":{"docs":{},"n":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},"i":{"docs":{},"f":{"docs":{},"i":{"docs":{},"c":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.006872852233676976}}}}}},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}},".":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}}},"n":{"docs":{},"g":{"docs":{},"l":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0019801980198019802},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},"i":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.005121638924455826}}}}}},"z":{"docs":{},"e":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.0058823529411764705},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0087527352297593},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.01639344262295082},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498},"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.003105590062111801},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002157497303128371},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},":":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00546448087431694}}}}},"d":{"docs":{},"e":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}},",":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124}}}}},"l":{"docs":{},"o":{"docs":{},"s":{"docs":{},".":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}}}}}},"m":{"docs":{},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488}},"e":{"docs":{},"r":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01764705882352941},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.004329004329004329},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.005970149253731343},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}},":":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717}}}},"s":{"docs":{},"t":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124}}}}}}}}},"_":{"docs":{},"a":{"docs":{},"m":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995}}}}}}}}}}},"r":{"docs":{},"t":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609}},":":{"docs":{"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062}}}}}}},"q":{"docs":{},"u":{"docs":{},"a":{"docs":{},"r":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002157497303128371}},"e":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995}}},"s":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995}}}}}}},"i":{"docs":{},"r":{"docs":{},"r":{"docs":{},"e":{"docs":{},"l":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}},":":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}}}}},"[":{"0":{"docs":{},"]":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343}}}},"1":{"docs":{},":":{"docs":{},"]":{"docs":{},":":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343}}}}}},"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00141643059490085}},"]":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0032822757111597373}}}}}}}},"i":{"docs":{},"]":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.004329004329004329},"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00424929178470255},"Tricks/":{"ref":"Tricks/","tf":0.004830917874396135}}},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},"]":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00424929178470255}},",":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00141643059490085}}}}}}}}},"j":{"docs":{},"]":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.004329004329004329}}}},"n":{"docs":{"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406}}},"x":{"docs":{},"]":{"docs":{},")":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}},",":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.005952380952380952},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.006060606060606061},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.003105590062111801},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0049833887043189366},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}},")":{"docs":{},")":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476}}},":":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476}}},",":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}}},"]":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}},"r":{"docs":{},"c":{"docs":{},",":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907}}},":":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}}},")":{"docs":{},")":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}}}}}},"_":{"docs":{},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"r":{"docs":{},"s":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}},"e":{"docs":{},"s":{"docs":{},":":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}}}}}}}}}},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00141643059490085}},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00424929178470255}}}},"o":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"_":{"docs":{},"b":{"docs":{},"r":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"e":{"docs":{},"t":{"docs":{},"s":{"docs":{},".":{"docs":{},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{},"]":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00141643059490085}}}}}}}}}}}}}}}}}}}}}}}}}}}},"]":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00141643059490085}}},"n":{"docs":{},"i":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"t":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}}},"y":{"docs":{},"s":{"docs":{},"t":{"docs":{},"e":{"docs":{},"m":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}},"s":{"docs":{},",":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}}}}}}}}},"u":{"docs":{},"r":{"docs":{},"l":{"docs":{"./":{"ref":"./","tf":0.021739130434782608}}}},"s":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.0379746835443038},"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.00964630225080386},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.005865102639296188},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"Algorithms/Games.html":{"ref":"Algorithms/Games.html","tf":0.013333333333333334},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995},"Algorithms/UncommonAlgos.html":{"ref":"Algorithms/UncommonAlgos.html","tf":0.019801980198019802},"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.0058823529411764705},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002188183807439825},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.004329004329004329},"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.005847953216374269},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0038412291933418692},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.015113350125944584},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0022197558268590455},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847},"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.014218009478672985},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004149377593360996},"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.008403361344537815},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.003105590062111801},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855},"Miscellaneous/Palindrome.html":{"ref":"Miscellaneous/Palindrome.html","tf":0.009009009009009009},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.01098901098901099},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0038535645472061657},"Tricks/":{"ref":"Tricks/","tf":0.01932367149758454},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}},"e":{"docs":{},"f":{"docs":{},"u":{"docs":{},"l":{"docs":{},":":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.003215434083601286}}}}}},"d":{"docs":{},":":{"docs":{"DataStructures/StacksAndQueues/":{"ref":"DataStructures/StacksAndQueues/","tf":0.01020408163265306}}}}},"u":{"docs":{},"a":{"docs":{},"l":{"docs":{},".":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062}},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}}}}}}},"i":{"docs":{},"r":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}}}}}},"i":{"docs":{},"q":{"docs":{},"u":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047}},"e":{"docs":{},"p":{"docs":{},"a":{"docs":{},"t":{"docs":{},"h":{"docs":{},"s":{"docs":{},"w":{"docs":{},"i":{"docs":{},"t":{"docs":{},"h":{"docs":{},"o":{"docs":{},"b":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"c":{"docs":{},"l":{"docs":{},"e":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Algorithms/DP/NumSol.html":{"ref":"Algorithms/DP/NumSol.html","tf":0.013888888888888888}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}}}}}},"l":{"docs":{},"i":{"docs":{},"k":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}}}},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{"Algorithms/UncommonAlgos.html":{"ref":"Algorithms/UncommonAlgos.html","tf":0.009900990099009901},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124}}}}}},"b":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"d":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995}}}}}},"a":{"docs":{},"l":{"docs":{},"a":{"docs":{},"n":{"docs":{},"c":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00141643059490085}}}}}}}},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"m":{"docs":{},"o":{"docs":{},"n":{"docs":{"Algorithms/UncommonAlgos.html":{"ref":"Algorithms/UncommonAlgos.html","tf":5.00990099009901}}}}}}}},"t":{"docs":{},"i":{"docs":{},"l":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.006564551422319475},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.002560819462227913},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0025188916876574307},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855},"Miscellaneous/Palindrome.html":{"ref":"Miscellaneous/Palindrome.html","tf":0.009009009009009009},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00141643059490085}}}}},"n":{"docs":{},"e":{"docs":{},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0025188916876574307}}}}}}}}}}},"u":{"docs":{},"s":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}}}},"v":{"docs":{},"i":{"docs":{},"s":{"docs":{},"i":{"docs":{},"t":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}}}}}},"p":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.001962066710268149},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.007751937984496124},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.023952095808383235},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0025188916876574307},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0022197558268590455},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414},"Tricks/":{"ref":"Tricks/","tf":0.004830917874396135},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}},"d":{"docs":{},"a":{"docs":{},"t":{"docs":{"Algorithms/SortingAndHashing.html":{"ref":"Algorithms/SortingAndHashing.html","tf":0.013333333333333334},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.001962066710268149},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.006564551422319475},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0025188916876574307},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}}},":":{"docs":{"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}},",":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228}}},"w":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}}}}},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0033222591362126247}},":":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}}}}},"l":{"docs":{},"t":{"docs":{},"i":{"docs":{},"m":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}}}}}},",":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.008403361344537815}}},"_":{"docs":{},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.007874015748031496}},".":{"docs":{},"r":{"docs":{},"e":{"docs":{},"m":{"docs":{},"o":{"docs":{},"v":{"docs":{},"e":{"docs":{},"(":{"docs":{},"p":{"docs":{},")":{"docs":{"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.007874015748031496}}}}}}}}}}}},":":{"docs":{"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.015748031496062992}}}}}}},"t":{"docs":{},"i":{"docs":{},"l":{"docs":{"Miscellaneous/Palindrome.html":{"ref":"Miscellaneous/Palindrome.html","tf":0.009009009009009009}}}}}},"(":{"0":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.005393743257820928}},",":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002157497303128371}}}},"1":{"3":{"2":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717}}},"docs":{}},"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609}},")":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02}}},",":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}},"2":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00141643059490085}},",":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995}}}},"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},"h":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}},"t":{"docs":{},"t":{"docs":{},"p":{"docs":{},"s":{"docs":{},":":{"docs":{},"/":{"docs":{},"/":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},".":{"docs":{},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"/":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"/":{"docs":{},"w":{"docs":{},"e":{"docs":{},"e":{"docs":{},"k":{"docs":{},"l":{"docs":{},"i":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.012658227848101266}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},"a":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564}}}},"p":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}}}}}},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},"a":{"docs":{},"y":{"docs":{},"s":{"docs":{},",":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678}}}}}}}},"[":{"docs":{},"p":{"docs":{},"+":{"1":{"docs":{},"]":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}},"docs":{}}}},"d":{"docs":{},"d":{"docs":{"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877}}}},"b":{"docs":{},"s":{"docs":{},"(":{"docs":{},"x":{"docs":{},")":{"docs":{},",":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}}}}}}},"t":{"docs":{"Algorithms/UncommonAlgos.html":{"ref":"Algorithms/UncommonAlgos.html","tf":0.019801980198019802}},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"s":{"docs":{},",":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678}}}},"/":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},"m":{"docs":{},"e":{"docs":{},".":{"docs":{},"m":{"docs":{},"d":{"docs":{},")":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564}}}}}}}}}}}}}}},"i":{"docs":{},"c":{"docs":{},"k":{"docs":{},"s":{"docs":{},"/":{"docs":{},"d":{"docs":{},"s":{"docs":{},")":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}}}}},"h":{"docs":{},"e":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}}},"i":{"docs":{},"n":{"docs":{},"k":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847}}}}}},"i":{"docs":{},"m":{"docs":{},"e":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907}}}}},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},")":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}}}},"(":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"_":{"docs":{},"k":{"docs":{},"e":{"docs":{},"y":{"docs":{},"_":{"docs":{},"f":{"docs":{},"r":{"docs":{},"e":{"docs":{},"q":{"docs":{"Algorithms/SortingAndHashing.html":{"ref":"Algorithms/SortingAndHashing.html","tf":0.006666666666666667}}}}}}}}}}}}}},"i":{"docs":{},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047}}}}},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"_":{"docs":{},"k":{"docs":{},"e":{"docs":{},"y":{"docs":{"Algorithms/SortingAndHashing.html":{"ref":"Algorithms/SortingAndHashing.html","tf":0.006666666666666667}}}}},"f":{"docs":{},"r":{"docs":{},"e":{"docs":{},"q":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},"_":{"docs":{},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}}}}}}},"h":{"docs":{},"e":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}}}}},"t":{"docs":{},"h":{"docs":{},".":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"(":{"docs":{},"i":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}},"j":{"docs":{},",":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}}}}},"k":{"docs":{},"e":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}},"i":{"docs":{},"n":{"docs":{},"_":{"docs":{},"k":{"docs":{},"e":{"docs":{},"y":{"docs":{},"_":{"docs":{},"f":{"docs":{},"r":{"docs":{},"e":{"docs":{},"q":{"docs":{"Algorithms/SortingAndHashing.html":{"ref":"Algorithms/SortingAndHashing.html","tf":0.006666666666666667}}}}}}}}}}}}},"e":{"docs":{},"r":{"docs":{},"g":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564}}}}}},"x":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.003215434083601286},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.007551240560949299},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},"+":{"1":{"docs":{},")":{"docs":{"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062}}},",":{"docs":{},"y":{"docs":{},")":{"docs":{},",":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}}}}}},"docs":{}},",":{"docs":{"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.010787486515641856}},"i":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.003236245954692557}}},"y":{"docs":{},"+":{"1":{"docs":{},")":{"docs":{},",":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002157497303128371}}},"]":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}}}},"docs":{}}}},"i":{"docs":{},")":{"docs":{},"]":{"docs":{"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062}}}}},"_":{"docs":{},"f":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"d":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.01092896174863388}}}}}}}},"*":{"docs":{},"x":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}}}},"[":{"0":{"docs":{},"]":{"docs":{},",":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123},"Tricks/":{"ref":"Tricks/","tf":0.004830917874396135}}}}},"1":{"docs":{},"]":{"docs":{},",":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}}}}},"docs":{}}},"=":{"docs":{},"=":{"docs":{},"r":{"docs":{},")":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047}}}}}},"i":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004398826979472141},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.001962066710268149},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047}}},"n":{"docs":{},"t":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}},")":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}}},"f":{"docs":{"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062}}},"+":{"1":{"docs":{},")":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.004329004329004329}}}},"docs":{}},"d":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564}}},"e":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}}},"n":{"docs":{"Algorithms/Games.html":{"ref":"Algorithms/Games.html","tf":0.013333333333333334},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.006872852233676976},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124},"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.010810810810810811},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.002890173410404624}},"c":{"docs":{},"r":{"docs":{},")":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047}}}}},"u":{"docs":{},"m":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.008658008658008658}}}}}}}},"+":{"1":{"docs":{},")":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}},"s":{"docs":{},"t":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}},"t":{"docs":{},"h":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564}}}}}},"docs":{}},"o":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809}},"d":{"docs":{},"e":{"docs":{},".":{"docs":{},"v":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0019801980198019802},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004439511653718091}}}},",":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476}}}}},"t":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0019801980198019802}}}},"e":{"docs":{},"e":{"docs":{},"d":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}}}}}},"p":{"docs":{},"o":{"docs":{},"s":{"docs":{},"i":{"docs":{},"t":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047}}}},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},")":{"docs":{},".":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}}}}}}}}}},"[":{"docs":{},"x":{"docs":{},"]":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}},"j":{"docs":{},"]":{"docs":{"Tricks/":{"ref":"Tricks/","tf":0.004830917874396135}}}}},".":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"(":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"t":{"docs":{},"_":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124}}}}}}}}}}}}}}},"a":{"docs":{},"y":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}}}},"r":{"docs":{},"i":{"docs":{},"c":{"docs":{},"e":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}}}},"o":{"docs":{},"r":{"docs":{},"i":{"docs":{},"t":{"docs":{},"y":{"docs":{},",":{"docs":{"Tricks/":{"ref":"Tricks/","tf":0.004830917874396135}}}}}}}}},"o":{"docs":{},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},",":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}}}}}}}}}}}}},"u":{"docs":{},"s":{"docs":{},"e":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476}}}}},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"i":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047}}}}},"a":{"docs":{},"l":{"docs":{},"i":{"docs":{},"d":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476}}}}}}},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.003430531732418525},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}},"_":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124}}}}}}}}}}},"e":{"docs":{},"p":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809}},"s":{"docs":{},",":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}}}}},"r":{"docs":{},"(":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},".":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},")":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},",":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00141643059490085}}}}}}}},"e":{"docs":{},"e":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488}}},"c":{"docs":{},"r":{"docs":{},"e":{"docs":{},"t":{"docs":{},"l":{"docs":{},"i":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}}}}}}},"o":{"docs":{},"m":{"docs":{},"e":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}},"r":{"docs":{},"t":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}},"e":{"docs":{},"d":{"docs":{},")":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124}}}}}}}},"u":{"docs":{},"b":{"docs":{},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},"a":{"docs":{},"y":{"docs":{},")":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}}},"m":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0019801980198019802}}}}},"b":{"docs":{},"i":{"docs":{},"t":{"docs":{},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488}}}}}}}},"e":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}},"n":{"docs":{},"d":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}},"_":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124}}}}}}}}}},"g":{"docs":{},".":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717}}}},"a":{"docs":{},"s":{"docs":{},"i":{"docs":{},"e":{"docs":{},"r":{"docs":{"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576}}}}}}},"v":{"docs":{},"e":{"docs":{},"n":{"docs":{"Miscellaneous/Palindrome.html":{"ref":"Miscellaneous/Palindrome.html","tf":0.009009009009009009}}}}}},"o":{"docs":{},"n":{"docs":{},"e":{"docs":{"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062}}}},"r":{"docs":{},"d":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"[":{"docs":{},"i":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343}}}}}}}}}}}}},"d":{"docs":{},"d":{"docs":{"Miscellaneous/Palindrome.html":{"ref":"Miscellaneous/Palindrome.html","tf":0.009009009009009009}}}}},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.007751937984496124}}}}},"i":{"docs":{},"t":{"docs":{},"h":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002188183807439825}}}}},"e":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343}}}},"y":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}},"+":{"1":{"docs":{},")":{"docs":{"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062}}}},"docs":{}},"i":{"docs":{},")":{"docs":{},"]":{"docs":{"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062}}}}},"_":{"docs":{},"f":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"d":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847}}}}}}}}},"l":{"1":{"docs":{},"_":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564}}}}}}},"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0022197558268590455}},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},"_":{"docs":{},"i":{"docs":{},"d":{"docs":{},"x":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.0058823529411764705}}}}},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228}}}}}}}},"n":{"docs":{},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},")":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124}}}}}}},"t":{"docs":{},"i":{"docs":{},"c":{"docs":{},"k":{"docs":{},"e":{"docs":{},"t":{"docs":{},"s":{"docs":{},")":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}}}}}}}},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},")":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}}}}}}}},"v":{"docs":{},"e":{"docs":{},"l":{"docs":{},"w":{"docs":{},"i":{"docs":{},"s":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809}}}}}}}}},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"s":{"docs":{},"[":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"_":{"docs":{},"i":{"docs":{},"d":{"docs":{},"x":{"docs":{},"]":{"docs":{},".":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},",":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564}}}}}}}}}}}}}}}}}}}}},".":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},",":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.003105590062111801}}}}}}},"a":{"docs":{},"s":{"docs":{},"t":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.0058823529411764705}},"_":{"docs":{},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228}}}}}}}}}},"e":{"docs":{},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{},"s":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.017964071856287425}}}}}}},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0025188916876574307}}}}}}}}}}},"c":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476}},"u":{"docs":{},"r":{"docs":{},"r":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0019801980198019802}},"_":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124}}}}}}}}}}}},"h":{"docs":{},"e":{"docs":{},"c":{"docs":{},"k":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809},"Tricks/":{"ref":"Tricks/","tf":0.004830917874396135}}}}}},"o":{"docs":{},"l":{"docs":{},"l":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},".":{"docs":{},"d":{"docs":{},"e":{"docs":{},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},")":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809}}}}}}}}}}}}}}}}}}},"a":{"docs":{},"r":{"docs":{},"e":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}},"d":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0019801980198019802},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907}},"j":{"docs":{},"i":{"docs":{},"k":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"a":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907}}}}}}}}},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"_":{"docs":{},"t":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}}},"k":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907}},"+":{"1":{"docs":{},")":{"docs":{},":":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}}}}},"docs":{}}},"_":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},".":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},",":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564}}}}}}}}}}},"d":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}}},"x":{"docs":{},",":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}}},"c":{"docs":{},"l":{"docs":{},"o":{"docs":{},"s":{"docs":{},"e":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0028328611898017}}}}}}},"o":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00141643059490085}}}}}}},"f":{"docs":{},"l":{"docs":{},"o":{"docs":{},"a":{"docs":{},"t":{"docs":{},"(":{"docs":{},"'":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228}},"i":{"docs":{},"n":{"docs":{},"f":{"docs":{},"'":{"docs":{},")":{"docs":{},",":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}}}}}}}}}}}}}},"j":{"docs":{"Tricks/":{"ref":"Tricks/","tf":0.004830917874396135}}}},"+":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.012658227848101266},"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.03536977491961415},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.03372434017595308},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.012006861063464836},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.01718213058419244},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.013734466971877043},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.011627906976744186},"Algorithms/DP/NumSol.html":{"ref":"Algorithms/DP/NumSol.html","tf":0.013888888888888888},"Algorithms/UncommonAlgos.html":{"ref":"Algorithms/UncommonAlgos.html","tf":0.039603960396039604},"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.04},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.007658643326039387},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.01775147928994083},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.025974025974025976},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.017543859649122806},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.002560819462227913},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.012594458438287154},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.027722772277227723},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.01997780244173141},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00819672131147541},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.012448132780082987},"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.005952380952380952},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.01680672268907563},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.014141414141414142},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.012422360248447204},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.008629989212513484},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.02197802197802198},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.013289036544850499},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.026912181303116147},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.015414258188824663},"Tricks/":{"ref":"Tricks/","tf":0.00966183574879227}},"=":{"docs":{"Algorithms/SortingAndHashing.html":{"ref":"Algorithms/SortingAndHashing.html","tf":0.02},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002932551319648094},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.003430531732418525},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.006872852233676976},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Algorithms/DP/NumSol.html":{"ref":"Algorithms/DP/NumSol.html","tf":0.027777777777777776},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.01312910284463895},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.025974025974025976},"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.011695906432748537},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.008771929824561403},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.005037783375314861},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.007920792079207921},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.005549389567147614},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847},"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.006224066390041493},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.010101010101010102},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.006211180124223602},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.005393743257820928},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.008305647840531562},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.009915014164305949},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.010597302504816955}}}},"=":{"docs":{"Algorithms/SortingAndHashing.html":{"ref":"Algorithms/SortingAndHashing.html","tf":0.1},"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.05787781350482315},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.03812316715542522},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0823327615780446},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.07903780068728522},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.020274689339437543},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.023255813953488372},"Algorithms/DP/NumSol.html":{"ref":"Algorithms/DP/NumSol.html","tf":0.06944444444444445},"Algorithms/UncommonAlgos.html":{"ref":"Algorithms/UncommonAlgos.html","tf":0.0297029702970297},"DataStructures/StacksAndQueues/":{"ref":"DataStructures/StacksAndQueues/","tf":0.061224489795918366},"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.052941176470588235},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.060175054704595186},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.07100591715976332},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.0735930735930736},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.05373134328358209},"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.05263157894736842},"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.0918918918918919},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0847953216374269},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.08194622279129321},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.017964071856287425},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.06801007556675064},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0594059405940594},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.06659267480577137},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.09289617486338798},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.058823529411764705},"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.037914691943127965},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.08298755186721991},"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.05303030303030303},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.07738095238095238},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.06302521008403361},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.06464646464646465},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.10236220472440945},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.06832298136645963},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0668824163969795},"Miscellaneous/Palindrome.html":{"ref":"Miscellaneous/Palindrome.html","tf":0.02702702702702703},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.03296703296703297},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.08305647840531562},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0453257790368272},"Miscellaneous/AlienDictionary.html":{"ref":"Miscellaneous/AlienDictionary.html","tf":0.043478260869565216},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.057803468208092484},"Tricks/":{"ref":"Tricks/","tf":0.024154589371980676}},">":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.012658227848101266},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564}}},"=":{"docs":{"Algorithms/SortingAndHashing.html":{"ref":"Algorithms/SortingAndHashing.html","tf":0.02666666666666667},"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.012861736334405145},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.021994134897360705},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.003430531732418525},"Algorithms/Games.html":{"ref":"Algorithms/Games.html","tf":0.013333333333333334},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.027491408934707903},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Algorithms/DP/NumSol.html":{"ref":"Algorithms/DP/NumSol.html","tf":0.013888888888888888},"DataStructures/StacksAndQueues/":{"ref":"DataStructures/StacksAndQueues/","tf":0.01020408163265306},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.007658643326039387},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.012987012987012988},"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.029239766081871343},"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.010810810810810811},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.008771929824561403},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.002560819462227913},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.005037783375314861},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.01782178217821782},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004439511653718091},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00819672131147541},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.016042780748663103},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498},"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.030303030303030304},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.008928571428571428},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.012605042016806723},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.007874015748031496},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.013975155279503106},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.009708737864077669},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.006644518272425249},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.028328611898016998},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.008670520231213872}}}},"[":{"0":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.008658008658008658},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.005952380952380952}},"]":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124},"Tricks/":{"ref":"Tricks/","tf":0.004830917874396135}},"[":{"0":{"docs":{},"]":{"docs":{},")":{"docs":{"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062}}}}},"docs":{}}},",":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}},"1":{"docs":{},",":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.003215434083601286},"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406}}},"]":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}},"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.005145797598627788},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0028328611898017}},"n":{"docs":{},"e":{"docs":{},"w":{"docs":{},"]":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.012658227848101266}}}}},"u":{"docs":{},"m":{"docs":{},"]":{"docs":{},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047}}}},"s":{"docs":{},"[":{"docs":{},"j":{"docs":{},"]":{"docs":{},"]":{"docs":{},")":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047}}}}}}}}}},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},".":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"]":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00546448087431694}},")":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0039603960396039604}}},",":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0039603960396039604}}}}}}},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},",":{"docs":{"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877}}}}}}}}}}}}},"]":{"docs":{},")":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}}},"]":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.008797653958944282},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488},"DataStructures/StacksAndQueues/":{"ref":"DataStructures/StacksAndQueues/","tf":0.02040816326530612},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.008658008658008658},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.014925373134328358},"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.005847953216374269},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.010075566750629723},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0039603960396039604},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0022197558268590455},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0106951871657754},"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498},"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.008403361344537815},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.015748031496062992},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.010869565217391304},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.009966777408637873},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0056657223796034},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0038535645472061657},"Tricks/":{"ref":"Tricks/","tf":0.004830917874396135}},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0019801980198019802},"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.006211180124223602}}},")":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.005847953216374269},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0019801980198019802},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00819672131147541},"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.015151515151515152},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.006060606060606061},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}},":":{"docs":{"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00404040404040404},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}}}}},"c":{"docs":{"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.007874015748031496},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00141643059490085}},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{},"i":{"docs":{},"d":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"]":{"docs":{},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047}}}}}}}}}}}}}}}},"]":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}},"f":{"docs":{},"a":{"docs":{},"l":{"docs":{},"s":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047}},"e":{"docs":{},"]":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047}}}}}}},"l":{"docs":{},"o":{"docs":{},"a":{"docs":{},"t":{"docs":{},"(":{"docs":{},"'":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124}},"i":{"docs":{},"n":{"docs":{},"f":{"docs":{},"'":{"docs":{},")":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907}},"]":{"docs":{"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406}}}}}}}}}}}}}}},"l":{"docs":{},"o":{"docs":{},"o":{"docs":{},"k":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}}}},"w":{"docs":{},"e":{"docs":{},"r":{"docs":{},",":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}}}}}}}},"_":{"docs":{},"a":{"docs":{},",":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488}}}}},"a":{"docs":{},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"a":{"docs":{},"g":{"docs":{},"e":{"docs":{},"(":{"0":{"docs":{},",":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}},"docs":{}}}}}}}}},"[":{"0":{"docs":{"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062},"Algorithms/DP/NumSol.html":{"ref":"Algorithms/DP/NumSol.html","tf":0.013888888888888888}},"]":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}},"docs":{},"i":{"docs":{},",":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717}}}},"f":{"docs":{},"l":{"docs":{},"o":{"docs":{},"a":{"docs":{},"t":{"docs":{},"(":{"docs":{},"'":{"docs":{},"i":{"docs":{},"n":{"docs":{},"f":{"docs":{},"'":{"docs":{},")":{"docs":{},",":{"docs":{"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406}}}}}}}}}}}}}}},"x":{"docs":{},",":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}}}},"x":{"docs":{"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062}},"]":{"docs":{},"[":{"docs":{},"y":{"docs":{},"]":{"docs":{"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062}}}}}},"[":{"docs":{},"x":{"docs":{},"]":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00819672131147541}}}}}},"y":{"docs":{"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062}}},"d":{"docs":{},"m":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"[":{"docs":{},"q":{"docs":{"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406}}}}}}}}},"i":{"docs":{},"]":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343}}},",":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"]":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343}}}}}},"(":{"docs":{},"l":{"docs":{},"o":{"docs":{},"w":{"docs":{},"e":{"docs":{},"r":{"docs":{},")":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}},"]":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}}}}}}}}}},"]":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}},",":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}},"p":{"docs":{},".":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},",":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0022197558268590455}}}}}}},"i":{"docs":{},"d":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"]":{"docs":{"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576}}}}}}}},"r":{"docs":{},"e":{"docs":{},"v":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}}}},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},".":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"]":{"docs":{"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877}}}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"(":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},")":{"docs":{},")":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}}}}}}}}}}}}}}}}}}}},"'":{"docs":{},"j":{"docs":{},"f":{"docs":{},"k":{"docs":{},"'":{"docs":{},"]":{"docs":{},")":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}}}}}},"(":{"docs":{},"'":{"docs":{},",":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0028328611898017}}}}},")":{"docs":{},"'":{"docs":{},",":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00141643059490085}}}}}},"e":{"docs":{},"]":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}},"(":{"0":{"docs":{},",":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}}}},"docs":{},"e":{"docs":{},",":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}}}},"x":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}},"+":{"1":{"docs":{},",":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.004314994606256742}},"y":{"docs":{},")":{"docs":{},",":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002157497303128371}},"(":{"docs":{},"x":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}}}}}}}}},"docs":{}}},"(":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"_":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},",":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}}}}}}}}}},".":{"2":{"docs":{},"*":{"docs":{},"(":{"docs":{},"c":{"1":{"docs":{},"+":{"docs":{},"c":{"2":{"docs":{},"+":{"docs":{},"c":{"3":{"docs":{},")":{"docs":{},"]":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00141643059490085}}}}},"docs":{}}}},"docs":{}}}},"docs":{}}}}},"docs":{},"(":{"docs":{},"c":{"1":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00141643059490085}}},"docs":{}}},".":{"1":{"docs":{},"]":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00141643059490085}}}},"docs":{},"(":{"docs":{},"]":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00141643059490085}}}}}}},"a":{"docs":{},"b":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.012658227848101266}}}}}}},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"[":{"docs":{},"b":{"docs":{"Algorithms/UncommonAlgos.html":{"ref":"Algorithms/UncommonAlgos.html","tf":0.009900990099009901}}}}}}}},"q":{"docs":{},"u":{"docs":{},"i":{"docs":{},"r":{"docs":{},"r":{"docs":{},"e":{"docs":{},"l":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}},"1":{"docs":{},"]":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}},"docs":{}}}}}}}}}},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},".":{"docs":{},"v":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}}}}}}}},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"(":{"docs":{},"s":{"docs":{},")":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}}}}}}}},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}},"1":{"docs":{},"]":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}},"docs":{}}}}}}},"o":{"docs":{},"l":{"docs":{},"u":{"docs":{},"t":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002188183807439825},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}}},"v":{"docs":{},"e":{"docs":{},".":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}}},"o":{"docs":{},"v":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}},"e":{"docs":{},".":{"docs":{"Algorithms/Games.html":{"ref":"Algorithms/Games.html","tf":0.013333333333333334}}}}}}},"p":{"docs":{},"p":{"docs":{},"r":{"docs":{},"o":{"docs":{},"a":{"docs":{},"c":{"docs":{},"h":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.012658227848101266},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.004329004329004329},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}},":":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564}}},"e":{"docs":{},"s":{"docs":{},":":{"docs":{"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877}}}}}}}},"p":{"docs":{},"r":{"docs":{},"i":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}}}}}}},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.003215434083601286},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847},"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}}}},"l":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228}},"e":{"docs":{},"_":{"docs":{},"i":{"docs":{},"n":{"docs":{},"_":{"docs":{},"p":{"docs":{},"a":{"docs":{},"t":{"docs":{},"h":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.005549389567147614}}}}}}}}}}},"i":{"docs":{},"c":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},".":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}}}}}}}}}}}},"v":{"docs":{},"o":{"docs":{},"i":{"docs":{},"d":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.012658227848101266},"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.003215434083601286},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.004329004329004329},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0038412291933418692},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}}}},"e":{"docs":{},"r":{"docs":{},"a":{"docs":{},"g":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.002616088947024199}},"e":{"docs":{},"(":{"docs":{},"i":{"docs":{},"+":{"1":{"docs":{},",":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}},"docs":{}}},"x":{"docs":{},",":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}},".":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}},"s":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}}}},"d":{"docs":{},"d":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002932551319648094},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995},"Algorithms/DP/NumSol.html":{"ref":"Algorithms/DP/NumSol.html","tf":0.013888888888888888},"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.0058823529411764705},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.005970149253731343},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0025188916876574307},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0028328611898017},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}},"i":{"docs":{},"t":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.011940298507462687},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877}}},"n":{"docs":{},"g":{"docs":{},",":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00141643059490085}}}}}},"(":{"docs":{},"_":{"docs":{},"a":{"docs":{},",":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.006872852233676976}}}}}},"b":{"docs":{},"i":{"docs":{},"n":{"docs":{},"a":{"docs":{},"r":{"docs":{},"y":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488}}}}}}}}}}}}}},".":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717}}},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564}}}}}},"t":{"docs":{},"w":{"docs":{},"o":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"b":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564}}}}}}}}}}}}}}}}},"o":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"u":{"docs":{},"l":{"docs":{},"t":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},",":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.006644518272425249}}}}}}}}}}}}}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"(":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},",":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0019801980198019802}}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},",":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0019801980198019802}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},",":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0019801980198019802}}}}}}}}}}}}},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},",":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0019801980198019802}}}}}}}}}}}},"o":{"docs":{},"n":{"docs":{},"e":{"docs":{},"r":{"docs":{},"o":{"docs":{},"w":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0019801980198019802}}}}}}}}}}}}}}},"j":{"docs":{},"u":{"docs":{},"s":{"docs":{},"t":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.002560819462227913},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0019801980198019802},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228},"Miscellaneous/Palindrome.html":{"ref":"Miscellaneous/Palindrome.html","tf":0.009009009009009009}},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"_":{"docs":{},"o":{"docs":{},"p":{"docs":{},"t":{"docs":{"Algorithms/SortingAndHashing.html":{"ref":"Algorithms/SortingAndHashing.html","tf":0.006666666666666667}}}}}}}}}}}}},"a":{"docs":{},"c":{"docs":{"DataStructures/StacksAndQueues/":{"ref":"DataStructures/StacksAndQueues/","tf":0.01020408163265306}},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"/":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476}}}}}}}}},"m":{"docs":{},"i":{"docs":{},"r":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}}}}},"l":{"docs":{},"g":{"docs":{},"o":{"docs":{"Algorithms/UncommonAlgos.html":{"ref":"Algorithms/UncommonAlgos.html","tf":5},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},"r":{"docs":{},"i":{"docs":{},"t":{"docs":{},"h":{"docs":{},"m":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995},"Algorithms/UncommonAlgos.html":{"ref":"Algorithms/UncommonAlgos.html","tf":0.009900990099009901},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.002560819462227913},"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414},"Tricks/":{"ref":"Tricks/","tf":0.004830917874396135}},":":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}}}}}}},":":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124}}}}},"i":{"docs":{},"e":{"docs":{},"n":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678},"Miscellaneous/AlienDictionary.html":{"ref":"Miscellaneous/AlienDictionary.html","tf":5.043478260869565}}}}},"l":{"docs":{},"o":{"docs":{},"w":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002932551319648094},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476}},"e":{"docs":{},"d":{"docs":{},":":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}},"c":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}}}},",":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}},"w":{"docs":{},"a":{"docs":{},"y":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.006872852233676976},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00141643059490085},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},"s":{"docs":{},",":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0019801980198019802},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}}}}}},"p":{"docs":{},"h":{"docs":{},"a":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}},"o":{"docs":{},"n":{"docs":{},"g":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343}}}}},"s":{"docs":{},"o":{"docs":{},",":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.002560819462227913},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877}},"n":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}}}}}},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},"i":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00404040404040404},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}}}}}}},"r":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"d":{"docs":{"Algorithms/SortingAndHashing.html":{"ref":"Algorithms/SortingAndHashing.html","tf":0.006666666666666667},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}}}}},"r":{"1":{"docs":{},":":{"docs":{"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.005847953216374269}}},"[":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},"[":{"docs":{},"'":{"docs":{},"i":{"docs":{},"'":{"docs":{},"]":{"docs":{},"]":{"docs":{"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.005847953216374269}}}}}}},"x":{"docs":{},"]":{"docs":{},"]":{"docs":{"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.005847953216374269}}}}}}}}}}}}},"2":{"docs":{},":":{"docs":{"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.005847953216374269}}},"[":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},"[":{"docs":{},"'":{"docs":{},"j":{"docs":{},"'":{"docs":{},"]":{"docs":{},"]":{"docs":{"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.005847953216374269}}}}}}},"x":{"docs":{},"]":{"docs":{},"]":{"docs":{"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.005847953216374269}}}}}}}}}}}}},"3":{"docs":{},":":{"docs":{"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.005847953216374269}}},"[":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},"[":{"docs":{},"'":{"docs":{},"k":{"docs":{},"'":{"docs":{},"]":{"docs":{},"]":{"docs":{},":":{"docs":{"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.005847953216374269}}}}}}}},"x":{"docs":{},"]":{"docs":{},"]":{"docs":{"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.005847953216374269}}}}}}}}}}}}},"docs":{"Algorithms/SortingAndHashing.html":{"ref":"Algorithms/SortingAndHashing.html","tf":0.006666666666666667}},"[":{"0":{"docs":{},"]":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}}}},"docs":{},"e":{"docs":{},"x":{"docs":{},"p":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"e":{"docs":{},"d":{"docs":{},"_":{"docs":{},"i":{"docs":{},"d":{"docs":{},"x":{"docs":{},"]":{"docs":{"Algorithms/SortingAndHashing.html":{"ref":"Algorithms/SortingAndHashing.html","tf":0.006666666666666667}},",":{"docs":{"Algorithms/SortingAndHashing.html":{"ref":"Algorithms/SortingAndHashing.html","tf":0.006666666666666667}}}}}}}}}}}}}}}},"i":{"docs":{},"]":{"docs":{"Algorithms/SortingAndHashing.html":{"ref":"Algorithms/SortingAndHashing.html","tf":0.013333333333333334}},",":{"docs":{"Algorithms/SortingAndHashing.html":{"ref":"Algorithms/SortingAndHashing.html","tf":0.006666666666666667}}}}},"x":{"docs":{},"+":{"1":{"docs":{},"]":{"docs":{},"[":{"docs":{},"y":{"docs":{},"+":{"1":{"docs":{},"]":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}}},"docs":{}}}}}},"2":{"docs":{},"]":{"docs":{},"[":{"docs":{},"y":{"docs":{},"+":{"1":{"docs":{},"]":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}}},"2":{"docs":{},"]":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}}},"docs":{}},"]":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}}}}}},"docs":{}},"]":{"docs":{},"[":{"docs":{},"y":{"docs":{},"+":{"1":{"docs":{},"]":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}}},"2":{"docs":{},"]":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}}},"docs":{}},"]":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}}}}}}},"a":{"docs":{},"y":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.003215434083601286},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002932551319648094},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.010291595197255575},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.007194244604316547},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062},"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":10.08},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.006564551422319475},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.011834319526627219},"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":5.005847953216374},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004149377593360996},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.003105590062111801},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.002890173410404624},"Tricks/":{"ref":"Tricks/","tf":0.014492753623188406}},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047}}},"/":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.003430531732418525},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.002616088947024199},"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.0058823529411764705},"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.005847953216374269},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.002890173410404624}},"p":{"docs":{},"r":{"docs":{},"o":{"docs":{},"b":{"docs":{},"l":{"docs":{},"e":{"docs":{},"m":{"docs":{},"?":{"docs":{},"h":{"docs":{},"_":{"docs":{},"l":{"docs":{},"=":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"v":{"docs":{},"i":{"docs":{},"e":{"docs":{},"w":{"docs":{},"&":{"docs":{},"p":{"docs":{},"l":{"docs":{},"a":{"docs":{},"y":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"_":{"docs":{},"s":{"docs":{},"l":{"docs":{},"u":{"docs":{},"g":{"docs":{},"s":{"docs":{},"%":{"5":{"docs":{},"b":{"docs":{},"%":{"5":{"docs":{},"d":{"docs":{},"=":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"v":{"docs":{},"i":{"docs":{},"e":{"docs":{},"w":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}}}}}}}}}}}}},"docs":{}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},".":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062},"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.0058823529411764705},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}}},";":{"docs":{"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.005847953216374269}}},"s":{"docs":{},"/":{"docs":{"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.005847953216374269}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.005847953216374269}}}}}}}}}}}}}}}}}}}}}}},":":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.003430531732418525}}},"i":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},",":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}}}}}}},"o":{"docs":{},"w":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0033222591362126247}}}}},"t":{"docs":{},"i":{"docs":{},"c":{"docs":{},"l":{"docs":{},"e":{"docs":{},":":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}}}}}},"f":{"docs":{},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}}}}}}},"i":{"docs":{},"t":{"docs":{},"h":{"docs":{},"m":{"docs":{},"e":{"docs":{},"t":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995}}}}}}}},"c":{"docs":{},"h":{"docs":{},"i":{"docs":{},"v":{"docs":{},"e":{"docs":{},"s":{"docs":{},":":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609}}}}}}}}},"b":{"docs":{},"i":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877}}}}}}}},"s":{"docs":{},"e":{"docs":{},"n":{"docs":{},"a":{"docs":{},"l":{"docs":{},".":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907}}}}}}}},"e":{"docs":{},"a":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}},":":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00141643059490085}}}}},"^":{"docs":{},"n":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.003215434083601286}}}},":":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855},"Tricks/":{"ref":"Tricks/","tf":0.004830917874396135}}},"c":{"docs":{},"c":{"docs":{},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062},"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0033222591362126247}},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047}}}}}},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"l":{"docs":{},"y":{"docs":{},".":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}}}}}}}}}}},"t":{"docs":{},"u":{"docs":{},"a":{"docs":{},"l":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002932551319648094},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},"l":{"docs":{},"y":{"docs":{},".":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}}}}}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}},".":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}},"h":{"docs":{},"i":{"docs":{},"e":{"docs":{},"v":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.007751937984496124},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717}},".":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047}}}}}}},"n":{"docs":{},"s":{"docs":{},"w":{"docs":{},"e":{"docs":{},"r":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.003430531732418525},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124},"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406}},":":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047}}},".":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}}}}}},"d":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.006872852233676976}}},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004439511653718091}}}}}}}},"y":{"docs":{},"t":{"docs":{},"h":{"docs":{"DataStructures/StacksAndQueues/":{"ref":"DataStructures/StacksAndQueues/","tf":0.01020408163265306}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},",":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.0058823529411764705},"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.005847953216374269},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0019801980198019802},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}}},".":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717}}}}}}}},"o":{"docs":{},"n":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}}},"o":{"docs":{},"t":{"docs":{},"h":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0025188916876574307},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00546448087431694},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}},"e":{"docs":{},"r":{"docs":{},".":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717}}}}}}}}},",":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}},"[":{"0":{"docs":{},"]":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}},"1":{"docs":{},"]":{"docs":{},",":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}},"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"(":{"docs":{},"a":{"docs":{},")":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488}}}}}}}},"i":{"docs":{},"]":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}},")":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995}}},".":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995}}}}},"p":{"docs":{},"+":{"1":{"docs":{},"]":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995}}}},"2":{"docs":{},"]":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}},"docs":{}}},"x":{"docs":{},"]":{"docs":{},"[":{"docs":{},"y":{"docs":{},"]":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.004314994606256742}}}}}}}},".":{"docs":{},"k":{"docs":{},"a":{"docs":{},"d":{"docs":{},"a":{"docs":{},"n":{"docs":{},"e":{"docs":{},"'":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}}}},"]":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}},",":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}},"g":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}},")":{"docs":{"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062}}},".":{"docs":{"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062},"DataStructures/StacksAndQueues/":{"ref":"DataStructures/StacksAndQueues/","tf":0.01020408163265306}}},"s":{"docs":{},"t":{"docs":{},".":{"docs":{"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062}}}}},",":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809}}}}}}},"s":{"docs":{},"c":{"docs":{},"i":{"docs":{},"i":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}},"s":{"docs":{},"i":{"docs":{},"g":{"docs":{},"n":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}}}}}},"k":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.002560819462227913},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228}}},"p":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}}}}}},"t":{"docs":{},"t":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}},"t":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}}}}},"r":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.005037783375314861}},"i":{"docs":{},"b":{"docs":{},"u":{"docs":{},"t":{"docs":{"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.007751937984496124},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877}}}}}}}},"l":{"docs":{},"e":{"docs":{},"a":{"docs":{},"s":{"docs":{},"t":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847}}}}}},"a":{"docs":{},"n":{"docs":{},"t":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002157497303128371}},"i":{"docs":{},"c":{"docs":{},"]":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}},"_":{"docs":{},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"u":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}},"e":{"docs":{},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"(":{"docs":{},"x":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}},",":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}}}}}}}}}}}}}}}}}}}}}}}}},"u":{"docs":{},"t":{"docs":{},"o":{"docs":{},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}}}}},"x":{"docs":{},"_":{"docs":{},"d":{"docs":{},"p":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995}},"[":{"0":{"docs":{},"]":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}},"1":{"docs":{},"]":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}},"2":{"docs":{},"]":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}},"docs":{}}}}}},"g":{"docs":{},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0025188916876574307},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}}}}}},"m":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.007751937984496124}}}}}},"a":{"docs":{},"z":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}}}}},"w":{"docs":{},"a":{"docs":{},"y":{"docs":{"DataStructures/StacksAndQueues/":{"ref":"DataStructures/StacksAndQueues/","tf":0.01020408163265306}}},"r":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}}}},"f":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"w":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{},"s":{"docs":{},".":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228}}},",":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00141643059490085}}}}}}}}}}},"o":{"docs":{},"r":{"docs":{},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}}}}}}}},")":{"docs":{},":":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476}}}},"i":{"docs":{},"m":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}}}}},"d":{"1":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228}},",":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228}}}},"2":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228}},",":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228}}}},"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.00686106346483705},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002188183807439825},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0019801980198019802},"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.008928571428571428},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.008403361344537815},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00404040404040404},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.003105590062111801}},"e":{"docs":{},"c":{"docs":{},"o":{"docs":{},"r":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.012658227848101266}}},"m":{"docs":{},"p":{"docs":{},"o":{"docs":{},"s":{"docs":{},"i":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}}}}}}},"i":{"docs":{},"d":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.0058823529411764705}}}},"r":{"docs":{},"e":{"docs":{},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}}}}}},"a":{"docs":{},"s":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},"e":{"docs":{},".":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"\"":{"docs":{},")":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}}}}}},"l":{"docs":{},"a":{"docs":{},"r":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564}}}}},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0019801980198019802},"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576}}}}}},"f":{"docs":{"Algorithms/SortingAndHashing.html":{"ref":"Algorithms/SortingAndHashing.html","tf":0.013333333333333334},"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.00964630225080386},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.020527859237536656},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.025728987993138937},"Algorithms/Games.html":{"ref":"Algorithms/Games.html","tf":0.013333333333333334},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.013745704467353952},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Algorithms/DP/NumSol.html":{"ref":"Algorithms/DP/NumSol.html","tf":0.013888888888888888},"Algorithms/UncommonAlgos.html":{"ref":"Algorithms/UncommonAlgos.html","tf":0.009900990099009901},"DataStructures/StacksAndQueues/":{"ref":"DataStructures/StacksAndQueues/","tf":0.02040816326530612},"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.023529411764705882},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.009846827133479213},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.012987012987012988},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.023880597014925373},"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.017543859649122806},"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.010810810810810811},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.014619883040935672},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.023047375160051217},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.022670025188916875},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0297029702970297},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.02774694783573807},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.01366120218579235},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.016042780748663103},"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.037914691943127965},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.03319502074688797},"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.017857142857142856},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.012605042016806723},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.020202020202020204},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.015748031496062992},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.015527950310559006},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.017259978425026967},"Miscellaneous/Palindrome.html":{"ref":"Miscellaneous/Palindrome.html","tf":0.04504504504504504},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.018272425249169437},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.012747875354107648},"Miscellaneous/AlienDictionary.html":{"ref":"Miscellaneous/AlienDictionary.html","tf":0.021739130434782608},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.01348747591522158},"Tricks/":{"ref":"Tricks/","tf":0.00966183574879227}},"a":{"docs":{},"u":{"docs":{},"l":{"docs":{},"t":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.005145797598627788},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0019801980198019802},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}},")":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678}},",":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124}}}},"d":{"docs":{},"i":{"docs":{},"c":{"docs":{},"t":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.004329004329004329},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.003329633740288568},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.008403361344537815},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00808080808080808},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.007874015748031496}},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},")":{"docs":{"Algorithms/SortingAndHashing.html":{"ref":"Algorithms/SortingAndHashing.html","tf":0.013333333333333334},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00404040404040404}}}}}},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},")":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.003215434083601286},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.004329004329004329},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0022197558268590455},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.005952380952380952},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.008403361344537815},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.006060606060606061},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.007874015748031496}}}}}}},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{},")":{"docs":{"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.031496062992125984}}}}}}},",":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.003215434083601286},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.007874015748031496}}}}}}},".":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228}}}}}}},"i":{"docs":{},"n":{"docs":{},"i":{"docs":{},"t":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.005121638924455826},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0019801980198019802},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.005549389567147614},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004149377593360996}}}}}}},"s":{"docs":{},"i":{"docs":{},"g":{"docs":{},"n":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}}},"r":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124}},"a":{"docs":{},"b":{"docs":{},"l":{"docs":{},"e":{"docs":{},".":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}}},"e":{"docs":{},"r":{"docs":{},"i":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}},"a":{"docs":{},"l":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}}}}}}}}}}}}}}}},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}},"t":{"docs":{},"r":{"docs":{},"u":{"docs":{},"c":{"docs":{},"t":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}}}}}}},"a":{"docs":{},"d":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"s":{"docs":{},":":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.003215434083601286}}},"_":{"docs":{},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.00964630225080386}},":":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.003215434083601286}}}}}}}}}}}},"l":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124}}}},"q":{"docs":{},"u":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.00964630225080386},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.011940298507462687},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.01092896174863388},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498},"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.005952380952380952},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.007874015748031496},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.005393743257820928}},"e":{"docs":{},"(":{"docs":{},")":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.006430868167202572},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.008955223880597015},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.01092896174863388},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498},"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.005952380952380952},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.015748031496062992},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.007551240560949299}}},"[":{"docs":{},"(":{"0":{"docs":{},",":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.003215434083601286}}}},"docs":{}}}},",":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.007874015748031496}}}}}},"e":{"docs":{},"p":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047}},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0022197558268590455},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}},"l":{"docs":{},"e":{"docs":{},"a":{"docs":{},"v":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847}}}}}}}}}}}}}}}}}}},"r":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}}}}},"l":{"docs":{"Algorithms/UncommonAlgos.html":{"ref":"Algorithms/UncommonAlgos.html","tf":0.009900990099009901},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002188183807439825}},"e":{"docs":{},"t":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}},".":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564}}}}},"n":{"docs":{},"g":{"docs":{},"/":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343}}}}}}}},"i":{"docs":{},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"i":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}},"a":{"docs":{},"y":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907}}}}},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}}}},"t":{"docs":{},"h":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.007920792079207921},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00404040404040404}},")":{"docs":{},":":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0019801980198019802}}}}}},"l":{"docs":{},"o":{"docs":{},"y":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}}}}},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062}}}}}}}},"v":{"docs":{},"i":{"docs":{},"d":{"docs":{"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406}}}}}},"o":{"docs":{"Algorithms/DP/NumSol.html":{"ref":"Algorithms/DP/NumSol.html","tf":0.013888888888888888},"Tricks/":{"ref":"Tricks/","tf":0.004830917874396135}},"c":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.012658227848101266}}}}}},":":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678}}},"n":{"docs":{},"e":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.003215434083601286}},":":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}}},".":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}}},"'":{"docs":{},"t":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062},"DataStructures/StacksAndQueues/":{"ref":"DataStructures/StacksAndQueues/","tf":0.01020408163265306},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.005037783375314861},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.003329633740288568},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0028328611898017}}}},"â€™":{"docs":{},"t":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124}}}}},"m":{"docs":{},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}},")":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047}}}}}},"i":{"docs":{},"n":{"docs":{},"o":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},"e":{"docs":{},"s":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}},":":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}},"[":{"docs":{},":":{"docs":{},":":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}}}}}},"u":{"docs":{},"b":{"docs":{},"l":{"docs":{"Algorithms/Games.html":{"ref":"Algorithms/Games.html","tf":0.013333333333333334},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0019801980198019802}},"i":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0025188916876574307}}}}}},"l":{"docs":{},"l":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}},"t":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}},"w":{"docs":{},"n":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.017964071856287425},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0039603960396039604},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00141643059490085}},":":{"docs":{"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062}}},"w":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}}}}},"t":{"docs":{},"i":{"docs":{},"m":{"docs":{},"e":{"docs":{},".":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}}}}}}}},"e":{"docs":{},"s":{"docs":{},"n":{"docs":{},"'":{"docs":{},"t":{"docs":{"DataStructures/StacksAndQueues/":{"ref":"DataStructures/StacksAndQueues/","tf":0.01020408163265306},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}}}}}}},"a":{"docs":{},"t":{"docs":{},"a":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},":":{"docs":{"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}}},")":{"docs":{},":":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}}}},".":{"docs":{},"s":{"docs":{},"p":{"docs":{},"l":{"docs":{},"i":{"docs":{},"t":{"docs":{},"(":{"docs":{},"'":{"docs":{},",":{"docs":{},"'":{"docs":{},")":{"docs":{},"]":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}}}}}}}}}}}}}}}},"y":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.005145797598627788},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.01098901098901099},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}},")":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.003430531732418525}}},":":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}}},"s":{"docs":{},"/":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}}},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}}}}}}}},",":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.01098901098901099}}}}},"i":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}},"c":{"docs":{},"t":{"docs":{"Algorithms/SortingAndHashing.html":{"ref":"Algorithms/SortingAndHashing.html","tf":0.006666666666666667},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}},".":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343}},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"(":{"docs":{},"k":{"docs":{},"e":{"docs":{},"y":{"docs":{},",":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678}}}}}},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},",":{"docs":{"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576}}}}}}}}}}}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343},"Miscellaneous/AlienDictionary.html":{"ref":"Miscellaneous/AlienDictionary.html","tf":5.021739130434782},"Tricks/":{"ref":"Tricks/","tf":0.00966183574879227}}},"y":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Miscellaneous/AlienDictionary.html":{"ref":"Miscellaneous/AlienDictionary.html","tf":0.021739130434782608}}},".":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.004329004329004329}}},")":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343}}}}}}}}},":":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.005847953216374269}}},"(":{"docs":{},")":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}},"e":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}},"r":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.003215434083601286},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0039603960396039604},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.006472491909385114},"Miscellaneous/Palindrome.html":{"ref":"Miscellaneous/Palindrome.html","tf":0.009009009009009009}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},")":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.003215434083601286}}},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},")":{"docs":{},":":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717}}}}}}}}}}}},",":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0019801980198019802}}},"s":{"docs":{},":":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.005393743257820928}}}}}}},"l":{"docs":{},"i":{"docs":{"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}}}}}}},"f":{"docs":{},"f":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.004658385093167702},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}},"e":{"docs":{},"r":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.001962066710268149},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.016483516483516484},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00141643059490085},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.00967741935483871}},"e":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},",":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}},":":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}},".":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564}}}}},"t":{"docs":{},".":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564}}}}}},"b":{"docs":{},"y":{"docs":{},"o":{"docs":{},"n":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343}}}}}}}}}}}}}}},"i":{"docs":{},"c":{"docs":{},"u":{"docs":{},"l":{"docs":{},"t":{"docs":{},"i":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}}}},"g":{"docs":{},"i":{"docs":{},"t":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564}},"s":{"docs":{},"/":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}},"s":{"docs":{},"c":{"docs":{},"u":{"docs":{},"s":{"docs":{},"s":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"/":{"6":{"5":{"5":{"7":{"0":{"8":{"docs":{},"/":{"docs":{},"g":{"docs":{},"r":{"docs":{},"a":{"docs":{},"p":{"docs":{},"h":{"docs":{"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576}}}}}}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"9":{"1":{"8":{"2":{"5":{"docs":{},"/":{"docs":{},"b":{"docs":{},"i":{"docs":{},"n":{"docs":{},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}}}}}}}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"7":{"8":{"6":{"1":{"2":{"6":{"docs":{},"/":{"docs":{},"p":{"docs":{},"y":{"docs":{},"t":{"docs":{},"h":{"docs":{},"o":{"docs":{},"n":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}}}}}}}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}}}}}}},"r":{"docs":{},"e":{"docs":{},"p":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0025188916876574307}},"a":{"docs":{},"n":{"docs":{},"c":{"docs":{},"y":{"docs":{},".":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809}}}}}}}}}},"o":{"docs":{},"n":{"docs":{},"n":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476}}}}}}}}},"h":{"docs":{},"e":{"docs":{},"s":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}},"t":{"docs":{},"a":{"docs":{},"n":{"docs":{},"c":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.016216216216216217},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011976047904191617},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0038535645472061657}},"e":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}},":":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228}}},"k":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877}}}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"c":{"docs":{},"t":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002188183807439825}},".":{"docs":{"DataStructures/StacksAndQueues/":{"ref":"DataStructures/StacksAndQueues/","tf":0.01020408163265306}}}}}}},"_":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},"d":{"docs":{},"i":{"docs":{},"f":{"docs":{},"f":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}},"s":{"docs":{},")":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}},"[":{"docs":{},"m":{"docs":{},"_":{"docs":{},"i":{"docs":{},"d":{"docs":{},"x":{"docs":{},"]":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}}}}},"t":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}},"[":{"docs":{},"m":{"docs":{},"_":{"docs":{},"i":{"docs":{},"d":{"docs":{},"x":{"docs":{},"]":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}}}}}},"r":{"docs":{},"i":{"docs":{},"b":{"docs":{},"u":{"docs":{},"t":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}}}}}}},"g":{"docs":{},"u":{"docs":{},"i":{"docs":{},"s":{"docs":{"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062}}}}}},"p":{"docs":{},"l":{"docs":{},"a":{"docs":{},"c":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.023880597014925373},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}},"e":{"docs":{},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"s":{"docs":{},".":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717}}}}}}}}}}}}}},"v":{"docs":{},"i":{"docs":{},"s":{"docs":{"Algorithms/Games.html":{"ref":"Algorithms/Games.html","tf":0.02666666666666667},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.011834319526627219},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},"o":{"docs":{},"r":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},"s":{"docs":{},".":{"docs":{},"a":{"docs":{},"d":{"docs":{},"d":{"docs":{},"(":{"docs":{},"i":{"docs":{},")":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}}}}},"/":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}},":":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}},"d":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004149377593360996}}}},"e":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}}},"a":{"docs":{},"l":{"docs":{},"e":{"docs":{},"r":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"s":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}}},"d":{"docs":{},"n":{"docs":{},"'":{"docs":{},"t":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}}}}},"p":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678},"Algorithms/Games.html":{"ref":"Algorithms/Games.html","tf":0.013333333333333334},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":10.015042511445388},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.023255813953488372},"Algorithms/DP/NumSol.html":{"ref":"Algorithms/DP/NumSol.html","tf":0.027777777777777776},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.029585798816568046},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}},"'":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}},",":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}},".":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"(":{"docs":{},"n":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}},";":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}},"[":{"0":{"docs":{},"]":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995}},"[":{"0":{"docs":{},"]":{"docs":{"Algorithms/DP/NumSol.html":{"ref":"Algorithms/DP/NumSol.html","tf":0.013888888888888888}}}},"docs":{}}}},"1":{"docs":{},"]":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}},")":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}},"2":{"docs":{},"]":{"docs":{},")":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995}}},",":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}},"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Algorithms/DP/NumSol.html":{"ref":"Algorithms/DP/NumSol.html","tf":0.013888888888888888}},":":{"docs":{},"]":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}},"f":{"docs":{},"i":{"docs":{},"r":{"docs":{},"s":{"docs":{},"t":{"docs":{},"_":{"docs":{},"o":{"docs":{},"n":{"docs":{},"e":{"docs":{},"]":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}}}}}},"i":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.006540222367560497}},"]":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.007848266841072597}},")":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}},"[":{"0":{"docs":{},"]":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}},"1":{"docs":{},"]":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}},"2":{"docs":{},"]":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}},"docs":{},"d":{"docs":{},"i":{"docs":{},"f":{"docs":{},"f":{"docs":{},"]":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}}}},"j":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}},"]":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}},")":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}},")":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}},",":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}},".":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"(":{"docs":{},"d":{"docs":{},"i":{"docs":{},"f":{"docs":{},"f":{"docs":{},",":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}}}}}}}},"n":{"docs":{},"]":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}},")":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}},"s":{"docs":{},"m":{"docs":{},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{},"_":{"docs":{},"a":{"docs":{},"m":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{},"]":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}}}}}}}}},"_":{"docs":{},"x":{"docs":{},"]":{"docs":{},"[":{"docs":{},"_":{"docs":{},"y":{"docs":{},"]":{"docs":{},",":{"docs":{"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062}}}}}}}}}},"x":{"docs":{"Algorithms/DP/NumSol.html":{"ref":"Algorithms/DP/NumSol.html","tf":0.013888888888888888}},"]":{"docs":{},"[":{"docs":{},"y":{"docs":{},"]":{"docs":{"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062},"Algorithms/DP/NumSol.html":{"ref":"Algorithms/DP/NumSol.html","tf":0.041666666666666664}},")":{"docs":{"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062}}}}},"i":{"docs":{"Algorithms/DP/NumSol.html":{"ref":"Algorithms/DP/NumSol.html","tf":0.013888888888888888}}}}}},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"v":{"2":{"docs":{},"]":{"docs":{},")":{"docs":{"Algorithms/DP/NumSol.html":{"ref":"Algorithms/DP/NumSol.html","tf":0.013888888888888888}}}}},"docs":{}}}}}}},")":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.003215434083601286}},"]":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}}},")":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}}}},"f":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.006430868167202572},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002932551319648094},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":5.004040404040404},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.003236245954692557}},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047}}}}}}},"d":{"docs":{},",":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476}}}},"i":{"docs":{},",":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476}}},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},",":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476}}},")":{"docs":{},":":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}}}}}},")":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}},":":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00404040404040404}}}}},"c":{"docs":{},")":{"docs":{},")":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}},"o":{"docs":{},"u":{"docs":{},"r":{"docs":{},"s":{"docs":{},"e":{"docs":{},")":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}},":":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}}}}}}}},"j":{"docs":{},")":{"docs":{},":":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}}},"n":{"docs":{},")":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}}},".":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}},"v":{"docs":{},"i":{"docs":{},"s":{"docs":{},"i":{"docs":{},"t":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.006060606060606061}},"e":{"docs":{},"d":{"docs":{},".":{"docs":{},"a":{"docs":{},"d":{"docs":{},"d":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},")":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"m":{"docs":{},"o":{"docs":{},"v":{"docs":{},"e":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},")":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}}}}}}}}}}}}}},":":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}}}}}}}}},":":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}}}},":":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.005847953216374269},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0039603960396039604}}},".":{"2":{"docs":{},"d":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}},"docs":{}},"r":{"docs":{},"o":{"docs":{},"p":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609}},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}},"y":{"docs":{},":":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717}}}}},"y":{"docs":{},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}}}},"u":{"docs":{},"r":{"docs":{},"e":{"docs":{"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124}}},"a":{"docs":{},"t":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.003105590062111801},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},")":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.003105590062111801}}},",":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}}},":":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0033222591362126247}}},"]":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}}}}}}},"p":{"docs":{},"l":{"docs":{},"i":{"docs":{},"c":{"docs":{"Algorithms/UncommonAlgos.html":{"ref":"Algorithms/UncommonAlgos.html","tf":0.009900990099009901},"DataStructures/StacksAndQueues/":{"ref":"DataStructures/StacksAndQueues/","tf":0.01020408163265306},"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.0058823529411764705},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}},"m":{"docs":{},"m":{"docs":{},"i":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0038412291933418692}}},"y":{"docs":{},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564}}}}}}}}}}},"m":{"docs":{"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.016216216216216217}},"=":{"docs":{},"d":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"n":{"docs":{},"c":{"docs":{"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406}}}}}}}}}},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406}},"[":{"docs":{},"c":{"docs":{},"o":{"docs":{},"l":{"docs":{"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406}}}}},"q":{"docs":{"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406}}}}}},"n":{"docs":{"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.010810810810810811}}}}},",":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.004658385093167702}}},"s":{"docs":{},"t":{"docs":{},":":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.008403361344537815},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.003105590062111801}}}}},"j":{"docs":{},"i":{"docs":{},"k":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"a":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}},".":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}}}}}}}}}}},"e":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004149377593360996},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.006644518272425249}},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"y":{"docs":{},"t":{"docs":{},"h":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.012658227848101266},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}},"i":{"docs":{},"m":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124}}}}},"w":{"docs":{},"h":{"docs":{},"e":{"docs":{},"r":{"docs":{},"e":{"docs":{},",":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.003215434083601286}}}}}}}},"o":{"docs":{},"n":{"docs":{"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576}}}}}},"n":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.006872852233676976},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0025188916876574307},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907}},"t":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0049833887043189366}},"s":{"docs":{},",":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}}}}}},"s":{"docs":{},"p":{"docs":{},"e":{"docs":{},"c":{"docs":{},"i":{"docs":{},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{},"y":{"docs":{},")":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678}}},",":{"docs":{"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877}}}}}}}},"t":{"docs":{},"i":{"docs":{"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062}}}}}}},"q":{"docs":{},"u":{"docs":{"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406}}}}},"t":{"docs":{},"c":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}},")":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717}},"e":{"docs":{},"r":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"(":{"docs":{},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},")":{"docs":{},"}":{"docs":{"Algorithms/SortingAndHashing.html":{"ref":"Algorithms/SortingAndHashing.html","tf":0.006666666666666667}}}}}}},"b":{"docs":{},"l":{"docs":{},"o":{"docs":{},"o":{"docs":{},"m":{"docs":{},"d":{"docs":{},"a":{"docs":{},"y":{"docs":{},")":{"docs":{},":":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}}}}}}}}}}}},"c":{"docs":{},"o":{"docs":{},"s":{"docs":{},"t":{"docs":{},"s":{"docs":{},"[":{"1":{"docs":{},":":{"docs":{},"]":{"docs":{},",":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}},"docs":{}}}}}}},"d":{"docs":{},"p":{"docs":{},"[":{"1":{"docs":{},":":{"docs":{},"]":{"docs":{},",":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}},"docs":{}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},")":{"docs":{},":":{"docs":{"Algorithms/UncommonAlgos.html":{"ref":"Algorithms/UncommonAlgos.html","tf":0.009900990099009901},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0032822757111597373},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.004329004329004329},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}},"[":{"1":{"docs":{},":":{"docs":{},"]":{"docs":{},",":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}},"docs":{}}}},"t":{"docs":{},"s":{"docs":{},")":{"docs":{},":":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}}},"s":{"docs":{},")":{"docs":{},":":{"docs":{"DataStructures/StacksAndQueues/":{"ref":"DataStructures/StacksAndQueues/","tf":0.01020408163265306},"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.007082152974504249},"Tricks/":{"ref":"Tricks/","tf":0.004830917874396135}}}},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"[":{"1":{"docs":{},":":{"docs":{},"]":{"docs":{},",":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343}}}}}},"docs":{}}}}}}}},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"f":{"docs":{},"i":{"docs":{},"x":{"docs":{},")":{"docs":{},":":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124}}}}}}}}},"p":{"docs":{},"i":{"docs":{},"d":{"docs":{},")":{"docs":{},":":{"docs":{"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576}}}}}}}},"h":{"docs":{},"e":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},"s":{"docs":{},")":{"docs":{},":":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717}}}},"[":{"1":{"docs":{},":":{"docs":{},"]":{"docs":{},",":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}}}}}},"docs":{}}}}}}}},"_":{"docs":{},"s":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{},"e":{"docs":{},"d":{"docs":{},"[":{"1":{"docs":{},":":{"docs":{},"]":{"docs":{},",":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}},"docs":{}}}}}}}}}},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"s":{"docs":{},")":{"docs":{},":":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},")":{"docs":{},":":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}}},"}":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}}}}}}}}}}},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},")":{"docs":{},":":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}}}}}}},"t":{"docs":{},"a":{"docs":{},"s":{"docs":{},"k":{"docs":{},"s":{"docs":{},")":{"docs":{},"]":{"docs":{},")":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}}}},":":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}}}},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},")":{"docs":{},"}":{"docs":{"Miscellaneous/AlienDictionary.html":{"ref":"Miscellaneous/AlienDictionary.html","tf":0.021739130434782608}}}}}}}}},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"s":{"docs":{},"[":{"docs":{},":":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"(":{"docs":{},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"s":{"docs":{},")":{"docs":{"Miscellaneous/AlienDictionary.html":{"ref":"Miscellaneous/AlienDictionary.html","tf":0.021739130434782608}}}}}}}}}}}}}}}}}}},"v":{"docs":{},"_":{"docs":{},"s":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{},"e":{"docs":{},"d":{"docs":{},"[":{"1":{"docs":{},":":{"docs":{},"]":{"docs":{},",":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}},"docs":{}}}}}}}}}}}}}}}}}},"a":{"docs":{},"b":{"docs":{},"l":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.003215434083601286}}}}},"d":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.003215434083601286},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.029159519725557463},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995},"DataStructures/StacksAndQueues/":{"ref":"DataStructures/StacksAndQueues/","tf":0.01020408163265306},"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.0058823529411764705},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.018599562363238512},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.006402048655569782},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004149377593360996},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002157497303128371},"Miscellaneous/Palindrome.html":{"ref":"Miscellaneous/Palindrome.html","tf":0.036036036036036036},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.01098901098901099},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.016611295681063124},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.008670520231213872}},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},":":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.006430868167202572}}}}}}},")":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004149377593360996},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.008305647840531562}},":":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004149377593360996},"Miscellaneous/Palindrome.html":{"ref":"Miscellaneous/Palindrome.html","tf":0.009009009009009009},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}},",":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.003430531732418525},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0032822757111597373},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004149377593360996},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495},"Miscellaneous/AlienDictionary.html":{"ref":"Miscellaneous/AlienDictionary.html","tf":0.021739130434782608}}},":":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.006224066390041493},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}},".":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124}}},"s":{"docs":{},",":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124}}}},"=":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},")":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}}}}}}}}}}}}}}},"]":{"docs":{},")":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}},"+":{"1":{"docs":{},")":{"docs":{},":":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}},"docs":{}}},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0028328611898017},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}},"d":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}}}}},"o":{"docs":{},"u":{"docs":{},"g":{"docs":{},"h":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}}}},"v":{"docs":{},"e":{"docs":{},"l":{"docs":{},"o":{"docs":{},"p":{"docs":{},"e":{"docs":{},"s":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}}},"i":{"docs":{},"r":{"docs":{},"o":{"docs":{},"n":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.012903225806451613}}}}}}},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}}}}},"x":{"docs":{},"p":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"Algorithms/SortingAndHashing.html":{"ref":"Algorithms/SortingAndHashing.html","tf":0.02666666666666667},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476}},"e":{"docs":{},"d":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},":":{"docs":{"Algorithms/SortingAndHashing.html":{"ref":"Algorithms/SortingAndHashing.html","tf":0.006666666666666667}}}}}},"_":{"docs":{},"i":{"docs":{},"d":{"docs":{},"x":{"docs":{"Algorithms/SortingAndHashing.html":{"ref":"Algorithms/SortingAndHashing.html","tf":0.013333333333333334}}}}}},")":{"docs":{},":":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476}}}},",":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476}}}}}}},"r":{"docs":{},"i":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0064516129032258064}}},"t":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}}}},"l":{"docs":{},"a":{"docs":{},"n":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},":":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}}},"i":{"docs":{},"n":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},":":{"docs":{"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996}}}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995}}}}}},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.005470459518599562},"Miscellaneous/Palindrome.html":{"ref":"Miscellaneous/Palindrome.html","tf":0.018018018018018018}},".":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124}}}}}}},"c":{"docs":{},"e":{"docs":{},"l":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.003215434083601286},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}}}},"l":{"docs":{},"u":{"docs":{},"d":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00141643059490085}}}}}},"h":{"docs":{},"a":{"docs":{},"u":{"docs":{},"s":{"docs":{},"t":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.003215434083601286},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995}}}}}}},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"m":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.003215434083601286},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.001962066710268149},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907}}}},"a":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.006872852233676976}},")":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488}}},",":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488}}}}},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847}}}}}},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0019801980198019802},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}},"s":{"docs":{},":":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476}}},",":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476}}}},"a":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},".":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564}}}}}}},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}}}}}}}}},"t":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.005037783375314861},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}},"\"":{"docs":{},")":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{},"l":{"docs":{},"i":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}},"m":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}},"p":{"docs":{},"l":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995}},"e":{"docs":{},":":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062},"Tricks/":{"ref":"Tricks/","tf":0.004830917874396135}}},",":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564}}}}}}}}},"a":{"docs":{},"c":{"docs":{},"h":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.003215434083601286},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002932551319648094},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00437636761487965},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717},"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.005847953216374269},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.005847953216374269},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002157497303128371},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}}}},"r":{"docs":{},"n":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}},"l":{"docs":{},"i":{"docs":{},"e":{"docs":{},"r":{"docs":{"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406}}}}}}},"s":{"docs":{},"i":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.0058823529411764705}},"l":{"docs":{},"i":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124}}}},"e":{"docs":{},"r":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228}},".":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}},"y":{"docs":{},"!":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}},"t":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}},"g":{"docs":{},".":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.006430868167202572},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}},":":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}}},"g":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}},"l":{"docs":{},"i":{"docs":{},"f":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.003215434083601286},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0019801980198019802},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0028328611898017},"Miscellaneous/AlienDictionary.html":{"ref":"Miscellaneous/AlienDictionary.html","tf":0.021739130434782608},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}}},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809}},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"/":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}}}}}}}}}}},"e":{"docs":{},"m":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.0058823529411764705},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.005970149253731343},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.005037783375314861},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004398826979472141},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.005145797598627788},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.011627906976744186},"DataStructures/StacksAndQueues/":{"ref":"DataStructures/StacksAndQueues/","tf":0.02040816326530612},"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02},"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01764705882352941},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0032822757111597373},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.004329004329004329},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.023880597014925373},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.002560819462227913},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0025188916876574307},"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.006224066390041493},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.01098901098901099},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828},"Tricks/":{"ref":"Tricks/","tf":0.00966183574879227}},":":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717}}},"s":{"docs":{},",":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}},"/":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}},",":{"docs":{"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.004329004329004329},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}},"/":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.04},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124}}},".":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0025188916876574307}}}}}},"s":{"docs":{},")":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.0058823529411764705}}},":":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}}}},",":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.004329004329004329},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}},")":{"docs":{"Tricks/":{"ref":"Tricks/","tf":0.004830917874396135}}}},"g":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564}}}},"s":{"docs":{},"e":{"docs":{},":":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.008576329331046312},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488},"DataStructures/StacksAndQueues/":{"ref":"DataStructures/StacksAndQueues/","tf":0.01020408163265306},"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.011695906432748537},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.002560819462227913},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.007556675062972292},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.005940594059405941},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.009966777408637873},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0113314447592068},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0038535645472061657}}}}}},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{},"i":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.003215434083601286},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00424929178470255}}}}}},"d":{"docs":{},"g":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.002560819462227913},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.010101010101010102},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},"e":{"docs":{},"s":{"docs":{},":":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0022197558268590455},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00808080808080808}}},"[":{"docs":{},"(":{"docs":{},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{},"r":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},",":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.006060606060606061}}}}}}}}}},"s":{"docs":{},",":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}}}}}}}},"q":{"docs":{},"u":{"docs":{},"a":{"docs":{},"l":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.002616088947024199},"Algorithms/UncommonAlgos.html":{"ref":"Algorithms/UncommonAlgos.html","tf":0.009900990099009901},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00437636761487965},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}},"i":{"docs":{},"t":{"docs":{},"y":{"docs":{},",":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}}},".":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}}},":":{"docs":{"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996}}}}}},":":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717}}},",":{"docs":{"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.005847953216374269}}}},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},":":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}},"i":{"docs":{},"d":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809}}}}}},"l":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}}},".":{"docs":{},"c":{"docs":{},"u":{"docs":{},"m":{"docs":{},"u":{"docs":{},"l":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}},"g":{"docs":{},".":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}}}},"i":{"docs":{},"t":{"docs":{},"h":{"docs":{},"e":{"docs":{},"r":{"docs":{},":":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}},"f":{"docs":{},"f":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.0058823529411764705}}}}},"i":{"docs":{},"c":{"docs":{},"i":{"docs":{"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202},"Tricks/":{"ref":"Tricks/","tf":0.004830917874396135},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}},"e":{"docs":{},"n":{"docs":{},"c":{"docs":{},"y":{"docs":{},".":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}}}}},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{},"/":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}}}}}}}},",":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}}},":":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}},"]":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}},"r":{"docs":{},"a":{"docs":{},"s":{"docs":{},"e":{"docs":{},"o":{"docs":{},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"l":{"docs":{},"a":{"docs":{},"p":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"f":{"docs":{"Algorithms/SortingAndHashing.html":{"ref":"Algorithms/SortingAndHashing.html","tf":0.006666666666666667},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00404040404040404},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},"i":{"docs":{},"r":{"docs":{},"s":{"docs":{},"t":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.012658227848101266},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.004578155657292348},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062},"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.0058823529411764705},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.005970149253731343},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0025188916876574307},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.008928571428571428},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002157497303128371},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00141643059490085},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.004816955684007707},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}},":":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}},".":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0025188916876574307},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}},"m":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.00967741935483871}}}},"n":{"docs":{},"d":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.003215434083601286},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.005145797598627788},"Algorithms/Games.html":{"ref":"Algorithms/Games.html","tf":0.013333333333333334},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.005470459518599562},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.008658008658008658},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.005037783375314861},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.003329633740288568},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.006060606060606061},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0033222591362126247},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.007082152974504249},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.00674373795761079},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0064516129032258064}},"_":{"docs":{},"f":{"docs":{},"i":{"docs":{},"r":{"docs":{},"s":{"docs":{},"t":{"docs":{},"_":{"docs":{},"g":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}},",":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}}}}}}}}}}}}}}}}}}}}}},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"(":{"docs":{},"l":{"docs":{},",":{"docs":{"Miscellaneous/Palindrome.html":{"ref":"Miscellaneous/Palindrome.html","tf":0.009009009009009009}}}}}}}}},"b":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}}}}}}}}}}}}}}}}},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.003430531732418525}}}}}}}},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},"o":{"docs":{},"w":{"docs":{},"s":{"docs":{},"h":{"docs":{},"o":{"docs":{},"t":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"s":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"r":{"docs":{},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{},"e":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}}}}}}}}}}}}}}}}}}},"t":{"docs":{},"h":{"docs":{},"e":{"docs":{},"l":{"docs":{},"o":{"docs":{},"n":{"docs":{},"g":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488}}}}}}}}}}}}}}}}}}}}}}}}}}},"l":{"docs":{},"o":{"docs":{},"n":{"docs":{},"g":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343}}}}}}}}}}}}}}}}}},"e":{"docs":{},"a":{"docs":{},"v":{"docs":{},"e":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228}}}}}}}}}}}}}},"f":{"docs":{},"r":{"docs":{},"e":{"docs":{},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228}}}}}}}}}}}}}}}}}}}}}}},"c":{"docs":{},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"p":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"p":{"docs":{},"r":{"docs":{},"i":{"docs":{},"c":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}}}}}}}}}}}}}}}}}}}}},"i":{"docs":{},"t":{"docs":{},"i":{"docs":{},"n":{"docs":{},"e":{"docs":{},"r":{"docs":{},"a":{"docs":{},"r":{"docs":{},"y":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}}}}}}}}}}}}}}},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.007874015748031496}}}}}}}}}}}}},"d":{"docs":{},"u":{"docs":{},"p":{"docs":{},"l":{"docs":{},"i":{"docs":{},"c":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}}}}}}}}}}}}}},"g":{"docs":{},"e":{"docs":{},"r":{"docs":{},"p":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.003215434083601286},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.017543859649122806},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.002560819462227913}},"s":{"docs":{},".":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"(":{"docs":{},"f":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"e":{"docs":{},"r":{"docs":{},"p":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},",":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343}}}}}}}}}}}}}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{},"e":{"docs":{},"s":{"docs":{},"(":{"docs":{},")":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343}}}}}}}}}}},"[":{"docs":{},"f":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"e":{"docs":{},"r":{"docs":{},"p":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"]":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343}}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}},"i":{"docs":{},"s":{"docs":{},"h":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}}}},"a":{"docs":{},"l":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343}},"_":{"docs":{},"a":{"docs":{},"n":{"docs":{},"s":{"docs":{},"w":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124}}}}}}}}}},"l":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877}}}}},"l":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},":":{"docs":{"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062}}}}}}}},"b":{"docs":{},"o":{"docs":{},"n":{"docs":{},"a":{"docs":{},"c":{"docs":{},"c":{"docs":{},"i":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}}},"g":{"docs":{},"u":{"docs":{},"r":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}},"t":{"docs":{"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.007751937984496124}}},"x":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.004329004329004329}}},"e":{"docs":{},"l":{"docs":{},"d":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}}}}},"o":{"docs":{"Tricks/":{"ref":"Tricks/","tf":0.004830917874396135}},"r":{"docs":{},"c":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.012658227848101266}}},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{"Algorithms/SortingAndHashing.html":{"ref":"Algorithms/SortingAndHashing.html","tf":0.006666666666666667},"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.003215434083601286},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228}}}}},"m":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}},"w":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.0058823529411764705},"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.005847953216374269}},";":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},".":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124}}}}}}}}}},",":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0025188916876574307}}}},"u":{"docs":{},"n":{"docs":{},"d":{"docs":{"Algorithms/UncommonAlgos.html":{"ref":"Algorithms/UncommonAlgos.html","tf":0.009900990099009901},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002188183807439825},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.008658008658008658},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.003329633740288568},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.01098901098901099},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00141643059490085}},",":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124},"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576}}}}}},"l":{"docs":{},"l":{"docs":{},"o":{"docs":{},"w":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.005037783375314861},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}},"u":{"docs":{},"p":{"docs":{"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.009478672985781991}}}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},":":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}}}}},"s":{"docs":{},":":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}}},"o":{"docs":{},"d":{"docs":{},"/":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}}}},"c":{"docs":{},"u":{"docs":{},"s":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}}}}},"u":{"docs":{},"n":{"docs":{},"c":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.02531645569620253},"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678},"Algorithms/SortingAndHashing.html":{"ref":"Algorithms/SortingAndHashing.html","tf":0.006666666666666667},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.003430531732418525},"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.005847953216374269},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907},"Miscellaneous/Palindrome.html":{"ref":"Miscellaneous/Palindrome.html","tf":0.02702702702702703},"Tricks/":{"ref":"Tricks/","tf":0.014492753623188406}},".":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488},"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.005847953216374269},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498},"Tricks/":{"ref":"Tricks/","tf":0.004830917874396135}}},")":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564}}},":":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}}}}},"o":{"docs":{},"o":{"docs":{},"l":{"docs":{"Tricks/":{"ref":"Tricks/","tf":0.004830917874396135}},"s":{"docs":{},".":{"docs":{},"l":{"docs":{},"r":{"docs":{},"u":{"docs":{},"_":{"docs":{},"c":{"docs":{},"a":{"docs":{},"c":{"docs":{},"h":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047}}}}}}}}}},"c":{"docs":{},"m":{"docs":{},"p":{"docs":{},"_":{"docs":{},"t":{"docs":{},"o":{"docs":{},"_":{"docs":{},"k":{"docs":{},"e":{"docs":{},"y":{"docs":{},"(":{"docs":{},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{},"a":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},")":{"docs":{"Tricks/":{"ref":"Tricks/","tf":0.004830917874396135}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"r":{"docs":{},"t":{"docs":{},"h":{"docs":{},"e":{"docs":{},"r":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.012658227848101266}}},"s":{"docs":{},"t":{"docs":{},"j":{"docs":{},"u":{"docs":{},"m":{"docs":{},"p":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047}}}}}},"b":{"docs":{},"u":{"docs":{},"i":{"docs":{},"l":{"docs":{},"d":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}}}}}}}}}}}}}}}}}}}}}},"e":{"docs":{},"l":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}}},"t":{"docs":{},"u":{"docs":{},"r":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}}}}},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}},"o":{"docs":{},"r":{"docs":{},"s":{"docs":{},"/":{"docs":{},"d":{"docs":{},"i":{"docs":{},"v":{"docs":{},"i":{"docs":{},"s":{"docs":{},"o":{"docs":{},"r":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678}}}}}}}}}}}}}},"i":{"docs":{},"l":{"docs":{},"i":{"docs":{},"t":{"docs":{"Algorithms/UncommonAlgos.html":{"ref":"Algorithms/UncommonAlgos.html","tf":0.009900990099009901}}}}}}},"u":{"docs":{},"l":{"docs":{},"t":{"docs":{},"i":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678}}}}}},"i":{"docs":{},"l":{"docs":{},"u":{"docs":{},"r":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00141643059490085}}}}},"r":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}},",":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}}}},"l":{"docs":{},"s":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002932551319648094},"Algorithms/Games.html":{"ref":"Algorithms/Games.html","tf":0.013333333333333334},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062},"DataStructures/StacksAndQueues/":{"ref":"DataStructures/StacksAndQueues/","tf":0.01020408163265306},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.002560819462227913},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.005037783375314861},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0022197558268590455},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00819672131147541},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.011904761904761904},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00808080808080808},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0028328611898017},"Miscellaneous/AlienDictionary.html":{"ref":"Miscellaneous/AlienDictionary.html","tf":0.043478260869565216},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0038535645472061657}},"e":{"docs":{},":":{"docs":{},"=":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0025188916876574307}}}},")":{"docs":{},")":{"docs":{"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576}}}}}},"l":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.001962066710268149},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124}},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}},"r":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}},";":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047}}},",":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}},".":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}},"t":{"docs":{},"h":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}}},"s":{"docs":{},"t":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.011523687580025609},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0064516129032258064}},"e":{"docs":{},"r":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.0058823529411764705},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002157497303128371}}}},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.002560819462227913}},".":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564}}},":":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564}}}}}}}}}},"v":{"docs":{},"o":{"docs":{},"u":{"docs":{},"r":{"docs":{},"i":{"docs":{},"t":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}}}}}}}},"[":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"_":{"docs":{},"k":{"docs":{},"e":{"docs":{},"y":{"docs":{},"]":{"docs":{"Algorithms/SortingAndHashing.html":{"ref":"Algorithms/SortingAndHashing.html","tf":0.006666666666666667}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"_":{"docs":{},"k":{"docs":{},"e":{"docs":{},"y":{"docs":{},"]":{"docs":{"Algorithms/SortingAndHashing.html":{"ref":"Algorithms/SortingAndHashing.html","tf":0.006666666666666667}}}}}}}}}},"v":{"docs":{},"]":{"docs":{"Algorithms/SortingAndHashing.html":{"ref":"Algorithms/SortingAndHashing.html","tf":0.006666666666666667}}}},"i":{"docs":{},"]":{"docs":{},"[":{"docs":{},"j":{"docs":{},"]":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995}},"b":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}},"p":{"docs":{},"]":{"docs":{},"[":{"docs":{},"j":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}},"r":{"docs":{},"e":{"docs":{},"q":{"docs":{"Algorithms/SortingAndHashing.html":{"ref":"Algorithms/SortingAndHashing.html","tf":0.02},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.002890173410404624}},".":{"docs":{},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{},"m":{"docs":{},"s":{"docs":{},"(":{"docs":{},")":{"docs":{},":":{"docs":{"Algorithms/SortingAndHashing.html":{"ref":"Algorithms/SortingAndHashing.html","tf":0.006666666666666667},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}}}}},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"(":{"docs":{},"t":{"docs":{},",":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}}}},"[":{"docs":{},"c":{"docs":{},"h":{"docs":{},"a":{"docs":{},"r":{"docs":{},"]":{"docs":{"Algorithms/SortingAndHashing.html":{"ref":"Algorithms/SortingAndHashing.html","tf":0.006666666666666667}}}}}}},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"]":{"docs":{},"[":{"docs":{},"'":{"0":{"docs":{},"'":{"docs":{},"]":{"docs":{"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062}}}}},"1":{"docs":{},"'":{"docs":{},"]":{"docs":{"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062}}}}},"docs":{}}}}}}}}}},"t":{"docs":{},"]":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}}},"a":{"docs":{},"s":{"docs":{},"k":{"docs":{},"]":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}},":":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}}}},"u":{"docs":{},"e":{"docs":{},"n":{"docs":{},"c":{"docs":{"Algorithms/SortingAndHashing.html":{"ref":"Algorithms/SortingAndHashing.html","tf":0.006666666666666667},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002188183807439825},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}},"y":{"docs":{},".":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}},"t":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228},"Tricks/":{"ref":"Tricks/","tf":0.00966183574879227}}}}}},"(":{"docs":{},"x":{"docs":{},")":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609}}},"+":{"1":{"docs":{},")":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609}}}},"docs":{}}}},":":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}},"i":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{"Algorithms/Games.html":{"ref":"Algorithms/Games.html","tf":0.013333333333333334}}}}}},"o":{"docs":{},"n":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124}}}}},"e":{"docs":{},"w":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.003215434083601286}},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}},"e":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.01098901098901099}},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}},")":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.01098901098901099}},":":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}},"d":{"docs":{},"b":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0064516129032258064}},",":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}}}}}}}},"t":{"docs":{},"c":{"docs":{},"h":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}}},"d":{"docs":{"Tricks/":{"ref":"Tricks/","tf":0.004830917874396135}}}},"g":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.003430531732418525},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004149377593360996}}},"l":{"docs":{},"o":{"docs":{},"a":{"docs":{},"t":{"docs":{},"(":{"docs":{},"'":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00437636761487965},"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0019801980198019802},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0022197558268590455},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0049833887043189366},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},"i":{"docs":{},"n":{"docs":{},"f":{"docs":{},"'":{"docs":{},")":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.003430531732418525},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124},"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.010810810810810811},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}},"]":{"docs":{"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406}},",":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124}}}},",":{"docs":{"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847}}},")":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228}}}}}}}}}},",":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}},":":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}},"w":{"docs":{},"e":{"docs":{},"r":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476}},"s":{"docs":{},".":{"docs":{},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476}}}}}}},"r":{"docs":{},"e":{"docs":{},"m":{"docs":{},"o":{"docs":{},"v":{"docs":{},"e":{"docs":{},"(":{"docs":{},"p":{"docs":{},"l":{"docs":{},"a":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"d":{"docs":{},"[":{"docs":{},"n":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476}}}}}}}}}}}}}}}}}}},":":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476}}}}}},"/":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}}},"o":{"docs":{},"r":{"docs":{},"(":{"docs":{},"s":{"docs":{},"q":{"docs":{},"r":{"docs":{},"t":{"docs":{},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},")":{"docs":{},")":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}}}}}}}}}}}}}}},"u":{"docs":{},"r":{"docs":{},"i":{"docs":{},"s":{"docs":{},"h":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0064516129032258064}}}}}}}},"i":{"docs":{},"p":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.006872852233676976},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}},"s":{"docs":{},":":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.008403361344537815},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.003105590062111801}}}}}}}},"a":{"docs":{},"g":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0025188916876574307}}},"t":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}},"t":{"docs":{},"e":{"docs":{},"n":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0019801980198019802}}}}}}}}}}}}}},"(":{"docs":{},"d":{"docs":{},"p":{"docs":{},"[":{"1":{"docs":{},"]":{"docs":{},",":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}},"docs":{},"i":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}},"s":{"docs":{},"m":{"docs":{},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{},"_":{"docs":{},"a":{"docs":{},"m":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}}}}}}}}}}},"g":{"docs":{},"(":{"docs":{},"j":{"docs":{},",":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}},".":{"docs":{},"h":{"docs":{},"a":{"docs":{},"s":{"docs":{},"h":{"docs":{},"m":{"docs":{},"a":{"docs":{},"p":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}}}},")":{"docs":{},",":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}},",":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}},"=":{"docs":{},"=":{"docs":{},"s":{"docs":{},",":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}},"k":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678},"Algorithms/SortingAndHashing.html":{"ref":"Algorithms/SortingAndHashing.html","tf":0.006666666666666667},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004398826979472141},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.003924133420536298},"Algorithms/UncommonAlgos.html":{"ref":"Algorithms/UncommonAlgos.html","tf":0.009900990099009901},"DataStructures/StacksAndQueues/":{"ref":"DataStructures/StacksAndQueues/","tf":0.030612244897959183},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0087527352297593},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.012987012987012988},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.005970149253731343},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0427807486631016},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.025210084033613446},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.017080745341614908},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002157497303128371},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}},"e":{"docs":{},"e":{"docs":{},"p":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.012658227848101266},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.010309278350515464},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995},"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.0058823529411764705},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0032822757111597373},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.010075566750629723},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0028328611898017},"Tricks/":{"ref":"Tricks/","tf":0.004830917874396135}}}},"y":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995},"Algorithms/DP/NumSol.html":{"ref":"Algorithms/DP/NumSol.html","tf":0.013888888888888888},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717},"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.005847953216374269},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005},"Miscellaneous/Palindrome.html":{"ref":"Miscellaneous/Palindrome.html","tf":0.009009009009009009},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.006644518272425249},"Tricks/":{"ref":"Tricks/","tf":0.014492753623188406}},"b":{"docs":{},"o":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678}},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"m":{"docs":{},"i":{"docs":{},"s":{"docs":{},"s":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"/":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047}}}}}}}}}}}}}}}}}}}},"=":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343}},"l":{"docs":{},"a":{"docs":{},"m":{"docs":{},"b":{"docs":{},"d":{"docs":{},"a":{"docs":{"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.005847953216374269},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.005847953216374269},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123},"Tricks/":{"ref":"Tricks/","tf":0.004830917874396135}}}}}}}}},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},",":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564}}}}}}},",":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228}}}},"p":{"docs":{},"t":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}},"a":{"docs":{},"d":{"docs":{},"a":{"docs":{},"n":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678}},"e":{"docs":{},"'":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}},",":{"docs":{"Algorithms/SortingAndHashing.html":{"ref":"Algorithms/SortingAndHashing.html","tf":0.006666666666666667},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.003105590062111801},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414},"Tricks/":{"ref":"Tricks/","tf":0.004830917874396135}}},":":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002932551319648094},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"Algorithms/UncommonAlgos.html":{"ref":"Algorithms/UncommonAlgos.html","tf":0.009900990099009901},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.005470459518599562},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.005970149253731343},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.008403361344537815},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.006211180124223602},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00437636761487965}}},"n":{"docs":{},"a":{"docs":{},"p":{"docs":{},"s":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.001962066710268149},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":10.003875968992247}},".":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}}},"o":{"docs":{},"w":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002188183807439825}},"n":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}}}},"u":{"docs":{},"t":{"docs":{},"h":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717}}}}}},"â€™":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.0058823529411764705}}},")":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124}},")":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907}}}},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.00967741935483871}},"a":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228}}}}},"l":{"docs":{},"l":{"docs":{},":":{"docs":{"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.022727272727272728}}},"p":{"docs":{},"r":{"docs":{},"o":{"docs":{},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576}}}}}}}}}}}}}}}}},"t":{"docs":{},"&":{"docs":{},"p":{"docs":{},"l":{"docs":{},"a":{"docs":{},"y":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"_":{"docs":{},"s":{"docs":{},"l":{"docs":{},"u":{"docs":{},"g":{"docs":{},"s":{"docs":{},"%":{"5":{"docs":{},"b":{"docs":{},"%":{"5":{"docs":{},"d":{"docs":{},"=":{"docs":{},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},"a":{"docs":{},"y":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}}}}}}}}},"docs":{}}}},"docs":{}}}}}}}}}}}}}}}}}}},"c":{"docs":{},"l":{"docs":{},"o":{"docs":{},"s":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}}}}}}}}}}}}}}},"w":{"docs":{},"e":{"docs":{},"a":{"docs":{},"k":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"o":{"docs":{},"w":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}}}}}}}}}}}}}}}}}}},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002157497303128371}},")":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}},")":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}}},":":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}}}}}}}},"m":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.005145797598627788},"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.005847953216374269},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717}},"t":{"docs":{},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.012658227848101266},"Algorithms/UncommonAlgos.html":{"ref":"Algorithms/UncommonAlgos.html","tf":0.009900990099009901},"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.0058823529411764705},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002188183807439825},"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.005847953216374269},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.003105590062111801},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.01098901098901099},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}}}}}},"l":{"docs":{},"b":{"docs":{},"o":{"docs":{},"x":{"docs":{},"e":{"docs":{},"s":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}}},"t":{"docs":{},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717}}}}}}},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"x":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.024691358024691357},"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.003236245954692557}},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.003236245954692557}}},":":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002157497303128371}}},"[":{"docs":{},"r":{"docs":{},"_":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002157497303128371}},"e":{"docs":{},"]":{"docs":{},"[":{"docs":{},"c":{"docs":{},"_":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002157497303128371}}}}}}},"s":{"docs":{},"+":{"docs":{},"i":{"docs":{},"]":{"docs":{},"[":{"docs":{},"c":{"docs":{},"_":{"docs":{},"e":{"docs":{},"]":{"docs":{},",":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002157497303128371}}}}}}}}}}},"]":{"docs":{},"[":{"docs":{},"c":{"docs":{},"_":{"docs":{},"s":{"docs":{},"+":{"docs":{},"i":{"docs":{},"]":{"docs":{},",":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002157497303128371}}}}}}}}}}}}}}}},"c":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}}}},"h":{"docs":{"Tricks/":{"ref":"Tricks/","tf":0.00966183574879227}},".":{"docs":{},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},"p":{"docs":{},"o":{"docs":{},"s":{"docs":{},"i":{"docs":{},"t":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047}}}}}}}}}},"a":{"docs":{},"x":{"docs":{},"(":{"docs":{},"d":{"docs":{},"p":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},",":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}}}}}},"c":{"docs":{},"e":{"docs":{},"i":{"docs":{},"l":{"docs":{"Tricks/":{"ref":"Tricks/","tf":0.004830917874396135}}}}}},"f":{"docs":{},"l":{"docs":{},"o":{"docs":{},"o":{"docs":{},"r":{"docs":{"Tricks/":{"ref":"Tricks/","tf":0.004830917874396135}}}}}}}}},"c":{"docs":{},"h":{"docs":{"DataStructures/StacksAndQueues/":{"ref":"DataStructures/StacksAndQueues/","tf":0.02040816326530612},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.014619883040935672},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0025188916876574307},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00424929178470255}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995}}}}}},"e":{"docs":{},"d":{"docs":{},":":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124}}}}},".":{"docs":{"Miscellaneous/Palindrome.html":{"ref":"Miscellaneous/Palindrome.html","tf":0.009009009009009009}}}}},":":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}}},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00141643059490085},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}}}}},"x":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.003430531732418525},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0019801980198019802},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004439511653718091},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005},"Miscellaneous/Palindrome.html":{"ref":"Miscellaneous/Palindrome.html","tf":0.009009009009009009},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.00674373795761079}},"i":{"docs":{},"m":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124}},"u":{"docs":{},"m":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002932551319648094},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.003924133420536298},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.016483516483516484}},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004398826979472141}},")":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047}}}}}},",":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}}},"/":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717}}}}},"a":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}}},"(":{"1":{"docs":{"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062}}},"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228}},"f":{"docs":{},".":{"docs":{},"k":{"docs":{},"e":{"docs":{},"y":{"docs":{},"s":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{"Algorithms/SortingAndHashing.html":{"ref":"Algorithms/SortingAndHashing.html","tf":0.006666666666666667}}}}}}}}}}},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},".":{"docs":{},"d":{"docs":{},"f":{"docs":{},"s":{"docs":{},"(":{"docs":{},"i":{"docs":{},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047}}}},"x":{"docs":{},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047}}}}}}}},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},",":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0019801980198019802}}}}}}}}},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{},",":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228}}}}}}}}}}}}}}}}},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},",":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.003430531732418525}}}}}},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"_":{"docs":{},"w":{"docs":{},",":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}}},"i":{"docs":{},"d":{"docs":{},"t":{"docs":{},"h":{"docs":{},",":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}}}}}}}},"s":{"docs":{},"e":{"docs":{},"q":{"docs":{},",":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}},"u":{"docs":{},"m":{"docs":{},",":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}}}}},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},",":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00141643059490085}}}}}},"t":{"docs":{},"i":{"docs":{},"m":{"docs":{},"e":{"docs":{},",":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907}}}}}}},"d":{"docs":{},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{},"h":{"docs":{},",":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}}}}}},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},",":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}}}}},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"m":{"docs":{},"s":{"docs":{},",":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}}}}}},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},",":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}},"h":{"docs":{},"e":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},",":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}}}}}}}}}}}}},"d":{"docs":{},"p":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},",":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}},".":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"(":{"docs":{},"d":{"docs":{},"i":{"docs":{},"f":{"docs":{},"f":{"docs":{},",":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}}}}}}}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"[":{"0":{"docs":{},":":{"2":{"docs":{},"]":{"docs":{},")":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}},"docs":{}}},"docs":{}}}}}},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},",":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124}}}}}}}},"o":{"docs":{},"n":{"docs":{},"g":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},",":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002188183807439825}}}}}}}}},",":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228}}}},"c":{"docs":{},"h":{"docs":{},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{},",":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343}}}}}}},"a":{"docs":{},"s":{"docs":{},"h":{"docs":{},",":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.01098901098901099}}}}}}},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"s":{"docs":{},"_":{"docs":{},"s":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"e":{"docs":{},"[":{"docs":{},"n":{"docs":{},"e":{"docs":{},"w":{"docs":{},"_":{"docs":{},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"]":{"docs":{},",":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343}}}}}}}}}}}}}}}}}}}}}}}},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},".":{"docs":{},"l":{"docs":{},"o":{"docs":{},"n":{"docs":{},"g":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},",":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0019801980198019802}}}}}}}}}}}}}}}}}},"o":{"docs":{},"s":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},".":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"_":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},",":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228}}}}}}}}}}}}}}}}}}}},"x":{"docs":{},"_":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},",":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847}}}}}}}},"h":{"docs":{},"o":{"docs":{},"l":{"docs":{},"d":{"docs":{},",":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.01098901098901099}}}}}}},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"u":{"docs":{},"l":{"docs":{},"t":{"docs":{},"[":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}}}}}}},"t":{"docs":{},"[":{"docs":{},"x":{"docs":{},"]":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}},"_":{"docs":{},"k":{"docs":{},"e":{"docs":{},"y":{"docs":{"Algorithms/SortingAndHashing.html":{"ref":"Algorithms/SortingAndHashing.html","tf":0.006666666666666667}},"_":{"docs":{},"f":{"docs":{},"r":{"docs":{},"e":{"docs":{},"q":{"docs":{"Algorithms/SortingAndHashing.html":{"ref":"Algorithms/SortingAndHashing.html","tf":0.006666666666666667}}}}}}}}}},"w":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.005145797598627788}},"i":{"docs":{},"d":{"docs":{},"t":{"docs":{},"h":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.002890173410404624}},")":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}}},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.005470459518599562},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.011834319526627219},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00424929178470255}},".":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124}}},":":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609}}}}}},"s":{"docs":{},"e":{"docs":{},"q":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}},"u":{"docs":{},"m":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.003236245954692557}}}},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}},",":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}}}}}},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228}}}}}}},"x":{"docs":{},"+":{"1":{"docs":{},")":{"docs":{},"]":{"docs":{},".":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847}}}}}},"docs":{}},".":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847}}}},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004149377593360996}},")":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}}}}}}}},"t":{"docs":{},"i":{"docs":{},"m":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.012605042016806723}}}}},"d":{"docs":{},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{},"h":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.006060606060606061}}}}}}},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.006060606060606061}}}}}},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"p":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.003105590062111801},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}},",":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}}}}},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.002890173410404624}}}}}}}},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"m":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0049833887043189366}}}}}},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.005780346820809248}}}}},"f":{"docs":{},"r":{"docs":{},"e":{"docs":{},"q":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.002890173410404624}},",":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}},"_":{"docs":{},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.002890173410404624}}}}}}}}}}}}},",":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}}},"/":{"docs":{},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062}},".":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124}}},":":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124}}}}}}},"a":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.0058823529411764705},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}}}}}}},"n":{"docs":{},"o":{"docs":{},"n":{"docs":{},"o":{"docs":{},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"l":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124}}}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},"a":{"docs":{},"y":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124}}}}}}}}}}}}}}}}}},"l":{"docs":{},"i":{"docs":{},"d":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"w":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"o":{"docs":{},"w":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717}}}}}}}}}}}}}}}}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124}}}}},"p":{"docs":{},"a":{"docs":{},"t":{"docs":{},"h":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228}}}}}}}}}}}}}},"r":{"docs":{},"o":{"docs":{},"f":{"docs":{},"i":{"docs":{},"t":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}}}}}}}}}}}}},"d":{"docs":{},"e":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00141643059490085}}}},"k":{"docs":{},"e":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002932551319648094},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.004578155657292348},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.007751937984496124},"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.005847953216374269},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.005037783375314861},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0056657223796034},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.002890173410404624},"Tricks/":{"ref":"Tricks/","tf":0.00966183574879227}}}},"n":{"docs":{},"i":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564}}},"a":{"docs":{},"g":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},".":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}}}}}}}},"c":{"docs":{},"h":{"docs":{},"i":{"docs":{},"n":{"docs":{},"e":{"docs":{},"s":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}}},"r":{"docs":{},"k":{"docs":{"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877}}}},"p":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}}},"l":{"docs":{},"l":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}}}},"e":{"docs":{},"t":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124}},"h":{"docs":{},"o":{"docs":{},"d":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}},"s":{"docs":{},",":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.012658227848101266}}}},":":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907}}}}}},"r":{"docs":{},"i":{"docs":{},"c":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}}}}}},"m":{"docs":{},"o":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047}},"i":{"docs":{},"z":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062}}}},"r":{"docs":{},"i":{"docs":{"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877}}}},"[":{"docs":{},"(":{"docs":{},"i":{"docs":{},",":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0113314447592068}}}}}}}},"r":{"docs":{},"g":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228},"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0049833887043189366},"Tricks/":{"ref":"Tricks/","tf":0.014492753623188406}},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.005847953216374269},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}}}}},"l":{"1":{"docs":{},",":{"docs":{"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996}}}},"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"1":{"docs":{},",":{"docs":{"Tricks/":{"ref":"Tricks/","tf":0.004830917874396135}}}},"docs":{}}}}}},"k":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}}}}}}}}}}}}}},"t":{"docs":{},"w":{"docs":{},"o":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564}}}}}}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996}}}}}}}}}}}}}}}},"e":{"docs":{},"t":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0033222591362126247}}}},"a":{"docs":{},"n":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},",":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609}}}}}}}},"s":{"docs":{},"s":{"docs":{},"i":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}}}},"n":{"docs":{},"t":{"docs":{},"a":{"docs":{},"l":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}}}}}},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"k":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.012658227848101266}}}}},"c":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}},"e":{"docs":{},"l":{"docs":{},"l":{"docs":{},"a":{"docs":{},"n":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":5}}}}}}}},"s":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"c":{"docs":{},"h":{"docs":{},",":{"docs":{"Miscellaneous/Palindrome.html":{"ref":"Miscellaneous/Palindrome.html","tf":0.009009009009009009}}}}}}}}},"n":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.003430531732418525},"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.005847953216374269},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.004658385093167702},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}},"(":{"2":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047}}},"docs":{},"f":{"docs":{},".":{"docs":{},"k":{"docs":{},"e":{"docs":{},"y":{"docs":{},"s":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{"Algorithms/SortingAndHashing.html":{"ref":"Algorithms/SortingAndHashing.html","tf":0.006666666666666667}}}}}}}}}}},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},",":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}}}}}}}},"d":{"docs":{},"p":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{},",":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995}}}}},"1":{"docs":{},"]":{"docs":{},",":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}},"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}},"i":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.001962066710268149}}},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"v":{"1":{"docs":{},"]":{"docs":{},",":{"docs":{"Algorithms/DP/NumSol.html":{"ref":"Algorithms/DP/NumSol.html","tf":0.013888888888888888}}}}},"docs":{}}}}}}},"m":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},",":{"docs":{"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406}}},"[":{"docs":{},"c":{"docs":{},"o":{"docs":{},"l":{"docs":{"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406}}}}}}}},"n":{"docs":{"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.010810810810810811}}}}}},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"u":{"docs":{},"l":{"docs":{},"t":{"docs":{},",":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343}}}}}}}}},"x":{"docs":{},"_":{"docs":{},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{},",":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847}}}}}}}},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{},"_":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},",":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}}}}}}}}},"_":{"docs":{},"k":{"docs":{},"e":{"docs":{},"y":{"docs":{"Algorithms/SortingAndHashing.html":{"ref":"Algorithms/SortingAndHashing.html","tf":0.013333333333333334}},"_":{"docs":{},"f":{"docs":{},"r":{"docs":{},"e":{"docs":{},"q":{"docs":{"Algorithms/SortingAndHashing.html":{"ref":"Algorithms/SortingAndHashing.html","tf":0.006666666666666667}}}}}}}}}},"x":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847}}},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"p":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},",":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}}}}}},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.009966777408637873}},":":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}}}}},"i":{"docs":{},"m":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}},"u":{"docs":{},"m":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.003215434083601286},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.005145797598627788},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.005847953216374269},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.016483516483516484},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00141643059490085}},"s":{"docs":{},"w":{"docs":{},"a":{"docs":{},"p":{"docs":{"Algorithms/SortingAndHashing.html":{"ref":"Algorithms/SortingAndHashing.html","tf":0.006666666666666667}},"s":{"docs":{},"(":{"docs":{},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},")":{"docs":{},":":{"docs":{"Algorithms/SortingAndHashing.html":{"ref":"Algorithms/SortingAndHashing.html","tf":0.006666666666666667}}}}}}}}}}}},"e":{"docs":{},"m":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}}}}}}}}}}}}}}},"e":{"docs":{},"f":{"docs":{},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{},"p":{"docs":{},"a":{"docs":{},"t":{"docs":{},"h":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}}}}}}}}}}}}}}}}}}}},"a":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.01098901098901099}}}}},"s":{"docs":{},"t":{"docs":{},"e":{"docs":{},"p":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047}}}}}}}}}}}},"u":{"docs":{},"b":{"docs":{},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},"a":{"docs":{},"y":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124}}}}}}}}}}}}}}}}}}},"d":{"docs":{"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476}},"a":{"docs":{},"y":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}}}}}}}}}}},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}}}}}}}}}}},"o":{"docs":{},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124}}}}}}}}}}}}}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124}}}}},"w":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"o":{"docs":{},"w":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124}}}}}}}}}}}}}},"/":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}},"/":{"docs":{},"s":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.005847953216374269},"Tricks/":{"ref":"Tricks/","tf":0.004830917874396135}}}}}}}}}}},"t":{"docs":{},"i":{"docs":{},"m":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228}}}}}}}}}}}},"u":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}},"a":{"docs":{},"v":{"docs":{},"a":{"docs":{},"i":{"docs":{},"l":{"docs":{},"a":{"docs":{},"b":{"docs":{},"l":{"docs":{},"e":{"docs":{},"d":{"docs":{},"u":{"docs":{},"r":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}}}}}}}}}}}}}}}}}}}}}},"d":{"docs":{},"d":{"docs":{},"t":{"docs":{},"o":{"docs":{},"m":{"docs":{},"a":{"docs":{},"k":{"docs":{},"e":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"i":{"docs":{},"d":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00141643059490085}}}}}}}}}}}}}}}}}}}}}},"m":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"m":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}}}}}}}}}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"m":{"docs":{},"o":{"docs":{},"v":{"docs":{},"e":{"docs":{},"t":{"docs":{},"o":{"docs":{},"m":{"docs":{},"a":{"docs":{},"k":{"docs":{},"e":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"i":{"docs":{},"d":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00141643059490085}}}}}}}}}}}}}}}}}}}}}}}}}},"d":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.02058319039451115},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}},"+":{"1":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}}},"docs":{}},";":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}}},"d":{"docs":{},"l":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004149377593360996}}}}},"l":{"docs":{},"l":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}}}}}}},"o":{"docs":{},"v":{"docs":{},"e":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.00964630225080386},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062},"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.011764705882352941},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.002560819462227913},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}},"s":{"docs":{},"+":{"1":{"docs":{},")":{"docs":{},")":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.003215434083601286}}}}},"docs":{}}},"z":{"docs":{},"e":{"docs":{},"r":{"docs":{},"o":{"docs":{},"e":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.0058823529411764705},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}}}}}}}}},":":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002188183807439825}}}}},"n":{"docs":{},"o":{"docs":{},"t":{"docs":{},"o":{"docs":{},"n":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}}}}},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"u":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717}}}}}}}},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}},"d":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}},"i":{"docs":{},"f":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}},"i":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.0058823529411764705},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.004329004329004329},"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.005847953216374269},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0019801980198019802},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}},"e":{"docs":{},"d":{"docs":{},".":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0019801980198019802}}}}},"c":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"?":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}}}}}}}}}}},"u":{"docs":{},"l":{"docs":{},"o":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124}}}}},"e":{"docs":{},"l":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343}}}}},"r":{"docs":{},"e":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0032822757111597373},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.00967741935483871}}}},"s":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"p":{"docs":{},"e":{"docs":{},"t":{"docs":{},"i":{"docs":{},"t":{"docs":{},"i":{"docs":{},"v":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717}}}}}}}}}}}}}}}}}}}}},"t":{"docs":{},"i":{"docs":{},"v":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"a":{"docs":{},"l":{"docs":{},".":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}}}}}}}}}}}}},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}},":":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.005847953216374269},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564}}},"u":{"docs":{},"t":{"docs":{},"a":{"docs":{},"t":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}}}}},"l":{"docs":{},"t":{"docs":{},"i":{"docs":{},"p":{"docs":{},"l":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":5.005847953216374},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564},"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576},"Tricks/":{"ref":"Tricks/","tf":0.004830917874396135}}}},",":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124}}}}}},"s":{"docs":{},"i":{"docs":{},"c":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}},"c":{"docs":{},"h":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0064516129032258064}}}}},"y":{"docs":{},"s":{"docs":{},"q":{"docs":{},"r":{"docs":{},"t":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}}}}}}}}}}}},"r":{"docs":{},"i":{"docs":{},"a":{"docs":{},"d":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907}}}}}},"p":{"docs":{},"o":{"docs":{},"w":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}}}}}}},"_":{"docs":{},"i":{"docs":{},"d":{"docs":{},"x":{"docs":{"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.005847953216374269},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},",":{"docs":{"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.005847953216374269}}}}}},"r":{"docs":{},"e":{"docs":{},"f":{"docs":{},"e":{"docs":{},"r":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564}}}}}}}}},"o":{"docs":{"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996}},"b":{"docs":{},"j":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.012658227848101266},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877}}}}}},"t":{"docs":{},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}},"v":{"docs":{},")":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}},"i":{"docs":{},"o":{"docs":{},"u":{"docs":{},"s":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228}},".":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0025188916876574307}}},"l":{"docs":{},"y":{"docs":{},"!":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}}}}},",":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}}}}}}},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"c":{"docs":{},"l":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}},"e":{"docs":{},"g":{"docs":{},"r":{"docs":{},"i":{"docs":{},"d":{"docs":{},":":{"docs":{"Algorithms/DP/NumSol.html":{"ref":"Algorithms/DP/NumSol.html","tf":0.013888888888888888}}},"[":{"docs":{},"x":{"docs":{},"]":{"docs":{},"[":{"docs":{},"y":{"docs":{},"]":{"docs":{"Algorithms/DP/NumSol.html":{"ref":"Algorithms/DP/NumSol.html","tf":0.013888888888888888}}}}}}}}}}}}}}}}},"e":{"docs":{},"r":{"docs":{},"v":{"docs":{"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.010810810810810811}}}}}}},"o":{"docs":{},"p":{"docs":{},":":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.012658227848101266}}}}},"p":{"docs":{},"t":{"docs":{},"i":{"docs":{},"m":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.012658227848101266},"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.003215434083601286},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.007751937984496124},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.004329004329004329},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.008403361344537815},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00141643059490085}},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{},"y":{"docs":{},".":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.003215434083601286}}}}}}},"i":{"docs":{},"z":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},":":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}},"s":{"docs":{},":":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124}}}}}}}}}}}},"o":{"docs":{},"n":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002932551319648094}},"s":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}},"e":{"docs":{},"n":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0169971671388102},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},"l":{"docs":{},"o":{"docs":{},"c":{"docs":{},"k":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.003215434083601286}}}}}}}}}}}},"_":{"docs":{},"b":{"docs":{},"r":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"e":{"docs":{},"t":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.007082152974504249}},"s":{"docs":{},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"i":{"docs":{},")":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00141643059490085}}}}}}}}}}}},":":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0028328611898017}}}}}}}}}}}}},"r":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.00964630225080386},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002188183807439825}},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},",":{"docs":{"Algorithms/UncommonAlgos.html":{"ref":"Algorithms/UncommonAlgos.html","tf":0.009900990099009901}}}}}}}}}}},"p":{"docs":{},"o":{"docs":{},"n":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},".":{"docs":{"Algorithms/Games.html":{"ref":"Algorithms/Games.html","tf":0.013333333333333334}}}}}}},"r":{"docs":{},"t":{"docs":{},"u":{"docs":{},"n":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}}}}}}}},"(":{"1":{"docs":{},")":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.003215434083601286},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124}},".":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124}}}}},"docs":{},"n":{"2":{"docs":{},")":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609}}}},"docs":{},")":{"docs":{"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877}},"?":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678}}}},"^":{"2":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.003215434083601286}}},"docs":{}}}},"r":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0019801980198019802},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.01366120218579235},"Miscellaneous/AlienDictionary.html":{"ref":"Miscellaneous/AlienDictionary.html","tf":0.021739130434782608}},";":{"docs":{"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062}}},".":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564}}},":":{"docs":{"Miscellaneous/AlienDictionary.html":{"ref":"Miscellaneous/AlienDictionary.html","tf":0.021739130434782608},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}},"(":{"docs":{},"c":{"docs":{},")":{"docs":{},")":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343}}}}}}},"i":{"docs":{},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{"Algorithms/SortingAndHashing.html":{"ref":"Algorithms/SortingAndHashing.html","tf":0.006666666666666667},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847},"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}},"a":{"docs":{},"l":{"docs":{},":":{"docs":{"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996}}}}},"/":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}}}}}}},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}},"e":{"docs":{},"s":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}},"g":{"docs":{},"a":{"docs":{},"n":{"docs":{},"i":{"docs":{},"z":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}}}}}}},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{"Algorithms/SortingAndHashing.html":{"ref":"Algorithms/SortingAndHashing.html","tf":0.006666666666666667},"Algorithms/Games.html":{"ref":"Algorithms/Games.html","tf":0.013333333333333334},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124},"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}},"f":{"docs":{},"l":{"docs":{},"o":{"docs":{},"w":{"docs":{"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.005847953216374269}},";":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}},".":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564}}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},".":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}}}}}},"s":{"docs":{},",":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}}}}}}}},"l":{"docs":{},"a":{"docs":{},"p":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.002616088947024199},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0033222591362126247}},",":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0033222591362126247}}}}}},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},".":{"docs":{"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062}}}}}}}}}}},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}},".":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}}}}}}}}},"n":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.006430868167202572},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"Algorithms/Games.html":{"ref":"Algorithms/Games.html","tf":0.05333333333333334},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.024054982817869417},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.002616088947024199},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.007751937984496124},"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02},"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01764705882352941},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0032822757111597373},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.008955223880597015},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.008771929824561403},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0076824583866837385},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0039603960396039604},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847},"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00404040404040404},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002157497303128371},"Miscellaneous/Palindrome.html":{"ref":"Miscellaneous/Palindrome.html","tf":0.009009009009009009},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.006644518272425249},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0084985835694051},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.00674373795761079},"Tricks/":{"ref":"Tricks/","tf":0.004830917874396135},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.016129032258064516}},"e":{"docs":{},"s":{"docs":{},".":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"Algorithms/DP/NumSol.html":{"ref":"Algorithms/DP/NumSol.html","tf":0.013888888888888888},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00141643059490085},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}},",":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995}}},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.001962066710268149}}},":":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564}}},")":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00141643059490085}}}},".":{"docs":{"Algorithms/Games.html":{"ref":"Algorithms/Games.html","tf":0.013333333333333334},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.004329004329004329},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002157497303128371},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00141643059490085},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}}},",":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.0058823529411764705},"Miscellaneous/Palindrome.html":{"ref":"Miscellaneous/Palindrome.html","tf":0.009009009009009009},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0028328611898017}}},":":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.004329004329004329},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476}}},"!":{"docs":{},"!":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}}}},";":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00141643059490085}}}},"t":{"docs":{},"o":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}}},"c":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}}},"f":{"docs":{},".":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047}}},"f":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.011695906432748537}},"s":{"docs":{},".":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"(":{"docs":{},"c":{"docs":{},",":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343}}}}}}}}},"[":{"docs":{},"c":{"docs":{},"]":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343}}}}}}}}},"i":{"docs":{},"c":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}}}},":":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}}},"t":{"docs":{},"h":{"docs":{},"e":{"docs":{},"r":{"docs":{},"/":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}},"w":{"docs":{},"i":{"docs":{},"s":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124},"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.005847953216374269},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0022197558268590455},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}},"e":{"docs":{},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564}}}}}}}}}}},"u":{"docs":{},"t":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"Miscellaneous/AlienDictionary.html":{"ref":"Miscellaneous/AlienDictionary.html","tf":0.021739130434782608},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}},".":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}},"s":{"docs":{},"i":{"docs":{},"d":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124}}}}},"e":{"docs":{},"r":{"docs":{},"m":{"docs":{},"o":{"docs":{},"s":{"docs":{},"t":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0028328611898017}}}}}}}}}},"c":{"docs":{},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124},"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.005847953216374269}},"r":{"docs":{},"e":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},",":{"docs":{"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406}}}}}}}}}}}},"d":{"docs":{},"d":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124}}}},"l":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124}}}}}},":":{"docs":{"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996}}},"w":{"docs":{},"n":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}}},"q":{"1":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011976047904191617}},".":{"docs":{},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011976047904191617}}}}}}}}},":":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809}}}},"docs":{"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011976047904191617}},"u":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.037037037037037035},"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.003215434083601286},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.003430531732418525},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.005970149253731343},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":5.002923976608187},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.017964071856287425},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0019801980198019802},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.006060606060606061},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002157497303128371},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00141643059490085},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":5}},"!":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.012658227848101266},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}}},"/":{"2":{"8":{"1":{"4":{"7":{"0":{"docs":{},"/":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"6":{"4":{"3":{"1":{"5":{"8":{"docs":{},"/":{"docs":{},"g":{"docs":{},"o":{"docs":{},"o":{"docs":{},"g":{"docs":{},"l":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678}}}}}}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"s":{"docs":{},"*":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678}}},",":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678},"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.003215434083601286},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}},":":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.024691358024691357},"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.003215434083601286},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002932551319648094},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}}},".":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995}}}},")":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564}}},",":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0019801980198019802},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}},".":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124},"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.008771929824561403},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0038412291933418692},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.003105590062111801},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}}},":":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717},"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}}}}}},"u":{"docs":{},"e":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.01607717041800643},"DataStructures/StacksAndQueues/":{"ref":"DataStructures/StacksAndQueues/","tf":5.010204081632653},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.008955223880597015},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.01366120218579235},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498},"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.005952380952380952},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.008403361344537815},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.015748031496062992},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.008629989212513484},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0038535645472061657}},".":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809}},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"0":{"docs":{},")":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907}}}},"docs":{},"(":{"0":{"docs":{},",":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00546448087431694},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.005952380952380952},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002157497303128371}}}},"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717}},"b":{"docs":{},"e":{"docs":{},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},",":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.003215434083601286}}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"i":{"docs":{},"t":{"docs":{},"_":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},",":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.003215434083601286}}}}}}}}}}}},",":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476}}}},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},"_":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},",":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.003215434083601286}}}}}}}},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},",":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.003215434083601286}}}}}}}}}}}},"c":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},"u":{"docs":{},"r":{"docs":{},"r":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},",":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},",":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847}}}}}}}}}}}}}}}},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},",":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847}}}}}}},"x":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00546448087431694}},"+":{"1":{"docs":{},",":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00546448087431694}}}},"docs":{}},",":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}}},"d":{"docs":{},",":{"docs":{"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576}}}},"p":{"docs":{},"i":{"docs":{},"d":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},",":{"docs":{"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576}}}}}}}}},"v":{"docs":{},",":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.005952380952380952}}}},"_":{"docs":{},"a":{"docs":{},",":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}}},"x":{"docs":{},",":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.003236245954692557}}}}}},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{},"r":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},")":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},")":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847}}}}}}}}}}}}}}}},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},")":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}}}}}}},"n":{"docs":{},"e":{"docs":{},"i":{"docs":{},")":{"docs":{"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.007874015748031496}}}}},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},")":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},")":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}}}}}}}}},")":{"docs":{"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.007874015748031496}}}}}},")":{"docs":{"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.007874015748031496}}}},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},".":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},")":{"docs":{"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877}}}}}}}}}}}}},"v":{"docs":{},")":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907}}}},"s":{"docs":{},")":{"docs":{"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.007874015748031496}}}}}}}}}}},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.006430868167202572},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.01092896174863388},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498},"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.005952380952380952},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.015748031496062992},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.005393743257820928}}}}}}}},"(":{"docs":{},")":{"docs":{},")":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}}}},":":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.006430868167202572},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.01092896174863388},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498},"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.005952380952380952},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.015748031496062992},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.005393743257820928},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}}},")":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907}}},",":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}},"r":{"docs":{},"i":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}},"e":{"docs":{},"s":{"docs":{},":":{"docs":{"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.007874015748031496}}},"]":{"docs":{"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.007874015748031496}}}}}}}},"i":{"docs":{},"c":{"docs":{},"k":{"docs":{},"e":{"docs":{},"r":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}}},"s":{"docs":{},"t":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907}}}}},"s":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}}}},"a":{"docs":{},"n":{"docs":{},"t":{"docs":{},"i":{"docs":{},"t":{"docs":{},"i":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124}}},"y":{"docs":{},".":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124}}}}}}}},"l":{"docs":{},"i":{"docs":{},"f":{"docs":{},"i":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}}}},"t":{"docs":{},"i":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}}}}}}},":":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228}}},".":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"]":{"docs":{},")":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228}},")":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228}}}}}}}}}},"t":{"1":{"docs":{},":":{"docs":{"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996}}}},"2":{"docs":{},")":{"docs":{"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996}}},":":{"docs":{"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996}}}},"docs":{"Algorithms/UncommonAlgos.html":{"ref":"Algorithms/UncommonAlgos.html","tf":0.009900990099009901},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.015527950310559006},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.002890173410404624}},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.005145797598627788},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.005232177894048398},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":10.035928143712574},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.005037783375314861},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.009900990099009901},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.011098779134295227},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00546448087431694},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":5.021390374331551},"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":5.028436018957346},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":5.018672199170124},"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00808080808080808},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00141643059490085},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.002616088947024199},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0025188916876574307},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0019801980198019802},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.005549389567147614},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00546448087431694},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.006224066390041493}},")":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.012658227848101266}}},"d":{"docs":{},"i":{"docs":{},"s":{"docs":{},"c":{"docs":{},"u":{"docs":{},"s":{"docs":{},"s":{"docs":{},"/":{"5":{"3":{"7":{"6":{"8":{"6":{"docs":{},"/":{"docs":{},"p":{"docs":{},"y":{"docs":{},"t":{"docs":{},"h":{"docs":{},"o":{"docs":{},"n":{"docs":{"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.009478672985781991}}}}}}}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004149377593360996}},"e":{"docs":{},"(":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},"[":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},"]":{"docs":{},")":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}}}}}}}}},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"u":{"docs":{},"c":{"docs":{},"t":{"docs":{},"_":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},".":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},"]":{"docs":{},")":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"o":{"docs":{},"s":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},"[":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"u":{"docs":{},"c":{"docs":{},"t":{"docs":{},".":{"docs":{},"p":{"docs":{},"o":{"docs":{},"s":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},"_":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},"]":{"docs":{},")":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"v":{"docs":{},")":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.005940594059405941}}}},")":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}}},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"_":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"s":{"docs":{},"[":{"docs":{},"m":{"docs":{},"i":{"docs":{},"d":{"docs":{},"d":{"docs":{},"l":{"docs":{},"e":{"docs":{},"]":{"docs":{},")":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}}}}}}}}}}}}}}}}}}}},"o":{"docs":{},"b":{"docs":{},"j":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},")":{"docs":{},":":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}}}}}}}}}}},":":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.003430531732418525},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0025188916876574307},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0039603960396039604},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.00776914539400666},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.014218009478672985},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.012448132780082987}}},")":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.010075566750629723},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.007920792079207921},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.00776914539400666},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00819672131147541},"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.014218009478672985},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}},":":{"docs":{"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996}}}},",":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0025188916876574307},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.005940594059405941},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0106951871657754},"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.023696682464454975},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}}}}}}},"s":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0025188916876574307},"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.009478672985781991}}}},":":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},"l":{"docs":{},"c":{"docs":{},"a":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564}}}}}},",":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011976047904191617},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0025188916876574307}}},"t":{"docs":{},"o":{"docs":{},"d":{"docs":{},"o":{"docs":{},"u":{"docs":{},"b":{"docs":{},"l":{"docs":{},"y":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0025188916876574307}}}}}}}}}}}}}}}}}}}},".":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0039603960396039604},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}}},";":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228}}},"[":{"docs":{},"e":{"docs":{},"]":{"docs":{},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"s":{"docs":{},")":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228}}}}}}}}}}}}}},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"]":{"docs":{},":":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0022197558268590455}}}}}}}},"s":{"docs":{},"]":{"docs":{},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"e":{"docs":{},")":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228}}}}}}}}}}}}}}}},"a":{"docs":{},"t":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.002560819462227913},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228}}}}},"a":{"docs":{},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0032701111837802484},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":5.005037783375315},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":5.001980198019802},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":5.0011098779134295},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":3.3469945355191255},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.016042780748663103},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.003236245954692557},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},"a":{"docs":{},"l":{"docs":{},"/":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0019801980198019802},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.006224066390041493}},"]":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}}}},",":{"docs":{"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062}}}}},"e":{"docs":{},"(":{"0":{"docs":{},")":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}},"docs":{},")":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564}}},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},")":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564}}}}}}},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},",":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0025188916876574307},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.009900990099009901},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877}}},")":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0022197558268590455},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},",":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0025188916876574307},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.009900990099009901},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877}}},")":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0022197558268590455},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}}}}}}}}},"=":{"docs":{},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},")":{"docs":{},":":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564}}}}}}}}},",":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0025188916876574307},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.005940594059405941},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877}}},")":{"docs":{},":":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.003329633740288568},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}}}}},",":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},",":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0025188916876574307},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.005940594059405941},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877}}},")":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0022197558268590455},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}}}}}}},"v":{"docs":{},")":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228}},".":{"docs":{},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{},"m":{"docs":{},"s":{"docs":{},"(":{"docs":{},")":{"docs":{},":":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}}}}}}}}}}},"'":{"docs":{},"j":{"docs":{},"f":{"docs":{},"k":{"docs":{},"'":{"docs":{},",":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}}}}}},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{},"r":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},",":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}}}}}}}},"_":{"docs":{},"a":{"docs":{},",":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}}}},"a":{"docs":{},"t":{"docs":{},"l":{"docs":{},"a":{"docs":{},"n":{"docs":{},"t":{"docs":{},"i":{"docs":{},"c":{"docs":{},"_":{"docs":{},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"u":{"docs":{},"e":{"docs":{},")":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}}}}}}}}}}}}}}}},"p":{"docs":{},"a":{"docs":{},"c":{"docs":{},"i":{"docs":{},"f":{"docs":{},"i":{"docs":{},"c":{"docs":{},"_":{"docs":{},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"u":{"docs":{},"e":{"docs":{},")":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}}}}}}}}}}}}}}},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"u":{"docs":{},"e":{"docs":{},")":{"docs":{},":":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}}}}}}}},"x":{"docs":{},",":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}}}}}}}}},"c":{"docs":{},"k":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.007556675062972292},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495},"Tricks/":{"ref":"Tricks/","tf":0.004830917874396135}}}},"i":{"docs":{},"l":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}},"n":{"docs":{},"s":{"docs":{},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.04945054945054945}}}}},"f":{"docs":{},"e":{"docs":{},"r":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}},"o":{"docs":{},"r":{"docs":{},"m":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}}}},"i":{"docs":{},"t":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}},"l":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},".":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}}}}}}}}}},"d":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},".":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}}}}}}},"i":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"Algorithms/Games.html":{"ref":"Algorithms/Games.html","tf":0.02666666666666667},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124},"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.005847953216374269},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00141643059490085},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}},"e":{"docs":{},":":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678}}}},"c":{"docs":{},"k":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Algorithms/UncommonAlgos.html":{"ref":"Algorithms/UncommonAlgos.html","tf":0.009900990099009901},"DataStructures/StacksAndQueues/":{"ref":"DataStructures/StacksAndQueues/","tf":0.01020408163265306},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":5.005970149253732},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414},"Tricks/":{"ref":"Tricks/","tf":10.004830917874395}},":":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488}}},"i":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228},"Tricks/":{"ref":"Tricks/","tf":0.00966183574879227}}}}},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{},"u":{"docs":{},"l":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}},"_":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.017316017316017316}}}}}},"p":{"docs":{},"l":{"docs":{},"e":{"docs":{},"t":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":10.004329004329005}}}}},".":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}}},"g":{"docs":{},"g":{"docs":{},"e":{"docs":{},"r":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228}}}}}},"v":{"docs":{},"i":{"docs":{},"a":{"docs":{},"l":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}}}}},"u":{"docs":{},"e":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002932551319648094},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062},"Algorithms/UncommonAlgos.html":{"ref":"Algorithms/UncommonAlgos.html","tf":0.009900990099009901},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.002560819462227913},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.005037783375314861},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847},"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.015151515151515152},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.011904761904761904},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.008403361344537815},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.010101010101010102},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855},"Miscellaneous/AlienDictionary.html":{"ref":"Miscellaneous/AlienDictionary.html","tf":0.043478260869565216},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.002890173410404624}},";":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047}}},":":{"docs":{"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.005847953216374269},"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},"=":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0025188916876574307}}}},",":{"docs":{"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476}}}}},"o":{"docs":{},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{},"o":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}},"h":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.016483516483516484}},"i":{"docs":{},"n":{"docs":{},"k":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0025188916876574307},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0019801980198019802},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.012903225806451613}}},"g":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.005145797598627788},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.001962066710268149},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.01937984496124031},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.002560819462227913},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0025188916876574307},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0064516129032258064}},"s":{"docs":{},":":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}},")":{"docs":{"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.007751937984496124}}},",":{"docs":{"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062}}}},";":{"docs":{"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406}}}}},"s":{"docs":{},".":{"docs":{"Algorithms/UncommonAlgos.html":{"ref":"Algorithms/UncommonAlgos.html","tf":0.009900990099009901}}},":":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609}}}},"r":{"docs":{},"d":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.008658008658008658}}}}},"e":{"docs":{},"r":{"docs":{},"e":{"docs":{},"'":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.003215434083601286},"DataStructures/StacksAndQueues/":{"ref":"DataStructures/StacksAndQueues/","tf":0.02040816326530612},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"e":{"docs":{},",":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}}}}}}}},"y":{"docs":{},"'":{"docs":{},"l":{"docs":{},"l":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809}}}}}},"n":{"docs":{},",":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}},"s":{"docs":{},"e":{"docs":{},",":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476}}}}},"m":{"docs":{},")":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}},"?":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}},"a":{"docs":{},"t":{"docs":{},".":{"docs":{"Algorithms/Games.html":{"ref":"Algorithms/Games.html","tf":0.013333333333333334},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00141643059490085}}},",":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564}}},"'":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.004329004329004329},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00141643059490085}},"l":{"docs":{},"l":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}},")":{"docs":{},".":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}}}}}},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.005847953216374269}},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995}}},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.008658008658008658}}}}}}}}}}}},"a":{"docs":{},"d":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}}}}},"o":{"docs":{},"u":{"docs":{},"g":{"docs":{},"h":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002157497303128371}},"t":{"docs":{"Tricks/":{"ref":"Tricks/","tf":0.004830917874396135}}}}}}}},"o":{"docs":{},"u":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}}}},"r":{"docs":{},"o":{"docs":{},"u":{"docs":{},"g":{"docs":{},"h":{"docs":{},"l":{"docs":{},"y":{"docs":{},".":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}}}}}}}}},"s":{"docs":{},"e":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}},"a":{"docs":{},"k":{"docs":{},"e":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809},"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}},".":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.003215434083601286}}},"n":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}}}},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004398826979472141},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.005145797598627788},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.001962066710268149},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.009846827133479213},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.011834319526627219},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.008658008658008658},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717},"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.002560819462227913},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0022197558268590455},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0106951871657754},"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.015151515151515152},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002157497303128371}},":":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.00964630225080386},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002932551319648094},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.00686106346483705},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0032822757111597373},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.008658008658008658},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.009478672985781991},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}}},")":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228}},":":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}}}},"+":{"1":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}}},"docs":{}},",":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.004329004329004329}}},"/":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.001962066710268149},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124}}},".":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"(":{"docs":{},"c":{"docs":{},",":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124}}}}}}}}},"[":{"docs":{},"c":{"docs":{},"]":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124}}}}},"]":{"docs":{},")":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124}}}}}}}},"p":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}},"b":{"docs":{},"l":{"docs":{"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.007751937984496124}},"e":{"docs":{},".":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}}}}},"g":{"docs":{"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.045454545454545456}},")":{"docs":{},")":{"docs":{"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576}}}},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"/":{"docs":{},"m":{"docs":{},"a":{"docs":{},"r":{"docs":{},"k":{"docs":{"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576}}}}}}}}}}}},"s":{"docs":{},"k":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.002890173410404624},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}},"[":{"1":{"docs":{},"]":{"docs":{},",":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}}}}},"docs":{}},"_":{"docs":{},"i":{"docs":{},"d":{"docs":{},"x":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.006211180124223602}}}}}},"s":{"docs":{},".":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}}},":":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.002890173410404624}}},"_":{"docs":{},"s":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}},"e":{"docs":{},"d":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}}}},"docs":{}}}},"docs":{},"t":{"docs":{},"a":{"docs":{},"s":{"docs":{},"k":{"docs":{},"_":{"docs":{},"i":{"docs":{},"d":{"docs":{},"x":{"docs":{},"]":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}},"[":{"0":{"docs":{},"]":{"docs":{},":":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}}}}},"docs":{}}}}}}}}}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"m":{"docs":{},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}}}}}}}},"y":{"docs":{},"p":{"docs":{},"e":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.003215434083601286},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}},"i":{"docs":{},"c":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.0058823529411764705}}}}}},":":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047},"Algorithms/UncommonAlgos.html":{"ref":"Algorithms/UncommonAlgos.html","tf":0.009900990099009901},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002188183807439825},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}},"i":{"docs":{},"m":{"docs":{},"e":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.003924133420536298},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00404040404040404},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.01098901098901099},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0049833887043189366}},".":{"docs":{"Algorithms/UncommonAlgos.html":{"ref":"Algorithms/UncommonAlgos.html","tf":0.009900990099009901},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}},")":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907}}},",":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}},"/":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907}}},"s":{"docs":{},":":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.008403361344537815}}},")":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}}},",":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}}}},"c":{"docs":{},"k":{"docs":{},"e":{"docs":{},"t":{"docs":{},"s":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}},":":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00404040404040404}}}}}}}},"l":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}},"l":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.01098901098901099}}}},"p":{"docs":{},"s":{"docs":{},":":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476}}}},":":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}}},"e":{"docs":{"Tricks/":{"ref":"Tricks/","tf":0.00966183574879227}},"b":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"k":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}}}}}}},"w":{"docs":{},"o":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.006872852233676976},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.004578155657292348},"Algorithms/UncommonAlgos.html":{"ref":"Algorithms/UncommonAlgos.html","tf":0.009900990099009901},"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":5.011764705882353},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00437636761487965},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0038412291933418692},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":5.014218009478673},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00141643059490085},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},"/":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488}}}},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},".":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995}}},";":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}},"c":{"docs":{},"e":{"docs":{},"/":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}}}}},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"l":{"docs":{},"a":{"docs":{},"t":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}}},")":{"docs":{},")":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}}},"o":{"docs":{},"r":{"docs":{},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}}}}}}},"r":{"docs":{},"m":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}},"i":{"docs":{},"n":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"s":{"docs":{},".":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}}}}}}}}}}},"a":{"docs":{},"m":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},"d":{"docs":{},"i":{"docs":{},"s":{"docs":{},"c":{"docs":{},"u":{"docs":{},"s":{"docs":{},"s":{"docs":{},"/":{"5":{"3":{"9":{"7":{"9":{"7":{"docs":{},"/":{"docs":{},"c":{"docs":{},"%":{"2":{"docs":{},"b":{"docs":{},"%":{"2":{"docs":{},"b":{"docs":{},"p":{"docs":{},"y":{"docs":{},"t":{"docs":{},"h":{"docs":{},"o":{"docs":{},"n":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}}}}},"docs":{}}}},"docs":{}}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}},"s":{"docs":{},"/":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.004329004329004329}}}}}},"c":{"docs":{},"h":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0064516129032258064}},"n":{"docs":{},"i":{"docs":{},"q":{"docs":{},"u":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.011764705882352941},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717}}}},"c":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}}}}}},"n":{"docs":{},"d":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}}}},"o":{"docs":{},"g":{"docs":{},"g":{"docs":{},"l":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488}}}},"e":{"docs":{},"t":{"docs":{},"h":{"docs":{},"e":{"docs":{},"r":{"docs":{},".":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228}}}}}}}}},"j":{"docs":{},"g":{"docs":{},"r":{"docs":{},"o":{"docs":{},"u":{"docs":{},"p":{"docs":{},"s":{"docs":{},".":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}}}},"p":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.007751937984496124},"DataStructures/StacksAndQueues/":{"ref":"DataStructures/StacksAndQueues/","tf":0.02040816326530612},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.004658385093167702},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.006472491909385114},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00141643059490085},"Tricks/":{"ref":"Tricks/","tf":0.004830917874396135}},"o":{"docs":{"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.007874015748031496}},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},")":{"docs":{"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.007874015748031496}}}}}}}}}}}}}}},"[":{"docs":{},":":{"docs":{},":":{"docs":{"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.007874015748031496}}}}},"l":{"docs":{},"o":{"docs":{},"g":{"docs":{"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":5.0078740157480315}}}}}}},"w":{"docs":{},"e":{"docs":{},"r":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}},"n":{"docs":{},",":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}}}},"t":{"docs":{},"a":{"docs":{},"l":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.005470459518599562},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.008658008658008658},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0038535645472061657}},"_":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.007556675062972292}}}}}}}}},"u":{"docs":{},"g":{"docs":{},"h":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564}}}}},"o":{"docs":{},"/":{"4":{"7":{"5":{"4":{"6":{"2":{"docs":{"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"l":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907}}}},"_":{"docs":{},"b":{"docs":{},"e":{"docs":{},"_":{"docs":{},"k":{"docs":{},"i":{"docs":{},"l":{"docs":{"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.015151515151515152}},"l":{"docs":{},"e":{"docs":{},"d":{"docs":{},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"p":{"docs":{},")":{"docs":{"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576}}}}}}}}}}}}}}}}}}}}}}},"u":{"docs":{},"r":{"docs":{},"b":{"docs":{},"u":{"docs":{},"l":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}},",":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}},")":{"docs":{},")":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}}}}},"v":{"docs":{"Algorithms/SortingAndHashing.html":{"ref":"Algorithms/SortingAndHashing.html","tf":0.013333333333333334},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0022197558268590455},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.012605042016806723},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202},"Tricks/":{"ref":"Tricks/","tf":0.00966183574879227}},"a":{"docs":{},"l":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.005121638924455826},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.005549389567147614},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.006224066390041493},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0028328611898017}},"u":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.012658227848101266},"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.003215434083601286},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"Algorithms/Games.html":{"ref":"Algorithms/Games.html","tf":0.013333333333333334},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Algorithms/DP/NumSol.html":{"ref":"Algorithms/DP/NumSol.html","tf":0.013888888888888888},"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00437636761487965},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.005121638924455826},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0019801980198019802},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004439511653718091},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.003105590062111801},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855},"Tricks/":{"ref":"Tricks/","tf":0.004830917874396135}},"e":{"docs":{},"s":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}},".":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847}}},":":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228}}}}},"i":{"docs":{},"d":{"docs":{"Algorithms/SortingAndHashing.html":{"ref":"Algorithms/SortingAndHashing.html","tf":0.006666666666666667},"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.003215434083601286},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.002616088947024199},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.005037783375314861},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.011904761904761904},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.007082152974504249}},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"s":{"docs":{},"e":{"docs":{},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/StacksAndQueues/":{"ref":"DataStructures/StacksAndQueues/","tf":0.01020408163265306}}}}}}}}}}}}}}}}}}}}}}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},":":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0025188916876574307}}},"=":{"docs":{},"f":{"docs":{},"a":{"docs":{},"l":{"docs":{},"s":{"docs":{},"e":{"docs":{},")":{"docs":{},":":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0025188916876574307}}}}}}}}},"t":{"docs":{},"r":{"docs":{},"u":{"docs":{},"e":{"docs":{},")":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0025188916876574307}}}}}}}}}}}}},"p":{"docs":{},"a":{"docs":{},"l":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"r":{"docs":{},"o":{"docs":{},"m":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Miscellaneous/Palindrome.html":{"ref":"Miscellaneous/Palindrome.html","tf":0.018018018018018018}}}}}}}}}}}}}}}}}},"/":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0028328611898017}}}}},"=":{"0":{"docs":{},",":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.005121638924455826},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004439511653718091},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}}}},"docs":{}},",":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228}}}},"r":{"docs":{},"i":{"docs":{},"a":{"docs":{},"b":{"docs":{},"l":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.012658227848101266},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002188183807439825},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.002560819462227913},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.007556675062972292},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0019801980198019802},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004149377593360996},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}},"e":{"docs":{},".":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}}}},"t":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}},"o":{"docs":{},"u":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}}}}}},"i":{"docs":{},"s":{"docs":{},"i":{"docs":{},"t":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.012861736334405145},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0038412291933418692},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0025188916876574307},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0106951871657754},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.008928571428571428},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.012605042016806723},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.026262626262626262},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.003105590062111801},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.008629989212513484},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00141643059490085},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},"e":{"docs":{},"d":{"docs":{},".":{"docs":{},"a":{"docs":{},"d":{"docs":{},"d":{"docs":{},"(":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},"_":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},")":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.003215434083601286}}}}}}}},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},")":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.003215434083601286}}}}}}}}}}},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},")":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}}}}},"f":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"e":{"docs":{},"r":{"docs":{},"p":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},")":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564}}}}}}}}}}}}}},"i":{"docs":{},"d":{"docs":{},"(":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},")":{"docs":{},")":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564}}}}}}}}}},")":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},")":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}}}}}},"v":{"docs":{},")":{"docs":{"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877}}}},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"m":{"docs":{},")":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907}}}}}}},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"r":{"docs":{},"s":{"docs":{},"e":{"docs":{},")":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}}}}}}},"(":{"docs":{},"x":{"docs":{},",":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002157497303128371}}}},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},",":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00141643059490085}}}}}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"m":{"docs":{},"o":{"docs":{},"v":{"docs":{},"e":{"docs":{},"(":{"docs":{},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"r":{"docs":{},"s":{"docs":{},"e":{"docs":{},")":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}}}}}}},"i":{"docs":{},")":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}}}}}}}}}},":":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.006430868167202572},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.002560819462227913},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.012605042016806723},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.010101010101010102},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002157497303128371},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00141643059490085}}},"[":{"docs":{},"j":{"docs":{},"]":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002932551319648094}},":":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047}}}}},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},"]":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.005952380952380952}}}}}}}},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"]":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.008928571428571428},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907}},":":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476}}}}}}}},"s":{"docs":{},"]":{"docs":{},":":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476}}}}},"c":{"docs":{},"]":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.008403361344537815}}}}}}}}},"u":{"docs":{},"a":{"docs":{},"l":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}}}}}},"i":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}},"c":{"docs":{},"e":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}},"e":{"docs":{},"r":{"docs":{},"i":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00141643059490085},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.00967741935483871}},"f":{"docs":{},"y":{"docs":{},"(":{"docs":{},"m":{"docs":{},"i":{"docs":{},"d":{"docs":{},")":{"docs":{},":":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}}}}}}}}}}},"t":{"docs":{},"i":{"docs":{},"c":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.01092896174863388},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},"a":{"docs":{},"l":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847}}}}}}}}}}}}},"t":{"docs":{},"r":{"docs":{},"a":{"docs":{},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"a":{"docs":{},"l":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847}}}}}}}}}}}}}}}}},"c":{"docs":{},"u":{"docs":{},"t":{"docs":{},"s":{"docs":{},":":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}}}}}}},"s":{"docs":{},"a":{"docs":{},".":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}},"o":{"docs":{},"w":{"docs":{},"e":{"docs":{},"l":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.010309278350515464},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995}},"_":{"docs":{},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.006872852233676976}}}}}}}}}},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995}}},":":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0019801980198019802}}},"s":{"docs":{"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576}}},",":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.012605042016806723}}},")":{"docs":{},")":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907}}}},"_":{"docs":{},"s":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},"e":{"docs":{},"d":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{},",":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}},"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},"i":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}}}}}}},"w":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.003430531732418525},"Algorithms/UncommonAlgos.html":{"ref":"Algorithms/UncommonAlgos.html","tf":0.009900990099009901},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.012605042016806723},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},"e":{"docs":{},"l":{"docs":{},"l":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.012658227848101266},"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.003215434083601286},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}},".":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907}}},",":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}}}}},"e":{"docs":{},"k":{"docs":{},"l":{"docs":{},"i":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678}}}}}},"a":{"docs":{},"r":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}},"p":{"docs":{},"o":{"docs":{},"n":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02}}}}},"k":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0064516129032258064}},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}}}}}}},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}},"s":{"docs":{},":":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.003430531732418525}}},"[":{"0":{"docs":{},"]":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}}}},"1":{"docs":{},":":{"docs":{},"]":{"docs":{},":":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}}}}}},"docs":{}}}}}}},"'":{"docs":{},"d":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00141643059490085}}},"v":{"docs":{"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564}}},"r":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}}},"l":{"docs":{},"l":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}}}}}},"o":{"docs":{},"r":{"docs":{},"k":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.012658227848101266},"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.003215434083601286},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0025188916876574307},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.02903225806451613}},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"/":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}},".":{"docs":{"Tricks/":{"ref":"Tricks/","tf":0.004830917874396135}}}},"d":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.00964630225080386},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.014619883040935672},"Miscellaneous/AlienDictionary.html":{"ref":"Miscellaneous/AlienDictionary.html","tf":0.021739130434782608}},",":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.003215434083601286},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.005847953216374269}}},"[":{"docs":{},":":{"docs":{},"i":{"docs":{},"]":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.005847953216374269}},"+":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.003215434083601286}}}}}},"i":{"docs":{},"+":{"1":{"docs":{},":":{"docs":{},"]":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.003215434083601286},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.005847953216374269}},"]":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.003215434083601286}}}}}},"docs":{}}}},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},":":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.006430868167202572}}}}}}},"s":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.003215434083601286}},"e":{"docs":{},"[":{"docs":{},"s":{"docs":{},"h":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"]":{"docs":{},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},")":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.003215434083601286}}}}}}}}}}}}}}}}}}}}}}}}}}}},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"[":{"docs":{},":":{"docs":{},"i":{"docs":{},"]":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.003215434083601286}}}}}}}}}}}}}}},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}},":":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343},"Miscellaneous/AlienDictionary.html":{"ref":"Miscellaneous/AlienDictionary.html","tf":0.021739130434782608}}},"_":{"docs":{},"s":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343}},":":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343}}}}}},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343}},"e":{"docs":{},":":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343}}},"[":{"docs":{},"n":{"docs":{},"e":{"docs":{},"w":{"docs":{},"_":{"docs":{},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"]":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343}},")":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343}}}}}}}}}}}},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"]":{"docs":{},"+":{"1":{"docs":{},")":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343}}}},"docs":{}}}}}}}}}}}}}},"}":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343}}}},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}},":":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}}}},"n":{"docs":{},"'":{"docs":{},"t":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0025188916876574307},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228}}}}}},"r":{"docs":{},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.012658227848101266},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855},"Miscellaneous/Palindrome.html":{"ref":"Miscellaneous/Palindrome.html","tf":0.009009009009009009}}}}},"a":{"docs":{},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"d":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}}}},"t":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}},"a":{"docs":{},"y":{"docs":{"Algorithms/SortingAndHashing.html":{"ref":"Algorithms/SortingAndHashing.html","tf":0.006666666666666667},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.004578155657292348},"DataStructures/StacksAndQueues/":{"ref":"DataStructures/StacksAndQueues/","tf":0.01020408163265306},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.004329004329004329},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564},"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.009478672985781991},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}},"s":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.003215434083601286},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.0058823529411764705},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}},"/":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.0058823529411764705}}}}}},"n":{"docs":{},"t":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.007751937984496124},"Algorithms/UncommonAlgos.html":{"ref":"Algorithms/UncommonAlgos.html","tf":0.009900990099009901},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011976047904191617},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0025188916876574307},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0019801980198019802},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.003105590062111801},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}},"s":{"docs":{},"h":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}},"l":{"docs":{},"k":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}}}},"h":{"docs":{},"e":{"docs":{},"e":{"docs":{},"l":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.003215434083601286}}},"n":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.003215434083601286}}}},"r":{"docs":{},"e":{"docs":{},",":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}},"t":{"docs":{},"h":{"docs":{},"e":{"docs":{},"r":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}},"n":{"docs":{},"?":{"docs":{"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062}}},"e":{"docs":{},"v":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0064516129032258064}}}}}},"o":{"docs":{},"l":{"docs":{},"e":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}},"y":{"docs":{},"?":{"docs":{"DataStructures/StacksAndQueues/":{"ref":"DataStructures/StacksAndQueues/","tf":0.01020408163265306}}}},"a":{"docs":{},"t":{"docs":{},"'":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}}}},"i":{"docs":{},"c":{"docs":{},"h":{"docs":{},",":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}}}}}},")":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}},")":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.008403361344537815}}}},"g":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.003430531732418525}}},"i":{"docs":{},"t":{"docs":{},"h":{"docs":{},"i":{"docs":{},"n":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}}}},"o":{"docs":{},"u":{"docs":{},"t":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00141643059490085}}}}},";":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00141643059490085}}}}},"n":{"docs":{"Algorithms/Games.html":{"ref":"Algorithms/Games.html","tf":0.013333333333333334}},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}},"n":{"docs":{},"e":{"docs":{},"r":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}},"d":{"docs":{},"o":{"docs":{},"w":{"docs":{"Algorithms/UncommonAlgos.html":{"ref":"Algorithms/UncommonAlgos.html","tf":0.019801980198019802},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.009846827133479213},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.011940298507462687},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343}},",":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124}}},".":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124}}}}}}},"s":{"docs":{},"e":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":3.333333333333333},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0106951871657754}}}},"d":{"docs":{},"t":{"docs":{},"h":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.002890173410404624}},":":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}},":":{"docs":{"Algorithms/UncommonAlgos.html":{"ref":"Algorithms/UncommonAlgos.html","tf":0.009900990099009901},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}},"]":{"docs":{"Algorithms/UncommonAlgos.html":{"ref":"Algorithms/UncommonAlgos.html","tf":0.009900990099009901}}},",":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907}}}},">":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678},"Algorithms/SortingAndHashing.html":{"ref":"Algorithms/SortingAndHashing.html","tf":0.006666666666666667},"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.00964630225080386},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.024926686217008796},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.017152658662092625},"Algorithms/Games.html":{"ref":"Algorithms/Games.html","tf":0.013333333333333334},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.01718213058419244},"Algorithms/DP/NumSol.html":{"ref":"Algorithms/DP/NumSol.html","tf":0.041666666666666664},"Algorithms/UncommonAlgos.html":{"ref":"Algorithms/UncommonAlgos.html","tf":0.009900990099009901},"DataStructures/StacksAndQueues/":{"ref":"DataStructures/StacksAndQueues/","tf":0.02040816326530612},"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01764705882352941},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.009846827133479213},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.01775147928994083},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.021645021645021644},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.023880597014925373},"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.011695906432748537},"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.010810810810810811},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.023391812865497075},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.014084507042253521},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.012594458438287154},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.015841584158415842},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.014428412874583796},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.01092896174863388},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.014218009478672985},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.02074688796680498},"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.01488095238095238},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.02100840336134454},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.014141414141414142},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.015748031496062992},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.017080745341614908},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.014023732470334413},"Miscellaneous/Palindrome.html":{"ref":"Miscellaneous/Palindrome.html","tf":0.02702702702702703},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.016611295681063124},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.015580736543909348},"Miscellaneous/AlienDictionary.html":{"ref":"Miscellaneous/AlienDictionary.html","tf":0.021739130434782608},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.018304431599229287},"Tricks/":{"ref":"Tricks/","tf":0.00966183574879227}},"=":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.003430531732418525},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.007751937984496124},"Algorithms/UncommonAlgos.html":{"ref":"Algorithms/UncommonAlgos.html","tf":0.009900990099009901},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002188183807439825},"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.029239766081871343},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.003329633740288568},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004149377593360996},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855},"Miscellaneous/Palindrome.html":{"ref":"Miscellaneous/Palindrome.html","tf":0.009009009009009009},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0033222591362126247},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.002890173410404624}}},"\"":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}},")":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.005037783375314861}}}}},"j":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.007331378299120235},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.005886200130804447},"DataStructures/StacksAndQueues/":{"ref":"DataStructures/StacksAndQueues/","tf":0.01020408163265306},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.011834319526627219},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.025974025974025976},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0033222591362126247},"Miscellaneous/AlienDictionary.html":{"ref":"Miscellaneous/AlienDictionary.html","tf":0.043478260869565216},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0038535645472061657}},"u":{"docs":{},"m":{"docs":{},"p":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678},"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.003215434083601286},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995}}},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}}}}},"g":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.006430868167202572}}},"n":{"docs":{},"e":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}}}}},"o":{"docs":{},"b":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.003215434083601286},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995}},"s":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}},")":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995}},")":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002932551319648094}},":":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047}}}},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047}}}},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.004329004329004329},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}},":":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.004329004329004329}}},"'":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}},"+":{"1":{"docs":{},")":{"docs":{},")":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}},"docs":{}},".":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}},"]":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995}},")":{"docs":{},")":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}},")":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}},"a":{"docs":{},"v":{"docs":{},"a":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}},"n":{"docs":{},"u":{"docs":{},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}}}}}}},"c":{"docs":{},"k":{"docs":{},"e":{"docs":{},"t":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}}}}}}},"z":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.004329004329004329}},"i":{"docs":{},"p":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678}}},"g":{"docs":{},"z":{"docs":{},"a":{"docs":{},"g":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0019801980198019802}}}}}}},":":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.003215434083601286}}},"]":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}},")":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.004329004329004329}}}},"e":{"docs":{},"r":{"docs":{},"o":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124}}},"e":{"docs":{},"s":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.011627906976744186},"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.0058823529411764705}},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"m":{"docs":{},"i":{"docs":{},"s":{"docs":{},"s":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"/":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}}}}}}}}}}}},".":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00141643059490085}}}}}}},"\ud83d":{"docs":{},"\udce2":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":10}}}},"!":{"docs":{},"=":{"docs":{"Algorithms/SortingAndHashing.html":{"ref":"Algorithms/SortingAndHashing.html","tf":0.006666666666666667},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002188183807439825},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609},"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.01092896174863388},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0106951871657754},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0028328611898017},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}}}},"\"":{"0":{"docs":{},"\"":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002157497303128371}}}},"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.005037783375314861},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}},"n":{"docs":{},"o":{"docs":{},"\"":{"docs":{"Algorithms/SortingAndHashing.html":{"ref":"Algorithms/SortingAndHashing.html","tf":0.013333333333333334}}},"n":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}},"y":{"docs":{},"e":{"docs":{},"s":{"docs":{},"\"":{"docs":{"Algorithms/SortingAndHashing.html":{"ref":"Algorithms/SortingAndHashing.html","tf":0.013333333333333334}}}}}},"\"":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002932551319648094},"Miscellaneous/Palindrome.html":{"ref":"Miscellaneous/Palindrome.html","tf":0.009009009009009009},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00141643059490085}},"\"":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.011764705882352941},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00437636761487965},"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.011695906432748537},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.002560819462227913},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.010075566750629723},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.007920792079207921},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004149377593360996},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.003236245954692557},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0038535645472061657}},"d":{"docs":{},"e":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}}}}}}},"e":{"docs":{},"n":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}}}}}}}},")":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0025188916876574307}}}},"i":{"docs":{},"n":{"docs":{},"s":{"docs":{},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{},"\"":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}}}}}}}}},"m":{"docs":{},"e":{"docs":{},"a":{"docs":{},"n":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"f":{"docs":{},"u":{"docs":{},"l":{"docs":{},"\"":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476}}}}}}}}}}}},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}}}}},"o":{"docs":{},"w":{"docs":{},"n":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"h":{"docs":{},"i":{"docs":{},"p":{"docs":{},"\"":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"l":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{},"n":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{},"\"":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}}}}}}}}}}}}}},"s":{"docs":{},"h":{"docs":{},"o":{"docs":{},"p":{"docs":{},"s":{"docs":{},"\"":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}}}}}}},"w":{"docs":{},"i":{"docs":{},"s":{"docs":{},"d":{"docs":{},"o":{"docs":{},"m":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}}}}}}}},"_":{"docs":{"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.007751937984496124},"Algorithms/DP/NumSol.html":{"ref":"Algorithms/DP/NumSol.html","tf":0.027777777777777776},"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00546448087431694},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498},"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}},",":{"docs":{"Algorithms/SortingAndHashing.html":{"ref":"Algorithms/SortingAndHashing.html","tf":0.006666666666666667},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}}},"h":{"docs":{},"e":{"docs":{},"l":{"docs":{},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{},"c":{"docs":{},"o":{"docs":{},"p":{"docs":{},"y":{"docs":{},"p":{"docs":{},"a":{"docs":{},"s":{"docs":{},"t":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047}}}}}}}}}}}}}}}}}}}}}}},"_":{"docs":{},"i":{"docs":{},"n":{"docs":{},"i":{"docs":{},"t":{"docs":{},"_":{"docs":{},"_":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.005121638924455826},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0019801980198019802},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.005549389567147614},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004149377593360996}}},")":{"docs":{},":":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.005970149253731343}}}}}}}}}}}}}}}},"a":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.006872852233676976}}},"b":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488}},",":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.010309278350515464}}},")":{"docs":{},")":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}},":":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}}}},"c":{"docs":{},")":{"docs":{},":":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488}}}},"]":{"docs":{},":":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488}}}},"l":{"docs":{},"o":{"docs":{},"s":{"docs":{},"e":{"docs":{},")":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00141643059490085}}},"+":{"1":{"docs":{},")":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00141643059490085}}}},"docs":{}},":":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00141643059490085}}},"=":{"0":{"docs":{},")":{"docs":{},":":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00141643059490085}}}}},"docs":{}}}}}}},"x":{"docs":{"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.015503875968992248},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}},",":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.006472491909385114}}}},"y":{"docs":{"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.015503875968992248},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.007551240560949299}},")":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}},")":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002157497303128371}}}},",":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}}},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},",":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.0058823529411764705}}}}}},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.002560819462227913}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.0058823529411764705}},")":{"docs":{},":":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.011764705882352941}}}}}}}}},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0038412291933418692},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}},",":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124}}},")":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}}}}},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0038412291933418692}}}}}},"i":{"docs":{},"n":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},")":{"docs":{},":":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0025188916876574307}}}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},")":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0025188916876574307}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},")":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0025188916876574307}}}}}}}}}}}}},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},")":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0025188916876574307}}}}}}}},".":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.007556675062972292}}}}}}}}}}}},"m":{"docs":{},"p":{"docs":{},":":{"docs":{},"_":{"docs":{"Tricks/":{"ref":"Tricks/","tf":0.004830917874396135}}}}}}},"d":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}},"i":{"docs":{},"r":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002157497303128371}},":":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002157497303128371}}}}}},"o":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00141643059490085}},")":{"docs":{},":":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00141643059490085}}}},"+":{"1":{"docs":{},",":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00141643059490085}}}},"docs":{}},",":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00141643059490085}}},"=":{"0":{"docs":{},",":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00141643059490085}}}},"docs":{}}}}}}},"{":{"0":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228}},":":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0032822757111597373},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228}}}},"1":{"docs":{},":":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228}},"f":{"docs":{},"l":{"docs":{},"o":{"docs":{},"a":{"docs":{},"t":{"docs":{},"(":{"docs":{},"'":{"docs":{"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406}},"i":{"docs":{},"n":{"docs":{},"f":{"docs":{},"'":{"docs":{},")":{"docs":{},",":{"docs":{"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406}}}}}}}}}}}}}}}}},"6":{"4":{"docs":{},":":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488}}}},"docs":{}},"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004398826979472141}},"v":{"docs":{},":":{"docs":{"Algorithms/SortingAndHashing.html":{"ref":"Algorithms/SortingAndHashing.html","tf":0.006666666666666667},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}}}},"f":{"docs":{},"[":{"docs":{},"p":{"docs":{},"]":{"docs":{},"[":{"docs":{},"j":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}},"}":{"docs":{"Algorithms/UncommonAlgos.html":{"ref":"Algorithms/UncommonAlgos.html","tf":0.009900990099009901},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0032822757111597373},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.008771929824561403},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00819672131147541},"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00808080808080808},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}},",":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0032822757111597373}}}},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"t":{"docs":{},"_":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},":":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124}}}}}}}}}},":":{"docs":{"Miscellaneous/AlienDictionary.html":{"ref":"Miscellaneous/AlienDictionary.html","tf":0.021739130434782608}}}},"'":{"docs":{},"i":{"docs":{},"'":{"docs":{},":":{"docs":{"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.005847953216374269}}}}}},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},":":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343}}}}}}},"l":{"docs":{},"a":{"docs":{},"b":{"docs":{},"e":{"docs":{},"l":{"docs":{},"s":{"docs":{},"[":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"]":{"docs":{},":":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}}}}}}}}}}}}},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{},"m":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{},":":{"docs":{"Tricks/":{"ref":"Tricks/","tf":0.004830917874396135}}}}},"docs":{}}}}}},"k":{"docs":{},":":{"docs":{"Tricks/":{"ref":"Tricks/","tf":0.004830917874396135}}}}},"%":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.003215434083601286},"Algorithms/Games.html":{"ref":"Algorithms/Games.html","tf":0.013333333333333334},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.005847953216374269},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.002890173410404624}}},"'":{"0":{"0":{"0":{"0":{"docs":{},"'":{"docs":{},",":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.003215434083601286}}}}},"docs":{}},"docs":{}},"docs":{},"'":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.010309278350515464}},",":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.006872852233676976}}}}},"1":{"docs":{},"'":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.010309278350515464}},",":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.006872852233676976}}},":":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.006872852233676976}}}}},"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}},"*":{"docs":{},"'":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.006430868167202572},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00141643059490085}},":":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00141643059490085}}},"]":{"docs":{},":":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0028328611898017}}}}}},"(":{"docs":{},"'":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00141643059490085}},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00424929178470255}}},":":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0113314447592068}}}}},")":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},"'":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00141643059490085}},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00424929178470255}}},":":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00424929178470255}}},"]":{"docs":{},":":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00141643059490085}}}}}},":":{"docs":{},"'":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047}}}},"v":{"docs":{},"i":{"docs":{},"s":{"docs":{},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{},"d":{"docs":{},"'":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002932551319648094}}}}}}}}}},"'":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.005847953216374269},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0028328611898017}},".":{"docs":{},"j":{"docs":{},"o":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},")":{"docs":{"DataStructures/StacksAndQueues/":{"ref":"DataStructures/StacksAndQueues/","tf":0.01020408163265306}}}}}}},"_":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},")":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00141643059490085}}}}}}}}}}}}}}},",":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00141643059490085}}}},"e":{"docs":{},"'":{"docs":{},",":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488}}}}},"i":{"docs":{},"'":{"docs":{},",":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488}}},":":{"docs":{"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.005847953216374269}}}}},"o":{"docs":{},"'":{"docs":{},",":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488}}}}},"u":{"docs":{},"'":{"docs":{},"]":{"docs":{},")":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488}}}}}},"c":{"docs":{},"a":{"docs":{},"n":{"docs":{},"'":{"docs":{"Algorithms/UncommonAlgos.html":{"ref":"Algorithms/UncommonAlgos.html","tf":0.009900990099009901}}}}}},"q":{"docs":{},"u":{"docs":{},"i":{"docs":{},"r":{"docs":{},"k":{"docs":{},"y":{"docs":{},"'":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02}}}}}}}}},"j":{"docs":{},"'":{"docs":{},":":{"docs":{"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.011695906432748537}}}}},"k":{"docs":{},"'":{"docs":{},":":{"docs":{"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.011695906432748537}}}}},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},"'":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564}}}}}},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"'":{"docs":{},")":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0025188916876574307}}},",":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809}}},":":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0025188916876574307}}}}}}}},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"[":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"]":{"docs":{},"'":{"docs":{},")":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228}}}}}}}}}}}}}}}}}},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"'":{"docs":{},")":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228}}},",":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.003329633740288568}}},":":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0022197558268590455}}}}}}}}}}}},"#":{"docs":{},"'":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}}},",":{"docs":{},"'":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}}}}},",":{"docs":{},"'":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}},")":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}}}}}},"*":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.00964630225080386},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.003430531732418525},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.002616088947024199},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.007751937984496124},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0032822757111597373},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.011834319526627219},"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.005940594059405941},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00424929178470255},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.00674373795761079}},"=":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488}}},"(":{"docs":{},"i":{"docs":{},"f":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124}}}}}},"x":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.003215434083601286},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.015503875968992248},"Algorithms/DP/NumSol.html":{"ref":"Algorithms/DP/NumSol.html","tf":0.041666666666666664},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0032822757111597373},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609},"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.017543859649122806},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0019801980198019802},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.01912568306010929},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.008629989212513484},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414},"Tricks/":{"ref":"Tricks/","tf":0.00966183574879227}},":":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.003215434083601286},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.003430531732418525},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124},"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.005847953216374269},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.005847953216374269},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00546448087431694},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.008305647840531562},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.002890173410404624},"Tricks/":{"ref":"Tricks/","tf":0.004830917874396135}}},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.004329004329004329},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00546448087431694},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.006211180124223602},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.015102481121898598},"Tricks/":{"ref":"Tricks/","tf":0.004830917874396135}}},"i":{"docs":{"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.007751937984496124}}},".":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124}},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"(":{"docs":{},"x":{"docs":{},",":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00546448087431694}}}}}}}}},"o":{"docs":{},"r":{"docs":{},"s":{"docs":{},"/":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124}}}}}},")":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00546448087431694},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828},"Tricks/":{"ref":"Tricks/","tf":0.004830917874396135}},")":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}},":":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0019801980198019802},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}}}},"[":{"0":{"docs":{},"]":{"docs":{},")":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0049833887043189366}},")":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}}}}}},"1":{"docs":{},"]":{"docs":{},")":{"docs":{},")":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123},"Tricks/":{"ref":"Tricks/","tf":0.004830917874396135}}}}}},"docs":{},"x":{"docs":{},"]":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00546448087431694}}}}},"_":{"docs":{},"f":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"d":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00546448087431694}}}}}}},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00546448087431694}},"+":{"1":{"docs":{},")":{"docs":{},"]":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847}}}}},"docs":{}}}},"i":{"docs":{},"n":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847}},",":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847}}}}}},"d":{"docs":{},"i":{"docs":{},"r":{"docs":{},",":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}}}}}},";":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907}}},"t":{"docs":{},"h":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}},"+":{"docs":{},"i":{"docs":{"Tricks/":{"ref":"Tricks/","tf":0.00966183574879227}}}}},"y":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.015503875968992248},"Algorithms/DP/NumSol.html":{"ref":"Algorithms/DP/NumSol.html","tf":0.041666666666666664},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.007763975155279503},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.02481121898597627},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.004816955684007707},"Tricks/":{"ref":"Tricks/","tf":0.004830917874396135}},")":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.003215434083601286},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002157497303128371},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.002890173410404624}},":":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002157497303128371},"Tricks/":{"ref":"Tricks/","tf":0.004830917874396135}}},".":{"docs":{"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062}}},")":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.007551240560949299}}},",":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.010787486515641856}}},"]":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}}},":":{"docs":{"Algorithms/BFS.html":{"ref":"Algorithms/BFS.html","tf":0.003215434083601286},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00546448087431694},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414},"Tricks/":{"ref":"Tricks/","tf":0.004830917874396135}}},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.008658008658008658},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.003236245954692557}}},"i":{"docs":{"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.007751937984496124}},"e":{"docs":{},"l":{"docs":{},"d":{"docs":{"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.014218009478672985}}}}}},"o":{"docs":{},"u":{"docs":{},"r":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717}}}}}}},"'":{"docs":{},"d":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}},"?":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}}}},"_":{"docs":{},"f":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"d":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00546448087431694}},")":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847}},":":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847}}}}}}}}},"d":{"docs":{},"i":{"docs":{},"r":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}}}}},"*":{"docs":{},"y":{"docs":{},")":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}}}}},"+":{"1":{"docs":{},")":{"docs":{},",":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.004314994606256742}}}}},"docs":{},"x":{"docs":{"Tricks/":{"ref":"Tricks/","tf":0.004830917874396135}}}},"]":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}},"e":{"docs":{},"a":{"docs":{},"r":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.0032258064516129032}}}}}},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}},":":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047},"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228}},"r":{"docs":{},"t":{"docs":{},"y":{"docs":{},"p":{"docs":{},"e":{"docs":{},":":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004149377593360996}}}}}}}},"t":{"docs":{},"y":{"docs":{},"p":{"docs":{},"e":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004149377593360996}}}}}}},"}":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047}}},"â€˜":{"docs":{},"r":{"docs":{},"e":{"docs":{},"j":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"â€™":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.001466275659824047}}}}}}}}}},"`":{"0":{"docs":{},"`":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228}}}},"docs":{},"`":{"docs":{},"`":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}},"p":{"docs":{},"i":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.003430531732418525},"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.011764705882352941},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.011940298507462687},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}}}},"f":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"d":{"docs":{},"`":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002188183807439825}}}}}}}},"v":{"docs":{},"i":{"docs":{},"s":{"docs":{},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{},"d":{"docs":{},"`":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015527950310559005}}}}}}}}}}},"&":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.006872852233676976}},"=":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488}}}},"^":{"docs":{},"=":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488}}}},".":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.002616088947024199}},".":{"docs":{},".":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995}},",":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995}}}}}},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.01775147928994083},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.005970149253731343}},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995},"Algorithms/UncommonAlgos.html":{"ref":"Algorithms/UncommonAlgos.html","tf":0.019801980198019802},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0012804097311139564},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414},"Tricks/":{"ref":"Tricks/","tf":0.004830917874396135}},"=":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}},")":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0011098779134295228},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0028328611898017}},".":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0010940919037199124}}},",":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00141643059490085}}}},"|":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.0010787486515641855}}},"\\":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.004329004329004329},"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.011695906432748537},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0025188916876574307},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002157497303128371},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.00424929178470255}}}},"length":9011},"corpusTokens":["!=","\"","\"\"","\"\"\"","\"\"\"decod","\"\"\"encod","\"\")","\"0\"","\"insert\"","\"mall","\"meaningful\"","\"no\"","\"non","\"ownership\"","\"restlessness\"","\"shops\"","\"wisdom","\"yes\"","#","###","#3","#return","$","%","&","&=","'","'#'","'#,'","''","'',","''.join(s_list)","''.join(stack)","'('","'(',","'(':","')","')'","')',","')':","')']:","'*'","'*':","'*']:","','","',')","'0'","'0',","'0000',","'1'","'1',","'1':","':'","'can'","'e',","'i',","'i':","'j':","'k':","'list[treenode]')","'next'","'node')","'node',","'node':","'o',","'quirky'","'treenode')","'treenode',","'treenode':","'u'])","'visited'","(","((","((i,","((max_key_freq","(0","(0,","(1","(1)","(1,","(132","(2","(2,","(==r)","(_close","(_d","(_list.val,","(_open","(_x,","(a[p+1]","(abs(x),","(add","(arrays,","(bits[i","(c","(care","(check","(collections.deque)","(current","(current_sum","(d","(dist_t","(djikstra","(e","(easier","(eg.","(end","(end_index","(even","(float('","(float('inf'),","(h","(heada","(heap","(https://leetcode.com/contest/weekli","(i","(i)","(i+1)","(i,","(id","(ie","(if","(int","(j","(k","(k+1):","(l","(l.val,","(l1_val","(last","(left_idx","(left_max","(len(nums)","(len(tickets)","(len(word)","(levelwis","(lists[list_idx].val,","(make","(math.max(i","(math.max(j,","(max_freq","(max_freq_count","(max_height","(max_key","(merg","(min_key_freq","(n","(n+1)","(n+1)st","(n+1)th","(ncr)","(need","(no","(node,","(node.v","(not","(num","(nums[i]","(odd","(one","(ord(string[i","(p.get(cont_sum","(p[j]","(p[x]","(pay","(posit","(postorder).","(price","(priority,","(processing,","(recurs","(right","(right_min","(root.left","(secretli","(see","(some","(sort","(sorted)","(start","(start_index","(step","(steps,","(str(node.val)","(string,","(subarray)","(sum","(t","(target)","(the","(think","(time","(tree/readme.md)","(trees,","(tricks/ds)","(use","(valid","(veri","(we","(with","(word","(x","(x*x","(x+1)","(x+1,y),","(x,","(x,i","(x,y+1),","(x,y+1)]","(x[0],","(x[1],","(x_found","(xi)]","(y","(y+1)","(y_found","(yi)]",")","),",").","*","*(if","*=","+","+=",",",".","...","...,","/","//","//=","0","0)","0))","0),","0):","0)?","0)]","0)])","0,","0,1,...,i","0/1","0:","0}","0},","1","1)","1))","1)**i)","1),","1).","1)/2","1):","1);","1)]","1)]:","1,","1,y),","1,y),(x,y+1),(x,i","1.","1/0","10","10)","10**9","10.","10.classic","11.dp","12.insert","13.graph","1383:","1390:","14.memoiz","14th/3328/","14th/3357/","15.binari","154","15th","16.math","18/","180/problems/lucki","180/problems/maximum","190/problems/pseudo","199/problems/numb","1:","1:current","1;","1]","1])","1]):","1],","1]:","1][","1][0]","1][0],","1][1]","1][1])","1][1]):","1][1],","1][2])","1][y]","1d","1x1","1}","2","2)","2):","2,","2.","2.knapsack","2/","2021/582/week","2022","21","21st/3330/","22nd","23:","252","253","26","26)","28th/3343/","28th/3612/","2:","2:float('","2:float('inf'),","2;","2]","2])","2d","3","3,","3.","3.multi","3/","3000","31:","3:","3:float('","3:float('inf')}","3]:","3n","4","4)","4):","4.interv","4000","435","439df7e5ea1f","4:","4]","4])","5","5)","5.bit","56","59:","5:","6.digit","621:","7","7)","7.dp","8.string","857:","8th","9.probabl",":",":rtype:",":type","=","==","=>",">",">\"",">\")",">=","[","['(',","[')',","['jfk'])","[((","[(0,","[(e,","[(x","[(x+1,","[(x+1,y),","[(x+1,y),(x","[.(c1","[..(]","[..1]","[.2*(c1+c2+c3)]","[0","[0,","[0]","[0][0])","[1,","[1]","[[0","[[0]","[[float('inf'),","[[i,","[[x,","[]","[])","[]):","[],","[_a,","[average(0,","[c","[c]","[candidates[i]],","[dm[i][q","[e]","[fals","[false]","[float('","[float('inf')","[float('inf')]","[i,","[i]","[look","[lower,","[max_start,","[n])","[new]","[node.parent,","[node.val]","[node.val])","[node.val],","[num],","[nums[j]])","[p.val,","[pid[i]]","[prev","[s,","[s]","[str(lower)","[str(lower)]","[string]","[target.val]","[treenode(int(val))","[x","[x[x]","[x][y]","[y","\\","^=","_","_,","__init__(self):","__init__(self,","_a","_b","_b))","_b):","_b,","_c):","_c]:","_close)","_close+1)","_close:","_close=0):","_d","_dir","_dir:","_helpercopypaste(self,","_imp:_","_inorder(node):","_inorder(node.left)","_inorder(node.right)","_inorder(root)","_inorder.sum","_left,","_list","_next","_open","_open):","_open+1,","_open,","_open=0,","_right","_right):","_sum","_sum)","_sum,","_x","_x,","_y","_y)","_y))","_y,","`0`","```","```pi","`found`","`visited`","a):","a,","a.kadane'","a:","a[0]","a[1],","a[i]","a[i])","a[i].","a[len(a)","a[p+1]","a[p+2]","a[x][y]","a]","a],","a^n","abov","above.","abs(len(s)","abs(node.v","abs(squirrel[0]","abs(squirrel[1]","abs(state[b","abs(tree[0]","abs(tree[1]","absolut","absolve.","abstract","accept","accept,","accord","accordingly.","achiev","action","action.","actual","actually.","add","add(_a,","add.","addbinary(self,","adding,","addit","addnums(node,","addnums(node.left,","addnums(node.right,","addnums(root,","addonerow(self,","address","addtoresult(start,","addtwonumbers(self,","adjac","adjacent/","adjust","adjustment_opt","admir","aforment","afterwards,","afterwards.","ag","again","again)","again,","again.","against.","ahead","ahead.","aim","algo","algo:","algorithm","algorithm:","alien","all,","alloc","allow","allowed:","along","alpha","alreadi","also,","alter","altern","alway","always,","amaz","amount","ancestor","and","anoth","another.","answer","answer.","answer:","anyon","anyth","anything,","anything.","append","appl","apple_in_path","application.","approach","approach:","approaches:","appropri","arbitari","archives:","are:","area","arithmet","around","arr","arr1:","arr1[index['i']]","arr1[index[x]]","arr2:","arr2[index['j']]","arr2[index[x]]","arr3:","arr3[index['k']]:","arr3[index[x]]","arr:","arr[0]","arr[expected_idx]","arr[expected_idx],","arr[i]","arr[i],","arr[x+1][y+1]","arr[x+2][y+1]","arr[x+2][y+2]","arr[x+2][y]","arr[x][y+1]","arr[x][y+2]","arr[x][y]","array","array,","array.","array/","array/problem?h_l=interview&playlist_slugs%5b%5d=interview","array;","arrays/","arraysintersection(self,","arrival,","arrow","arsenal.","article:","artifact","ascii","ask","aspect","assign","atlant","atlantic]","atlantic_queu","atlantic_queue.append((x","atlantic_queue.append((x,","atleast","attend","attent","attr","attribut","augment","automat","aux_dp","aux_dp[0]","aux_dp[1]","aux_dp[2]","averag","average(i+1,","average(x,","average.","averages/","avoid","awar","away","b","b):","b,","b.lc","b/w","b:","b[len(b)","b]","b],","b_target:","back","backtrack","backtrack()","backtrack(0,","backtrack([])","backtrack([],","backtrack(bucket","backtrack(bucket):","backtrack(bucket,","backtrack(curr","backtrack(i","backtrack(i,","backtrack(index+1,","backtrack(index=0,","backtrack:","backward","backwards,","backwards.","balanc","balancebst(self,","balanced.","ball","balloons/","bandwidth.","base","basic","basically,","be","because,","becom","becomes:","befor","before.","begin","beginn","beginword:","behavior","behaviour","below","below.","benefit","best","better","between","bf","bfs(i):","bfs(s):","bfs)","bfs:","bidirectional.","bifurc","bigger","billboard/","binari","binaries\"","binaries.","binary/","binary_start_search(b_target):","binary_start_search(target)","binary_start_search(target+1)","binarytreepaths(self,","bipartite/","bipartition/","bit","bit:","bits.","bits/","bits[0]","bits[i","bits[i]","bitwis","blinker","block","bloomday:","bloomday[0]","blue","blue,","blue.","blue])","blue_edges:","board:","boat","boil","book","bookcas","bool:","boolean","border","both","bottom","bottom,","boundari","bouquet","box","boxes/","bracket","braket","break","break)","break).","break/","breaker","breaker.","brick","bricks:","bricks_left","bridge/","brilliant","bring","broader","brokencalc(self,","browser","brute","bs","bst","bst/","bst:","bstfrompreorder(self,","bucket","bucket,","bucket.append(arr[k])","bucket.pop()","bucket[0:","bucket[2:","buckets,","build","build_bridge():","buildtree(self,","built","burst","buy","c","c,","c.left)","c.li","c.most_common(n)","c.right)","c2","c3]","c:","c_","c_e","c_l","c_r","cach","cache.get((x,","cache/","cache:","cache[(x,","cache[course]","cake","calc_sum(mid):","calcul","calculation.","calculator/","calculator/discuss/236565/detail","call","call)","calls/","calm","cameras/","can't","can,","can.","can_ship","can_ship(w):","candidates:","candidates[i])","candies,","canfinish(self,","canjump(self,","canjumpfromposition(int","canmeasurewater(self,","canvisitallrooms(self,","canwinnim(self,","cap","capac","car/","cards/","care","carri","carry)","carry:","case","case,","case.","cases,","cases.","cases:","cash","cash,","cash.","catch","catch:","cc","center","center.","certain","chain","chain/","challeng","challenge/535/week","challenge/536/week","challenge/537/week","challenge/540/week","chanc","chang","change.","change/","change:","changer","char","char_stor","charact","character(not","character.","character/","characters/","characters/discuss/87768/4","chars,","chars[start_char]","cheat","check","checkifprerequisite(self,","checkout","checkpossibility(self,","checks:","chessboard/","child","child,","children","children'","children)","children:","choices:","choos","chose","chunk","circular","citi","clarif","class","class,","classic","clean","cli","climb","clone","clone;","cloned)","cloned:","close","closed_bracket","closest","closestkvalues(self,","code","code.","codec:","coin","coins:","col","col_end","col_end.","col_start","col_start,","col_start:","collabor","collect","collections.dequ","college?","color","color)","color))","color,","color/","color:","color_left","color_left))","colors.pop()","colors.remove(color)","colors/","colors:","colors[i]","colors[n","column","comapar","combin","combination,","combinations:","combinationsum(self,","combinator","combo","come","comes,","comment","common","common,","compact","compact,","compact.","compar","comparator.","comparison","comparisons/","competit","complet","completely.","complex","complic","compliment","compon","compress","comput","computation,","computations,","computing.","concaten","concept","concern","condit","conditions,","conduc","conenct","conflicts/","connect","conquer","consecut","consid","consist","consolid","constaint","constraint","constraint.","constraints,","construct","construct(0,","construct(i_s,","construct(index","construct(index,","construct(l,","construct(max_index","construct(pivot","construct.postorder_index","construct_tree()","construct_tree(0,","construct_tree(middl","construct_tree(root_idx+1,","construct_tree(start,","construct_tree(start=0,","construct_tree.index","construction:","constructmaximumbinarytree(self,","constructtree(start,","consumption,","cont_sum","cont_sum,","contain","containsnearbyalmostduplicate(self,","contest","continu","contract","converg","convers","convert","convertbst(self,","cooldown/","copi","copied))","copied,","copied:","corner","correct","correspond","cost","cost,","costs[i][0]","costs[i][1]","costs[i][2]","count","countbinarysubstrings(self,","countbits(self,","countcomponents(self,","counter","counter(list/string)","counter(nums)","counter)","counter):","counter:","counter[num]","counter[num]:","countpairs(self,","counts/","countsubtrees(self,","coupl","cours","course)","course_depth","course_depth)","courses/","courses:","coursework","cover","cpu/","creat","creation","creativity.","criteria","criteria,","critic","critical,","crucial","crucial;","cuboids/","cultur","cumul","curat","curiou","current","current)","current),","current):","current,","current.left","current.left:","current.next","current.right","current.right:","current.v","current.val))","current:","current=\"\",","current[0]","current[char]","current_count","current_dist","current_row","current_row.get(x,","current_row:","current_row[x]","current_sum","current_sum):","current_sum,","custom","cut","cuts/","cycl","cycle,","cycle/","cyclic","d","d)","d))","d)]","d,","d.2d","d1","d1,","d2","d2,","d:","data","data):","data.split(',')]","data:","day","day)","day,","day:","days/","days_left","deadends:","deadends_set","deadends_set:","deal","decent","decid","declar","decomposition/","decor","decreas","decrease.","decreasing\")","decrement","deep","deeper","deepest","deepestleavessum(self,","def","default","default)","default),","default.","defaultdict","defaultdict(int)","defaultdict(list)","defaultdict(set)","defaultdict,","definit","del","delay","delet","deleting/","deletion.","deletion/","deliveri","depend","deploy","depth","depth):","dequ","deque()","deque([(0,","deque,","descript","deseri","deserialize(self,","design","desir","desirable.","destruct","determin","devid","df","dfs(c))","dfs(course)","dfs(course):","dfs(d,","dfs(i)","dfs(i):","dfs(i,","dfs(index):","dfs(index,","dfs(j):","dfs(n)","dfs(self,","dfs.","dfs.visit","dfs.visited.add(index)","dfs.visited.remove(index)","dfs.visited:","dfs:","di","dialer/","dice","dict","dict()","dict.","dict.get(key,","dict.get(node,","dict:","dictionari","dictionary)","dictionary.","dictionary/","didn't","diff","differ","differbyone(self,","difference,","difference.","difference/","difference:","different.","difficulti","digit","digits/","dimension","direct","direction(intenum):","direction)","direction,","directions:","directli","disconnect","discrep","discrepancy.","discussion/655708/graph","discussion/691825/binari","discussion/786126/python","disguis","dishes/","displac","displacements.","dist_","dist_diff","dist_s)","dist_s[m_idx]","dist_t","dist_t[m_idx]","distanc","distance/","distance:","distancek(self,","distinct","distinct.","distribut","dive","divid","divis","divisor","divisors.add(i)","divisors.add(num","divisors/","divisors:","djikstra","djikstra.","dm","dm=distanc","dm[i]","dm[i][col","dm[i][q","dm[n","do","do:","docstr","doesn't","doll","domain","domain)","domino","dominoes/","dominoes:","dominoes[::","don't","done","done.","done:","donâ€™t","dot","doubl","doubli","down","down:","downtime.","downward","dp","dp'","dp,","dp.get(n","dp;","dp[","dp[0]","dp[0][0]","dp[1]","dp[1])","dp[2])","dp[2],","dp[:]","dp[_x][_y],","dp[first_one]","dp[i","dp[i]","dp[i])","dp[i][0]","dp[i][1]","dp[i][2]","dp[i][diff]","dp[j","dp[j]","dp[j])","dp[j]))","dp[j],","dp[j].get(diff,","dp[n]","dp[n])","dp[prev2])","dp[small_amount]","dp[x","dp[x][i","dp[x][y]","dp[x][y])","drop","drop/","dry:","dst:","dummi","dummy.next","duplic","durat","duration)","duration,","duration:","duration]","dure","dynam","e","e,","e.cumul","e.g.","e:","e]","each","earlier","earn/","easi","easier","easier.","easili","easy!","eat","edg","edges:","edges[(current,","edges[(s,","effect","effici","efficiency.","effort/","eg.","eg:","egg","either:","eleg","elem","elem)","elem,","element","element,","element.","element/","element:","elements,","elements/","elems)","elems:","elif","elimin","elimination/","else:","empti","enabl","encod","encount","end","end)","end):","end+1):","end,","end.","end:","end=len(inorder)","end])","ends,","endword:","engin","enough","enum","enumerate(arr)}","enumerate(bloomday):","enumerate(costs[1:],","enumerate(dp[1:],","enumerate(h_sorted[1:],","enumerate(heights):","enumerate(heights[1:],","enumerate(inorder):","enumerate(inorder)}","enumerate(lists):","enumerate(mat):","enumerate(nums):","enumerate(nums[1:],","enumerate(nuts):","enumerate(order)}","enumerate(ppid):","enumerate(prefix):","enumerate(s):","enumerate(string[1:],","enumerate(tasks):","enumerate(tasks)])","enumerate(v_sorted[1:],","enumerate(words[:len(words)","envelopes/","environ","equal","equal,","equal:","equality,","equality.","equality:","equation:","equidist","equil","equival","eraseoverlapintervals(self,","especially)","especially,","especti","esqu","etc","etc)","even","event","events,","everyon","everyth","everytim","everywhere,","exactli","exam/","exampl","example,","example:","excel","exclud","exhaust","exist","exist(self,","existance.","exists,","exists:","exit","exit\")","expand","expand.","expect","expected):","expected,","expected[i]:","expected_idx","experi","expert","explain","explaination:","explan","explanation:","express","extend","extra","extra)","extra,","extrem","f","f(dp[1],","f(dp[i","f(dp[small_amount","f(g(j,","f),","f,","f.hashmap","f==s,","f[i][j]","f[i][j]b","f[max_key]","f[min_key]","f[p][j","f[v]","facilit","fact","factors/divisor","failur","fair","fair,","fall","fall/","fals","false))","false:=","far","far,","far.","far;","farthest","fast","fast.next","fast.next.","fast.next:","faster","faulti","favourit","fed","fee","fee)","fee):","fee/","feedback","feedback,","fetch","few","fewest","fg","fibonacci","field","figur","fill","filling:","filter","final","final_answ","find","find_first_greater(start","find_first_greater(start,","find_len(l,","findbestvalue(self,","findcheapestprice(self,","findduplicates(self,","findfrequenttreesum(self,","finditinerary(self,","findleaves(self,","findlongestword(self,","findmin(self,","findminarrowshots(self,","findmissingranges(self,","findorder(self,","findthelongestsubstring(self,","fingerprint","fingerprints.get(fingerprint,","fingerprints.values()","fingerprints[fingerprint]","fingers/","finish","firm","first","first.","first:","fit","fix","flag","flat","flatten(self,","flight","flights:","flip","float('","float('inf')","float('inf'))","float('inf'),","float('inf')]","float('inf')],","float,","float:","floor(sqrt(num))","flourish","flow/","flower","flowers.pop()","flowers.remove(planted[n","flowers:","fo","focus","follow","following:","follows:","followup","food/","for,","forc","forget","form","forward","forward;","forwarding.","found","found,","freq","freq(x)","freq(x+1)","freq.get(t,","freq.items():","freq:","freq[char]","freq[string]['0']","freq[string]['1']","freq[t]","freq[task]","freq[task]:","frequenc","frequency.","frequent","friend","fron","fuel","function","function)","function.","function:","functool","functools.cmp_to_key(comparator)","functools.lru_cach","further","furthestbuilding(self,","furthestjump","futur","g","g(i","g_queue","g_queue.popleft()","g_queue:","g_visit","g_visited.add(i)","g_visited:","game","game/","game/:","game/submissions/","garden/","gardennoadj(self,","gather","geek","gener","generateparenthesis(self,","generators:","geograph","georgia","get","get_smallest(x))]","get_smallest(x):","getallelements(self,","getfood(self,","getintersectionnode(self,","getmaximumgold(self,","getorder(self,","gettargetcopy(self,","getter","git","gitbook","give","given","glean","global","globally,","globals/","go","gold/","good","googl","gotcha","gotcha:","graduat","graph","graph.","graph.get(e,","graph.get(index,","graph.get(p,","graph.get(parent,","graph.get(s,","graph/","graph:","graph[c].add(p)","graph[c].append(p)","graph[c]:","graph[current]:","graph[d].append(s)","graph[e]","graph[end].append(start)","graph[i]","graph[i]:","graph[index]:","graph[node.val].append(parent)","graph[node]:","graph[parent]","graph[parent].append(node.val)","graph[s]","graph[s].append([d,","graph[s].append(d)","graph[start].append(end)","graph[u].append((v,","graph[v]:","graphs,","great","greater","greater,","greedi","grid","grid/","grid:","grid[0][0]","grid[_a][_b]","grid[i][j]","grid[x][y]","ground","group","group'","group,","groups'","groupstrings(self,","growth","guarante","guarate","h","h:","h_sort","h_sorted[","h_sorted[0],","h_sorted[i","habit","half","hand","hand.","handl","handling.","happen.","happens.","happi","happiness/","hard","harmoni","hasapple:","hasapple[node]","hasapple[node]:","hascycle(self,","hash","hashing)","hashmap","hasn't","hassle.","hat","have.","have?","head","head)","head.next","head.val","head:","heada","heada,","heada.next","heada.next:","heada:","headb","headb):","headb:","healthi","heap","heap)","heap,","heap.","heap.append((0,","heap:","heap[0][0]","heap[0][0]:","heap[0][distance])","heappush","heapq","heapq.heappop(heap)","heapq.heappush(heap,","heard","height","height,","height.","height:","heights:","heights[i","heights[x][y]:","help","helper","helper(head)","helper(node):","helper(node.left)","helper(node.next)","helper(node_right)","helper(root)","helper.first","helper.last","helper.last.left","helper.last.next","helper.last.right","helper.last:","helperncr(","helperncr(0,","helperncr(s,","helperncr(s:","helps.","here","here)","here,","here.","here:","heurist","hierarchi","high","higher","hint:","hire","histogram/","hit","hold","hold,","home/","hop","hops,","horizont","horizontalcuts:","horizontally.","hourglasssum(arr):","hous","house/","https://github.com/varadghodake/gitbook","https://leetcode.com/contest/weekli","https://leetcode.com/discuss/gener","https://leetcode.com/discuss/interview","https://leetcode.com/explore/challenge/card/januari","https://leetcode.com/explore/challenge/card/jun","https://leetcode.com/explore/challenge/card/may","https://leetcode.com/problems/132","https://leetcode.com/problems/2","https://leetcode.com/problems/3sum/","https://leetcode.com/problems/add","https://leetcode.com/problems/airplan","https://leetcode.com/problems/al","https://leetcode.com/problems/alloc","https://leetcode.com/problems/arithmet","https://leetcode.com/problems/array","https://leetcode.com/problems/bal","https://leetcode.com/problems/best","https://leetcode.com/problems/binari","https://leetcode.com/problems/bitwis","https://leetcode.com/problems/boat","https://leetcode.com/problems/broken","https://leetcode.com/problems/build","https://leetcode.com/problems/burst","https://leetcode.com/problems/can","https://leetcode.com/problems/capac","https://leetcode.com/problems/champagn","https://leetcode.com/problems/cheapest","https://leetcode.com/problems/cherri","https://leetcode.com/problems/climb","https://leetcode.com/problems/closest","https://leetcode.com/problems/coin","https://leetcode.com/problems/combin","https://leetcode.com/problems/concaten","https://leetcode.com/problems/constrain","https://leetcode.com/problems/construct","https://leetcode.com/problems/contain","https://leetcode.com/problems/continu","https://leetcode.com/problems/convert","https://leetcode.com/problems/count","https://leetcode.com/problems/cours","https://leetcode.com/problems/cousin","https://leetcode.com/problems/cr","https://leetcode.com/problems/decod","https://leetcode.com/problems/deepest","https://leetcode.com/problems/delet","https://leetcode.com/problems/deliv","https://leetcode.com/problems/dic","https://leetcode.com/problems/distinct","https://leetcode.com/problems/distribut","https://leetcode.com/problems/divisor","https://leetcode.com/problems/domino","https://leetcode.com/problems/dungeon","https://leetcode.com/problems/edit","https://leetcode.com/problems/fil","https://leetcode.com/problems/find","https://leetcode.com/problems/flatten","https://leetcode.com/problems/flow","https://leetcode.com/problems/form","https://leetcode.com/problems/four","https://leetcode.com/problems/freedom","https://leetcode.com/problems/frog","https://leetcode.com/problems/furthest","https://leetcode.com/problems/gener","https://leetcode.com/problems/get","https://leetcode.com/problems/greatest","https://leetcode.com/problems/group","https://leetcode.com/problems/guess","https://leetcode.com/problems/hous","https://leetcode.com/problems/i","https://leetcode.com/problems/insert","https://leetcode.com/problems/integ","https://leetcode.com/problems/interleav","https://leetcode.com/problems/intersect","https://leetcode.com/problems/interv","https://leetcode.com/problems/jump","https://leetcode.com/problems/k","https://leetcode.com/problems/key","https://leetcode.com/problems/kil","https://leetcode.com/problems/knight","https://leetcode.com/problems/kth","https://leetcode.com/problems/largest","https://leetcode.com/problems/last","https://leetcode.com/problems/leaf","https://leetcode.com/problems/least","https://leetcode.com/problems/length","https://leetcode.com/problems/link","https://leetcode.com/problems/longest","https://leetcode.com/problems/lowest","https://leetcode.com/problems/lru","https://leetcode.com/problems/mak","https://leetcode.com/problems/matrix","https://leetcode.com/problems/max","https://leetcode.com/problems/maxim","https://leetcode.com/problems/maximum","https://leetcode.com/problems/meet","https://leetcode.com/problems/merg","https://leetcode.com/problems/middl","https://leetcode.com/problems/min","https://leetcode.com/problems/minimum","https://leetcode.com/problems/miss","https://leetcode.com/problems/most","https://leetcode.com/problems/mov","https://leetcode.com/problems/network","https://leetcode.com/problems/new","https://leetcode.com/problems/next","https://leetcode.com/problems/nim","https://leetcode.com/problems/non","https://leetcode.com/problems/numb","https://leetcode.com/problems/odd","https://leetcode.com/problems/on","https://leetcode.com/problems/onlin","https://leetcode.com/problems/open","https://leetcode.com/problems/out","https://leetcode.com/problems/pacif","https://leetcode.com/problems/paint","https://leetcode.com/problems/palindrom","https://leetcode.com/problems/parallel","https://leetcode.com/problems/partit","https://leetcode.com/problems/path","https://leetcode.com/problems/perfect","https://leetcode.com/problems/permut","https://leetcode.com/problems/permutations/","https://leetcode.com/problems/pizza","https://leetcode.com/problems/poss","https://leetcode.com/problems/pow","https://leetcode.com/problems/powx","https://leetcode.com/problems/predict","https://leetcode.com/problems/profit","https://leetcode.com/problems/push","https://leetcode.com/problems/rac","https://leetcode.com/problems/rang","https://leetcode.com/problems/reconstruct","https://leetcode.com/problems/reduc","https://leetcode.com/problems/regular","https://leetcode.com/problems/remov","https://leetcode.com/problems/restor","https://leetcode.com/problems/revers","https://leetcode.com/problems/russian","https://leetcode.com/problems/scor","https://leetcode.com/problems/scrambl","https://leetcode.com/problems/seri","https://leetcode.com/problems/shop","https://leetcode.com/problems/shortest","https://leetcode.com/problems/singl","https://leetcode.com/problems/slid","https://leetcode.com/problems/smallest","https://leetcode.com/problems/soup","https://leetcode.com/problems/spir","https://leetcode.com/problems/split","https://leetcode.com/problems/sqrtx/","https://leetcode.com/problems/squirrel","https://leetcode.com/problems/stick","https://leetcode.com/problems/ston","https://leetcode.com/problems/str","https://leetcode.com/problems/strang","https://leetcode.com/problems/stud","https://leetcode.com/problems/subarray","https://leetcode.com/problems/sum","https://leetcode.com/problems/sup","https://leetcode.com/problems/tallest","https://leetcode.com/problems/target","https://leetcode.com/problems/task","https://leetcode.com/problems/th","https://leetcode.com/problems/til","https://leetcode.com/problems/triangle/","https://leetcode.com/problems/tripl","https://leetcode.com/problems/two","https://leetcode.com/problems/ugli","https://leetcode.com/problems/uniqu","https://leetcode.com/problems/valid","https://leetcode.com/problems/verifi","https://leetcode.com/problems/vert","https://leetcode.com/problems/video","https://leetcode.com/problems/wat","https://leetcode.com/problems/way","https://leetcode.com/problems/wher","https://leetcode.com/problems/wiggl","https://leetcode.com/problems/wildcard","https://leetcode.com/problems/word","https://medium.com/@codingfreak/binari","https://www.geeksforgeeks.org/maximum","https://www.geeksforgeeks.org/next","https://www.geeksforgeeks.org/numb","https://www.geeksforgeeks.org/partit","https://www.geeksforgeeks.org/stock","https://www.geeksforgeeks.org/tag/array","https://www.geeksforgeeks.org/tag/subset/","https://www.geeksforgeeks.org/xor","https://www.hackerrank.com/challenges/2d","https://www.hackerrank.com/challenges/minimum","https://www.hackerrank.com/challenges/sherlock","i'll","i'm","i'v","i)","i))","i):","i+1","i+1)","i,","i.e.","i/","i:","i]","i],","i][c_s]","i][c_s],","i][col","i_","i_e)","i_e):","i_e:","id","id(head)","id(node)","idea","idea.","identifi","idl","ie","ie.","if(","if(curr","if(i","if(n","ii","ii,","ii/","iii/","illustr","imaginari","imc'","immediately.","immutable/","imp:","impact","imperfect","implement","implementation:","impli","import","improv","improve?","in.","in?","includ","include/exclud","included[i]","included[i]:","inclus","incom","incoming[n].remove(c)","incoming[n]:","incoming[nei].remove(node)","incoming[nei]:","incoming[p].add(c)","increas","increasing/","index","index))","index):","index,","index:","index['i']","index['j']","index['k']","index[i]","index[min(index,","index]","indic","indices.","indices[current]","indices[expected[i]]","indirectli","ineffici","inf')","inf'),","inf')}","influenc","info","info[l]","info[labels[node]]","ing","inherit","init","init(self,","init_st","init_state,","initi","initialization:","initialized,","inject","inner","innov","inord","inorder(node):","inorder(node,","inorder(node.left)","inorder(node.left,","inorder(node.right)","inorder(node.right,","inorder(o.left,","inorder(o.right,","inorder(o:","inorder(original,","inorder(root)","inorder(root1,","inorder(root2,","inorder.first","inorder.first.left","inorder.last","inorder.last.right","inorder.last:","inorder:","input","insert","insert(self,","insid","inspir","instal","instant","instanti","instead","instead.","instruct","instructions/","instructions:","int","int(bucket)","int(bucket[2:","int(bucket[2])","int(state[i])","int)","int,","int:","int[]","integ","integers/","intend","intenum","interchang","interest","interesting.","internship","interpret","intersect","intersections/","interv","interval/","interval[i]","intervalintersection(self,","intervals.","intervals.values()","intervals/","intervals:","intervals[0]","intervals[1:]:","intervals[s]","intervals[s][end]","interview","intmax","intmin","introduct","intuit","invalid","invers","inwards.","irrespect","is,","isaliensorted(self,","isbipartite(self,","isconstraintsatified().","iscousins(self,","island","island/","islands/","isn't","isoneeditdistance(self,","ispalindrome(start,","issubsetsum(list,","isvalid(s):","isvalidbst(self,","it'","it(node):","it(node.left)","it(node.right)","it)","it,","it.","item","item))","item:","item[1:]","item[1])}","item])","items,","iter","iteration.","iterative(root,","iterative(root1)","iterative(root2,","iterative)","iterative.leav","iterative.leaves.append(current.val)","iterative.leaves.pop(0)","iterative.leaves[0]:","iterative.similar","iterative:","iterator(generator)","iterator,","ith","itinerary/","itself","iv","iv/","iv/discuss/54117/clean","j","j'","j)","j))","j)):","j),","j+1))","j,","j.","j:","j]","j]))","j])))","jacket","januari","java","job","jobs/","jug","jump","jump(self,","jump/","june","k","k)","k))","k,","k/","k:","k_left","k_left)","k_left))","k_left:","kadan","kadane'","kclosest(self,","keep","kept","key","key,","key=","key=lambda","keyboard","keyboard/","keyboard/submissions/","keyword,","kill:","killprocess(self,","kind","kinda","kit&playlist_slugs%5b%5d=array","knapsack","knapsack.","know","known","knuth","kweakestrows(self,","kâ€™","l","l)","l))","l):","l,","l.append(node.val)","l.items():","l.next","l.next:","l1","l1)","l1,","l1.next","l1.val","l1:","l1_val","l2","l2)","l2.next","l2.val","l2:","l2_val","l:","l_h","l_h,","l_h:","l_lca","label/","labels/","labels:","ladder/","ladderlength(self,","ladders,","ladders:","lambda","lambda.","languag","larger","largest","largestdivisiblesubset(self,","largestnumber(self,","largestrectanglearea(self,","largesttimefromdigits(self,","last","last.","last.right","last/last","last:","last_day","last_interval,","last_node.next","last_pow","last_power]","last_seen","layer","layer.","lc","lca","lcadeepestleaves(self,","leaf","leafsimilar(self,","leastinterval(self,","leav","leaves,","leaves.","leaves/","leetcod","left","left,","left.","left/","left:","left=none,","left_idx","left_idx,","left_idxto","left_max,","left_min","leftward","len(a)","len(a):","len(a[0])","len(arr)","len(arr),","len(arr1)","len(arr2)","len(arr3):","len(arr[0])","len(b):","len(bloomday)","len(board),","len(board[0])","len(bucket)","len(candidates):","len(colors)","len(dp)","len(dp)):","len(f)","len(graph)):","len(graph))]","len(grid),","len(grid[0])","len(heap)","len(height)","len(heights)","len(heights),","len(heights[0])","len(inorder)","len(intervals)","len(iterative.leaves)","len(lists)","len(matrix)","len(node_vals)","len(nums)","len(nums))","len(nums)):","len(nums))]","len(nums),","len(nums):","len(nums1)","len(nuts)]","len(obstaclegrid)","len(obstaclegrid[0])","len(path)","len(postorder)","len(preorder)","len(prices)):","len(pushed)","len(queue)","len(rating)):","len(rating))]","len(result)","len(rooms)","len(s)","len(s):","len(state)):","len(store[c])):","len(store[c]):","len(t))","len(target)","len(tasks)","len(topo)","len(visited)","len(weights):","len(word):","len(words[i+1]):","len(x),","length","length)","length):","length.","lengthoflongestsubstring(self,","lengthoflongestsubstringkdistinct(self,","lengthoflongestsubstringtwodistinct(self,","less","let'","letter","level","level.","level_sum","levelwis","levelwise,","lexograph","li","librari","life","lift","like.","like:","limit","limit,","limit/","limit:","line","linear","link","lis.","list","list);","list,","list.","list.insert(index,","list/","list2)","list:","list[bool])","list[bool]:","list[i","list[i]","list[int])","list[int],","list[int]:","list[list[int]])","list[list[int]],","list[list[int]]:","list[list[str]])","list[list[str]],","list[list[str]]:","list[listnode])","list[n","list[str])","list[str],","list[str]:","list_idx","list_idx))","listnode()","listnode(digit)","listnode(min_val)","listnode)","listnode,","listnode:","lists)","lists,","lists.","lists/","lists:","lists[list_idx]","lists[list_idx].next","list}","littl","ll","lo=last","local","localhost:4000","location)","lock","lock/","logic","lol","lol)","lol,","lol[c_l]","lol[col])","long","longer","longest","longestconsecutive(self,","longestpalindrome(self,","longeststrchain(self,","longestvalidparentheses(self,","longestzigzag(self,","look","loop","loop)","loop,","loop.","looping:","loops:","lor","lor[c_r]","lor[col]","lose","lost","lot","lower","lower:","lower==len(nums)","lowestcommonancestor(self,","lru","lsb","m","m,","m:","m_idx","m_idx,","m_refer","machines/","made","mailboxes/","main","maintain","maitain","make","mall","managers.","mani","map","mark","mat:","match","match.","matched:","matching/","math","math.ceil","math.floor","math.max(dp[i],","math.min(posit","matric","matrix","matrix/","matrix:","matrix[r_","matrix[r_e][c_","matrix[r_s+i][c_e],","matrix[r_s][c_s+i],","matter","max","max(","max(1","max(cash,","max(chain,","max(dp[i],","max(dp[i].get(diff,","max(end,","max(f.keys())","max(hold,","max(l,","max(length,","max(longest,","max(max_depth,","max(max_end,","max(max_height,","max(max_len,","max(max_next,","max(max_rooms,","max(max_seq,","max(max_sum,","max(max_time,","max(max_w,","max(max_width,","max(nums[0:2])","max(postorder.max_sum,","max(preorder.longest,","max(result[","max(self.dfs(i,","max(self.dfs(x,","max(self.max_count,","max(self.max_length,","max(t[x]","max(words_store[new_word],","max(x_max,","max,","max/min","max/min.","max/min:","max_count","max_depth","max_end","max_freq","max_freq,","max_freq_count","max_heap","max_heap,","max_height","max_index","max_index)","max_key","max_key_freq","max_len","max_len.","max_len:","max_next","max_room","max_seq","max_start","max_start,","max_sum","max_tim","max_w","max_width","max_width)","max_x+1)].","max_x.","maxarea(self,","maxim","maxima","maximum","maximum,","maximum/","maximumsum","maximumsum)","maxnonoverlapping(self,","maxpathsum(self,","maxprofit(self,","maxslidingwindow(self,","maxsubarraylen(self,","maxval","meaning,","meet","memo","memo[(i,","memoiz","memori","mental","merg","merge(l1,","merge(list1,","merge(self,","mergeklists(self,","mergetrees(self,","mergetwolists(self,","messi","met","method","method:","methods,","metric","mid","mid+1","mid;","middl","million","min","min(2","min(dm[i],","min(dm[i][col","min(dm[n","min(dp[","min(dp[0],","min(dp[1],","min(dp[i","min(dp[prev1],","min(f.keys())","min(min_end,","min(result,","min(start,","min(x_min,","min/max","min/max/sort","min_end","min_end:","min_heap","min_key","min_key_freq","min_val,","min_x","minaddtomakevalid(self,","minavailableduration(self,","mind","mindays(self,","mindistance(self,","minim","minima","minimum","minimumeffortpath(self,","minimumsemesters(self,","minimumswap","minimumswaps(arr):","minmeetingrooms(self,","minoperations(self,","minremovetomakevalid(self,","minsteps(self,","minsubarraylen(self,","mintime(self,","minu","minval","minwindow(self,","misc","miscellan","mismatch,","miss","mistak","mod","model","modif","modifi","modification?","modified.","modulo","monoqueu","monoton","more","mostcompetitive(self,","motivational.","mountain","move","move:","moves+1))","movezeroes(self,","much","multi,","multipl","music","mutat","mypow(self,","myriad","mysqrt(self,","n","n)","n))","n):","n)]","n)]:","n,","n/","n:","n[0]","n[1]","n_d","n_d,","n_e","n_idx","n_idx,","n_s,","nature,","ncr","ncr.append(bucket[:])","nearest","necessari","necessary.","necessity;","need","neg","negative,","negative.","neglect","nei","neigh","neigh:","neightbor","nesting/","net","net,","networkdelaytime(self,","never","new","new.left","new.right","new_path_sum","new_path_sum.append(new_sum)","new_sum","new_word","newinterv","newinterval:","next","next(self,","next.","next:","next=none):","next_stat","next_word","nextgreaterelement(self,","nextpermutation(self,","nextposit","nice","nice.","node","node'","node,","node.","node.left","node.left))","node.left,","node.left:","node.next:","node.right","node.right))","node.right:","node.right]","node.v","node.val)","node.val):","node.val,","node.val]","node.val])","node/","node1","node1.left","node1.right","node1.v","node1:","node2","node2):","node2.left)","node2.right)","node2.v","node2:","node:","node_before_revers","node_po","node_pos[root.val]","node_right","node_v","node_vals.append(node.val)","nodes.","nodes/","nodes:","nodes])","non","none","none,","none.","none:","normal","normalsubset(self,","not!","not)","not),","not,","not.","not:","not;","note","note:","notes.git","notes:","noth","notic","now","now,","npm","nth","null,","null.","num","num)","num:","number","number'","number/","numbers(a[0],","numbers/","numcours","numcourses))","numcourses):","numcourses:","numequivdominopairs(self,","numislands(self,","nums)","nums.length","nums.reverse()","nums1","nums1:","nums1[m_idx]","nums1[r_idx]","nums2:","nums2[n_idx]","nums2[n_idx]:","nums:","nums[","nums[0]","nums[1:]","nums[:","nums[abs(n)","nums[end]:","nums[i","nums[i+1]:","nums[i]","nums[i])","nums[i],","nums[i]:","nums[j","nums[j]","nums[j])]","nums[j])])))","nums[j],","nums[k]","nums[k]])","nums[left_idx]","nums[left_idx],","nums[lower]","nums[max_index]","nums[max_index]:","nums[pivot_idx]","nums[pivot_idx],","nums[position],","nums[runner]","nums[start]","numteams(self,","nuts:","o","o(1)","o(1).","o(n)","o(n)?","o(n2)","o(n^2","o:","object","observ","obstacl","obstaclegrid:","obstaclegrid[x][y]","obtain","obv)","obvious","obvious,","obvious.","obviously!","occur","occurrence,","odd","of.","of:","offers/","offic","offset","offsets.get(c,","offsets[c]","older","on","onc","one!!","one,","one.","one:","one;","ones)","ones,","ones.","ones/","ones:","onto","oop:","open","open_bracket","open_brackets.append(i)","open_brackets:","openlock(self,","oper","operations,","opponent.","opportun","optim","optimally.","optimization:","optimizations:","option","options/","or","orang","oranges/","ord(c))","order","order.","order:","order;","organiz","origin","origin/","original:","other/","otherwis","otherwise,","out","out.","outermost","outsid","over","overcounting.","overflow","overflow.","overflow;","overflowing.","overflows,","overhead","overhead.","overlap","overlap,","own","p","p)},","p,","p.append(p[","p.get(cont_sum,","p1","p1,","p1.parent","p:","p[_x]","p[cont_sum]","p[i]),","p[y])","pace","paced,","pacif","pacific_queu","pacific_queue.append((0,","pacific_queue.append((x,","pacificatlantic(self,","packag","packages.","paint","paint_island(x,","pair","pairs/","palindrom","palindrome/","param","param,","paramet","parameter,","parent","parent)","parent),","parent):","parent.","parenthes","parentheses/","parenthesi","part","part.","partial","particularli","partit","partition(_left,","partitioning/","partitionlabels(self,","parts.","parts:","pass","path","path):","path,","path.","path.append(node.val)","path[:]","path_sum):","path_sum:","paths.","paths/","paths/discuss/102993/python","paths:","pathsum(self,","pattern","pattern)","pattern/dequ","peep","peer","people/","perfect","perfectli","perfectly:","perform","permut","permutation/","permutation/solution/","permute(bucket","permute(bucket)","permute(bucket):","permute(self,","permuteunique(self,","person","perticular","phase","phone","physically.","pickup","pickup/","pictur","picture!","pid","pid:","pid[i]","piec","piece,","ping(self,","pivot","pivot.","pivot_idx","pizza/","place","place.","places.","plan","plant","planted[i","planted[n","play","playlists/","plu","plug","plugin","point","pointer","pointers:","points/","points:","polygon/","pop","pop.","popleft","popped:","popped[k]","popped[k],","port","ports/","posibl","posit","position,","positions.","positions[","positions[num].append(i)","possibilti","possibl","possible.","possible:","possible;","possible_target","possiblities.","post","postord","postorder(node):","postorder(node.left)","postorder(node.right)","postorder(root)","postorder.","postorder.max_sum","postorder:","power","power'","power.","power_v","power_val:","ppid:","practic","pre","pre[i]","pre[index]","pre[n]","pre[n].union(pre[c].union(set([c])))","pre[p]","prefer","preference.","prefix","prefix.append(prefix[","prefix_arr[0]","prefix_arr[1]","preorder","preorder(node,","preorder(node.left,","preorder(node.right,","preorder(node1,","preorder(node1.left,","preorder(node1.right,","preorder(root,","preorder(t1,","preorder.longest","preorder:","preorder[fg]","preorder[start])","prep","prepar","prereq","prereq.get(course,","prereq.get(p,","prereq[p]","prerequisites:","presenc","present","presev","prev","prev)","prev,","prev;","prev_count","prev_k","prev_step","prev_steps,","prev_sum","previou","previous,","price","price,","price:","prices,","prices[0]","prices[i]","prices[i])","print","print(\">>","print_values_in_reverse(head.next)","print_values_in_reverse(listnod","printed.","printer/","priorit","prioriti","prioritizing,","probability/","probabl","problem","problem,","problem.","problem:","problem;","problems)","problems,","problems.","problems:","problemset:","proceed.","process","process/","processed,","processing,","produc","product","product,","production\".","profession","professional.","profit","program","project","project.","project?","projects,","proof","proof:","prop","proper","properli","properly.","properties,","properties;","property,","prune","prunetree(self,","pruning/","public","push","pushed.","pushed:","put","py","python","q","q.val])","q.val]))","q1","q1.parent","q1:","q:","qualifi","qualiti","quantiti","quantity.","queri","queries:","queries]","question","question!","question)","question,","question.","question/281470/","question/643158/googl","question:","questions*","questions,","questions.","questions:","queue","queue)","queue,","queue.","queue.append((","queue.append((0,","queue.append((_a,","queue.append((_x,","queue.append((beginword,","queue.append((c","queue.append((current.left,","queue.append((current.right,","queue.append((d,","queue.append((i,","queue.append((init_state,","queue.append((next_state,","queue.append((next_word,","queue.append((pid[i],","queue.append((root,","queue.append((v,","queue.append((x","queue.append((x+1,","queue.append((x,","queue.append(0)","queue.append(current.left)","queue.append(current.right)","queue.append(n)","queue.append(nei)","queue.append(node)","queue.append(node.left)","queue.append(node.right)","queue.append(root)","queue.append(s)","queue.append(target.val)","queue.append(v)","queue.pop())","queue.popleft()","queue:","quicker","quickest","quicksort","r","r)","r):","r.items():","r:","r_","r_e","r_e,","r_h","r_h,","r_h:","r_idx","r_lca","r_s,","rang","range(0,","range(1,","range(2)]","range(_left,","range(col_end","range(i","range(i):","range(k","range(l,","range(len(arr)):","range(len(colors))]","range(len(dp)","range(len(dp)):","range(len(dp),","range(len(graph)):","range(len(nums2)","range(len(word)):","range(m))","range(min_x,","range(n","range(n)","range(n):","range(offset,","range(row_end,","range(size):","range(start,","range(x","range(x):","range(x)]","range(x+1):","range(x+1)]","range(x,","range(x_min,","range(y):","range(y)]","range(y+1)]","range(y,","range.","ranges/","rating:","rating[i]","rating[j]:","rc","reach","reach/","read","readabl","readi","realiz","realli","receiv","recent","recentcounter:","record","record/upd","rectangl","rectangle/","recur","recurs","recurse(node.left)","recurse(node.right)","recurse(node:","recursion)","recursion,","recursion:","recursive:","red","red,","red])","red_edges:","reduc","refer","reference.","reference:","references,","reflect","refuel","relat","relations:","relish","remain","rememb","remember:","rememeb","remov","removal)","removals)","removals))","removals):","remove).","remove/add","removecoveredintervals(self,","removeduplicates(self,","removeinvalidparentheses(self,","removenthfromend(self,","removeouterparentheses(self,","reorder","repeat","repeat,","repeatit","repetit","repetition,","repetition.","repetitions.","repetitions/","repetiton","replac","repo","repositori","repres","represent","req","requests/","requir","required.","reserv","reset","respect","rest","restless","result","result,","result.","result.add(string)","result.append('","result.append([nums[i],","result.append([start,","result.append([x,","result.append(arr1[index['i']])","result.append(bucket[:])","result.append(current)","result.append(index)","result.append(key)","result.append(matrix[r][col_start])","result.append(matrix[row_end][c])","result.append(nei)","result.append(nums[index])","result.append(path","result.append(path)","result.append(stack[0][0])","result.append(str(start))","result.append(t)","result;","result[","result[:len(result)","result[end]","result[last_interval][end]","result[node]","result[start]","result_","result_s.add(tuple(sorted([nums[i],","result_s.pop()","result_s:","return","revers","reverse.","reverse;","reverse=true)","reversebetween(self,","reverselist(self,","revert","revisit","right","right,","right.","right:","right;","right=none):","right_max,","right_min","rightward","robber","robber/","roll","room","rooms)","rooms,","rooms/","rooms:","rooms[room]:","root","root))","root):","root.left","root.right","root.right):","root.right,","root.right:","root.val:","root1:","root2:","root:","root_idx","rotat","rotate(self,","rotten","routes/","row","row:","row_end","row_end,","row_start","row_start,","row_start:","rule","run","run,","run.","runner","runner),","runner.next","runtim","runtime:","runtimes:","s","s))","s),","s):","s)]","s,","s:","s[0]","s[1:]:","s[i]","s[index]","s[index],","s[j]","s[n","s[start","s[start]","s[x])","s]","s_cours","s_courses:","s_list","s_list[i]","s_list[open_brackets.pop()]","same","same,","same.","sampl","satifies)*","satisfi","satisfied.","save","say,","sc","scale","scatter","scenario","scenarios:","schedul","schedule/","schedulecourse(self,","scheduler/","scheduling/","schemes/","school","scienc","score","score/","scoreofparentheses(self,","search","search(x,","search.visited.add((x,","search;","searchrange(self,","seat","second","secondari","section","section)","sections.","see","seek","seen","seen),","seen):","seen.add((i,","seen.add((node,","seen.discard((i,","seen:","segments/","select","select.","self._helpercopypaste(n,","self.itinerari","self.itinerary:","self.lca","self.lca:","self.left","self.max_count","self.max_length","self.next","self.recurse(k,","self.result","self.right","self.stack","self.stack[","self.t","self.t:","self.tot","self.val","self.valid","self.valid:","self.walk","self.window","self.window[0]","sell","sell/","sem","send","sense.","seq","seq[word[j]]","seq[words[i+1][j]]:","sequenc","sequence/","sequence:","serialize(self,","serv","server","servings/","set","set()","set())","set(['a',","set([1,","set([beginword])","set([i.v","set([red,","set([something]","set(deadends)","set(range(0,","set)","set.","set/","set:","set_len","set_len[i]","set_len[i]:","set_len[j]","set_len[j])","sets,","setter","setup","share","sheet","shelves/","shift","ship","shipwithindays(self,","shoe","shop","short","shortest","shortestalternatingpaths(self,","shortestbridge(self,","shortestdistancecolor(self,","shortestpath(self,","shortesttochar(self,","shortvers","shortword","shortwords:","shoudn't","shouldn't","showcas","side","side,","sign","sign.","sign/","signific","silos.","similar","similarly,","simpl","simple.","simple:","simplifi","simul","simulation/","simulation/solution/","singl","singli","situat","situation,","situations,","size","size:","slice","slice+1;","slices/","slide","slightli","slots1","slots1:","slots1[i][1]:","slots2","slots2:","slots_avail","slow","slow.next","slow.next.next","slower","small","small_amount","small_target","smaller","smaller:","smallest","smallest_len","smart","smart:","snippet","so,","softwar","soldier","soldiers,","solut","solution(object):","solution,","solution.","solution:","solutions:","solv","some;","somehow","somehow.","someth","something,","sometim","sometimes,","somewher","sort","sort.","sort:","sorted([[task[0],","sorted(a,","sorted(arr)","sorted(courses,","sorted(current_row[x])","sorted(graph[s])","sorted(horizontalcuts)","sorted(intervals,","sorted(list,","sorted(nums)","sorted(points,","sorted(slots1)","sorted(slots2)","sorted(verticalcuts)","sorted(words,","sorted(x)]","sorted(x.items(),","sorted;","sorting,","space","span","span/","spell","spiral","spiralorder(self,","split","spread","squar","square/","squares/","squirrel","squirrel:","src))","src,","src:","stack","stack)","stack)]","stack,","stack.append('(')","stack.append(1)","stack.append(c)","stack.append(curr","stack.append(current)","stack.append(i)","stack.append(n)","stack.append(s)","stack.pop()","stack/","stack/queu","stack:","stack[","stack[:k]","stack[last]","stacks:","stair","stair.","stairs/","standard","start","start)","start+1","start+1)","start,","start.","start:","start=1):","start_char","starts.remove(p)","starts:","state","state,","state:","state[:i]","state[i+1:]","state[nums[i","static","stay","step","step.","step:","step;","step?","steps,","steps/","stick/","stitching/","stock","stock,","stock.","stock/","stockspanner:","stone","stones/","stop","stops/","storag","store","store,","store.add(fingerprint)","store.get((f,","store.get((s,","store.get(c,","store.get(city,","store.get(h,","store.get(s,","store.values()","store:","store;","store[(f,","store[c]","store[c][i]","store[h]","store[nums2[i]]","store[s]","store_object_idx","str","str((wheel","str(d[i]))","str(diff","str(end))","str(node.val)","str(node.val))","str(upper)]","str)","str,","str:","straight","straightforward","streak","stream","stream/","stretch","strictli","strike","string","string,","string.","string/","string/problem?isfullscreen=fals","strings,","strings/","strings:","strs:","structure.","structure:","structures.","student","stuff","stupid","style","sub","subarray","subarray/","subarrays,","subarrays/","subarrays:","subarraysum(self,","subdomain","subject","submatric","subsequ","subsequence,","subsequence/","subsequences.","subsequences/","subset","subset/","subset/discuss/84006/class","subsets/","subsets/subsqu","substitut","substr","substract","substring/","substrings/","substructur","subtl","subtract","subtre","subtree.","success","such","suffici","sum","sum(i","sum(nums)","sum(stack)","sum(xi","sum(yi","sum,","sum.","sum/","sum/discuss/16510/python","sum/discuss/299049/dp","sum/discuss/455024/dp","sum:","sum_and_number_of_elements(x,","sum_po","sum_pos:","sum_pos[","sum_pos[p]","sum_stor","sum_store:","sum_store[current_sum]","sum_store[prev_sum])","sum_w","sumnumbers(self,","sumofleftleaves(self,","sums.items():","sums:","sums[curr","sums[current]","sums[l","supersequence/","superstring/","support","suppos","sure","swap","swap.","swap:","swapping.","system","systems,","t","t))","t,","t1:","t2)","t2:","t:","tabl","table.","tag","tag))","tagging/mark","take","take.","taken","tap","target","target)","target):","target+1","target,","target.get(c,","target/","target:","target[c]","target])","task","task[1],","task_idx","tasks.","tasks:","tasks_remain","tasks_sort","tasks_sorted[0][0]","tasks_sorted[task_idx]","tasks_sorted[task_idx][0]:","team","team/","team/discuss/539797/c%2b%2bpython","teams/","tech","technic","techniqu","temp))","templat","temporari","tend","term","terminates.","th","that'","that'll","that).","that,","that.","them)","them?","then,","there'","therefore,","these,","they'll","thing","thing;","things)","things,","things:","think","third","this.","this:","thoroughly.","those","thought","thread","three","three/","threesum(self,","through","throught","tickets/","tickets:","tie","tiebreak","tiling/","till","time","time)","time,","time.","time/","times)","times,","times:","tip:","tips:","to_be_kil","to_be_killed.append(p)","together.","toggl","tojgroups.","too/475462","tool","top","topo","topo.append(node)","topo[::","topolog","total","total_sum","tough","tower/","town,","track","trading.","trail/","transact","transfer","transform","transit","translation.","travers","traversal,","traversal/","traversal/]","traverse('jfk',","traverse()","traverse(0)","traverse(_a,","traverse(atlantic_queue)","traverse(current,","traverse(n,","traverse(node):","traverse(node,","traverse(node.left)","traverse(node.left,","traverse(node.next)","traverse(node.right)","traverse(node.right,","traverse(node=head):","traverse(pacific_queue)","traverse(queue):","traverse(root)","traverse(root,","traverse(v)","traverse(v).items():","traverse(x,","treat","tree","tree,","tree.","tree/","tree/)","tree/discuss/537686/python","tree:","tree:lca","tree;","tree[e].append(s)","tree[node]:","tree[s].append(e)","treenod","treenode()","treenode(node_vals[middle])","treenode(object):","treenode(postorder[construct.postorder_index])","treenode(preorder[construct_tree.index])","treenode(preorder[start])","treenode(v)","treenode)","treenode):","treenode,","treenode:","trees/","treetodoublylist(self,","tri","tri_sum","triangul","trick","trick:","tricki","trie:","trigger","trip.","triplet","trivial","tromino","true","true,","true:","true:=","true;","turbul","twice/","twist.","twist;","two","two/","type","typic","u,","u_set","u_set.remove(p)","u_set:","ultim","unbalanc","unbound","uncommon","under","understand","undirect","uniqu","uniquepathswithobstacles(self,","univers","unless","unlik","unnecessari","until","unus","unvisit","up","up,","up:","updat","upper","upper:","upward","url","us","used:","useful:","usual.","util","v","v))","v,","v/","v:","v_sort","v_sorted[","v_sorted[0],","v_sorted[i","val","val,","val=0,","valid","valid/","validatestacksequences(self,","validation:","validation=false):","validation=true)","validpalindrome(self,","valu","value.","value:","values/","variabl","variable.","variat","variou","veri","verify(mid):","versa.","vertic","verticalcuts:","verticalorder(self,","verticaltraversal(self,","vice","vii/","visit","visited.add((string,","visited.add((x,","visited.add(course)","visited.add(fingerprint)","visited.add(i)","visited.add(id(node))","visited.add(index)","visited.add(next_state)","visited.add(next_word)","visited.add(node)","visited.add(room)","visited.add(v)","visited.remove(course)","visited.remove(i)","visited:","visited[c]","visited[index]","visited[j]","visited[j]:","visited[node]","visited[node]:","visited[s]:","visual","vowel","vowel_set","vs","w","w)","w))","w,","w:","w]","walk","want","wash","water","water/","way","ways/","we'd","we'll","we'r","we'v","weak","weakest","weapon","wear","weekli","weight","weights:","weights[0]","weights[1:]:","well","well,","well.","wg","what'","wheel","wheen","when?","whenev","where,","whether","which,","whole","why?","width","width:","win","win/","window","window,","window.","winner/","wise","with;","within","without","won't","word","word,","word/","word:","word[:i]","word[:i]+","word[i+1:]","word[i+1:]]","wordlist:","words/","words:","words_sort","words_sort:","words_stor","words_store:","words_store[new_word]","words_store[new_word])","words_store[word]+1)","wordstor","wordstore[shortversion].append(word)","wordstore[word[:i]","words}","work","work.","workers/","wraparound","write","wrt","x","x)","x))","x):","x+i","x,","x.","x.get(x,","x:","x;","x[0])","x[0]))","x[1]))","x[x]","x_dir,","x_found","x_max","x_max+1)]","x_min","x_min,","xi","xors/","xth","y","y)","y))","y),","y).","y):","y)]","y*y)","y+1),","y+x","y,","y:","y]","y_dir","y_found","y_found)","y_found):","year","yi","yield","you'd","you?","yourself","z","z:","z]","z])","zero.","zero/","zeroes/","zeroes/submissions/","zigzag","zip","{","{'i':","{0","{0:","{1:","{1:float('","{1:float('inf'),","{64:","{c:","{cont_sum:","{f[p][j","{item[0]:","{k:","{labels[node]:","{v:","{word:","{}","{},","|","}","â€˜rejectâ€™","ðŸ“¢"],"pipeline":["stopWordFilter","stemmer"]},"store":{"./":{"url":"./","title":"Introduction","keywords":"","body":"Introduction\nCompetitive coding notes\nInstructions:\n# Install gitbook and gitbook-cli globally\n$ npm install gitbook -g\n$ npm install gitbook-cli -g\n\n# clone this repo\n$ git clone https://github.com/VaradGhodake/Gitbook-Competitive-Coding-Notes.git\n\n### serve gitbook\n$ gitbook serve\nThis will start a server on port 4000 \nPoint your browser URL to localhost:4000\n"},"GeneralInstructions.html":{"url":"GeneralInstructions.html","title":"General Instructions","keywords":"","body":"General instructions\nProblem solving\n\nBrute-force approach first\nKeep on optimizing code\nRemember runtimes of python built-in functions and libraries\n\nCode writing\n\nOOP: use class, methods, and class variables\nUse docstrings\nHelper functions to maintain some level of abstraction\nProperty, getters-setters to decorate code further\nUse brackets where ever possible: avoids stupid mistakes and improves code readability\n\nPython stuff\nEverything in python is pass-object reference by value\n\nThis question! => (https://leetcode.com/contest/weekly-contest-190/problems/pseudo-palindromic-paths-in-a-binary-tree/)\n\nCreate a copy of the parameter somehow. list + [new] works well for lists. \nFor sets, set - set([something] creates a copy\n"},"Algorithms/":{"url":"Algorithms/","title":"ðŸ“¢ TO DO","keywords":"","body":"Algorithms\nTo Do:\nRuntimes: why heap is O(n)?\nAddition questions-> strings, lists, linked lists\nFactors/divisors questions\nstocks\nBitwise\nPalindrome questions, Linked lists\nMemoization to DP jump\nString questions: Alien dictionary\nTrie: https://leetcode.com/discuss/interview-question/643158/google-phone-faulty-keyboard\nhttps://leetcode.com/discuss/interview-question/281470/\nKadane questions* \nMay weekly contest \nK repetition maximum sum \nMatrix traversal questions \nhttps://leetcode.com/contest/weekly-contest-180/problems/lucky-numbers-in-a-matrix \nUnderstand zip function \nspiral order\nhttps://leetcode.com/explore/challenge/card/may-leetcoding-challenge/535/week-2-may-8th-may-14th/3328/ \nDesign input class (Trees, LL especially) or think about inputs (arrays, graphs, etc) \nHabit of dict.get(key, default)\nStreaming data questions: https://www.geeksforgeeks.org/tag/array-stream/\n"},"Algorithms/SortingAndHashing.html":{"url":"Algorithms/SortingAndHashing.html","title":"Sorting and Hashing","keywords":"","body":"Sorting\nhttps://www.hackerrank.com/challenges/minimum-swaps-2/ \nBring the expected number at the current index, not the other way around since we are looping over indices. \nDo not forget to update the original indices dict after swapping.\n# Complete the minimumSwaps function below.\ndef minimumSwaps(arr):\n    indices = {v: k for k, v in enumerate(arr)}\n    expected = sorted(arr)\n    n, swaps = len(arr), 0\n\n    for i in range(len(arr)):\n        current = arr[i]\n\n        if current != expected[i]:\n            # expected number's id in arr\n            expected_idx = indices[expected[i]]\n\n            # swap: bring the expected number at i\n            arr[i], arr[expected_idx] = arr[expected_idx], arr[i]\n\n            # update indices hashmap\n            indices[expected[i]] = i\n            indices[current] = expected_idx\n\n            # count this swap\n            swaps += 1\n\n    return swaps\n\nHashing\nFreq of freq\n\nhttps://leetcode.com/problems/maximum-frequency-stack/ \n\nhttps://www.hackerrank.com/challenges/sherlock-and-valid-string/problem?isFullScreen=false\ndef isValid(s):\n    freq = defaultdict(int)\n    F = defaultdict(int)\n    adjustment_options = 1\n\n    for char in s:\n        freq[char] += 1\n\n    for _, v in freq.items():\n        F[v] += 1\n\n    if len(F) > 2:\n        return \"NO\"\n\n    if len(F) == 1:\n        return \"YES\"\n\n    max_key = max(F.keys())\n    max_key_freq = F[max_key]\n    min_key = min(F.keys())\n    min_key_freq = F[min_key]\n\n    return \"YES\" if ((max_key_freq == 1) and (max_key - min_key == 1)) or (min_key_freq == 1) else \"NO\"\n\n"},"Algorithms/BFS.html":{"url":"Algorithms/BFS.html","title":"BFS","keywords":"","body":"DFS and BFS\nFew notes:\n\nUse BFS if there's a need to go somewhere optimally. \neg. Minimum steps required to reach from A to B type questions, jump game questions\n\n\nUse DFS for exhaustive search in the grid where you have search everywhere, not optimal condition \neg. Find if you can create word X from the grid \n\n\nDo not forget the visited grid\n\nGeneral solutions:\nBFS\n\ncollections.deque is extremely useful: use append and popleft for queue operations\nRun operations as long as the queue is not empty\nvisited array is an important part of the solution to avoid repetition\n\nExcellent questions:\n\nhttps://leetcode.com/problems/jump-game/ \nBFS is a little bit slower but gets the job done \nBeing greedy from the end to start works well \nhttps://leetcode.com/problems/jump-game-ii/ \nWater and jug problem\nhttps://leetcode.com/problems/water-and-jug-problem\n\nfrom collections import deque\n\nclass Solution:\n    def canMeasureWater(self, x: int, y: int, z: int) -> bool:\n        queue = deque([(0, 0)])\n        seen = set()\n\n        if (x + y) \nhttps://leetcode.com/problems/open-the-lock/ \nRuntime: O(N^2 * A^N + D) \n\nN = length of lock combination, and substring operations on that string = N * N\nA = value each wheen can take. Here, A == 10. There are A * N combinations possible\ndeadends_set creation\n\nfrom collections import deque\n\nclass Solution:\n    def openLock(self, deadends: List[str], target: str) -> int:\n        deadends_set = set(deadends)\n        INIT_STATE, moves = '0000', 0\n        visited = set()\n\n        if INIT_STATE in deadends_set:\n            return -1\n        elif INIT_STATE == target:\n            return 0\n\n        queue = deque()\n        queue.append((INIT_STATE, 0))\n\n        while queue:\n            state, moves = queue.popleft()\n\n            for i in range(0, len(state)):\n                for direction in [1, -1]:\n                    wheel = int(state[i])\n                    next_state = state[:i] + str((wheel + direction) % 10) + state[i+1:]\n\n                    if next_state == target:\n                        return moves + 1\n\n                    if next_state not in deadends_set and next_state not in visited:\n                        visited.add(next_state)\n                        queue.append((next_state, moves+1))\n\n        return -1\n\nhttps://leetcode.com/problems/word-ladder/ \nshort-hand fingerprints creation is a game changer here. Enables us to hop from one word to valid ones in O(1)\nfrom collections import defaultdict, deque\n\nclass Solution:\n    def ladderLength(self, beginWord: str, endWord: str, wordList: List[str]) -> int:\n        wordStore = defaultdict(list)\n\n        for word in wordList:\n            for i in range(len(word)):\n                shortVersion = word[:i]+ '*' + word[i+1:]\n                wordStore[shortVersion].append(word)\n\n        queue = deque()\n\n        queue.append((beginWord, 1))\n        visited = set([beginWord])\n\n        while queue:\n            word, steps = queue.popleft()\n\n            for i in range(len(word)):\n                shortWords = wordStore[word[:i] + '*' + word[i+1:]]\n                for next_word in shortWords:\n                    if next_word not in visited:\n                        if next_word == endWord:\n                            return steps + 1\n\n                        visited.add(next_word)\n                        queue.append((next_word, steps + 1))\n\n        return 0\n\n"},"Algorithms/Backtracking.html":{"url":"Algorithms/Backtracking.html","title":"Backtracking and Complete Search","keywords":"","body":"Backtracking and Complete Search\nBasic questions: \nTwo choices:\n\nDon't choose the element: Just make a recursive call for the next element\nChoose the element and stay on the same if repeatition is allowed otherwise, go ahead. \nhttps://leetcode.com/problems/combination-sum/\nclass Solution:\n  def combinationSum(self, candidates: List[int], target: int) -> List[List[int]]:\n      result = []\n\n      def backtrack(i, bucket, current):\n          if current == target:\n              result.append(bucket[:])\n              return \n\n          if current > target or i == len(candidates):\n              return\n\n          backtrack(i + 1, bucket, current)\n          backtrack(i, bucket + [candidates[i]], current + candidates[i])\n\n      backtrack(0, [], 0)\n      return result\n\n\n\nExhaustive search for an answer:\nCheck every possible option and see if a solution exists: (very similar to permutation problems) \nhttps://leetcode.com/problems/jump-game \nAccept one of the options at each step \nEmptying the bucket is not necessary \npublic class Solution {\n    public boolean canJumpFromPosition(int position, int[] nums) {\n        if (position == nums.length - 1) {\n            return true;\n        }\n\n        int furthestJump = Math.min(position + nums[position], nums.length - 1);\n        for (int nextPosition = position + 1; nextPosition \nGrid DFS\nSolution of https://leetcode.com/problems/path-with-maximum-gold/ :\ndef dfs(self, i: int, j: int, sum: int, seen: set) -> int:\n    # constraints\n    if(i = m or j = n or not grid[i][j] or (i, j) in seen):\n        return sum\n    # add to the 'visited' set\n    seen.add((i, j))\n    # update current target\n    sum += grid[i][j]\n    # set maximum target\n    maximumSum = 0\n\n    # directions to move in\n    for x, y in ((i, j + 1), (i , j - 1), (i + 1, j), (i - 1, j)):\n    # The actual recursion step\n        maximumSum = max(self.dfs(x, y, sum, seen), maximumSum)\n    # remove from the 'visited' set after recursion \n    seen.discard((i, j))\n    return maximumSum\n\ndef getMaximumGold(self, grid: List[List[int]]) -> int:\n    m, n = len(grid), len(grid[0])\n    return max(self.dfs(i, j, 0, set()) for j in range(n) for i in range(m))\n\nhttps://leetcode.com/problems/2-keys-keyboard/submissions/ \nReturn types should be taken care of. \n\nBase condition\nLimiting condition if required (Use INTMAX for min recursion, INTMIN for max recursion)\nActual recursion\n\nclass Solution:\n    def _helperCopyPaste(self, n: int, current: int, copied: int) -> int:\n        if(current == n):\n            return 0\n        if(current > n):\n            return 3000\n        return min(2 + self._helperCopyPaste(n, current + current, current),\n                   1 + self._helperCopyPaste(n, current + copied, copied))\n\n    def minSteps(self, n: int) -> int:\n        if(n == 1):\n            return 0\n        return 1 + self._helperCopyPaste(n, 1, 1)\n\nhttps://leetcode.com/problems/number-of-ways-to-wear-different-hats-to-each-other/ \nFor selected param, we can use bits. For memo array, we can use functools.lru_cache \nGenerate parentheses\nKeep a count of open and closed ones. \nSuccess cases: string length 2  n and stack == 0 \nFailure cases: string length 2  n and stack != 0 OR stack  n \nWe just backtrack:\n            backtrack(current + '(', stack + 1)\n            backtrack(current + ')', stack - 1)\n\nCombinatorics\nSubsets\nReference: CC Cheat sheet book \nNote the number of recursive calls made\nCombinations: select r out of n (nCr)\n\nRecursion base case change (==r)\nParams of recursion: s: number of selected so far; k: array item index to be processed in that call\nSimilar to normal combinations\n\nclass T:\n    def normalSubset(self, arr: list, r: int) -> list:\n        nCr = []\n        bucket = []\n        n = len(arr)\n\n        def helperNCR(s: int, k: int) -> None:\n            if(s == r):\n                nCr.append(bucket[:])\n                return\n\n            if(s > r or k == n):\n                return\n\n            helperNCR(s, k + 1)\n            bucket.append(arr[k])\n            helperNCR(s + 1, k + 1)\n            bucket.pop()\n\n        helperNCR(0, 0)\n        return nCr\n\nPermutations\nRecursive calls for every element in the loop \nNo need to add a â€˜rejectâ€™ scenario \nAccept, make changes and revert after going a level deep \nFilter right after the loop using a helper array used for tracking \nhttps://leetcode.com/problems/permutations/\nclass Solution:\n    def permute(self, nums: List[int]) -> List[List[int]]:\n        if not nums:\n            return []\n\n        result = []\n        visited = [False for i in range(0, len(nums))]\n\n        def backtrack(bucket):\n            if len(bucket) == len(nums):\n                result.append(bucket[:])\n                return \n\n            for j in range(0, len(nums)):\n                if visited[j]:\n                    continue\n\n                visited[j] = True\n                backtrack(bucket + [nums[j]])\n                visited[j] = False\n\n\n        backtrack([])\n        return result\n\nhttps://leetcode.com/problems/largest-time-for-given-digits/\nclass Solution:\n    def largestTimeFromDigits(self, A: List[int]) -> str:\n        D = sorted(A, reverse=True)\n        included = [False] * 4\n        bucket = \"\"\n        self.T = \"\"\n\n        def permute(bucket):\n            if self.T:\n                return\n\n            n = len(bucket)\n            if n == 1 and int(bucket) > 2:\n                return\n\n            if n == 2 and int(bucket) > 23:\n                return\n\n            if n == 3 and int(bucket[2]) > 5:\n                return\n\n            if n == 4 and int(bucket[2: 4]) > 59:\n                return \n\n            if n == 4:\n                self.T = bucket[0: 2] + ':' + bucket[2: 4]\n\n            for i in range(0, 4):\n                if included[i]:\n                    continue\n\n                included[i] = True\n                permute(bucket + str(D[i]))\n                included[i] = False\n\n        permute(bucket)\n        return self.T\n\nAdditional questions:\nhttps://leetcode.com/problems/combination-sum/discuss/16510/Python-dfs-solution.\nTo allow repetition, go to the same node after select. \nself.recurse(k, domain)\nUnique permutations\nhttps://leetcode.com/problems/permutations-ii/\nfrom collections import Counter\n\nclass Solution:\n    def permuteUnique(self, nums: List[int]) -> List[List[int]]:\n        counter = Counter(nums)\n        result = []\n\n        def backtrack(bucket, counter):\n            if len(bucket) == len(nums):\n                result.append(bucket[:])\n                return\n\n            for num in counter:\n                if not counter[num]:\n                    continue\n\n                counter[num] -= 1\n                backtrack(bucket + [num], counter)\n                counter[num] += 1\n\n        backtrack([], counter)\n        return result\n\n"},"Algorithms/BinarySearch.html":{"url":"Algorithms/BinarySearch.html","title":"Binary Search","keywords":"","body":"Binary Search\nGood article: https://leetcode.com/discuss/general-discussion/786126/python-powerful-ultimate-binary-search-template-solved-many-problems\nIterative solutions are quicker than the recursive ones. \nMonotonous function questions are interesting. You have to find the optimal value of a variable between min and max, not an array eg: bouquet and boat capacity questions below\nIt's necessary to understand where BS terminates. This can answer a lot of questions. It's the start when you want to check the appropriate place for a num in sorted array \nDecide what direction we have to go in case of equality. Minimum of such solutions or maximum, etc \nOne of these things should be done: \nRemember: we should never have a case where start  and somehow start or end do not change.\n\n(start  loop) include mid in the next iteration. i.e. use end = mid; DO NOT do the same thing for start. Try to find the element after pivot. [Look at https://leetcode.com/problems/construct-binary-search-tree-from-preorder-traversal/]\n(start  loop) somehow get the equality thing sorted; decrement end or start: LeetCode 154\n\nGood problem set:\n\nhttps://leetcode.com/discuss/general-discussion/691825/binary-search-for-beginners-problems-patterns-sample-solutions\n\nhttps://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array/ \nFind \"insert\" position for the target and then for target+1 \nEdge cases:\n\nTarget insert position does not have target, return [-1, -1]\nTarget insert position is len(nums), return [-1, -1]\n```py\nclass Solution:\n def searchRange(self, nums: List[int], target: int) -> List[int]:\n default = [-1, -1]\n\n if not nums:\n     return default\n\n def binary_start_search(b_target):\n     start = 0\n     end = len(nums)\n\n     while start  b_target:\n             end = mid - 1\n         else:\n             start = mid + 1\n\n     return start\n\n lower = binary_start_search(target)\n if lower==len(nums) or nums[lower] != target:\n     return default\n\n return [lower, binary_start_search(target+1)-1]\n\n\nhttps://leetcode.com/problems/minimum-number-of-days-to-make-m-bouquets\n```py\nclass Solution:\n    def minDays(self, bloomDay: List[int], m: int, k: int) -> int:\n        n = len(bloomDay)\n        start = bloomDay[0]\n        end = bloomDay[0]\n\n        if m * k > n:\n            return -1\n\n        for day in bloomDay:\n            start = min(start, day)\n            end = max(end, day)\n\n        def verify(mid):\n            streak = 0\n            req = m\n\n            for i, day in enumerate(bloomDay):\n                if mid >= day:\n                    streak += 1\n\n                if mid https://leetcode.com/problems/capacity-to-ship-packages-within-d-days/ \nmin = max from array \nmax = sum of array \ncan_ship function is crucial\nclass Solution:\n    def shipWithinDays(self, weights: List[int], D: int) -> int:\n        max_w = float('-inf')\n        sum_w = 0\n        for w in weights:\n            sum_w += w\n            max_w = max(max_w, w)\n\n        if D == 1:\n            return sum_w\n\n        if D == len(weights):\n            return max_w\n\n        def can_ship(w):\n            days_left = D - 1\n            current = weights[0]\n\n            for wg in weights[1:]:\n                if current + wg \nhttps://leetcode.com/problems/sum-of-mutated-array-closest-to-target/\nclass Solution:\n    def findBestValue(self, arr: List[int], target: int) -> int:\n        start = 0\n        end = arr[0]\n        diff = float('inf')\n        result = float('inf')\n\n        for num in arr:\n            end = max(end, num)\n\n        def calc_sum(mid):\n            return sum(i if i = 0:\n                end = mid - 1\n            else:\n                start = mid + 1\n\n        return result\n\nhttps://leetcode.com/problems/construct-binary-search-tree-from-preorder-traversal/\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def bstFromPreorder(self, preorder: List[int]) -> TreeNode:        \n        def find_first_greater(start, end, target):\n            while start  target:\n                    end = mid\n                else:\n                    start = mid+1\n            return start\n\n        def constructTree(start, end):\n            if start > end:\n                return None\n\n            current = TreeNode(preorder[start])\n            fg = find_first_greater(start + 1, end, preorder[start])\n\n            # there is no greater element\n            # this step is important\n            if fg >= len(preorder) or preorder[fg] \nhttps://leetcode.com/problems/find-minimum-in-rotated-sorted-array/\nclass Solution:\n    def findMin(self, nums: List[int]) -> int:\n        start = 0\n        end = len(nums) - 1\n\n        while start  nums[end]:\n                start = mid + 1\n\n        return nums[start]\n\nhttps://leetcode.com/problems/find-minimum-in-rotated-sorted-array-ii/ \nUnlike the (i) problem, in case of equality, we need to reduce the end by 1.\nclass Solution:\n    def findMin(self, nums: List[int]) -> int:\n        start = 0\n        end = len(nums) - 1\n        result = nums[0]\n\n        if nums[start]  nums[end]:\n                start = mid + 1\n            else:\n                end -= 1\n\n        return nums[start]\n\nhttps://leetcode.com/problems/sqrtx/ \nBinary Search will take us to the closest point of the answer\nclass Solution:\n    def mySqrt(self, x: int) -> int:\n        start = 0\n        end = x\n\n        while start  x:\n                end = mid - 1\n            else:\n                start = mid + 1\n\n        return start if start * start \n"},"Algorithms/Games.html":{"url":"Algorithms/Games.html","title":"Games","keywords":"","body":"Games\n\nhttps://leetcode.com/problems/nim-game/\nhttps://leetcode.com/problems/divisor-game/\nhttps://leetcode.com/problems/stone-game/\n\nhttps://leetcode.com/problems/nim-game/submissions/ \nThere are winning positions and losing positions. We need to bring current position to a losing one so that the friend starts from the losing position i.e. numbers divisible by 4 in this case \nclass Solution:\n    def canWinNim(self, n: int) -> bool:\n        return not (n % 4 == 0)\n\nhttps://leetcode.com/problems/divisor-game/ \nNeeds double loops \nSame idea as above. We try to bring current situation into a losing one for the opponent. Use DP for that. Calculate one by one. Iterate over 0  in the inner loop for search for divisibles and try to find at least one false value\n"},"Algorithms/Bitwise.html":{"url":"Algorithms/Bitwise.html","title":"Bitwise","keywords":"","body":"Bitwise\nToggle j-th bit: vowel_set ^= (1  \nWe can use this to store all even or imperfect dict of a set (See longest substring vowel question) \nCheck LSB 1 or not: n & 1 \nANDing the two numbers n and n - 1 always flips the least significant 1-bit in n to 0, and keeps all other bits the same.\nhttps://leetcode.com/explore/challenge/card/may-leetcoding-challenge/537/week-4-may-22nd-may-28th/3343/\nclass Solution:\n    def countBits(self, num: int) -> List[int]:\n        bits = [0] * (num + 1)\n\n        bits[0] = 0\n        last_power = 0\n        power_val = 1\n\n        for i in range(1, num + 1):\n            if i == power_val:\n                last_power = power_val\n                power_val *= 2\n                bits[i] = 1\n                continue\n\n            if power_val > i:\n                bits[i] = (bits[i - last_power] + 1)\n\n        return bits\n\nhttps://leetcode.com/problems/find-the-longest-substring-containing-vowels-in-even-counts/\nclass Solution:\n    def findTheLongestSubstring(self, s: str) -> int:\n        P = []\n        imperfect = {64: -1}\n        max_len = 0\n\n        if not len(s):\n            return 0\n\n        vowels = set(['a', 'e', 'i', 'o', 'u'])\n        vowel_set = 1 \nhttps://leetcode.com/problems/power-of-two/\nTrick: If a number is a power of 2, n & (n - 1) == 0\nhttps://leetcode.com/problems/add-binary/ \nKeep a smaller by check and swap. Write a rule function. \nOne small check after the main loop.\nclass Solution:\n    def addBinary(self, a: str, b: str) -> str:\n        extra = 0\n        result = ''\n\n        def add(_a, _b, _c):\n            one = 0\n\n            for n in [_a, _b, _c]:\n                if n == '1':\n                    one += 1\n\n            if one == 3:\n                return '1', '1'\n            if one == 2:\n                return '1', '0'\n            if one == 1:\n                return '0', '1'\n            if one == 0:\n                return '0', '0'\n\n        if len(a) > len(b):\n            a, b = b, a\n\n        i = 0\n        while i = len(a):\n                _a = '0'\n            else:\n                _a = a[len(a) - 1 - i]\n\n            _b = b[len(b) - 1 - i]\n\n            extra, num = add(_a, _b, extra)\n            result = num + result\n\n            i += 1\n\n        if extra == '1':\n            return '1' + result\n\n        return result\n\nhttps://leetcode.com/problems/number-of-1-bits/ \nn &= (n - 1) trick \nANDing the two numbers n and n - 1 always flips the least significant 1-bit in n to 0, and keeps all other bits the same.\n"},"Algorithms/DP/":{"url":"Algorithms/DP/","title":"DP","keywords":"","body":"Dynamic Programming\nhttps://leetcode.com/problems/target-sum/discuss/455024/DP-IS-EASY!-5-Steps-to-Think-Through-DP-Questions.\n1. 0/1 Knapsack\nInclude/exclude the element at hand. \nItem first and dp in reverse\nItem repetition isn't allowed:\nfor item in item:\n    # next reverse step is extremely important to remove repetitions.\n    # visualize it, the first one would only update dp[first_one] since dp[0] = positive\n    # the next one will build up on that, the next on top of that.\n    for small_amount in range(len(dp), num-1, -1):\n        dp[small_amount] = f(dp[small_amount-item])\n\n\nhttps://leetcode.com/problems/partition-equal-subset-sum/\nNOTE: Make sure we don't overflow; inner loop must be capped at (num-1)\nhttps://leetcode.com/problems/ones-and-zeroes/\nSimilar question, but with 2 constraints, ie 2D DP\n\n2. Unbounded Knapsack\ndp[i] = f(dp[i-a] + A . nums[i-a], dp[i-b] + B . nums[i-b], ..., dp[i-z] + C . nums[i-z])\n\nDP first: Loops are flipped wrt 1/0 knapsack\nIf it just depends on last/last two elements, ie a = b = 1 type of situation, we can get use variables instead of the whole array. Example: https://leetcode.com/problems/house-robber-ii/\nDon't over complicate things: len(dp) == (n+1) because we want to reach (n+1)st stair. \n\nhttps://leetcode.com/problems/climbing-stairs/\nhttps://leetcode.com/problems/min-cost-climbing-stairs/\n\nhttps://leetcode.com/problems/house-robber/\n\nhttps://leetcode.com/problems/house-robber-ii/ \nThe trick here is to solve for nums[1:] and nums[:-1] then add\n\nhttps://leetcode.com/problems/delete-and-earn/ \nExtremely similar questions. Forget about next ones, if we take care of previous, everything automatically falls into place. dp[i] gives a solution for array that ends at i\n\nhttps://leetcode.com/problems/coin-change/ \nSimilar questions \nDifference: dp array initialization: dp[0] = nums[0] and dp[1] = max(nums[0:2]) \nNOTE: BFS is a valid solution for coin-change: generate solutions \n\nhttps://leetcode.com/problems/decode-ways/ \nGreat twist. Current character influences dp values of previous ones, not desirable. We traverse backwards. Rest of the things same as climbing-stairs (some checks obv)\n\nhttps://leetcode.com/problems/longest-arithmetic-subsequence-of-given-difference/ \nGood twist; dp has to be a dict instead of array.\n          dp[n] = dp.get(n-difference, 0) + 1\n          max_seq = max(max_seq, dp[n])\n\n\nhttps://leetcode.com/problems/counting-bits/ \nTricky to figure out. \nNumber of bits[i] = number of bits in the previous power of 2 ie. (1) + bits[i - previous power of 2] \ni - previous power of 2 is obviously smaller than the previous power of 2. \nKeep on generating powers of 2.\n\n\ndp[i] = f(dp[1], dp[2], ..., dp[i-1] or dp[i])\n\nHere, rather than going to the previous computation, we traverse previous computations, check where we satisfy the constraint and then update dp[i]\n\nhttps://leetcode.com/problems/divisor-game/: Noted in the Games section \nSecond loop to check whether a number less than i is a divisor\n\nhttps://leetcode.com/problems/perfect-squares/ \nSecond loop to subtract j's square from i and update dp[i] based on dp[i-j] \nNOTE: BFS is also a valid solution\n\nhttps://leetcode.com/problems/maximum-length-of-pair-chain/ \nSimilar idea. Sorting by the first element is the key\n\nhttps://leetcode.com/problems/partition-array-for-maximum-sum/ \nGood explanation: https://leetcode.com/problems/partition-array-for-maximum-sum/discuss/299049/DP-python-commented-code. The only difference being we traverse dp array from i backwards with j. dp[i] stores the solution for array ending with i as usual.\n\nhttps://leetcode.com/problems/best-team-with-no-conflicts/ \nThe important thing to rememeber would be to sort based on age and scores as well. If scores is not kept a secondary parameter, we encounter a situation where, we append (2, 4) to the chain of say, (2, 7) which includes (1, 5)\n\nhttps://leetcode.com/problems/longest-arithmetic-subsequence/ \nLIS with a twist. DP needs to be a dict.\n\n\n        for i in range(len(dp)):\n            for j in range(i):\n                diff = nums[i] - nums[j]\n                dp[i][diff] = max(dp[i].get(diff, 0), dp[j].get(diff, 0) + 1)\n\ndp[i] = f(g(j, dp[j]) * g(i-j, dp[i-j])) j E (1 \n\nhttps://leetcode.com/problems/unique-binary-search-trees/ \ndp[i] = number of trees possible with i nodes. \nNo of trees with root i becomes: trees possible with i nodes for left * with (i-j) nodes for right \nSum for every dp[i]\n\ndp[i] += dp[j-1] * dp[i-j]\n\n\nhttps://leetcode.com/problems/integer-break/ \nGreat question. We can break down number i around j (E 1 . \nNow, we can chose to either: keep j as it is, break down to the best possible product, ie. dp[j], same thing for the other piece, (i-j) \n\ndp[i] = Math.max(dp[i], (Math.max(j, dp[j])) * (Math.max(i - j, dp[i - j])))\n\nExhaustive solution generation\n\nhttps://leetcode.com/problems/knight-dialer/\nhttps://leetcode.com/problems/greatest-sum-divisible-by-three/\nhttps://leetcode.com/problems/out-of-boundary-paths/ \nThis is a great example on how to generate exhaustive solutions in DP grid: https://leetcode.com/problems/out-of-boundary-paths/discuss/102993/Python-Straightforward-with-Explanation \nBFS can solve this but it's extremely slow compared to DP, we'd have to traverse every single path\nhttps://leetcode.com/problems/knight-probability-in-chessboard/\n\nDFS + Memoization\n\nhttps://leetcode.com/problems/target-sum/\nhttps://leetcode.com/problems/2-keys-keyboard/\n\nDivide into at most K groups\n\nhttps://leetcode.com/problems/largest-sum-of-averages/ \nGreat example showcasing DP's power.\n// Let f[i][j]be the largest sum of averages for first i + 1 numbers(A[0], A[1], ... , A[i]) tojgroups. f[i][j]  consists of two parts: first j-1 groups' averages and the last group' s average. Considering the last group, its  last number must be A[i] and its first number can be from A[0] to A[i]. Suppose the last group starts from A[p+1] , we can easily get the average form A[p+1] to A[i]. The sum of first j-1 groups' average is f[p][j-1] which we  have got before. So now we can write the DP equation:\n// f[i][j] = max {f[p][j-1] + (A[p+1] + A[p+2] + ... + A[i]) / (i - p)}, p = 0,1,...,i-1\n\n      for (int j = 2; j \nThis is convertable into 1D DP with bottom-up approach if you understand the concepts well enough\n      P = [0]\n      for num in nums: P.append(P[-1] + num)\n\n      def average(x, y):\n          return (P[x] - P[y]) / (x - y)\n\n      dp = [average(0, i+1) for i in range(0, len(nums))]\n\n      for K in range(k-1):\n          for i in range(len(dp)-1, -1, -1):\n              for j in range(i):\n                  dp[i] = max(dp[i], dp[j] + average(i+1, j+1))\n\n      return dp[-1]\n\n\n\nKadane's algorithm\nStraight-forward; not really dp; plug-in possibilties\n\nhttps://leetcode.com/problems/minimum-cost-for-tickets/\nhttps://leetcode.com/problems/paint-house/ \n      for i, house in enumerate(dp[1:], start=1):\n          dp[i][0] = costs[i][0]  + min(dp[i-1][1], dp[i-1][2])\n          dp[i][1] = costs[i][1]  + min(dp[i-1][0], dp[i-1][2])\n          dp[i][2] = costs[i][2]  + min(dp[i-1][0], dp[i-1][1])\n\n      return min(dp[-1])\n\nSpace optimization:\n\n\n        for i, house in enumerate(costs[1:], start=1):\n            aux_dp = dp[:]\n\n            aux_dp[0] = costs[i][0]  + min(dp[1], dp[2])\n            aux_dp[1] = costs[i][1]  + min(dp[0], dp[2])\n            aux_dp[2] = costs[i][2]  + min(dp[0], dp[1])\n\n            dp = aux_dp\n\n\nhttps://leetcode.com/problems/minimum-swaps-to-make-sequences-increasing/\nhttps://leetcode.com/problems/domino-and-tromino-tiling/\n\nHARD\n\n\nhttps://leetcode.com/problems/count-all-valid-pickup-and-delivery-options/\nhttps://leetcode.com/problems/stone-game-iii/\nhttps://leetcode.com/problems/form-largest-integer-with-digits-that-add-up-to-target/\nhttps://leetcode.com/problems/stone-game-iv/\nhttps://leetcode.com/problems/coin-change-2/\nhttps://leetcode.com/problems/wiggle-subsequence/\nhttps://leetcode.com/problems/filling-bookcase-shelves/\nhttps://leetcode.com/problems/student-attendance-record-ii/\nhttps://leetcode.com/problems/decode-ways-ii/\nhttps://leetcode.com/problems/triples-with-bitwise-and-equal-to-zero/\nhttps://leetcode.com/problems/maximum-profit-in-job-scheduling/\nhttps://leetcode.com/problems/minimum-number-of-taps-to-open-to-water-a-garden/\nhttps://leetcode.com/problems/restore-the-array/\n\nhttps://leetcode.com/problems/profitable-schemes/\n\nhttps://leetcode.com/problems/tallest-billboard/\nhttps://leetcode.com/problems/pizza-with-3n-slices/\nhttps://leetcode.com/problems/reducing-dishes/\n\n\n2.Knapsack \n\nhttps://leetcode.com/problems/shopping-offers/\n\n3.Multi Dimensional DP\n\nhttps://leetcode.com/problems/triangle/\nhttps://leetcode.com/problems/minimum-falling-path-sum/\n\nhttps://leetcode.com/problems/combination-sum-iv/ \nUnbounded knapsack.\n for small_target in range(1, len(dp)):\n          for num in nums:\n              possible_target = small_target - num\n              if possible_target \n\nhttps://leetcode.com/problems/knight-probability-in-chessboard/\n\nhttps://leetcode.com/problems/minimum-number-of-refueling-stops/\n\nhttps://leetcode.com/problems/champagne-tower/\n\nhttps://leetcode.com/problems/video-stitching/\nhttps://leetcode.com/problems/stone-game-ii/\nhttps://leetcode.com/problems/number-of-dice-rolls-with-target-sum/\nhttps://leetcode.com/problems/dice-roll-simulation/\nhttps://leetcode.com/problems/number-of-sets-of-k-non-overlapping-line-segments/\nhttps://leetcode.com/problems/best-time-to-buy-and-sell-stock-iv/\nhttps://leetcode.com/problems/create-maximum-number/\nhttps://leetcode.com/problems/frog-jump/\nhttps://leetcode.com/problems/split-array-largest-sum/\nhttps://leetcode.com/problems/freedom-trail/\nhttps://leetcode.com/problems/number-of-music-playlists/\nhttps://leetcode.com/problems/count-vowels-permutation/\nhttps://leetcode.com/problems/minimum-falling-path-sum-ii/\nhttps://leetcode.com/problems/minimum-distance-to-type-a-word-using-two-fingers/\nhttps://leetcode.com/problems/minimum-difficulty-of-a-job-schedule/\nhttps://leetcode.com/problems/number-of-ways-to-paint-n-3-grid/\nhttps://leetcode.com/problems/build-array-where-you-can-find-the-maximum-exactly-k-comparisons/\nhttps://leetcode.com/problems/number-of-ways-of-cutting-a-pizza/\nhttps://leetcode.com/problems/paint-house-iii/\nhttps://leetcode.com/problems/count-all-possible-routes/\n\n4.Interval DP \nhttps://leetcode.com/problems/guess-number-higher-or-lower-ii/\nhttps://leetcode.com/problems/arithmetic-slices/\nhttps://leetcode.com/problems/predict-the-winner/\nhttps://leetcode.com/problems/palindromic-substrings/\nhttps://leetcode.com/problems/stone-game/\nhttps://leetcode.com/problems/minimum-score-triangulation-of-polygon/\nhttps://leetcode.com/problems/last-stone-weight-ii/\nhttps://leetcode.com/problems/minimum-cost-tree-from-leaf-values/\nhttps://leetcode.com/problems/stone-game-vii/\nhttps://leetcode.com/problems/burst-balloons/\nhttps://leetcode.com/problems/remove-boxes/\nhttps://leetcode.com/problems/strange-printer/\nhttps://leetcode.com/problems/valid-permutations-for-di-sequence/\nhttps://leetcode.com/problems/minimum-cost-to-merge-stones/\nhttps://leetcode.com/problems/allocate-mailboxes/\nhttps://leetcode.com/problems/minimum-cost-to-cut-a-stick/\nhttps://leetcode.com/problems/stone-game-v/\n5.bit DP\nhttps://leetcode.com/problems/can-i-win/\nhttps://leetcode.com/problems/partition-to-k-equal-sum-subsets/\nhttps://leetcode.com/problems/stickers-to-spell-word/\nhttps://leetcode.com/problems/shortest-path-visiting-all-nodes/\nhttps://leetcode.com/problems/smallest-sufficient-team/\nhttps://leetcode.com/problems/maximum-students-taking-exam/\nhttps://leetcode.com/problems/number-of-ways-to-wear-different-hats-to-each-other/\nhttps://leetcode.com/problems/minimum-cost-to-connect-two-groups-of-points/\nhttps://leetcode.com/problems/maximum-number-of-achievable-transfer-requests/\nhttps://leetcode.com/problems/distribute-repeating-integers/\nhttps://leetcode.com/problems/maximize-grid-happiness/\nhttps://leetcode.com/problems/find-minimum-time-to-finish-all-jobs/\n6.Digit DP\nhttps://leetcode.com/problems/non-negative-integers-without-consecutive-ones/\nhttps://leetcode.com/problems/numbers-at-most-n-given-digit-set/\nhttps://leetcode.com/problems/numbers-with-repeated-digits/\n7.DP on Trees\nhttps://leetcode.com/problems/unique-binary-search-trees-ii/\nhttps://leetcode.com/problems/house-robber-iii/\nhttps://leetcode.com/problems/maximum-product-of-splitted-binary-tree/\nhttps://leetcode.com/problems/linked-list-in-binary-tree/\nhttps://leetcode.com/problems/longest-zigzag-path-in-a-binary-tree/\nhttps://leetcode.com/problems/binary-tree-cameras/\nhttps://leetcode.com/problems/maximum-sum-bst-in-binary-tree/\nhttps://leetcode.com/problems/number-of-ways-to-reorder-array-to-get-same-bst/\n8.String DP \nhttps://leetcode.com/problems/is-subsequence/\nhttps://leetcode.com/problems/palindrome-partitioning/\nhttps://leetcode.com/problems/palindrome-partitioning-ii/\nhttps://leetcode.com/problems/word-break/\nhttps://leetcode.com/problems/unique-substrings-in-wraparound-string/\nhttps://leetcode.com/problems/minimum-ascii-delete-sum-for-two-strings/\nhttps://leetcode.com/problems/longest-string-chain/\nhttps://leetcode.com/problems/longest-happy-string/\nhttps://leetcode.com/problems/longest-valid-parentheses/\nhttps://leetcode.com/problems/distinct-subsequences/\nhttps://leetcode.com/problems/word-break-ii/\nhttps://leetcode.com/problems/count-the-repetitions/\nhttps://leetcode.com/problems/concatenated-words/\nhttps://leetcode.com/problems/count-different-palindromic-subsequences/\nhttps://leetcode.com/problems/distinct-subsequences-ii/\nhttps://leetcode.com/problems/longest-chunked-palindrome-decomposition/\nhttps://leetcode.com/problems/palindrome-partitioning-iii/\nhttps://leetcode.com/problems/find-all-good-strings/\nhttps://leetcode.com/problems/string-compression-ii/\nhttps://leetcode.com/problems/number-of-ways-to-form-a-target-string-given-a-dictionary/\n9.Probability DP\nhttps://leetcode.com/problems/soup-servings/\nhttps://leetcode.com/problems/new-21-game/\nhttps://leetcode.com/problems/airplane-seat-assignment-probability/\n10.Classic DPs\nA.Kadane's Algorithm\nhttps://leetcode.com/problems/maximum-subarray/\nhttps://leetcode.com/problems/maximum-product-subarray/\nhttps://leetcode.com/problems/bitwise-ors-of-subarrays/\nhttps://leetcode.com/problems/longest-turbulent-subarray/\nhttps://leetcode.com/problems/maximum-subarray-sum-with-one-deletion/\nhttps://leetcode.com/problems/k-concatenation-maximum-sum/\nhttps://leetcode.com/problems/largest-divisible-subset/\nhttps://leetcode.com/problems/length-of-longest-fibonacci-subsequence/\nhttps://leetcode.com/problems/best-time-to-buy-and-sell-stock/\nhttps://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/\nhttps://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/\nhttps://leetcode.com/problems/best-time-to-buy-and-sell-stock-iii/\nB.LCS\nhttps://leetcode.com/problems/longest-palindromic-substring/\nhttps://leetcode.com/problems/longest-palindromic-subsequence/\nhttps://leetcode.com/problems/maximum-length-of-repeated-subarray/\nhttps://leetcode.com/problems/longest-common-subsequence/\nhttps://leetcode.com/problems/regular-expression-matching/\nhttps://leetcode.com/problems/wildcard-matching/\nhttps://leetcode.com/problems/edit-distance/\nhttps://leetcode.com/problems/interleaving-string/\nhttps://leetcode.com/problems/shortest-common-supersequence/\nhttps://leetcode.com/problems/minimum-insertion-steps-to-make-a-string-palindrome/\nhttps://leetcode.com/problems/max-dot-product-of-two-subsequences/\nC.LIS\nhttps://leetcode.com/problems/longest-increasing-subsequence/\nhttps://leetcode.com/problems/number-of-longest-increasing-subsequence/\nhttps://leetcode.com/problems/russian-doll-envelopes/\nhttps://leetcode.com/problems/delete-columns-to-make-sorted-iii/\nhttps://leetcode.com/problems/minimum-number-of-removals-to-make-mountain-array/\nhttps://leetcode.com/problems/maximum-height-by-stacking-cuboids/\nhttps://leetcode.com/problems/make-array-strictly-increasing/\nD.2D Grid Traversal\nhttps://leetcode.com/problems/unique-paths/\nhttps://leetcode.com/problems/unique-paths-ii/\nhttps://leetcode.com/problems/minimum-path-sum/\nhttps://leetcode.com/problems/maximum-non-negative-product-in-a-matrix/\nhttps://leetcode.com/problems/where-will-the-ball-fall/\nhttps://leetcode.com/problems/dungeon-game/\nhttps://leetcode.com/problems/cherry-pickup/\nhttps://leetcode.com/problems/number-of-paths-with-max-score/\nhttps://leetcode.com/problems/cherry-pickup-ii/\nhttps://leetcode.com/problems/kth-smallest-instructions/\nE.Cumulative Sum\nhttps://leetcode.com/problems/range-sum-query-immutable/\nhttps://leetcode.com/problems/maximal-square/\nhttps://leetcode.com/problems/range-sum-query-2d-immutable/\nhttps://leetcode.com/problems/largest-plus-sign/\nhttps://leetcode.com/problems/push-dominoes/\nhttps://leetcode.com/problems/largest-1-bordered-square/\nhttps://leetcode.com/problems/count-square-submatrices-with-all-ones/\nhttps://leetcode.com/problems/matrix-block-sum/\nhttps://leetcode.com/problems/maximum-points-you-can-obtain-from-cards/\nhttps://leetcode.com/problems/count-submatrices-with-all-ones/\nhttps://leetcode.com/problems/ways-to-make-a-fair-array/\nhttps://leetcode.com/problems/maximal-rectangle/\nhttps://leetcode.com/problems/max-sum-of-rectangle-no-larger-than-k/\nhttps://leetcode.com/problems/super-washing-machines/\nhttps://leetcode.com/problems/maximum-sum-of-3-non-overlapping-subarrays/\nhttps://leetcode.com/problems/number-of-submatrices-that-sum-to-target/\nhttps://leetcode.com/problems/get-the-maximum-score/\nF.Hashmap (SubArray)\nhttps://leetcode.com/problems/continuous-subarray-sum/\nhttps://leetcode.com/problems/find-two-non-overlapping-sub-arrays-each-with-target-sum/\nhttps://leetcode.com/problems/maximum-number-of-non-overlapping-subarrays-with-sum-equals-target/\n11.DP + Alpha (Tricks/DS)\nhttps://leetcode.com/problems/arithmetic-slices-ii-subsequence/\nhttps://leetcode.com/problems/odd-even-jump/\nhttps://leetcode.com/problems/constrained-subsequence-sum/\nhttps://leetcode.com/problems/delivering-boxes-from-storage-to-ports/\n12.Insertion DP\nhttps://leetcode.com/problems/k-inverse-pairs-array/\n13.Graph DP\nhttps://leetcode.com/problems/cheapest-flights-within-k-stops/\nhttps://leetcode.com/problems/find-the-shortest-superstring/\n14.Memoization\nhttps://leetcode.com/problems/minimum-jumps-to-reach-home/\nhttps://leetcode.com/problems/scramble-string/\nhttps://leetcode.com/problems/tiling-a-rectangle-with-the-fewest-squares/\nhttps://leetcode.com/problems/number-of-ways-to-stay-in-the-same-place-after-some-steps/\nhttps://leetcode.com/problems/jump-game-v/\nhttps://leetcode.com/problems/minimum-number-of-days-to-eat-n-oranges/\n15.Binary Lifting\nhttps://leetcode.com/problems/kth-ancestor-of-a-tree-node/\n16.Math\nhttps://leetcode.com/problems/ugly-number-ii/\nhttps://leetcode.com/problems/count-sorted-vowel-strings/\nhttps://leetcode.com/problems/race-car/\nhttps://leetcode.com/problems/super-egg-drop/\nhttps://leetcode.com/problems/least-operators-to-express-number/\nhttps://leetcode.com/problems/largest-multiple-of-three/\nhttps://leetcode.com/problems/minimum-one-bit-operations-to-make-integers-zero/\n"},"Algorithms/DP/Knapsack.html":{"url":"Algorithms/DP/Knapsack.html","title":"Knapsack","keywords":"","body":"Knapsack\nMust do problems:\n\nhttps://leetcode.com/problems/ones-and-zeroes/\nhttps://leetcode.com/problems/coin-change/\nhttps://leetcode.com/problems/word-break/\n\nWhen?\nGenerally we have to include/exclude an element and go ahead \nIf we can repeat an element, we'd have to accept it a certain number of times in the answer and move ahead\nWe've been given a list of things with some attributes (x, y). Select max/min things we can select so that sum(xi for thing in things)  and sum(yi for thing in things)  \nSometimes, it's disguised under fitting things in a set (word-break). In that case, attributes of that target set are params to optimize against. Sometimes, it's true or false that one has to compute from previous results (word-break again)\nRecursion\nMemoization\nDP\n1. Check if we can repeat an element or not; that determines a lot of things, espectially the DP loop\nDP array should be (X+1) * (Y+1) (one place for none selected i.e. [0][0]) with Xi and Yi representing the case if the optimization criteria is Xi * Yi \nExample: dp = [[0 for _ in range(Y+1)] for _ in range(X+1)] \nBe smart: try to simplify the checks inside main loops for (if it can fit here: eg. word-break) \nIf we shoudn't repeat, first loop should be the one of items, second should be over DP array. Otherwise, reverse order; Think about it, makes perfect sense.\nhttps://leetcode.com/problems/ones-and-zeroes/\n        for string in strs:\n            for x in range(X, -1, -1):\n                for y in range(Y, -1, -1):\n\nhttps://leetcode.com/problems/coin-change/\n        for i in range(1, amount + 1):\n            for coin in coins:\n\nhttps://leetcode.com/problems/word-break/\n        for x in range(X+1):\n            for y in range(x):\n\n2. Table filling: Top-down and bottom-up\nNow, this is interesting. We do not want overcounting. \nIn a non-repetition case, prefer bottom-up because we don't want to include the same element again. \nWe always compute the result for [x][y] based on _x = [x-(xi)] and _y = [y-(yi)] \nNote: During traversal, make sure _x and _y are within the boundaries of the DP table \nBottom-up: https://leetcode.com/problems/ones-and-zeroes/\n        for string in strs:\n            for x in range(X, -1, -1):\n                for y in range(Y, -1, -1):\n\n                    _x = x - freq[string]['0']\n                    _y = y - freq[string]['1']\n\n                    if _x >= 0 and _y >= 0:\n                        dp[x][y] = max(1 + dp[_x][_y], dp[x][y])\n\nTop-down: https://leetcode.com/problems/coin-change/ \n        for i in range(1, amount + 1):\n            for coin in coins:\n                if i \n"},"Algorithms/DP/NumSol.html":{"url":"Algorithms/DP/NumSol.html","title":"Number of Solutions","keywords":"","body":"Number of solutions\nThe key here is to add dp values of previous computations instead of doing 1 + min(dp[prev1], dp[prev2]) for other ones.\n\nhttps://leetcode.com/problems/unique-paths-ii/\nclass Solution:\n  def uniquePathsWithObstacles(self, obstacleGrid: List[List[int]]) -> int:\n      X = len(obstacleGrid)\n      Y = len(obstacleGrid[0])\n\n      dp = [[0 for _ in range(Y)] for _ in range(X)]\n      dp[0][0] = 1\n\n      for x in range(X):\n          for y in range(Y):\n              if obstacleGrid[x][y] == 1:\n                  dp[x][y] = 0\n                  continue\n\n              if x > 0:\n                  dp[x][y] += dp[x-1][y]\n\n              if y > 0:\n                  dp[x][y] += dp[x][y-1]\n\n      return dp[-1][-1]\n\n\n\n"},"Algorithms/UncommonAlgos.html":{"url":"Algorithms/UncommonAlgos.html","title":"Uncommon Algos","keywords":"","body":"Uncommon Algorithms\nBucket Trick\nThis is inspired from bucket sort. Hashes are good for equalities but not for comparison or range operations, unless we want our search code to run in linear time.\nThis problem illustrates its use perfectly: \nWe use sliding window + buckets here. t buckets to facilitate this. \nIf two numbers are in the same bucket, we have found our solution. If they are in the neightboring buckets, they 'can' a possible solution.\nhttps://leetcode.com/problems/contains-duplicate-iii/\nclass Solution:\n    def containsNearbyAlmostDuplicate(self, nums: List[int], k: int, t: int) -> bool:\n        state = {}\n        w = k + 1\n\n        for i, n in enumerate(nums):\n            b = n // (t + 1)\n\n            # maintain sliding window\n            if i >= w:\n                del state[nums[i - w] // (t + 1)]\n\n            if b in state:\n                return True\n\n            if b - 1 in state and abs(state[b - 1] - n) \n"},"DataStructures/StacksAndQueues/":{"url":"DataStructures/StacksAndQueues/","title":"Stacks and Queues","keywords":"","body":"Stacks and Queues\nSubtle tricks to be used:\nStacks: \nhttps://leetcode.com/problems/remove-all-adjacent-duplicates-in-string/\nclass Solution:\n    def removeDuplicates(self, S: str) -> str:\n        stack = []\n        LAST = -1\n\n        for i, s in enumerate(S):\n            if stack and stack[LAST] == s:\n                stack.pop()\n            else:\n                stack.append(s)\n\n        return ''.join(stack)\n\nWe can't pop anything that hasn't been pushed. If the top of the stack matches popped[k], we have to pop right away because if we don't and push something, there's no way we can pop that element again. Why? hint: the elements are distinct. \nSo the while base case just becomes if k  and we can return False if we reach at the end of pushed and the top doesn't match popped[k] or there's nothing to push\nclass Solution:\n    def validateStackSequences(self, pushed: List[int], popped: List[int]) -> bool:\n        j = k = 0\n        n = len(pushed)\n        stack = []\n\n        while k \n"},"DataStructures/Arrays/":{"url":"DataStructures/Arrays/","title":"Arrays","keywords":"","body":"Arrays\nGeneral instructions:\n\nFind 3 elements in array questions \nGenerally sort + hash or sort + Binary Search is a powerful weapon\n\nCheck if pre and post array can help \nhttps://www.geeksforgeeks.org/maximum-length-of-strictly-increasing-sub-array-after-removing-at-most-one-element/\n\n'Quirky' stack problems \nhttps://www.geeksforgeeks.org/next-greater-element/ : Position priority\n\nSimilar to stack problems (1) but value priority and then position \nhttps://leetcode.com/problems/next-permutation/solution/\n\n\n"},"DataStructures/Arrays/TwoPointers.html":{"url":"DataStructures/Arrays/TwoPointers.html","title":"Two Pointers","keywords":"","body":"2 Pointers technique\nhttps://leetcode.com/problems/two-sum/\nhttps://leetcode.com/problems/3sum/ \nhttps://leetcode.com/problems/boats-to-save-people/\nTwo pointers is really an easy and effective technique which is typically used for searching pairs in an array.\n Two pointers:\nAt either ends and decide which one to move\nOne faster and one slower\nMaintain subarray size of Kâ€™s props\nGeneral solution structure: \nhttps://leetcode.com/problems/container-with-most-water/ \nContainer height is limited by smaller one, move that forward\nclass Solution:\n    def maxArea(self, height: List[int]) -> int:\n        l, r = 0, len(height)-1\n        water = 0\n\n        while l \nPartitioning\n\nSelect last element as a pivot and first element as the left_idx\nAdd a runner to loop from left to (right-1)\nleft_idxto keep smaller elements at the correct places. Swap (left_idx  runner elems) if runner pointed elem is smaller than the pivot\nSwap left_idx and pivot_idx to put pivot in the right place\n```py\n def partition(_left, _right):\n     left_idx, pivot_idx = _left, _right\n\n     for runner in range(_left, _right):\n         if nums[runner] \n\n        nums[pivot_idx], nums[left_idx] = nums[left_idx], nums[pivot_idx]\n        return left_idx\n\nhttps://leetcode.com/problems/move-zeroes/\n```py\nclass Solution:\n    def moveZeroes(self, nums: List[int]) -> None:\n        \"\"\"\n        Do not return anything, modify nums in-place instead.\n        \"\"\"\n        left_idx = runner = 0\n        n = len(nums)\n\n        while runner https://leetcode.com/problems/remove-duplicates-from-sorted-array/\nclass Solution:\n    def removeDuplicates(self, nums: List[int]) -> int:\n        left_idx, runner = 1, 1\n        n = len(nums)\n\n        while runner \n"},"DataStructures/Arrays/Subarrays.html":{"url":"DataStructures/Arrays/Subarrays.html","title":"Subarrays","keywords":"","body":"Subarrays\nOptimization checks: \n\nTwo pointers \nSliding window with running values \nPre and Post arrays \nThere can be complex problems outside these as well\n\nFind subarray size K:\nhttps://leetcode.com/problems/subarray-sum-equals-k/ \nk = current - prev; so prev = current - k \nAdd all frequencies of prev to the total\nclass Solution:\n    def subarraySum(self, nums: List[int], k: int) -> int:\n        cont_sum, subarrays = 0, 0\n        P = {cont_sum: 1}\n\n        for num in nums:\n            # calculate the prefix sum\n            cont_sum += num\n\n            # cont_sum - k = P[_x]\n            subarrays += (P.get(cont_sum - k, 0))\n\n            # update the sum store\n            P[cont_sum] = P.get(cont_sum, 0) + 1\n\n        return subarrays\n\nRequires all subarrays of all sizes and find all where a constraint is matched: \nhttps://www.geeksforgeeks.org/number-subarrays-product-less-k/\nSliding window with two pointers \nLeft move: if product is more than the constraint \nRight move: everytime unless the product is more than the constraint \nCatch: Each addition of the element produces (end_index - (start_index - 1)) more subarrays \nCatch: Which implies -- subarray of size d produces d * (d + 1)/2 different subarrays\nhttps://leetcode.com/problems/minimum-operations-to-reduce-x-to-zero/ \nGreat question, instead of looking at the ends, find the max subarray with sum total - x \nCorner case would be when total == x. Use prefix array to find that\nclass Solution:\n    def minOperations(self, nums: List[int], x: int) -> int:\n        total = sum(nums)\n        target = total - x\n        sums = {0: -1}\n        current, length = 0, float('-inf')\n\n        if target == 0:\n            return len(nums)\n\n        for i, n in enumerate(nums):\n            current += n\n\n            if (current - target) in sums:\n                length = max(length, i - sums[current - target])\n\n            if current not in sums:\n                sums[current] = i\n\n        return (len(nums)-length) if length != float('-inf') else -1\n\nhttps://www.geeksforgeeks.org/maximum-subarray-size-subarrays-size-sum-less-k/\nPrefix array to store constraint related data (sorted) \nBinary search + two pointers to find ALL subarrays of that size satisfying the constraint\nhttps://www.geeksforgeeks.org/number-of-subarrays-with-odd-sum/\nPrefix array but instead of sum, store sum modulo 2 \nfinal_answer = prefix_arr[0] * prefix_arr[1]\nOperation on all of subarrays:\nhttps://www.geeksforgeeks.org/xor-subarray-xors/\nCatch: ith element frequency in all subarrays: (i + 1) * (n - i) \nDesired quantity at the end of the whole domain traversal \nhttps://leetcode.com/problems/maximum-subarray/\nKeep current value running and max/min: \n\nIncluding the element \nExcluding the element: basically new subsequence start \n\nLooks like DP question but we donâ€™t have to refer older values as we are dealing subarrays, not subsequences. Answer till  previous is stored in the comparison step of current and absolute max/min.\nhttps://www.geeksforgeeks.org/maximum-product-subarray-set-3/\nmaxVal and minVal at each value during iteration. If negative, swap them before multi, other things similar to maximum subarray sum\nPre and post array\nhttps://www.geeksforgeeks.org/maximum-length-of-strictly-increasing-sub-array-after-removing-at-most-one-element/\ncomplex subarray problems\nhttps://leetcode.com/problems/longest-continuous-subarray-with-absolute-diff-less-than-or-equal-to-limit/ \nhttps://leetcode.com/problems/longest-substring-with-at-least-k-repeating-characters/discuss/87768/4-lines-Python \nhttps://leetcode.com/problems/maximum-number-of-non-overlapping-subarrays-with-sum-equals-target/\nclass Solution:\n    def maxNonOverlapping(self, nums: List[int], target: int) -> int:\n        prefix = [0]\n        sum_pos = {0: 0}\n        intervals = 0\n\n        for i, n in enumerate(nums):\n            prefix.append(prefix[-1] + n)\n\n        for i, p in enumerate(prefix):\n            if i == 0: continue\n\n            if p - target in sum_pos:\n                intervals += 1\n                sum_pos = {}\n\n            sum_pos[p] = i\n\n        return intervals\n\nSliding Window\nCases:\n\nExpand end pointer and update the start one according to the situation\nExpand until the condition is met and then contract with the start one until the condition holds\n\nhttps://leetcode.com/problems/longest-substring-without-repeating-characters/\nclass Solution:\n    def lengthOfLongestSubstring(self, s: str) -> int:\n        # extend as much we can, if we encounter a letter that falls inside the current\n        # window, >= start, just update the start to start+1 otherwise just expand.\n        # Update last seen with each iteration.\n        # The window spans fron start to end, both inclusive\n        last_seen = {}\n        n = len(s)\n        start = end = 0\n\n        max_len = 0\n        while end \nhttps://leetcode.com/problems/minimum-size-subarray-sum/ \nClassic case 2 question. Expand until we meet the condition and then contract with start pointer forwarding.\nclass Solution:\n    def minSubArrayLen(self, target: int, nums: List[int]) -> int:\n        _sum, n = 0, len(nums)\n        start = end = 0\n\n        smallest_len = float('inf')\n\n        while end = target:\n                while _sum >= target and start \nhttps://leetcode.com/problems/maximum-size-subarray-sum-equals-k/ \nWe just store the first occurance of the sum so that we always maximize the length.\nclass Solution:\n    def maxSubArrayLen(self, nums: List[int], k: int) -> int:\n        current_sum, max_len = 0, float('-inf')\n        sum_store = {0: -1}\n\n        for i, num in enumerate(nums):\n            current_sum += num\n\n            # current_sum - prev_sum = k => current_sum - k = prev_sum\n            prev_sum = (current_sum - k)\n            if prev_sum in sum_store:\n                max_len = max(max_len, i-sum_store[prev_sum])\n\n            # catch\n            if current_sum not in sum_store:\n                sum_store[current_sum] = i\n\n        return max_len if max_len != float('-inf') else 0\n\nhttps://leetcode.com/problems/minimum-window-substring/ \nWe know the target dict. We can easily maintain current window with sliding window. \nFor satisfy criteria, we need to know how many of the characters in target are in enough quantity. \nIf we hit the target count for current character(not greater, that comes by default), we found a possible solution. \nNow contract the window (start += 1) until found == required character count\nclass Solution:\n    def minWindow(self, s: str, t: str) -> str:\n        \"\"\"\n        Algorithm:\n        Expand the sliding window (with end += 1 ). In every loop, try to contract it \n        until it keeps on satisfying *(if it satifies)* the criteria (with start += 1). \n        Keep target and current dicts to update `found` variable in O(1).\n\n        Optimizations:\n        `found` variable to simulate O(1) time isConstraintSatified().\n        Contract as long as this condition is satisfied.\n        \"\"\"\n\n        start = end = 0\n        target, current = {}, {}\n\n        result, START, END = [float('-inf'), float('inf')], 0, 1\n\n        # target set for constraint\n        for c in t:\n            target[c] = target.get(c, 0) + 1 \n\n        found, required = 0, len(target)\n\n        while end  (end - start + 1):\n                    result[START] = start\n                    result[END] = end\n\n                char = s[start]\n\n                if char in current:\n                    current[char] -= 1\n                    if current[char] \nhttps://leetcode.com/problems/longest-substring-with-at-most-k-distinct-characters/ \nclass Solution:\n    def lengthOfLongestSubstringKDistinct(self, s: str, k: int) -> int:\n        \"\"\"\n        Algo:\n        Expand the window on the right side i.e. end. In each loop, run another loop to satisfy the constraint.\n        We have contract on the start side, contract until the constraint is satisfied over the character store\n        i.e. char_store\n\n        Maintain current length and use that to update max_len.\n        \"\"\"\n        start, end, n = 0, 0, len(s)\n        chars, longest = {}, 0\n\n        while end  k:\n                start_char = s[start]\n                chars[start_char] -= 1\n\n                if chars[start_char] == 0:\n                    del chars[start_char]\n\n                start += 1\n\n            longest = max(longest, end-start+1)\n            end += 1\n\n        return longest\n\nhttps://leetcode.com/problems/longest-substring-with-at-most-two-distinct-characters/ \nk == 2\nclass Solution:\n    def lengthOfLongestSubstringTwoDistinct(self, s: str) -> int:\n        start, end, n = 0, 0, len(s)\n        chars, longest = {}, 0\n\n        while end  2:\n                start_char = s[start]\n                chars[start_char] -= 1\n\n                if chars[start_char] == 0:\n                    del chars[start_char]\n\n                start += 1\n\n            longest = max(longest, end-start+1)\n            end += 1\n\n        return longest\n\n"},"DataStructures/Arrays/Subsets.html":{"url":"DataStructures/Arrays/Subsets.html","title":"Subsets","keywords":"","body":"Subsets/subsquence\nGeeks for Geeks archives: https://www.geeksforgeeks.org/tag/subset/ \nOptimization checks:\n\nSorting the whole array\nPriority queues (check Miscellaneous Problems section)\n\nFor each element, there are 2 choices: Take or leave \nTwo ways to implement this: \n\nRecursion\nDP\n\nStandard questions\nhttps://www.geeksforgeeks.org/partition-problem-dp-18/\n\nisSubsetSum(list, n, sum / 2) = isSubsetSum(list, n - 1, sum / 2) or isSubsetSum(list, n - 1, sum / 2 - list[n - 1])\n\n \n\n\n\nDP\nProblems like: \n\nLIS\nhttps://leetcode.com/problems/largest-divisible-subset/\n\nBase DP method is LIS.  \nSmart implementation: https://leetcode.com/problems/largest-divisible-subset/discuss/84006/Classic-DP-solution-similar-to-LIS-O(n2)\nclass Solution:\n    def largestDivisibleSubset(self, nums: List[int]) -> List[int]:\n        nums = sorted(nums)\n        set_len = [1] * len(nums)\n        pre = [-1] * len(nums)\n        max_len = 0\n        index = -1\n\n        for i, target in enumerate(nums):\n            for j in range(0, i):\n                if target % nums[j] == 0:\n                    if (1 + set_len[j]) > set_len[i]:\n                        pre[i] = j\n                        set_len[i] = 1 + set_len[j]\n\n            if set_len[i] > max_len:\n                index = i\n                max_len = set_len[i]\n\n        result = []\n        while index != -1:\n            result.append(nums[index])\n            index = pre[index]\n\n        return result\n\nhttps://leetcode.com/problems/longest-harmonious-subsequence/\nIt's a subsequence, meaning, you can drop elements you don't like. \nThe gotcha here is that the max length of subsequence is just freq(x) + freq(x+1) | x E array\n\n\n\n"},"DataStructures/Arrays/Triplets.html":{"url":"DataStructures/Arrays/Triplets.html","title":"Triplets","keywords":"","body":"Triplets\nhttps://leetcode.com/problems/count-number-of-teams/\nclass Solution:\n    def numTeams(self, rating: List[int]) -> int:\n        s = [0 for i in range(0, len(rating))]\n        g = [0 for i in range(0, len(rating))]\n        total = 0\n\n        for i in range(1, len(rating)):\n            for j in range(0, i):\n                if rating[i] > rating[j]:\n                    total += s[j]\n                    s[i] += 1\n\n                if rating[i] \nOptimization step by step\nhttps://leetcode.com/problems/3sum/ \nThis is modified 2 sum. We fix 2 elements and need to find the third one. \nSets are used to avoid repetition. \nWays to find the third one: \n\nBinary Search \nSave positions in a dictionary. Check the last position of that element, if that's greater than the second elem, we have found a possible set\n\nfrom collections import defaultdict\n\nclass Solution:\n    def threeSum(self, nums: List[int]) -> List[List[int]]:\n        n = len(nums)\n        result_s = set()\n        result = []\n        positions = defaultdict(list)\n\n        for i, num in enumerate(nums):\n            positions[num].append(i)\n\n        for i in range(0, n - 2):\n            for j in range(i + 1, n - 1):\n                sum_pos = positions[-(nums[i] + nums[j])]\n                if sum_pos:\n                    if sum_pos[-1] > j:\n                        result_s.add(tuple(sorted([nums[i], nums[j], \\\n                                      -(nums[i] + nums[j])])))\n\n        while result_s:\n            x, y, z = result_s.pop()\n            result.append([x, y, z])\n\n        return result\n\nBetter approach with sorting\nclass Solution:\n    def threeSum(self, nums: List[int]) -> List[List[int]]:\n        nums = sorted(nums)\n        n, target = len(nums), 0\n        result = []\n        i = 0\n\n        while i  0 and nums[i] == nums[i-1]:\n                i += 1\n                continue\n\n            j, k = i + 1, n-1\n\n            while j  (i+1) and nums[j] == nums[j-1]:\n                    j += 1\n                    continue\n\n                tri_sum = nums[i] + nums[j] + nums[k]\n\n                # target sum found\n                if tri_sum == target:\n                    result.append([nums[i], nums[j], nums[k]])\n                    j += 1\n                    k -= 1\n\n                # sum smaller than target, increase j to increase tri_sum\n                if tri_sum  target:\n                    k -= 1\n\n            i += 1\n\n        return result\n\n"},"DataStructures/Arrays/StackTricks.html":{"url":"DataStructures/Arrays/StackTricks.html","title":"Stack Tricks","keywords":"","body":"Stacks / Deque trick / monoqueue technique\nMain concepts here:\nKnuth stack-sorting (132 pattern)\n\nhttps://leetcode.com/problems/132-pattern/deque trick\n\nhttps://leetcode.com/problems/next-greater-element-i/\nhttps://leetcode.com/problems/online-stock-span/\nhttps://leetcode.com/problems/sliding-window-maximum/\nhttps://leetcode.com/explore/challenge/card/may-leetcoding-challenge/536/week-3-may-15th-may-21st/3330/\n\nThe idea is to maitain a queue or stack based on our requirements that has this structure: \n \nWe might want to add some more info (eg. location) \nEach incoming element will be compared with the last element: \n\nKeep on popping if stack/queue and the last element is smaller than the current one\nGo ahead and append it to the stack/queue\nThe element that displaces stack element is the next greater for the elem that got displaced\nThe stack elements at the end have no next greaters\n\nIt's all a game of displacing elements in the stack and interpretation of the ones that are left in it. \nScenarios: \n\nA bigger element comes next: will displace and add their displacements.\nEqual: will displace some; we take their displacements and add.\nSmaller: didn't displace anything. \nGeneral solution: \nclass StockSpanner:\n\n  def __init__(self):\n      self.stack = []\n\n  def next(self, price: int) -> int:\n      displaced = 1\n      while self.stack and self.stack[-1][0] \nGreat question:\nhttps://leetcode.com/problems/find-the-most-competitive-subsequence/ \nWe need to select k smallest nums one after another. \nadditional is the key here.\nclass Solution:\n  def mostCompetitive(self, nums: List[int], k: int) -> List[int]:\n      stack = []\n      additional = len(nums)-k\n\n      for i, n in enumerate(nums):\n          while stack and stack[-1] > n and additional > 0:\n              stack.pop()\n              additional -= 1\n\n          stack.append(n)\n\n      return stack[:k]\n\nNext greater\n```py\nfrom collections import defaultdict\n\n\nclass Solution:\n    def nextGreaterElement(self, nums1: List[int], nums2: List[int]) -> List[int]:\n        store = defaultdict(int)\n        stack = []\n        result = []\n    for i in range(len(nums2) - 1, -1, -1):\n        store[nums2[i]] = -1\n\n        while stack and stack[-1] Sliding window solution:  \nA simple question first- \nOur target is very similar here: \nhttps://leetcode.com/problems/number-of-recent-calls/\n```py\nfrom collections import deque\n\nclass RecentCounter:\n\n    def __init__(self):\n        self.window = deque()\n\n    def ping(self, t: int) -> int:\n        while self.window and self.window[0] Now the original question with sliding window \nAlways remember: \n\nDRY: Don't Repeat Yourself\nAugmentation here: pop the first elem if it's out of the window\n```py\nfrom collections import deque\n\nclass Solution:\n    def maxSlidingWindow(self, nums: List[int], k: int) -> List[int]:\n        stack = deque()\n        result = []\n    if len(nums) = (k - 1):\n            result.append(stack[0][0])\n\n    return result\nhttps://leetcode.com/problems/largest-rectangle-in-histogram/\n```py\nfrom collections import deque\nfrom enum import IntEnum\n\nclass Solution:\n    def largestRectangleArea(self, heights: List[int]) -> int:\n        class Direction(IntEnum):\n            L = 0\n            R = 1\n\n        n = len(heights)\n\n        smaller = [[i, i] for i in range(0, n)]\n        queue = deque()\n        queue.append((-1, -1))\n\n        for i, h in enumerate(heights):\n            while queue and h "},"DataStructures/Arrays/MultipleArrays.html":{"url":"DataStructures/Arrays/MultipleArrays.html","title":"Multiple Arrays","keywords":"","body":"Multiple arrays\nNOTE: \nkey in min/max/sorted should get a function. You can create a lambda if required. \nMake a comparison function and use it with lambda.\nhttps://leetcode.com/problems/intersection-of-three-sorted-arrays/ \nWe try to maintain a state where all pointers point to the minimum of each array; if all equal, push it to result otherwise forward the pointer that points to the min of 3.\nclass Solution:\n    def arraysIntersection(self, arr1: List[int], arr2: List[int], arr3: List[int]) -> List[int]:\n        index = {'i': 0, 'j': 0, 'k': 0}\n        result = []\n\n        def get_smallest(x):\n            if x == 'i':\n                return arr1[index[x]]\n            if x == 'j':\n                return arr2[index[x]]\n            if x == 'k':\n                return arr3[index[x]]\n\n        while True:\n            if arr1[index['i']] == arr2[index['j']] == arr3[index['k']]:\n                result.append(arr1[index['i']])\n                for i in index:\n                    index[i] += 1\n            else:\n                index[min(index, key=lambda x: get_smallest(x))] += 1\n\n            if index['i'] >= len(arr1) \\\n               or index['j'] >= len(arr2) \\\n               or index['k'] >= len(arr3):\n                break\n\n        return result\n\nhttps://leetcode.com/problems/merge-sorted-array/\nclass Solution:\n    def merge(self, nums1: List[int], m: int, nums2: List[int], n: int) -> None:\n        \"\"\"\n        Do not return anything, modify nums1 in-place instead.\n        \"\"\"\n        m_idx, n_idx, r_idx = m-1, n-1, len(nums1)-1\n\n        while r_idx >= 0:\n            # this is crucial; do not overflow n\n            if n_idx = 0) and nums1[m_idx] >= nums2[n_idx]:\n                nums1[r_idx] = nums1[m_idx]\n                m_idx -= 1\n            else:\n                nums1[r_idx] = nums2[n_idx]\n                n_idx -= 1\n\n            r_idx -= 1\n\n"},"DataStructures/Arrays/LeftAndRight.html":{"url":"DataStructures/Arrays/LeftAndRight.html","title":"Left and right","keywords":"","body":"Left and right computations\nDevide and conquer-esque\nhttps://leetcode.com/problems/shortest-distance-to-target-color/ \nGood question. LO=Last Occurrence, DM=Distance Matrix \nCheck earlier accepted solution. The answer is index distance from last occurence of that color on the left and then on the right. \nI've combined both of the loops here:\nclass Solution:\n    def shortestDistanceColor(self, colors: List[int], queries: List[List[int]]) -> List[int]:\n        n = len(colors)\n\n        LOL = {1:float('-inf'), 2:float('-inf'), 3:float('-inf')}\n        LOR = {1:float('inf'), 2:float('inf'), 3:float('inf')}\n\n        DM = [[float('inf'), float('inf'), float('inf')] for _ in range(len(colors))]\n\n        for i in range(0, n):\n            c_l = colors[i]\n            c_r = colors[n-1-i]\n\n            LOL[c_l] = i\n            LOR[c_r] = n-1-i\n            for col in [1, 2, 3]:\n                DM[i][col-1] = min(DM[i][col-1], i-LOL[col])\n                DM[n-1-i][col-1] = min(DM[n-1-i][col-1], LOR[col]-(n-1-i))\n\n        return [DM[i][q-1] if DM[i][q-1] != float('inf') else -1 for i, q in queries]\n\nhttps://leetcode.com/problems/shortest-distance-to-a-character/ \nSame thing; last observed left and last observed right\nclass Solution:\n    def shortestToChar(self, s: str, c: str) -> List[int]:\n        DM = [float('inf')] * len(s)\n        LOL, LOR = float('-inf'), float('inf')\n        n = len(s)\n\n        for i, sc in enumerate(s):\n            if s[i] == c:\n                LOL = i\n\n            if s[n-1-i] == c:\n                LOR = n-1-i\n\n            DM[i] = min(DM[i], i-LOL)\n            DM[n-1-i] = min(DM[n-1-i], LOR - (n-1-i))\n\n        return DM\n\n"},"DataStructures/Strings/":{"url":"DataStructures/Strings/","title":"Strings","keywords":"","body":"Strings\n"},"DataStructures/Strings/StandardQuestions.html":{"url":"DataStructures/Strings/StandardQuestions.html","title":"Standard Questions","keywords":"","body":"Standard Questions\nBrute -> Sliding Window -> Set\nhttps://leetcode.com/problems/longest-substring-without-repeating-characters/\nSubsequence\nhttps://leetcode.com/problems/longest-word-in-dictionary-through-deleting/ \nVisualize the problem. Occurence of each letter in s should be after the last one and the last occurence of the same letter (we store these in offsets dictionary) \nIf the number of matched letters is the same as the length of the word, we compare with the result. \nPeep the min function with key=lambda\nclass Solution:\n    def findLongestWord(self, s: str, d: List[str]) -> str:\n        store = {}\n        result = ''\n        for i, c in enumerate(s):\n            store[c] = store.get(c, []) + [i]\n\n        for word in d:\n            offsets = {}\n            last = -1\n            matched = 0\n\n            for c in word:\n                if c not in store:\n                    break\n\n                offset = offsets.get(c, 0)\n\n                if offset == len(store[c]):\n                    break\n\n                for i in range(offset, len(store[c])):\n                    if store[c][i] > last:\n                        offsets[c] = i + 1\n                        last = store[c][i]\n                        matched += 1\n                        break\n\n            if matched == len(word):\n                result = min(result, word, key= lambda x: (-len(x), x))\n\n        return result\n\nstring rotation\nhttps://leetcode.com/problems/group-shifted-strings/ \n% 26 for circular rotation\nclass Solution:\n    def groupStrings(self, strings: List[str]) -> List[List[str]]:\n        fingerprints = {}\n\n        for string in strings:\n            fingerprint = ''\n            for i, c in enumerate(string[1:], start=1):\n                diff = (ord(string[i-1]) - ord(c))\n                fingerprint += str(diff % 26)\n\n            fingerprints[fingerprint] = fingerprints.get(fingerprint, []) + [string]\n\n        return fingerprints.values()\n\nhttps://leetcode.com/problems/count-binary-substrings/ \nModelling question. Keep it simple. Run the loop from second elem so the current and prev handling is easier.\nclass Solution:\n    def countBinarySubstrings(self, s: str) -> int:\n        prev_count = 0 \n\n        current = s[0]\n        current_count = 1\n\n        total = 0\n\n        for c in s[1:]:\n            if c == current:\n                current_count += 1\n            else:\n                current = c\n                prev_count = current_count\n                current_count = 1    \n\n            if current_count \nRemove/add one character\nhttps://leetcode.com/problems/strings-differ-by-one-character/ \nGood question. We generate possible matches as we traverse along the dict. \nEach character will be replaced with * so that we just have to check if the fingerprint exists\nclass Solution:\n    def differByOne(self, dict: List[str]) -> bool:\n        store = set()\n\n        for word in dict:\n            for i in range(len(word)):\n                fingerprint = word[:i] + '*' + word[i+1:]\n                if fingerprint in store:\n                    return True\n\n                store.add(fingerprint)\n\n        return False\n\nhttps://leetcode.com/problems/longest-string-chain/ \nGood question. Go backwards from the final answer. Build a store, sort based on certain criteria \nNow, go backwards, update store\nclass Solution:\n    def longestStrChain(self, words: List[str]) -> int:\n        words_store = {word: 1 for word in words}\n        words_sort = sorted(words, key=lambda x: len(x), reverse=True)\n        chain = 1\n\n        for word in words_sort:\n            for i in range(len(word)):\n                new_word = word[:i] + word[i+1:]\n                if new_word in words_store:\n                    words_store[new_word] = max(words_store[new_word], words_store[word]+1)\n                    chain = max(chain, words_store[new_word])\n\n        return chain\n\n"},"DataStructures/LinkedLists/":{"url":"DataStructures/LinkedLists/","title":"Linked Lists","keywords":"","body":"Linked List\nInstructions\n \n\nImportant thing is to understand how long the loop should run. That is, until the end node or None after the end node. \nUsing multiple pointers is common, check if that helps. Also, be sure which one of these should be your point of reference. That might make a difference. (Check reverse linked list question)  \nTo avoid many if conditions, you can declare a None node and use it as dummy or prev (merge sorted linked lists)\nCan treat a linked list as a graph: linked list cycle\n\nRecursion gives us an elegant way to iterate through the nodes in reverse. For example, this algorithm will print out the values of the nodes in reverse. Given a node, the algorithm checks if it is null. If it is null, nothing happens. Otherwise, all nodes after it are processed, and then the value for the current node is printed.\ndef print_values_in_reverse(ListNode head)\n    if head is not None:\n        print_values_in_reverse(head.next)\n        print head.val\n\nSequence:\n\nhttps://leetcode.com/problems/delete-node-in-a-linked-list/\nhttps://leetcode.com/problems/middle-of-the-linked-list/\n\nhttps://leetcode.com/problems/reverse-linked-list/ also practice recursive\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def reverseList(self, head: ListNode) -> ListNode:\n        prev, current = None, head\n\n        while current:\n            # avoid reserved keyword, next.\n            # loop runs till there is current, next = current.next \n            # in the prep phase can overflow. We shouldn't have a situation where\n            # we are checking the next elem of None.\n            _next = current.next\n\n            # swap elements here\n            current.next = prev\n\n            # prepare for the next iteration\n            prev = current\n            current = _next\n\n        return prev\n\nRecursive approach: \nThis is inspired from tree -> doubly linked list conversion question. \nWith recursion, we get pointers in reverse order. Static variable to keep track of the previous nodes.\nclass Solution:\n    def reverseList(self, head: ListNode) -> ListNode:\n        if not head:\n            return head\n\n        def helper(node):\n            if not node:\n                return\n\n            # recursive call to reach the end \n            helper(node.next)\n\n            if not helper.last:\n                helper.first = node\n            else:\n                helper.last.next = node\n                helper.last = node\n\n            helper.last = node\n\n        helper.first = helper.last = None\n        helper(head)\n\n        helper.last.next = None\n        return helper.first\n\nhttps://leetcode.com/problems/linked-list-cycle/ \nIterative:\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        visited = set()\n\n        while head:\n            fingerprint = id(head)\n            if fingerprint in visited:\n                return True\n\n            visited.add(fingerprint)\n            head = head.next\n\n        return False\n\nRecursive: \nTreat this as a graph problem asking for the cycle existance. We just need local visited set in this case. Also, there is not guaratee node values are different. We use their addresses to comapare (id function)\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        visited = set()\n\n        def traverse(node=head):\n            if not node or not node.next:\n                return False\n\n            if id(node) in visited:\n                return True\n\n            visited.add(id(node))\n            return traverse(node.next)\n\n        return traverse()\n\nhttps://leetcode.com/problems/merge-two-sorted-lists/\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def mergeTwoLists(self, l1: ListNode, l2: ListNode) -> ListNode:\n        # dummy node to instantiate things\n        head = runner = ListNode()\n\n        while l1 and l2:\n            if l1.val \nhttps://leetcode.com/problems/merge-k-sorted-lists/ \nGreat heap question.\nimport heapq\n\nclass Solution:\n    def mergeKLists(self, lists: List[ListNode]) -> ListNode:\n        head = runner = ListNode()\n        heap = []\n\n        for i, _list in enumerate(lists):\n            # important corner-case\n            if _list is not None:\n                heapq.heappush(heap, (_list.val, i))\n\n        while heap:\n            # we don't care about the value\n            _, list_idx = heapq.heappop(heap)\n\n            runner.next = lists[list_idx]\n\n            runner = runner.next\n            lists[list_idx] = lists[list_idx].next\n\n            if lists[list_idx] is not None:\n                # avoid pushing if the list at that index is None\n                heapq.heappush(heap, (lists[list_idx].val, list_idx))\n\n        return head.next\n\nhttps://leetcode.com/problems/remove-nth-node-from-end-of-list/ \nWe need to reach to the (n+1)th from the last element => fast should run n first \nEdge case being fast == last_node.next ie. None\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def removeNthFromEnd(self, head: ListNode, n: int) -> ListNode:\n        \"\"\"\n        We need a pointer to the node before target (the one we've \n        been asked to remove).\n\n        When the fast pointer reaches the end of the list, slow points\n        to the target node. So, when slow points to the one just before\n        that, fast one points to the last node that has 'next' ie. the \n        one before last.\n\n        So, move the fast one n place and then move both until fast.next.\n        Then perform deletion.\n        \"\"\"                                          \n        fast = slow = head\n\n        for _ in range(n):\n            fast = fast.next\n\n        if fast is None:\n            # important edge case where\n            # there are only n nodes in the list\n            return head.next\n\n        while fast.next:\n            fast = fast.next\n            slow = slow.next\n\n        slow.next = slow.next.next\n        return head\n\nhttps://leetcode.com/problems/add-two-numbers/\nclass Solution:\n    def addTwoNumbers(self, l1: ListNode, l2: ListNode) -> ListNode:\n        dummy = runner = ListNode()\n        carry = 0\n\n        while l1 or l2 or carry:\n            l1_val = l1.val if l1 else 0\n            l2_val = l2.val if l2 else 0\n\n            _sum = (l1_val + l2_val + carry)\n            digit = _sum % 10\n            carry = _sum // 10\n\n            runner.next = ListNode(digit)\n            runner = runner.next\n\n            if l1:\n                l1 = l1.next\n\n            if l2:\n                l2 = l2.next            \n\n        return dummy.next\n\nTough ones:\n\nhttps://leetcode.com/problems/reverse-linked-list-ii\nAdjusting connections after the reversal is probably the most crucial step \n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n  def reverseBetween(self, head: ListNode, m: int, n: int) -> ListNode:\n      if not head or not head.next or m == n:\n          return head\n\n      # need these variables for post-reverse conenction adjustments\n      node_before_reverse = m_reference = None\n      prev = _next = None\n      current = head\n\n      count = 1\n\n      while count \nhttps://leetcode.com/problems/intersection-of-two-linked-lists/ \nGreat question. There's a similar question for Tree:LCA (Tree/README.md) \n```py\nDefinition for singly-linked list.\nclass ListNode:\ndef init(self, x):\nself.val = x\nself.next = None\n\n\nclass Solution:\n    def getIntersectionNode(self, headA: ListNode, headB: ListNode) -> ListNode:\n        if not headA or not headB:\n            return None\n    A, B = headA, headB\n    resets = 2\n\n    while not (headA is headB):\n        if headA.next:\n            headA = headA.next\n        else:\n            resets -= 1\n            if resets ```\n"},"DataStructures/Trees/":{"url":"DataStructures/Trees/","title":"Trees","keywords":"","body":"Trees\nDecent curated list: https://medium.com/@codingfreak/binary-tree-interview-questions-and-practice-problems-439df7e5ea1f\nTraversals\n\nInorder (Recursive and Iterative)\nPreorder (Recursive and Iterative)\nPostorder (Recursive and Iterative)\nLevelwise\nVertical order (Levelwise + Hashing)\n\nFinding a solution\n\nSee if you want to pass data down the tree or up the tree\n\nIf up the tree, postorder for recursive solution.\nIf down the tree, preorder for recursive solution, keep globals to record and update answer.  return for no node/ no left/ no right tree cases. If you don't want to encounter no left or no right situations, check before passing down the value.\n\n\nFor levelwise, make sure you check if the left node or right node is present before pushing to the queue. Do it level by level not node by node. popleft and append combo (collections.deque)\n\n\nGotcha questions\nhttps://leetcode.com/problems/lowest-common-ancestor-of-a-binary-tree-iii/ \nBased on a similar question for linked lists (check if they merge or not) \nThe trick is to eliminate distance discrepancy.\n\nGo up and up through parent pointer\nIf one of them hits root (no parent), reset it to the other node and do the same thing again, this will remove distance discrepancy\nIf they are equidistant from the LCA (step 2 takes care of it if there are not), they'll converge there\n\n\nclass Solution:\n    def lowestCommonAncestor(self, p: 'Node', q: 'Node') -> 'Node':\n        p1, q1 = p, q\n\n        while p1 != q1:\n            p1 = p1.parent if p1.parent else q\n            q1 = q1.parent if q1.parent else p\n\n        return p1\n\n"},"DataStructures/Trees/Inorder.html":{"url":"DataStructures/Trees/Inorder.html","title":"Inorder Traversal","keywords":"","body":"Inorder Traversal\nIt is useful when you just want to traverse the tree, if you find what you are looking for, set up a flag to make sure you don't recur unnecessary paths. Just return in the case of iterative \nParticularly useful in the case of BST as inorder will give you a sorted list\nIterative\nhttps://leetcode.com/problems/sum-of-left-leaves/\nclass Solution:\n    def sumOfLeftLeaves(self, root: TreeNode) -> int:\n        if not root:\n            return 0\n\n        stack = []\n        current = root\n        total_sum = 0\n\n        while stack or current:\n            while current:\n                stack.append(current)\n                current = current.left\n                if current and not current.left and not current.right:\n                    total_sum += current.val\n\n            current = stack.pop()\n            current = current.right\n\n        return total_sum\n\nAnother iterative: \nwe use to exit the loop right after we find the discrepancy \nhttps://leetcode.com/problems/leaf-similar-trees/\nclass Solution:\n    def leafSimilar(self, root1: TreeNode, root2: TreeNode) -> bool:\n\n        def iterative(root, validation=False):\n            \"\"\"\n            validation true:= add elems to leaves attr\n            validation false:= remove elems from the attr and exit if not match\n            \"\"\"\n            current = root\n            stack = []\n\n            while stack or current:\n                while current:\n                    stack.append(current)\n                    current = current.left\n\n                current = stack.pop()\n\n                if not current.left and not current.right:\n                    if not validation:\n                        iterative.leaves.append(current.val)\n                    else:\n                        if iterative.leaves and \\\n                        current.val == iterative.leaves[0]:\n                            iterative.leaves.pop(0)\n                        else:\n                            iterative.similar = False\n                            return\n\n                current = current.right\n\n        iterative.leaves = []\n        iterative.similar = True\n        iterative(root1)\n        iterative(root2, validation=True)\n\n        return iterative.similar and len(iterative.leaves) == 0\n\nRecursive\nhttps://leetcode.com/problems/binary-tree-paths/ \nReturn False only in the case of not satisfying the criteria, do not return True until the base case\nclass Solution:\n    def binaryTreePaths(self, root: TreeNode) -> List[str]:\n        result = []\n\n        def traverse(node, path):\n            if not node:\n                return\n\n            if not node.left and not node.right:\n                result.append(path + str(node.val))\n                return            \n\n            traverse(node.left, path + str(node.val) + \"->\")\n            traverse(node.right, path + str(node.val) + \"->\")\n\n        traverse(root, \"\")\n        return result\n\nhttps://leetcode.com/problems/convert-bst-to-greater-tree/ \nAugmented inorder search; right first. DO NOT EVEN THINK ABOUT USING POSTORDER HERE. \nUse a static variable to keep track of the cumulative sum\nclass Solution:\n    def convertBST(self, root: TreeNode) -> TreeNode:\n        if not root or not (root.left or root.right):\n            return root\n\n        def _inorder(node):\n            if not node:\n                return None\n\n            _inorder(node.right)\n\n            node.val += _inorder.sum\n            _inorder.sum = node.val\n\n            _inorder(node.left)\n\n            return node\n\n        _inorder.sum = 0\n        return _inorder(root)\n\nhttps://leetcode.com/problems/convert-binary-search-tree-to-sorted-doubly-linked-list/ \nUse a static variable to keep track of the last element. Returning the node won't work since node's right should be followed by node's parent.\nclass Solution:\n    def treeToDoublyList(self, root: 'Node') -> 'Node':\n        \"\"\"\n        The inorder bit is obvious.\n\n        Now, the important thing to remember is that we are guaranteed \n        to get references to nodes left and right if we don't update \n        left before inorder(node.left) or before inorder(node.right)\n\n        Setup step: \n        last.right = node\n        node.left = last\n\n        Rather than returning the node, just keep a static variable to keep\n        track of the last visited node. Because, node's right should \n        be followed by the node's parent.\n\n        If last node is not initialized, we need the first node.\n        \"\"\"\n\n        if not root:\n            return root\n\n        def inorder(node):\n            if not node:\n                return\n\n            inorder(node.left)\n\n            if inorder.last:\n                inorder.last.right = node\n                node.left = inorder.last\n            else:\n                inorder.first = node\n\n            # reference for the next element\n            inorder.last = node\n\n            inorder(node.right)\n\n        inorder.first = inorder.last = None\n        inorder(root)\n\n        # make it cyclic\n        inorder.last.right = inorder.first\n        inorder.first.left = inorder.last\n\n        return inorder.first\n\n"},"DataStructures/Trees/Preorder.html":{"url":"DataStructures/Trees/Preorder.html","title":"Preorder Traversal","keywords":"","body":"Preorder traversal\nPerfect for process node and pass value down the tree. \nSometimes replacement for levelwise (NOT ALWAYS, OF COURSE) \nIf we do not want to cover not root.left or not root.right, check if they exist and go down the tree. \nGeneral solution:\nhttps://leetcode.com/problems/sum-root-to-leaf-numbers/\nclass Solution:\n    def sumNumbers(self, root: TreeNode) -> int:\n        self.total = 0\n\n        if not root:\n            return 0\n\n        def addNums(node, current):\n            if not node.left and not node.right:\n                self.total += (current * 10 + node.val)\n                return\n\n            if node.left:\n                addNums(node.left, current * 10 + node.val)\n\n            if node.right:\n                addNums(node.right, current * 10 + node.val)\n\n        addNums(root, 0)\n        return self.total\n\nhttps://leetcode.com/problems/binary-tree-zigzag-level-order-traversal/\nclass Solution:\n    def longestZigZag(self, root: TreeNode) -> int:\n        if not root:\n            return 0\n\n        self.max_length = 0\n        left = -1\n        right = 1\n\n        def traverse(node, direction, length):\n            if not node:\n                return\n\n            self.max_length  = max(self.max_length, length)\n\n            if direction == left:\n                traverse(node.left, left, 1)\n                traverse(node.right, right, length + 1)\n\n            elif direction == right:\n                traverse(node.left, left, length + 1)\n                traverse(node.right, right, 1)\n\n            else:\n                traverse(node.left, left, 1)\n                traverse(node.right, right, 1)\n\n        traverse(root, 0, 0)\n        return self.max_length\n\nhttps://leetcode.com/problems/path-sum-ii/\nclass Solution:\n    def pathSum(self, root: TreeNode, sum: int) -> List[List[int]]:\n        result = []\n\n        def traverse(node, path, current_sum):\n            if not node:\n                return\n\n            if not node.left and not node.right:\n                if current_sum == (sum - node.val):\n                    path.append(node.val)\n                    result.append(path)\n                return\n\n            traverse(node.left, path + [node.val], current_sum + node.val)\n            traverse(node.right, path + [node.val], current_sum + node.val)\n\n        traverse(root, [], 0)\n        return result\n\nhttps://leetcode.com/problems/path-sum-iii/\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def pathSum(self, root: TreeNode, sum: int) -> int:\n        self.result = 0\n\n        def traverse(node, path_sum):\n            if not node:\n                return \n\n            if node.val == sum:\n                self.result += 1\n\n            new_path_sum = []\n            for s in path_sum:\n                new_sum = s + node.val\n\n                if new_sum == sum:\n                    self.result += 1\n\n                new_path_sum.append(new_sum)\n\n            traverse(node.left, new_path_sum + [node.val])\n            traverse(node.right, new_path_sum + [node.val])            \n\n        traverse(root, [])\n        return self.result\n\nhttps://leetcode.com/problems/add-one-row-to-tree/ \nDecent question, almost like a linked list question\nclass Solution:\n    def addOneRow(self, root: TreeNode, v: int, d: int) -> TreeNode:\n        if d == 1:\n            new = TreeNode(v)\n            new.left = root\n            return new\n\n        def preorder(node, depth):\n            if not node or depth == d:\n                return None\n\n            if depth == (d - 1):\n                new = TreeNode(v)\n                new.left = node.left\n                node.left = new\n\n                new = TreeNode(v)\n                new.right = node.right\n                node.right = new\n\n            preorder(node.left, depth + 1)\n            preorder(node.right, depth + 1)\n\n            return node\n\n        return preorder(root, 1)\n\nhttps://leetcode.com/problems/binary-tree-longest-consecutive-sequence/ \nJust be concerned about the state at the current node. Default start should be 1 since a single node satisfies the requirement \nAdjust based on the current node and then think about global max length \nclass Solution:\n    def longestConsecutive(self, root: TreeNode) -> int:\n        if not root:\n            return 0\n\n        def preorder(node, prev, length):\n            if not node:\n                return\n\n            if (node.val - prev) == 1:\n                length += 1\n            else:\n                length = 1\n\n            preorder.longest = max(preorder.longest, length)\n\n            preorder(node.left, node.val, length)\n            preorder(node.right, node.val, length)\n\n            return\n\n        preorder.longest = 0\n        preorder(root, float('-inf'), 0)\n        return preorder.longest\n\nhttps://leetcode.com/problems/flatten-binary-tree-to-linked-list/ \nCheck a similar one in our inorder set: tree -> double linked list\nclass Solution:\n    def flatten(self, root: TreeNode) -> None:\n        \"\"\"\n        Do not return anything, modify root in-place instead.\n        \"\"\"\n        if not root:\n            return root\n\n        def helper(node):\n            if not node:\n                return\n            \"\"\"\n            We have to preseve the right pointer because the node's\n            right pointer is going to be modified.\n\n            Static variable to store the last node reference.\n            \"\"\"\n            node_right = node.right\n\n            if not helper.last:\n                helper.first = node\n            else:\n                helper.last.right = node\n                helper.last.left = None\n\n            helper.last = node\n\n            helper(node.left)\n            helper(node_right)\n\n        helper.first = helper.last = None\n        helper(root)\n\n        return helper.first\n\n"},"DataStructures/Trees/Postorder.html":{"url":"DataStructures/Trees/Postorder.html","title":"Postorder Traversal","keywords":"","body":"Postorder traversal\nSometimes we need to pass some values back up the tree. \ne.g. node's position from the bottom, max from right and left, check if the node exists in the left or right subtree. sum of the left subtree and right subtree \nBased on these properties, we need to find values of some other properties; use globals/ class attributes to record/update their value.\nOptimization for BST: \nCheck if the target value is greater than current, go right; no need to go left. Vice versa. \nAlso need to do the same sometimes to handle the nodes that don't have either left child or the right one. Don't forget to initialize L or R before calling postorder. Look at the solution of good leaf nodes.\nTree height questions:\n\nhttps://leetcode.com/problems/lowest-common-ancestor-of-deepest-leaves/\nhttps://leetcode.com/problems/find-leaves-of-binary-tree/\n\nGeneral solution:\nhttps://leetcode.com/problems/binary-tree-maximum-path-sum/\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def maxPathSum(self, root: TreeNode) -> int:\n        def postorder(node):\n            if not node:\n                # if every node has a negative val, we'd want to return \n                # the max negative val so returning `0` doesn't really work here\n                return float('-inf')\n\n            current = node.val\n            L = postorder(node.left)\n            R = postorder(node.right)\n\n            # don't include if it's negative\n            if L >= 0:\n                current += L\n\n            if R >= 0:\n                current += R\n\n            postorder.max_sum = max(postorder.max_sum, current)\n\n            # we can return either left, right or the node itself\n            # it won't be a path otherwise\n            return max(\n                        node.val,\n                        node.val + L,\n                        node.val + R\n                   )\n\n        # static variable to store max\n        postorder.max_sum = float('-inf')\n        postorder(root)\n\n        return postorder.max_sum\n\nhttps://leetcode.com/problems/lowest-common-ancestor-of-a-binary-tree/\nclass Solution:\n    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':\n        self.lca = None\n\n        def traverse(node):\n            if not node:\n                return False\n\n            L = traverse(node.left)\n            R = traverse(node.right)\n\n            if (L + R + (node.val in [p.val, q.val])) == 2:\n                self.lca = node\n\n            return L or R or (node.val in [p.val, q.val])\n\n        traverse(root)\n        return self.lca\n\nhttps://leetcode.com/problems/most-frequent-subtree-sum/ \nNote: Recording max_count while inserting so that finding max will be easier afterwards.\nfrom collections import deque, defaultdict\n\nclass Solution:\n    def findFrequentTreeSum(self, root: TreeNode) -> List[int]:\n        if not root:\n            return []\n\n        sums = defaultdict(int)\n        self.max_count = 0\n\n        def traverse(node):\n            if not node:\n                return 0\n\n            L = traverse(node.left)\n            R = traverse(node.right)\n\n            sums[L + R + node.val] += 1\n            self.max_count = max(self.max_count, sums[L + R + node.val])\n\n            return (L + R + node.val)\n\n        traverse(root)\n        result = []\n\n        for key, value in sums.items():\n            if self.max_count == value:\n                result.append(key)\n\n        return result\n\nhttps://leetcode.com/problems/validate-binary-search-tree/\nclass Solution:\n    def isValidBST(self, root: TreeNode) -> bool:\n        self.valid = True\n\n        if not root:\n            return self.valid\n\n        if not root.left and not root.right:\n            return self.valid\n\n        def recurse(node: TreeNode) -> int:\n            if not node:\n                return (float('-inf'), float('inf'))\n\n            left_max, left_min = recurse(node.left)\n            right_max, right_min = recurse(node.right)\n\n            if (left_max >= node.val) or (right_min \nhttps://leetcode.com/problems/minimum-time-to-collect-all-apples-in-a-tree/\nfrom collections import defaultdict\n\nclass Solution:\n    def minTime(self, n: int, edges: List[List[int]], hasApple: List[bool]) -> int:\n        tree = defaultdict(list)\n        self.walk = 0\n        visited = set()\n        for s, e in edges:\n            tree[s].append(e)\n            tree[e].append(s)\n\n        def traverse(node):\n            visited.add(node)\n\n            if not tree[node]:\n                if hasApple[node]:\n                    self.walk += 2\n                return hasApple[node]\n\n            apple_in_path = hasApple[node]\n            for v in tree[node]:\n                if v not in visited:\n                    apple_in_path = traverse(v) or apple_in_path\n\n            if apple_in_path and node:\n                self.walk += 2\n\n            return apple_in_path\n\n\n        traverse(0)\n        return self.walk\n\nhttps://leetcode.com/contest/weekly-contest-199/problems/number-of-good-leaf-nodes-pairs/ \nWe send to send consolidated data up the tree; kinda of tricky and complex\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nfrom collections import defaultdict\n\nclass Solution:\n    def countPairs(self, root: TreeNode, distance: int) -> int:\n        self.total = 0\n\n        def postorder(node):\n            if not node.left and not node.right:\n                return {1: 1}\n\n            L, R = {0 : 0}, {0: 0}\n            if node.left:\n                L = postorder(node.left)\n            if node.right:\n                R = postorder(node.right)\n\n            for d1, lc in L.items():\n                for d2, rc in R.items():\n                    if d1 + d2 \nhttps://leetcode.com/problems/lowest-common-ancestor-of-deepest-leaves/ \nWe even treat None nodes as leaves. Other leave nodes would obviously lower than the None node. \nIf the left and right leaves are at the same height, just return the current node as LCA otherwise just pass it on with the adjusted height.\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def lcaDeepestLeaves(self, root: TreeNode) -> TreeNode:\n        def postorder(node):\n            if not node:\n                return 0, None\n\n            if not node.left and not node.right:\n                return 1, node\n\n            L_H, L_lca = postorder(node.left)\n            R_H, R_lca = postorder(node.right)\n\n            if L_H > R_H:\n                return L_H + 1, L_lca\n\n            if R_H > L_H:\n                return R_H + 1, R_lca\n\n            return L_H + 1, node\n\n        _, lca = postorder(root)\n        return lca\n\nA slightly similar problem: \nhttps://leetcode.com/problems/lowest-common-ancestor-of-a-binary-tree-iv/\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def lowestCommonAncestor(self, root: 'TreeNode', nodes: 'List[TreeNode]') -> 'TreeNode':\n        target = set([i.val for i in nodes])\n        self.lca = None\n\n        def postorder(node):\n            if not node:\n                return 0\n\n            L = postorder(node.left)\n            R = postorder(node.right)\n\n            found = L + R + (node.val in target)\n            if found == len(target) and not self.lca:\n                self.lca = node\n\n            return found\n\n        postorder(root)\n        return self.lca\n\nhttps://leetcode.com/problems/find-leaves-of-binary-tree/ \nInteresting question! It indirectly asks us to group nodes with the same height together. Then, return them in increasing order of the height in question. \nPostorder guaratees that we process them from ground up, so the second requirement is implemented by default. Rest is just height calculation.\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def findLeaves(self, root: TreeNode) -> List[List[int]]:\n        store = {}\n\n        def postorder(node):\n            if not node:\n                return -1\n\n            # steps 1 and 2 can be merged in one-line\n\n            # 1. find children's heights\n            L = postorder(node.left)\n            R = postorder(node.right)\n\n            # 2. node's height\n            H = 1 + max(L, R)\n\n            # update the store; we can also use defaultdict(list) here\n            store[H] = store.get(H, []) + [node.val]\n\n            # return the height back to its parents\n            return H\n\n        # trigger\n        postorder(root)\n\n        # these will be sorted by default\n        return store.values()\n\nhttps://leetcode.com/problems/binary-tree-pruning/\nclass Solution:\n    def pruneTree(self, root: TreeNode) -> TreeNode:\n\n        def postorder(node):\n            if not node:\n                return False\n\n            L = postorder(node.left)\n            R = postorder(node.right)\n\n            if not L:\n                node.left = None\n\n            if not R:\n                node.right = None\n\n            return L or R or (node.val == 1)\n\n        return root if postorder(root) else None\n\n"},"DataStructures/Trees/LevelWise.html":{"url":"DataStructures/Trees/LevelWise.html","title":"Level-wise Traversal","keywords":"","body":"Levelwise traversals\n-also useful for vertical order traversal\nGeneral solution: \nhttps://leetcode.com/problems/deepest-leaves-sum/\nfrom collections import deque\n\nclass Solution:\n    def deepestLeavesSum(self, root: TreeNode) -> int:\n        if not root:\n            return 0\n\n        queue = deque()\n        queue.append(root)\n        current = root\n        level_sum = 0\n\n        while queue:\n            size = len(queue)\n            level_sum = 0\n\n            while size:\n                current = queue.popleft()\n                level_sum += current.val\n\n                if current.left:\n                    queue.append(current.left)\n\n                if current.right:\n                    queue.append(current.right)\n\n                size -= 1\n\n        return level_sum\n\nAppend more values into the queue node \nhttps://leetcode.com/problems/cousins-in-binary-tree/\nfrom collections import deque\n\n\nclass Solution:\n    def isCousins(self, root: TreeNode, x: int, y: int) -> bool:\n        if not root:\n            return False\n\n        queue = deque()\n        queue.append((root, -1))\n        current = root\n\n\n        while queue:\n            size = len(queue)\n\n            x_found = -1\n            y_found = -1\n\n            while size:\n\n                current, parent = queue.popleft()\n\n                if current.val == x:\n                    x_found = parent\n\n                if current.val == y:\n                    y_found = parent\n\n                if (x_found != -1) and (y_found != -1) and (x_found != y_found):\n                    return True\n\n                if (x_found == y_found) and (x_found != -1):\n                    return False\n\n                if current.left:\n                    queue.append((current.left, current.val))\n\n                if current.right:\n                    queue.append((current.right, current.val))\n\n                size -= 1\n\n        return False\n\nhttps://leetcode.com/problems/binary-tree-vertical-order-traversal/ \nLevel order traversal guarantees vertical sorting, just need to sort horizontally. \nAnother brilliant idea is to store min_x and max_x. Then just return [X[x] for x in range(min_x, max_x+1)].\nThis works because every x in that range will have atleast one node. (think about it)\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nfrom collections import deque\n\nclass Solution:\n    def verticalOrder(self, root: TreeNode) -> List[List[int]]:\n        if not root:\n            return []\n\n        X = {}\n        queue = deque()\n        queue.append((0, root))\n\n        while queue:\n            size = len(queue)\n\n            for _ in range(size):\n                x, node = queue.popleft()\n                X[x] = X.get(x, []) + [node.val]\n\n                if node.left:\n                    queue.append((x-1, node.left))\n\n                if node.right:\n                    queue.append((x+1, node.right))\n\n        return [X[x] for x in sorted(X)]\n\nhttps://leetcode.com/problems/vertical-order-traversal-of-a-binary-tree/\nSimilar but slightly complicated because nodes at the same position have to be sorted by value. \nLevel order traversal guarantees vertical sort and left to right. For sorting, we just need to care about nodes in the same level. Create another store for each level and sort before extending the original store\nfrom collections import deque\n\nclass Solution:\n    def verticalTraversal(self, root: TreeNode) -> List[List[int]]:\n        X = {}\n        queue = deque()\n        queue.append((0, root))\n        x_min, x_max = float('inf'), float('-inf')\n\n        while queue:\n            size = len(queue)\n            current_row = {}\n\n            for _ in range(size):\n                x, node = queue.popleft()\n                x_min = min(x_min, x)\n                x_max = max(x_max, x)\n\n                current_row[x] = current_row.get(x, []) + [node.val]\n\n                if node.left:\n                    queue.append((x-1, node.left))\n\n                if node.right:\n                    queue.append((x+1, node.right))\n\n            for x in current_row:\n                X[x] = X.get(x, []) + sorted(current_row[x])\n\n        return [X[x] for x in range(x_min, x_max+1)]\n\n"},"Datastructures/Trees/TreeToGraph.html":{"url":"Datastructures/Trees/TreeToGraph.html","title":"Tree to Graph","keywords":"","body":"Tree to graph\nSometimes, we need to convert a tree into a graph. \nEspecially, if we want to traverse starting from an arbitary node.\nTwo approaches: \n\nMemory efficient but altering the input data: \nMark every node (add a new attribute to TreeNode object parent) \nPerform level-wise traversal from the target node where the neightbor loop will have [node.parent, node.left, node.right]\n\nConvert you tree into a graph: \nWill require additional O(n) space to store the whole thing \nPerform level-wise traversal starting from the target node\n\n\nhttps://leetcode.com/problems/all-nodes-distance-k-in-binary-tree/ \nNote the graph construction step; keep in mind we have to filter out -1 from the iteration.\nmake sure there's a proper K value handling.\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nfrom collections import defaultdict, deque\n\nclass Solution:\n    def distanceK(self, root: TreeNode, target: TreeNode, K: int) -> List[int]:\n        if K == 0:\n            return [target.val]\n\n        graph = defaultdict(list)\n\n        def traverse(node, parent):\n            if not node:\n                return\n\n            graph[parent].append(node.val)\n            graph[node.val].append(parent)\n            traverse(node.left, node.val)\n            traverse(node.right, node.val)\n\n        traverse(root, -1)\n\n        queue = deque()\n        queue.append(target.val)\n        visited = set()\n        result = []\n        K -= 1\n\n        while queue:\n            size = len(queue)\n\n            for i in range(size):\n                v = queue.popleft()\n                visited.add(v)\n\n                for nei in graph[v]:\n                    if nei not in visited and nei != -1: \n                        if K != 0:\n                            queue.append(nei)\n\n                        if K == 0:\n                            result.append(nei)\n            if K == 0:\n                return result\n            K -= 1\n\n        return []\n\n"},"DataStructures/Trees/TwoTrees.html":{"url":"DataStructures/Trees/TwoTrees.html","title":"Two Trees","keywords":"","body":"Two trees\nhttps://leetcode.com/problems/find-a-corresponding-node-of-a-binary-tree-in-a-clone-of-that-tree/ \nPython reference equality: is \nCompare it to the original one rather than the clone; the algorithm will take care of the result\nclass Solution:\n    def getTargetCopy(self, original: TreeNode, cloned: TreeNode, target: TreeNode) -> TreeNode:\n        self.result = None\n\n        def inorder(o: TreeNode, c: TreeNode):\n            if not o:\n                return None\n\n            inorder(o.left, c.left)\n            if o is target:\n                self.result = c\n            inorder(o.right, c.right)\n\n        inorder(original, cloned)\n        return self.result\n\nhttps://leetcode.com/problems/merge-two-binary-trees/\nclass Solution:\n    def mergeTrees(self, t1: TreeNode, t2: TreeNode) -> TreeNode:\n        def preorder(node1, node2):\n            if not node2:\n                return node1\n\n            if not node1:\n                return node2\n\n            node1.val += node2.val\n            node1.left = preorder(node1.left, node2.left)\n            node1.right = preorder(node1.right, node2.right)\n            return node1\n\n        return preorder(t1, t2)\n\nKeep things simple:\nhttps://leetcode.com/problems/all-elements-in-two-binary-search-trees/\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\nfrom heapq import merge\n\nclass Solution:\n    def getAllElements(self, root1: TreeNode, root2: TreeNode) -> List[int]:\n\n        def inorder(node, l):\n            if not node:\n                return\n\n            inorder(node.left, l)\n            l.append(node.val)\n            inorder(node.right, l)\n\n        l1, l2 = [], []\n        inorder(root1, l1)\n        inorder(root2, l2)\n\n        return merge(l1, l2)\n\nAn interesting use of generators: \nhttps://leetcode.com/problems/find-a-corresponding-node-of-a-binary-tree-in-a-clone-of-that-tree/discuss/537686/Python-Clean-and-Pythonic-way-using-iterator(generator)-solving-followup-too \nExplaination: https://leetcode.com/problems/find-a-corresponding-node-of-a-binary-tree-in-a-clone-of-that-tree/discuss/537686/Python-Clean-and-Pythonic-way-using-iterator(generator)-solving-followup-too/475462\ndef it(node):\n    if node:\n        yield node\n        yield from it(node.left)\n        yield from it(node.right)\n\n    # can directly iterate over this tree now\n\n"},"DataStructures/Trees/ConstructTree.html":{"url":"DataStructures/Trees/ConstructTree.html","title":"Construct Trees","keywords":"","body":"Tree construction questions\nConstruct a tree from the input\nThis is for leetcode style input\nhttps://leetcode.com/problems/serialize-and-deserialize-binary-tree/\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nfrom collections import deque\n\nclass Codec:\n\n    def serialize(self, root):\n        \"\"\"Encodes a tree to a single string.\n\n        :type root: TreeNode\n        :rtype: str\n        \"\"\"\n        result = ''\n        queue = deque()\n        queue.append(root)\n\n        while queue:\n            size = len(queue)\n\n            for _ in range(size):\n                node = queue.popleft()\n\n                if not node:\n                    result += '#,'\n                    continue\n\n                result += (str(node.val) + ',')\n\n                queue.append(node.left)\n                queue.append(node.right)\n\n        # ends with ','\n        return result[:len(result)-1]\n\n    def deserialize(self, data):\n        \"\"\"Decodes your encoded data to tree.\n\n        :type data: str\n        :rtype: TreeNode\n        \"\"\"\n        nodes = [TreeNode(int(val)) if val != '#' else None for val in data.split(',')]\n\n        child, parent = 1, 0\n        while child \nFrom preorder and inorder\nhttps://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/ \nUse a static variable for preorder indexing and keep an inorder map \nroot divides the inorder array into left and right subtree\nclass Solution:\n    def buildTree(self, preorder: List[int], inorder: List[int]) -> TreeNode:\n\n        def construct_tree(start=0, end=len(inorder)-1):\n            if start > end:\n                return None\n\n            root = TreeNode(preorder[construct_tree.index])\n            root_idx = node_pos[root.val]\n            construct_tree.index += 1\n\n            root.left = construct_tree(start, root_idx-1)\n            root.right = construct_tree(root_idx+1, end)\n\n            return root\n\n        construct_tree.index = 0\n        node_pos = {v: i for i, v in enumerate(inorder)}\n        return construct_tree()\n\nBalanced tree construction\nhttps://leetcode.com/problems/balance-a-binary-search-tree/\nclass Solution:\n    def balanceBST(self, root: TreeNode) -> TreeNode:\n        node_vals = []\n\n        def traverse(node):\n            if not node:\n                return \n\n            traverse(node.left)\n            node_vals.append(node.val)\n            traverse(node.right) \n\n        def construct_tree(start, end):\n            if start > end:\n                return None\n\n            middle = start + (end - start) // 2\n\n            current = TreeNode(node_vals[middle])\n            current.left = construct_tree(start, middle - 1)\n            current.right = construct_tree(middle + 1, end)\n\n            return current            \n\n        traverse(root)\n        return construct_tree(0, len(node_vals) - 1)\n\nConstruction from preorder\nhttps://leetcode.com/problems/construct-binary-search-tree-from-preorder-traversal/\nclass Solution:\n    def bstFromPreorder(self, preorder: List[int]) -> TreeNode:\n\n        def find_first_greater(start, end, target):\n            while start  target:\n                    end = mid\n                else:\n                    start = mid+1\n            return start\n\n        def constructTree(start, end):\n            if start > end:\n                return None\n\n            current = TreeNode(preorder[start])\n            fg = find_first_greater(start + 1, end, preorder[start])\n\n            # there is no greater element\n            if fg >= len(preorder) or preorder[fg] \nSome other constructions\nhttps://leetcode.com/problems/maximum-binary-tree/\nclass Solution:\n    def constructMaximumBinaryTree(self, nums: List[int]) -> TreeNode:\n        if not nums:\n            return None\n\n        def construct(l, r):\n            if l >= r:\n                return None\n\n            max_index = l\n            for i in range(l, r):\n                if nums[i] > nums[max_index]:\n                    max_index = i\n\n            node = TreeNode()\n            node.val = nums[max_index]\n\n            node.left = construct(l, max_index)\n            node.right = construct(max_index + 1, r)\n\n            return node\n\n        return construct(0, len(nums))\n\nImportant questions: \nhttps://leetcode.com/problems/construct-binary-tree-from-inorder-and-postorder-traversal/ \nNotice how we're using a static variable for construct function. \nRoot is always the last unused element present in the postorder array. This element divides the inorder array in 2 parts. \nMake sure you construct the right subtree before the left one!!\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def buildTree(self, inorder: List[int], postorder: List[int]) -> TreeNode:\n\n        def construct(i_s, i_e):\n            if i_s > i_e:\n                return None\n\n            root = TreeNode(postorder[construct.postorder_index])\n            construct.postorder_index -= 1\n\n            pivot = 0\n            for i, e in enumerate(inorder):\n                if e == root.val:\n                    pivot = i\n                    break\n\n            root.right = construct(pivot + 1, i_e)\n            root.left = construct(i_s, pivot - 1)\n\n            return root\n\n        construct.postorder_index = len(postorder) - 1\n        return construct(0, len(inorder) - 1)\n\n"},"DataStructures/Graphs/":{"url":"DataStructures/Graphs/","title":"Graphs","keywords":"","body":"Graphs\nDecent problemset: https://leetcode.com/discuss/general-discussion/655708/graph-problems-for-beginners-practice-problems-and-sample-solutions\n\nhttps://leetcode.com/problems/array-nesting/\n\nCourse schedule IV\n\n\nGood question: \nhttps://leetcode.com/problems/kill-process/ \nPoints to note: \nUsing graph vs tree (easier to construct and multiple children) \nTagging/marking the target node: crucial step. Let everyone inherit parent tag if target found, \ntag it to be True, its subtree will automatically be the only set of nodes to have True tag \nNodes that do not have children: children append step should have a dict.get(node, []) call \nfrom collections import deque\n\nclass Solution:\n    def killProcess(self, pid: List[int], ppid: List[int], kill: int) -> List[int]:\n        graph = {}\n        queue = deque()\n        to_be_killed = []\n        # 1\n        for i, parent in enumerate(ppid):\n            graph[parent] = graph.get(parent, []) + [pid[i]]\n\n            if parent == 0:\n                if pid[i] == kill:\n                    return pid\n                queue.append((pid[i], False))\n\n        while queue:\n            size = len(queue)\n\n            for _ in range(size):\n                p, tag = queue.popleft()\n\n                if p == kill:\n                    tag = True\n\n                # 2\n                if tag == True:\n                    to_be_killed.append(p)\n\n                #3\n                for d in graph.get(p, []):\n                    queue.append((d, tag))\n\n        return to_be_killed\n\n"},"DataStructures/Graphs/Coloring.html":{"url":"DataStructures/Graphs/Coloring.html","title":"Coloring","keywords":"","body":"Graph coloring\nBasically, bifurcation problems\n\nhttps://leetcode.com/problems/flower-planting-with-no-adjacent/ \nThese set of problems are extremely similar with a code-changing difference \nThe first one is solved with keeping in mind that the solution exists, we just have to find it \nFor the these, we want to see if the solution exists: (use BFS)\nhttps://leetcode.com/problems/is-graph-bipartite/\nhttps://leetcode.com/problems/shortest-path-with-alternating-colors/\nhttps://leetcode.com/problems/possible-bipartition/  \n\nTips: \nMake sure you have a proper representation of graph \nRun the first loop over all vertices so that you don't miss disconnected sections. \nJust validate the coloring\nhttps://leetcode.com/problems/is-graph-bipartite/\nclass Solution:\n    def isBipartite(self, graph: List[List[int]]) -> bool:\n        visited = {}\n        A, B = True, False\n\n        def dfs(index, s):\n            if index in visited:\n                return visited[index] == s\n\n            visited[index] = s\n\n            valid = True\n            for d in graph[index]:\n                valid = (valid and dfs(d, not s))\n\n            return valid\n\n        for i in range(len(graph)):\n            if i not in visited and not dfs(i, A):\n                return False\n\n        return True\n\nfrom collections import deque\n\nclass Solution:\n    def isBipartite(self, graph: List[List[int]]) -> bool:\n        visited = [0 for i in range(0, len(graph))]\n\n        def bfs(i):\n            queue = deque()\n            queue.append((i, 1))\n\n            while queue:\n                node, color = queue.popleft()\n\n                if visited[node] and visited[node] != color:\n                    return False\n\n                if visited[node]:\n                    continue\n\n                visited[node] = color\n\n                colors = set([1, 2])\n                colors.remove(color)\n                color_left = colors.pop()\n\n                for v in graph[node]:\n                    queue.append((v, color_left))\n\n            return True\n\n        for s in range(0, len(graph)):\n            if not visited[s]:\n                if not bfs(s):\n                    return False\n\n        return True\n\nEdge coloring \nThe key is to store color-node pairing in the seen set -> Allows us to traverse only \"meaningful\" cycles\nfrom collections import defaultdict, deque\n\nclass Solution:\n    def shortestAlternatingPaths(self, n: int, red_edges: List[List[int]], blue_edges: List[List[int]]) -> List[int]:\n        graph = defaultdict(list)\n        red = 1\n        blue = 2\n        queue = deque()\n        seen = set()\n        result = [-1 for i in range(0, n)]\n\n        for s, d in red_edges:\n            graph[s].append([d, red])\n\n        for s, d in blue_edges:\n            graph[s].append([d, blue])\n\n        queue.append((0, red, 0))\n        queue.append((0, blue, 0))\n        while queue:\n            node, color, length = queue.popleft()\n\n            if (node, color) in seen:\n                continue\n            seen.add((node, color))\n\n            if result[node] == -1:\n                result[node] = length\n\n            for v, c in graph[node]:\n                colors = set([red, blue])\n                colors.remove(color)\n                expected = colors.pop()\n                if (c == expected):\n                    queue.append((v, expected, length + 1))\n\n        return result\n\nSolution for the first one: \nJust filling up colors\nfrom collections import defaultdict\n\nclass Solution:\n    def gardenNoAdj(self, N: int, paths: List[List[int]]) -> List[int]:\n        graph = defaultdict(list)\n\n        for start, end in paths:\n            graph[start].append(end)\n            graph[end].append(start)\n\n        planted = [0 for i in range(0, N)]\n\n        for i in range(1, N + 1):\n            neigh = graph[i]\n            if planted[i - 1]:\n                continue\n\n            flowers = set([1, 2, 3, 4])\n            for n in neigh:\n                if planted[n - 1] in flowers:\n                    flowers.remove(planted[n - 1])\n\n            planted[i - 1] = flowers.pop()\n\n        return planted\n\n"},"DataStructures/Graphs/GraphBFS.html":{"url":"DataStructures/Graphs/GraphBFS.html","title":"Graph BFS","keywords":"","body":"Graph BFS\nExtremely powerful tool to have in the arsenal. \nUseful for a myriad of optimization problems. \nQuickest way to reach to X; even optimize cost function (Djikstra substitute using Priority Queue) \nhttps://leetcode.com/problems/keys-and-rooms/\nfrom collections import deque\n\nclass Solution:\n    def canVisitAllRooms(self, rooms: List[List[int]]) -> bool:\n        if not rooms:\n            return True\n\n        queue = deque()\n        visited = set()\n\n        queue.append(0)\n\n        while queue:\n            room = queue.popleft()\n            visited.add(room)\n\n            for v in rooms[room]:\n                if v not in visited:\n                    queue.append(v)\n\n        return True if len(visited) == len(rooms) else False\n\nAmazing priority queue method: \nhttps://leetcode.com/problems/network-delay-time/\nimport heapq\nfrom collections import deque, defaultdict\n\nclass Solution:\n    def networkDelayTime(self, times: List[List[int]], N: int, K: int) -> int:\n        graph = defaultdict(list)\n        heap = []\n        visited = {}\n\n        if not N:\n            return 0\n\n        if K > N:\n            return -1\n\n        for u, v, w in times:\n            graph[u].append((v, w))\n\n        heap.append((0, K))\n        max_time = 0\n\n        while heap:\n            time, node = heapq.heappop(heap)\n\n            if node in visited:\n                continue\n\n            visited[node] = time\n            max_time = max(max_time, time)\n\n            for v, w in graph[node]:\n                if v not in visited:\n                    heapq.heappush(heap, (time + w, v))\n\n        return max_time if len(visited) == N else -1\n\nhttps://leetcode.com/problems/cheapest-flights-within-k-stops/ \nTwo variables at play here. There's similar question for grid as well.\nimport heapq\nfrom collections import defaultdict\n\nclass Solution:\n    def findCheapestPrice(self, n: int, flights: List[List[int]], src: int, dst: int, K: int) -> int:\n        graph = defaultdict(list)\n        visited = [float('inf') for i in range(0, n)]\n        heap = []\n\n        for u, v, w in flights:\n            graph[u].append((v, w))\n\n        heapq.heappush(heap, (0, src, 0))\n\n        while heap:\n            d, c, k = heapq.heappop(heap)\n\n            if k >= visited[c] or k > (K + 1):\n                continue\n\n            if c == dst:\n                return d\n\n            visited[c] = d\n\n            for n, n_d in graph[c]:\n                heapq.heappush(heap, (d + n_d, n, k + 1))\n\n        return -1\n\n"},"DataStructures/Graphs/GraphDFS.html":{"url":"DataStructures/Graphs/GraphDFS.html","title":"Graph DFS","keywords":"","body":"Graph DFS\nOne path at a time type questions eg. Course Scheduling \nVisit the node -> process children -> unvisit it \nIf there's a cycle, we visit the already locally visited node again \nIf we have visited the node before globally, just exit with True as we have already checked and didn't find any cycle \nhttps://leetcode.com/problems/number-of-connected-components-in-an-undirected-graph/ \nGlobal visited and local dfs.visited sets to not revisit nodes. \nGotcha: make sure compare an incoming node to visited instead of dfs.visited to save time\nclass Solution:\n    def countComponents(self, n: int, edges: List[List[int]]) -> int:\n        visited = set()\n        connected = 0\n        graph = {}\n\n\n        for s, e in edges:\n            graph[s] = graph.get(s, []) + [e]\n            graph[e] = graph.get(e, []) + [s]\n\n        def dfs(index):\n            # gotcha\n            if index in visited:\n                return\n\n            visited.add(index)\n            dfs.visited.add(index)\n            for n in graph.get(index, []):\n                if n not in dfs.visited:\n                    dfs(n)\n\n            dfs.visited.remove(index)\n            return\n\n        dfs.visited = set()\n        for i in range(n):\n            if i not in visited:\n                dfs(i)\n                connected += 1\n\n        return connected\n\nhttps://leetcode.com/problems/course-schedule/\nfrom collections import defaultdict\n\nclass Solution:\n    def canFinish(self, numCourses: int, prerequisites: List[List[int]]) -> bool:\n        graph = defaultdict(list)\n        g_visited = set()\n\n        for c, p in prerequisites:\n            graph[c].append(p)\n\n        def dfs(i):\n            if i in visited:\n                return False\n\n            if i in g_visited:\n                return True\n\n            if i not in g_visited:\n                g_visited.add(i)\n\n            visited.add(i)\n\n            for j in graph[i]:\n                if not dfs(j):\n                    return False\n\n            visited.remove(i)\n            return True\n\n        for i in range(0, numCourses):\n            if i not in g_visited:\n                visited = set()\n                if not dfs(i):\n                    return False\n\n        return True\n\nhttps://leetcode.com/problems/parallel-courses/ \nThe important thing to understand is that the deepest path will require the longest sem \nThe question then boils down to finding this path. \nWe return max depth including the current node\nNote: Do not do normal DFS and depth tracking with a static variable. cache approach is efficient\nFollow up: try to simplify cycle finding and returning method\nclass Solution:\n    def minimumSemesters(self, n: int, relations: List[List[int]]) -> int:\n        self.valid = True\n        visited = set()\n        prereq = {}\n\n        for p, c in relations:\n            prereq[p] = prereq.get(p, []) + [c]\n\n        def dfs(course):\n            if not self.valid:\n                return -1\n\n            if course in visited:\n                self.valid = False\n                return -1\n\n            if course in cache:\n                return cache[course]\n\n            visited.add(course)\n\n            max_next = 0\n            for c in prereq.get(course, []):\n                max_next = max(max_next, dfs(c))\n\n            visited.remove(course)\n            cache[course] = max_next + 1\n            return cache[course]\n\n        cache = {}\n        max_depth = 0\n        for course in range(1, n + 1):\n            course_depth = dfs(course)\n\n            if not self.valid:\n                return -1\n\n            max_depth = max(max_depth, course_depth)\n\n        return max_depth\n\nhttps://leetcode.com/problems/reconstruct-itinerary/ \nWe need to store visited edges instead of visited nodes. \nEdges are stored as defaultdicts because the possibility of them repeating \nEdges are sorted because we need to return the result that comes first lexographically\nfrom collections import defaultdict\n\nclass Solution:\n    def findItinerary(self, tickets: List[List[str]]) -> List[str]:\n        graph = defaultdict(list)\n        edges = defaultdict(int)\n\n        self.itinerary = []\n\n        for s, d in tickets:\n            graph[s].append(d)\n            edges[(s, d)] += 1\n\n        for s in graph:\n            graph[s] = sorted(graph[s])\n\n        def traverse(current, path):\n            if self.itinerary:\n                return\n\n            if len(path) == (len(tickets) + 1):\n                self.itinerary = path[:]\n\n            for n in graph[current]:\n                if edges[(current, n)]:\n                    edges[(current, n)] -= 1\n                    traverse(n, path + [n])\n                    edges[(current, n)] += 1\n\n        traverse('JFK', ['JFK'])\n        return self.itinerary\n\nGreat question: Looks like a tree question but it's not! \nRealized that the edges can be bidirectional. Just needed to add visited array and augment the graph init loop \nTrees are just graphs minus the posibility of looping \nThought process similar to that of tree DFS. Fetch consolidated data from the leaves and calculate the current one (postorder). \nhttps://leetcode.com/problems/number-of-nodes-in-the-sub-tree-with-the-same-label/\nfrom collections import defaultdict\n\nclass Solution:\n    def countSubTrees(self, n: int, edges: List[List[int]], labels: str) -> List[int]:\n        result = [1] * n\n        graph = defaultdict(list)\n        visited = set()\n\n        for s, d in edges:\n            graph[s].append(d)\n            graph[d].append(s)\n\n        def traverse(node):\n            if node in visited:\n                return {}\n\n            visited.add(node)\n\n            if not graph[node]:\n                return {labels[node]: 1}\n\n            info = defaultdict(int)\n            for v in graph[node]:\n                for L, F in traverse(v).items():\n                    info[L] += F\n\n            info[labels[node]] += 1\n            result[node] = info[labels[node]]\n            return info\n\n        traverse(0)\n        return result\n\n"},"DataStructures/Graphs/TopologySort.html":{"url":"DataStructures/Graphs/TopologySort.html","title":"Topology Sort","keywords":"","body":"Topology Sort\n \nhttps://leetcode.com/problems/course-schedule-ii/\nfrom collections import deque, defaultdict\n\nclass Solution:\n    def findOrder(self, numCourses: int, prerequisites: List[List[int]]) -> List[int]:\n        graph = defaultdict(set)\n        incoming = defaultdict(set)\n        queue = deque()\n        u_set = set(range(0, numCourses))\n        topo = []\n\n        for c, p in prerequisites:\n            graph[c].add(p)\n            incoming[p].add(c)\n\n            if p in u_set:\n                u_set.remove(p)\n\n        for node in u_set:\n            queue.append(node)\n\n        while queue:\n            node = queue.popleft()\n            topo.append(node)\n\n            for nei in graph[node]:\n                incoming[nei].remove(node)\n\n                if not incoming[nei]:\n                    queue.append(nei)\n\n        return topo[::-1] if len(topo) == numCourses else []\n\nhttps://leetcode.com/problems/course-schedule-iv/\nfrom collections import defaultdict, deque\n\nclass Solution:\n    def checkIfPrerequisite(self, n: int, prerequisites: List[List[int]], queries: List[List[int]]) -> List[bool]:\n        graph = defaultdict(list)\n        incoming = defaultdict(set)\n        pre = defaultdict(set)\n\n        starts = set(range(0, n))\n        queue = deque()\n\n        for p, c in prerequisites:\n            graph[c].append(p)\n            incoming[p].add(c)\n\n            if p in starts:\n                starts.remove(p)\n\n        for s in starts:\n            queue.append(s)\n\n        while queue:\n            c = queue.popleft()\n\n            for n in graph[c]:\n                incoming[n].remove(c)\n                pre[n] = pre[n].union(pre[c].union(set([c])))\n\n                if not incoming[n]:\n                    queue.append(n)\n\n        return [c in pre[p] for p, c in queries]\n\n"},"DataStructures/Heap.html":{"url":"DataStructures/Heap.html","title":"Heap","keywords":"","body":"Heap questions:\nMin/Max k based on some metric\nIf you want to find min k, use max_heap, otherwise min_heap since you want to compare the incoming element with the top of heap \nOnly use the heap size of required number of elems: k \nIf it overflows, pop. Be careful about the signs in case of max_heap \nhttps://leetcode.com/problems/course-schedule-iii/ \nAmazing question. We push if a new course from courses (sorted by end times) if able to be pushed. \nIf not, our aim to make selections as compact as possible; so we displace the one with max duration (heap comes into picture here) and update T\nimport heapq\n\nclass Solution:\n    def scheduleCourse(self, courses: List[List[int]]) -> int:\n        T = 0\n        heap = []\n        s_courses = sorted(courses, key=lambda x: (x[1], x[0]))\n\n        for duration, last_day in s_courses:\n            t = T + duration\n\n            if t  duration:\n                    _d = -heapq.heappop(heap)\n                    heapq.heappush(heap, -duration)\n                    T -= (_d - duration)\n\n        return len(heap)\n\nhttps://leetcode.com/problems/closest-binary-search-tree-value-ii/\nif the length of heap == k, pop if the top of max_heap is greater than key\nimport heapq\n\nclass Solution:\n    def closestKValues(self, root: TreeNode, target: float, k: int) -> List[int]:\n        heap = []\n\n        def inorder(node):\n            if not node:\n                return\n\n            inorder(node.left)\n\n            if len(heap) == k and -heap[0][0] > abs(node.val - target):\n                heapq.heappop(heap)\n\n            if len(heap) \nhttps://leetcode.com/problems/furthest-building-you-can-reach/ \nGreat question! We allocate most diff b/w heights to ladders, obviously! (need heap to maintain that). \nWe only substract bricks only if heap is overflowing.\nimport heapq\n\nclass Solution:\n    def furthestBuilding(self, heights: List[int], bricks: int, ladders: int) -> int:\n        total = 0\n        heap, TOP = [], 0\n        bricks_left = bricks\n\n        for i, h in enumerate(heights[1:], start=1):\n            diff = (h - heights[i-1])\n            if diff  ladders:\n                bricks_left -= heapq.heappop(heap)\n\n            if bricks_left \nhttps://leetcode.com/problems/the-k-weakest-rows-in-a-matrix/ \nimport heapq\n\nclass Solution:\n    def kWeakestRows(self, mat: List[List[int]], k: int) -> List[int]:\n        heap = []\n        result = []\n\n        for index, row in enumerate(mat):\n            soldiers = 0\n            for p in row:\n                if p == 0:\n                    break\n                soldiers += 1\n\n            if len(heap) == k and soldiers >= -heap[0][0]:\n                continue\n\n            heapq.heappush(heap, (-soldiers, -index))\n\n            if len(heap) == k + 1:\n                heapq.heappop(heap)\n\n        while heap:\n            s, i = heapq.heappop(heap)\n            result = [-i] + result\n\n        return result\n\nhttps://leetcode.com/problems/k-closest-points-to-origin/ \nMaintain a heap of size K\nimport heapq\n\nclass Solution:\n    def kClosest(self, points: List[List[int]], K: int) -> List[List[int]]:\n        heap, result = [], []\n        DISTANCE = 0\n\n        for x, y in points:\n            current_distance = (x*x + y*y)\n\n            if len(heap) == K and ((-1) * heap[0][DISTANCE]) \nDjikstra\nhttps://leetcode.com/problems/path-with-minimum-effort/ \nDjikstra. Note where we're checking the existance in visited set. \nWe'll always traverse min heuristic path because heap. (pay attention to the heappush call)\nimport heapq\n\nclass Solution:\n    def minimumEffortPath(self, heights: List[List[int]]) -> int:\n        X, Y = len(heights), len(heights[0])\n        heap = [(0, 0, 0)] # d, x, y\n        visited = set()\n\n        while heap:\n            d, x, y = heapq.heappop(heap)\n\n            if (x, y) in visited:\n                continue\n\n            if x == (X-1) and y == (Y-1):\n                return d\n\n            visited.add((x, y))\n\n            for _x, _y in [(x+1,y),(x-1,y),(x,y+1),(x,y-1)]:\n                if not (0 \nhttps://leetcode.com/problems/merge-k-sorted-lists/\nimport heapq\n\nclass Solution:\n    def mergeKLists(self, lists: List[ListNode]) -> ListNode:\n        head = HEAD = None\n        heap, iterator = [], len(lists) + 1\n\n        for i, l in enumerate(lists):\n            if l:\n                heapq.heappush(heap, (l.val, i, l))\n\n        while heap:\n            min_val, _, l = heapq.heappop(heap)\n\n            if HEAD is None:\n                HEAD = ListNode(min_val)\n                head = HEAD\n            else:\n                HEAD.next = ListNode(min_val)\n                HEAD = HEAD.next\n\n            if l.next:\n                l = l.next\n                heapq.heappush(heap, (l.val, iterator, l))\n                iterator += 1\n\n        return head\n\nhttps://leetcode.com/problems/cheapest-flights-within-k-stops/\nimport heapq\n\nclass Solution:\n    def findCheapestPrice(self, n: int, flights: List[List[int]], src: int, dst: int, K: int) -> int:\n        heap = []\n        store = {}\n\n        for s, e, d in flights:\n            store[s] = store.get(s, []) + [(e, d)]\n\n        heapq.heappush(heap, (0, 0, src))\n\n        while heap:\n            price, hops, city = heapq.heappop(heap)\n\n            # we don't need `visited` array because of this constaint\n            if hops > (K+1):\n                continue\n\n            if city == dst:\n                return price\n\n            for d, cost in store.get(city, []):\n                heapq.heappush(heap, (price + cost, hops + 1, d))\n\n        return -1\n\nhttps://leetcode.com/problems/single-threaded-cpu/ \nExcellent question. Selecting min-heap is trivial but that gotcha here is that we need to sort them in an alternate array as well, injecting original indices into respective tasks. Based on T, push only that qualify into the heap. If the heap is empty and T is smaller than task_idx (the runner), prepare it for the next loop by assigning its starting value to T\nimport heapq\n\nclass Solution:\n    def getOrder(self, tasks: List[List[int]]) -> List[int]:\n        tasks_sorted = sorted([[task[0], task[1], index] for index, task in enumerate(tasks)])\n        task_idx = 0\n        heap, result = [], []\n\n        T = tasks_sorted[0][0]\n\n        while len(result) = tasks_sorted[task_idx][0]:\n                arrival, processing, index = tasks_sorted[task_idx]\n                heapq.heappush(heap, (processing, index))\n                task_idx += 1\n\n            if heap:\n                processing, index = heapq.heappop(heap)\n                result.append(index)\n                T += processing\n            elif not heap and task_idx \nhttps://leetcode.com/problems/find-k-closest-elements/\n\n\n\n"},"DataStructures/Grid.html":{"url":"DataStructures/Grid.html","title":"Grid","keywords":"","body":"Grid questions\nRight-down problems are generally DP \nThey follow overlapping substructures by default and optimal substructure trivially\nDFS:\n\nhttps://leetcode.com/problems/path-with-maximum-gold/\nhttps://leetcode.com/problems/longest-increasing-path-in-a-matrix/\nhttps://leetcode.com/problems/max-area-of-island/\n\nThings that need to be taken care of:\n\ndirections\nvisited set and its implementation: sets or grid modification? Boundaries and visited check\nCache: depends on the problem e.g. checkout longest increasing path in a matrix question above\nsometimes cache can be used for visited tracking\n\n\n\nLogic construction: \nKeep calm and think thoroughly. \nWhat's the sequence at each step? Do we start at an imaginary position before (0, 0) or on (0, 0)? \nWe the solution can start on any of the indices in the grid (ie we are running 2 loops: on X and Y), we do following:\ninclude current node -> dfs on children satisfying certain criteria -> return value to reflect the current node\n\nDFS should directly return the answer.\nhttps://leetcode.com/problems/word-search\nclass Solution:\n    def exist(self, board: List[List[str]], word: str) -> bool:      \n        X, Y = len(board), len(board[0])\n\n        def search(x, y, index):\n            if index == (len(word)-1):\n                return True\n\n            search.visited.add((x, y))\n\n            _dir = [(x+1, y), (x-1, y), (x, y+1), (x, y-1)]\n            for _x, _y in _dir:\n                if (0 \nBFS:\n\nRotten oranges \nTip: \nIn such problems, implied visited through input modification is faster than visited set \nSteps through queue element is faster than looping over queue size\neg. https://leetcode.com/problems/shortest-path-in-binary-matrix/\n\n\n\nhttps://leetcode.com/problems/shortest-path-in-a-grid-with-obstacles-elimination/\nfrom collections import deque\n\nclass Solution:\n    def shortestPath(self, grid: List[List[int]], k: int) -> int:\n        queue = deque()\n        k_left = k if grid[0][0] == 0 else k - 1\n        X, Y = len(grid), len(grid[0])\n\n        if X == 1 and Y == 1:\n            return 0\n\n        cache = {}\n        queue.append((0, 0, k_left))\n\n        steps = 0\n        while queue:\n            size = len(queue)\n\n            for _ in range(size):\n                x, y, k_left = queue.popleft()\n\n                prev_steps, prev_k = cache.get((x, y), (float('inf'), -1))\n                if prev_steps = k_left:\n                    continue\n                cache[(x, y)] = (steps, k_left)\n\n                directions = [(x+1,y), (x-1,y), (x,y+1), (x,y-1)]\n                for _x, _y in directions:\n                    if (0 = 0:\n                            if _x == (X-1) and _y == (Y-1):\n                                return steps + 1\n                            queue.append((_x, _y, temp))\n\n            steps += 1\n\n        return -1\n\nhttps://leetcode.com/problems/number-of-islands/\n# DFS solution\nclass Solution:\n    def numIslands(self, grid: List[List[str]]) -> int:\n        islands = 0\n        X, Y = len(grid), len(grid[0])\n\n        def traverse(x, y):\n            grid[x][y] = \"0\"\n\n            directions = [(x+1,y), (x,y+1), (x-1,y), (x,y-1)]\n            for x_dir, y_dir in directions:\n                if not (0 \n# BFS solution\nfrom collections import deque\n\nclass Solution:\n    def numIslands(self, grid: List[List[str]]) -> int:\n        X, Y = len(grid), len(grid[0])\n        count = 0\n\n        def traverse(_a, _b):\n            queue = deque()\n\n            queue.append((_a, _b))\n            grid[_a][_b] = \"0\"\n\n            while queue:\n                x, y = queue.popleft()\n\n                directions = [(x+1, y), (x-1, y), (x, y+1), (x, y-1)]\n\n                for _x, _y in directions:\n                    if (0 \nhttps://leetcode.com/problems/shortest-bridge/ \nPaint first island negative and then perform BFS to find the first positive integer \nAs always, one check before pushing onto the queue and one check after popleft-ing\nfrom collections import deque\n\nclass Solution:\n    def shortestBridge(self, A: List[List[int]]) -> int:\n        X = len(A)\n        Y = len(A[0])\n        self.result = X + Y\n        g_queue = deque()\n\n        def paint_island(x, y):\n            queue = deque()\n            queue.append((x, y))\n\n            while queue:\n                x, y = queue.popleft()\n\n                if A[x][y]  0:\n                            queue.append((_x, _y))\n\n\n        def build_bridge():\n            while g_queue:\n                x, y, converted = g_queue.popleft()\n\n                if A[x][y] == 2:\n                    continue\n\n                if A[x][y] == 0:\n                    A[x][y] = 2\n\n                directions = [(x-1,y), (x,y-1), (x+1,y), (x,y+1)]\n                for _x, _y in directions:\n                    if 0 \nhttps://leetcode.com/problems/shortest-path-to-get-food/\nfrom collections import deque\n\nclass Solution:\n    def getFood(self, grid: List[List[str]]) -> int:\n        X, Y = len(grid), len(grid[0])\n        visited = set()\n\n        queue = deque()\n        for x in range(X):\n            for y in range(Y):\n                if grid[x][y] == '*':\n                    queue.append((0, x, y))\n                    visited.add((x, y))\n                    break\n\n        while queue:\n            steps, x, y = queue.popleft()\n\n            directions = [(x+1, y), (x, y+1), (x-1, y), (x, y-1)]\n\n            for _x, _y in directions:\n                if (0 \nhttps://leetcode.com/problems/pacific-atlantic-water-flow/ \nNice question, we traverse reverse; from the ends to BFS inwards. >= to proceed. \nWe send init queues to the traverse function: this can get messy if not careful\nfrom collections import deque\n\nclass Solution:\n    def pacificAtlantic(self, heights: List[List[int]]) -> List[List[int]]:\n        X = len(heights)\n        Y = len(heights[0])\n\n        def traverse(queue):\n            visited = set()\n\n            while queue:\n                x, y = queue.popleft()\n\n                if (x, y) in visited:\n                    continue\n\n                visited.add((x, y))\n\n                _dir = [(x+1, y), (x-1, y), (x, y+1), (x, y-1)]\n                for _x, _y in _dir:\n                    if 0 = heights[x][y]:\n                            if (_x, _y) not in visited:\n                                queue.append((_x, _y))\n\n            return visited\n\n        pacific_queue = deque()\n        atlantic_queue = deque()\n\n        for x in range(X):\n            pacific_queue.append((x, 0))\n            atlantic_queue.append((x, Y-1))\n\n        for y in range(Y):\n            pacific_queue.append((0, y))\n            atlantic_queue.append((X-1, y))\n\n        pacific = traverse(pacific_queue)\n        atlantic = traverse(atlantic_queue)\n\n        return [[x, y] for x, y in pacific if (x, y) in atlantic]\n\nMisc\nhttps://leetcode.com/problems/spiral-matrix/\nclass Solution:\n    def spiralOrder(self, matrix: List[List[int]]) -> List[int]:\n        \"\"\"\n        algorithm:\n        Top side would be appended completely.\n        Rest 3 will form a open bucket-like structure.\n        \"ownership\" of the top-right: top row | bottom-right: right col\n        top-left corner is obvious, bottom-left doesn't matter\n\n        implementation:\n        We maintain row_start, row_end, col_start, col_end.\n        Update them after the whole traversal is done.\n        After each run, make sure they are ready for the next one.\n        Run it until row_start  row_start:\n                for c in range(col_end-1, col_start, -1):\n                    result.append(matrix[row_end][c])\n\n            # left\n            # This if condition is critical, avoid repetitons for single col matrices\n            if col_end > col_start:\n                for r in range(row_end, row_start, -1):\n                    result.append(matrix[r][col_start])\n\n            row_start += 1\n            col_start += 1\n\n            row_end -= 1\n            col_end -= 1\n\n        return result\n\nRotate it layer by layer. Inspired from the solution of the previous one.\nclass Solution:\n    def rotate(self, matrix: List[List[int]]) -> None:\n        \"\"\"\n        Do not return anything, modify matrix in-place instead.\n        \"\"\"\n\n        n = len(matrix)\n\n        # row-start, column-start\n        r_s, c_s = 0, 0\n        # row-end, column-end\n        r_e, c_e = n-1, n-1\n\n        # 1X1 square already rotated\n        while n > 1:\n            # stop before the other corner\n            for i in range(n-1):\n                targets = (\n                            # bottom-left going upwards\n                            matrix[r_e-i][c_s],\n                            # top-left going rightwards\n                            matrix[r_s][c_s+i],\n                            # top-right going downwards\n                            matrix[r_s+i][c_e],\n                            # bottom-right going leftwards\n                            matrix[r_e][c_e-i]\n                          )\n                matrix[r_s][c_s+i], matrix[r_s+i][c_e], matrix[r_e][c_e-i], matrix[r_e-i][c_s] = targets\n\n            # move on to the inner square\n            r_s += 1\n            c_s += 1\n            r_e -= 1\n            c_e -= 1\n\n            # reduce it by 2; not 1. Both r_s and c_e are contracting\n            n -= 2\n\n        return matrix\n\nhttps://www.hackerrank.com/challenges/2d-array/problem?h_l=interview&playlist_slugs%5B%5D=interview-preparation-kit&playlist_slugs%5B%5D=arrays\ndef hourglassSum(arr):\n    # Write your code here\n    max_sum = float('-inf')\n    X, Y = len(arr), len(arr[0])\n\n    for x in range(X-2):\n        for y in range(Y-2):\n            _sum = arr[x][y] + arr[x][y+1] + arr[x][y+2] + \\\n                   arr[x+1][y+1] + \\\n                   arr[x+2][y] + arr[x+2][y+1] + arr[x+2][y+2]\n\n            max_sum = max(max_sum, _sum)\n\n    return max_sum\n\n"},"Miscellaneous/Palindrome.html":{"url":"Miscellaneous/Palindrome.html","title":"Palindrome","keywords":"","body":"Palindrome\nhttps://leetcode.com/problems/longest-palindromic-substring/ \nExpand from the center.  \nFor every index, 2 palindromes possible: \n\nThat character being a center (odd length) \nThat character being a left center (even length) \nNow, write a util function and expand with l and r until string end and as \nlong as the characters match. \nmax function also supports key like sorted function\nclass Solution:\n def longestPalindrome(self, s: str) -> str:\n     result = \"\"\n\n     def find_len(l, r):\n         while l >= 0 and r \n\n\nhttps://leetcode.com/problems/valid-palindrome-ii/ \nCheck characters one by one, if they are same, adjust start and end \nIf they mismatch, direct check with string slices\nclass Solution:\n    def validPalindrome(self, s: str) -> bool:\n        start, end = 0, len(s)-1\n\n        while start \nSolution using start and end\nclass Solution:\n    def validPalindrome(self, s: str) -> bool:\n        left, right = 0, len(s)-1\n\n        def isPalindrome(start, end):\n            while start \n"},"Miscellaneous/Stocks.html":{"url":"Miscellaneous/Stocks.html","title":"Stocks","keywords":"","body":"Stocks\n1 transaction\nhttps://www.geeksforgeeks.org/maximum-difference-between-two-elements/ \nKeep track of the minimum element found so far, calculate the difference between the current and minimum found so far. \nUpdate the maximum difference if necessary.\nAt most 2 transactions\nhttps://www.geeksforgeeks.org/maximum-profit-by-buying-and-selling-a-share-at-most-twice/ \nA similar approach to one transaction limit, maintain the minimum till that element and similar for i + 1 and till the end of the List.\nAny number of transactions\nhttps://www.geeksforgeeks.org/stock-buy-sell/ \nLocal minima List[i] = List[i + 1]\nBuy at local minima and sell at local maxima\nAny number of transactions with transaction fee\n\nCan use this for any number of transactions with fee == 0 \nhttps://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/ \nAt the end of the i-th day, we maintain cash, the maximum profit we could have if we did not have a share of stock, and hold, the maximum profit we could have if we owned a share of stock.\n\nTo transition from the i-th day to the i+1-th day, we either sell our stock \ncash = max(cash, hold + prices[i] - fee) or \nbuy a stock \nhold = max(hold, cash - prices[i]) \nAt the end, we want to return cash. We can transform cash first without using temporary variables because selling and buying on the same day can't be better than just continuing to hold the stock.\nclass Solution(object):\n    def maxProfit(self, prices, fee):\n        cash, hold = 0, -prices[0]\n        for i in range(1, len(prices)):\n            cash = max(cash, hold + prices[i] - fee)\n            hold = max(hold, cash - prices[i])\n        return cash\n\nK number of transactions\nhttps://leetcode.com/problems/best-time-to-buy-and-sell-stock-iv/discuss/54117/Clean-Java-DP-solution-with-comment \nDynamic programming\n"},"Miscellaneous/Intervals.html":{"url":"Miscellaneous/Intervals.html","title":"Intervals","keywords":"","body":"Interval problems\nTemplate for simple questions like: \n\n435 Non-overlapping Intervals \n56 Merge Intervals \n252 Meeting Rooms\n253 Meeting Rooms II \nhttps://leetcode.com/problems/interval-list-intersections/\nhttps://leetcode.com/problems/meeting-scheduler/\nhttps://leetcode.com/problems/partition-labels/ (secretly an interval problem; intervals are sorted automatically once you create because of the way we do them)\n\nFor trivial questions, we sort based on the starting time. \nhttps://leetcode.com/problems/non-overlapping-intervals/\nclass Solution:\n    def eraseOverlapIntervals(self, intervals: List[List[int]]) -> int:\n        intervals = sorted(intervals, key = lambda x: x[0])\n        min_end = float('-inf')\n        removed = 0\n\n        for start, end in intervals:\n            if start >= min_end:\n                min_end = end \n            else:\n                removed += 1\n                min_end = min(min_end, end)\n\n        return removed\n\nhttps://leetcode.com/problems/minimum-number-of-arrows-to-burst-balloons/\nclass Solution:\n    def findMinArrowShots(self, points: List[List[int]]) -> int:\n        intervals = sorted(points, key = lambda x: x[0])\n        min_end = float('-inf')\n        arrows = 0\n\n        for start, end in intervals:\n            if start \nhttps://leetcode.com/problems/meeting-rooms-ii/ \nWe just need events actually. If one comes, need a room if anyone leaves, required rooms decrease. \nConvert into a flat list, closing times should be changed into negative. IMP: for sorting to get the events, sort based on absolute vals and tiebreaker should be a sign. \nNegatives should be given a preference.\nclass Solution:\n    def minMeetingRooms(self, intervals: List[List[int]]) -> int:\n        n = len(intervals)\n\n        intervals = [((-1)**i) * interval[i] for interval in intervals for i in range(2)]\n        intervals = sorted(intervals, key=lambda x: (abs(x), x))\n\n        rooms, max_rooms = 0, 1\n\n        for event in intervals:\n            if event >= 0:\n                rooms += 1\n            else:\n                rooms -= 1\n\n            max_rooms = max(max_rooms, rooms)\n\n        return max_rooms\n```s\nAnother variation of this problem: \nhttps://leetcode.com/problems/remove-covered-intervals/\n```py\nclass Solution:\n    def removeCoveredIntervals(self, intervals: List[List[int]]) -> int:\n        # sort based on the start time and prioritize the longer interval\n        intervals = sorted(intervals, key = lambda x: (x[0], -x[1]))\n        current = intervals[0]\n        covered = 0\n\n        for s, e in intervals[1:]:\n                if current[0] = e:\n                    covered += 1\n                else:\n                    current = [s, e]\n\n        return len(intervals) - covered\n\nhttps://leetcode.com/problems/merge-intervals/ \nIn case of overlap, stretch the previous one (last one in the intervals list); do not push\nclass Solution:\n    def merge(self, intervals: List[List[int]]) -> List[List[int]]:\n        if not intervals:\n            return intervals\n\n        intervals = sorted(intervals, key = lambda x: x[0])\n        result = []\n\n        for start, end in intervals:\n            if not result or (start > result[-1][1]):\n                result.append([start, end])\n            else:\n                result[-1][1] = max(result[-1][1], end)\n\n        return result\n\nhttps://leetcode.com/problems/interval-list-intersections/\nclass Solution:\n    def intervalIntersection(self, A, B):\n        i, j, START, END = 0, 0, 0, 1\n        max_start, min_end = float('-inf'), float('inf')\n        result = []\n\n        while i \nhttps://leetcode.com/problems/insert-interval/ \nVery similar to merge intervals. In case of overlap, do not push to the result; stretch the newInterval\nclass Solution:\n    def insert(self, intervals: List[List[int]], newInterval: List[int]) -> List[List[int]]:\n        result = []\n        n_s, n_e = newInterval\n        pushed = False\n\n        for s, e in intervals:\n            if e \nhttps://leetcode.com/problems/course-schedule-iii/ \nSorting + max_heap \nSort based on ending times, accept courses if possible \nIf we can't check if we can remove something from the accepted set and select the one which makes our time compact\nhttps://leetcode.com/problems/partition-labels/\nclass Solution:\n    def partitionLabels(self, S: str) -> List[int]:\n        # find intervals\n        # merge intersecting intervals\n        intervals = {}\n        LAST_INTERVAL, END = -1, 1\n        result = []\n\n        for i, s in enumerate(S):\n            if s in intervals:\n                intervals[s][END] = i\n            else:\n                intervals[s] = [i, i]\n\n        intervals = intervals.values()\n\n        for s, e in intervals:\n            if not result or result[LAST_INTERVAL][END] \nhttps://leetcode.com/problems/missing-ranges/ \nInteresting question. Iterate over array and compare to the prev elem, [prev + 1:current - 1] is the missing range. Be careful about the edge case of empty input\nclass Solution:\n    def findMissingRanges(self, nums: List[int], lower: int, upper: int) -> List[str]:\n        if not nums:\n            return [str(lower)] if lower == upper else [str(lower) + \"->\" + str(upper)]\n\n\n        def addToResult(start, end):\n            if start == end:\n                result.append(str(start))\n            elif start ' + str(end))\n\n        result = []\n        for i, n in enumerate(nums):\n            if i == 0:\n                start = lower\n                end = nums[0] - 1\n                addToResult(start, end)\n                continue\n\n            start = nums[i-1] + 1\n            end = n - 1\n\n            addToResult(start, end)\n\n        start = nums[-1] + 1\n        end = upper\n\n        addToResult(start, end)\n\n        return result\n\nhttps://leetcode.com/problems/meeting-scheduler/ \nJust find the first intersection with enough duration width \nHeap solution is also nice. Check LeetCode solutions\nclass Solution:\n    def minAvailableDuration(self, slots1: List[List[int]], slots2: List[List[int]], duration: int) -> List[int]:\n        i = j = 0\n        slots1 = sorted(slots1)\n        slots2 = sorted(slots2)\n\n        while i = duration:\n                    return [max_start, max_start + duration]\n\n            if min_end == slots1[i][1]:\n                i += 1\n            else:\n                j += 1\n\n        return []\n\n"},"Miscellaneous/Parenthesis.html":{"url":"Miscellaneous/Parenthesis.html","title":"Parenthesis","keywords":"","body":"Parenthesis questions\n\nhttps://leetcode.com/problems/valid-parentheses/\nhttps://leetcode.com/problems/generate-parentheses/\nhttps://leetcode.com/problems/valid-parenthesis-string/\nhttps://leetcode.com/problems/minimum-remove-to-make-valid-parentheses/\nhttps://leetcode.com/problems/minimum-add-to-make-parentheses-valid/\nhttps://leetcode.com/problems/remove-outermost-parentheses/\n\nValid parenthesis \nSimple idea. Push to the stack if it's an open one; pop if it's a matching closing one. \nIf the stack is empty and we encounter a closed one, that's an instant False\nGenerate parentheses\nKeep a count of open and closed ones. \nSuccess cases: string length 2  n and stack == 0 \nFailure cases: string length 2  n and stack != 0 OR stack  n \nWe just backtrack:\n            backtrack(current + '(', stack + 1)\n            backtrack(current + ')', stack - 1)\n\nValid parenthesis string\nBacktrack different possibilities \n'*' comes in every backtrack call based on character \nTop-down backtrack is very intuitive\n\n            memo[(i, stack)] = False\n\n            if s[i] in ['(', '*']:\n                memo[(i, stack)] = memo[(i, stack)] or \\\n                                   backtrack(i + 1, stack + 1)\n\n            if s[i] == '*':\n                memo[(i, stack)] = memo[(i, stack)] or \\\n                                   backtrack(i + 1, stack)\n\n            if s[i] in [')', '*']:\n                if not stack:\n                    return memo[(i, stack)]\n\n                memo[(i, stack)] = memo[(i, stack)] or \\\n                                   backtrack(i + 1, stack - 1)\n\nhttps://leetcode.com/problems/generate-parentheses/\nclass Solution:\n    def generateParenthesis(self, n: int) -> List[str]:\n        result = []\n        limit = 2 * n\n\n        def backtrack(index=0, current=\"\", _open=0, _close=0):\n            if index == limit:\n                if _open == _close:\n                    result.append(current)\n                return\n\n            if (_open > n) or (_close > n) or (_close > _open):\n                return\n\n            # open bracket\n            backtrack(index+1, current + '(', _open+1, _close)\n\n            # close bracket\n            backtrack(index+1, current + ')', _open, _close+1)\n\n        backtrack()\n        return result\n\nhttps://leetcode.com/problems/minimum-remove-to-make-valid-parentheses/ \nThe ones that need to be removed are:\n\nclose brakets that come when there was no open one before it \nopen ones that don't have a close one after them\nJust need to find them and replace with an empty string. \nSet is interchangable with list here because we don't care what open bracket a close one matches with; we'd just pop\nclass Solution:\n def minRemoveToMakeValid(self, s: str) -> str:\n     open_brackets = []\n     s_list = [c for c in s]\n\n     for i, c in enumerate(s):\n         if c == '(':\n             open_brackets.append(i)\n             s_list[i] = ''\n         elif c == ')':\n             if open_brackets:\n                 s_list[open_brackets.pop()] = '('\n                 s_list[i] = ')'\n             else:\n                 s_list[i] = ''\n\n     return ''.join(s_list)\n\nhttps://leetcode.com/problems/minimum-add-to-make-parentheses-valid/ \nA closed bracket without a corresponding opening one, can never to balanced afterwards, irrespective of what comes after \nAn open bracket can be matched by a closed one immediately.\nclass Solution:\n def minAddToMakeValid(self, S: str) -> int:\n     open_brackets = 0\n     closed_brackets = 0\n\n     for i, s in enumerate(S):\n         if s == '(':\n             open_brackets += 1\n         else:\n             if not open_brackets:\n                 closed_brackets += 1\n             else:\n                 open_brackets -= 1\n\n     return open_brackets + closed_brackets\n\nhttps://leetcode.com/problems/remove-outermost-parentheses/\nclass Solution:\n def removeOuterParentheses(self, S: str) -> str:\n     stack = []\n     start = 0\n     result = \"\"\n\n     for i, c in enumerate(S):\n         if not stack:\n             start = i\n\n         if c == '(':\n             stack.append(c)\n         else:\n             stack.pop()\n\n         if not stack:\n             result += S[start + 1: i]\n\n     return result\n\nhttps://leetcode.com/problems/remove-invalid-parentheses/ \nThis is a combination of two problems: first identify the number of removals required and then generate strings with backtracking \nnet is basically number of open brackets - number of closed brackets \nThen it is just a matter of pruning the tree and finding the optimal solution\nclass Solution:\n def removeInvalidParentheses(self, s: str) -> List[str]:\n     net, removal = 0, 0\n     result = set()\n     visited = set()\n\n     for c in s:\n         # find the minimum number of removals to be made\n         if c == '(':\n             net += 1\n         elif c == ')':\n             net -= 1\n\n         if net == -1:\n             net = 0\n             removal += 1\n     removal += net\n\n     def construct(index, net, string, removals):\n         if (string, removals) in visited:\n             return \n         else:\n             visited.add((string, removals))\n\n         if removals == -1:\n             return\n\n         if index == len(s):\n             # we found the solution\n             if net == 0 and removals == 0:\n                 result.add(string)\n             return\n\n         if s[index] == '(':\n             # include open bracket\n             construct(index + 1, net + 1, string + '(', removals)\n\n         if s[index] == ')':\n             # include \n             if net > 0:\n                 construct(index + 1, net - 1, string + ')', removals)\n\n         if s[index] in ['(', ')']:\n             # exclude brackets\n             construct(index + 1, net, string, removals - 1)\n         else:\n             # normal character\n             construct(index + 1, net, string + s[index], removals)\n\n     construct(0, 0, '', removal)\n     return result\n\nhttps://leetcode.com/problems/longest-valid-parentheses/ \nstart from this state: [-1] \nOnly unbalanced state will empty the stack, push that index to be the boundary \nclass Solution:\n def longestValidParentheses(self, s: str) -> int:\n     stack = [-1]\n     max_len = 0\n\n     for i, c in enumerate(s):\n         if c == '(':\n             stack.append(i)\n             continue\n\n         stack.pop()\n         if stack:\n             max_len = max(max_len, i - stack[-1])\n         else:\n             stack.append(i)\n\n     return max_len\n\nhttps://leetcode.com/problems/score-of-parentheses/ \nIt's given that it's balanced. So, if we encounter ), there will always be an opening bracket corresponding to it. We try to find that. Until we find it, just keep on popping and adding, then pop the opening bracket and substitute with (2 * sum of all popped ones) or 1 if the sum if zero.\nclass Solution:\n def scoreOfParentheses(self, S: str) -> int:\n     # [..(] )  = [..1]\n     # [.(c1 c2 c3] )  = [.2*(c1+c2+c3)]\n\n     stack = []\n\n     for i, c in enumerate(S):\n         if c == '(':\n             stack.append('(')\n             continue\n\n         current = 0\n         while stack[-1] != '(':\n             val = stack.pop()\n             current += val\n\n         stack.pop()\n         if current == 0:\n             stack.append(1)\n         else:\n             stack.append(current * 2)\n\n     return sum(stack)\n\n\n\n"},"Miscellaneous/AlienDictionary.html":{"url":"Miscellaneous/AlienDictionary.html","title":"Alien Dictionary","keywords":"","body":"Alien Dictionary\nhttps://leetcode.com/problems/verifying-an-alien-dictionary/ \nReturn True at the end, just look for an out-of-order case\nclass Solution:\n    def isAlienSorted(self, words: List[str], order: str) -> bool:\n        seq = {c: i for i, c in enumerate(order)}\n\n        for i, word in enumerate(words[:len(words)-1]):\n            j = 0\n            while j  seq[words[i+1][j]]:\n                    return False\n                elif seq[word[j]]  len(words[i+1]):\n                    return False\n\n        return True\n\n"},"Miscellaneous/InterestingMiscellaneous.html":{"url":"Miscellaneous/InterestingMiscellaneous.html","title":"Interesting Miscellaneous","keywords":"","body":"Need to find nth smallest or largest\nUse max or min-heap or partial sort: quicksort variation \nA better way to achieve this is to create a heap of size k (target) first. For finding max k, use min-heap and vice-versa. \nhttps://leetcode.com/problems/kth-largest-element-in-an-array/\nLRU cache:   https://leetcode.com/problems/lru-cache/ \nSimple dict py-3\nhttps://leetcode.com/problems/maximum-area-of-a-piece-of-cake-after-horizontal-and-vertical-cuts/\n# just return max height * max width\nclass Solution:\n    def maxArea(self, h: int, w: int, horizontalCuts: List[int], verticalCuts: List[int]) -> int:\n        h_sorted = sorted(horizontalCuts)\n        v_sorted = sorted(verticalCuts)\n\n        mod = 10**9 + 7\n\n        max_height = 0\n        for i, height in enumerate(h_sorted[1:], start=1):\n            max_height = max(max_height, height - h_sorted[i-1])\n\n        # first and last boundary cut \n        max_height = max(max_height, h_sorted[0], h - h_sorted[-1])\n\n        max_width = 0\n        for i, width in enumerate(v_sorted[1:], start=1):\n            max_width = max(max_width, width - v_sorted[i-1])\n\n        # first and last boundary cut\n        max_width = max(max_width, v_sorted[0], w - v_sorted[-1])\n\n        return (max_height * max_width) % mod\n\nLooks simple but greedy\nhttps://leetcode.com/problems/non-decreasing-array/ \n3 cases: (make sure to handle equality condition properly since it's \"non-decreasing\") \nI chance to minimize something, minimize it to absolute best you can. (i-2) also comes into picture!\nclass Solution:\n    def checkPossibility(self, nums: List[int]) -> bool:\n        changes = 1\n\n        for i, n in enumerate(nums[1:], start=1):\n            if nums[i-1] > nums[i]:\n\n                if changes == 0:\n                    return False\n\n                if (i-2) \nPriority queues\n1383: https://leetcode.com/contest/weekly-contest-180/problems/maximum-performance-of-a-team/ \nSolution: https://leetcode.com/problems/maximum-performance-of-a-team/discuss/539797/C%2B%2BPython-Priority-Queue\n857: https://leetcode.com/problems/minimum-cost-to-hire-k-workers/\n1390: https://leetcode.com/problems/four-divisors/  \nSnippet to find all divisors: floor(sqrt(num)) + 1 part is important\ndivisors = set()\nfor i in range(1, floor(sqrt(num)) + 1):\n    if num % i == 0:\n        divisors.add(i)\n        divisors.add(num // i)\n\n31: https://leetcode.com/problems/next-permutation/ \nFind the next just greater element, swap elements and reverse the remaining array \nVisualize the whole array and our case\nclass Solution:\n    def nextPermutation(self, nums: List[int]) -> None:\n        \"\"\"\n        Do not return anything, modify nums in-place instead.\n        \"\"\"\n        n = len(nums)\n        i = n - 2\n\n        while i >= 0 and nums[i] >= nums[i+1]:\n            i -= 1\n\n        # non-increasing array\n        if i == -1:\n            nums.reverse()\n            return 1\n\n        j = i + 1\n        while j  nums[i]:\n            j += 1\n        j -= 1\n\n        nums[i], nums[j] = nums[j], nums[i]\n\n        l = i + 1\n        r = n - 1\n        while l \n621: https://leetcode.com/problems/task-scheduler/ \nMake it compact. Consider all most frequency elems as a single character. \nDistance b/w them? of course n from the first one to make it as compact as possible. \nIMP: If it's completely compact, we would never need any idle one. Just open up and absolve. \nNow just try to find the number of idle ones.\nCount\nclass Solution:\n    def leastInterval(self, tasks: List[str], n: int) -> int:\n        freq = {}\n        max_freq, max_freq_count = 0, 0\n\n        for i, task in enumerate(tasks):\n            if task in freq:\n                freq[task] += 1\n            else:\n                freq[task] = 1\n\n            if max_freq == freq[task]:\n                max_freq_count += 1\n            elif max_freq = n:\n            # completely compact\n            return len(tasks)\n\n        slots_available = (n - (max_freq_count - 1)) * (max_freq - 1)\n        tasks_remaining = len(tasks) - max_freq * max_freq_count\n\n        if slots_available \nFinding the actual order:\nA really good question. Used 3 different data structures. \nFirst of all, we need an always sorted list of tasks and their remaining frequency. \ndict + max-heap is the best combo here \nThen, the general algo for each cycle of steps (n + 1) is as follows: \n\nPop from the heap and schedule it.\nPush this to queue if it's remaining freq is > 1 (careful with the negative sign as it's a max-heap)\nIncrease the count by 1\nIf there's nothing in the heap AND the queue, return the result count\n\nimport heapq\n\nclass Solution:\n    def leastInterval(self, tasks: List[str], n: int) -> int:\n        freq = dict()\n        heap = []\n        queue = []\n        count = 0\n        result = []\n\n        for T in tasks:\n            if freq.get(T, 0):\n                freq[T] += 1\n            else:\n                freq[T] = 1\n\n        for t, c in freq.items():\n            heapq.heappush(heap, (-c, t))\n\n        while heap:\n            for i in range(0, n + 1):\n                if heap:\n                    c, t = heapq.heappop(heap)\n                    result.append(t)\n\n                    if c != -1:    \n                        queue.append((c + 1, t))\n                    count += 1\n\n                    if not heap and not queue:\n                        print(\">> loop exit\")\n                        return count\n                else:\n                    count += 1\n                    result.append('-')\n\n            while queue:\n                heapq.heappush(heap, queue.pop())\n\n        return count\n\nSort colors\nhttps://leetcode.com/explore/challenge/card/june-leetcoding-challenge/540/week-2-june-8th-june-14th/3357/ \nThe trick is to maintain all-red pointer on its left, all-blue on its right and an iterator to just swap with red one if it's red and same for blue. Stop if you encounter the blue one.\nSimilar \nhttps://leetcode.com/problems/move-zeroes/submissions/\nclass Solution:\n    def moveZeroes(self, nums: List[int]) -> None:\n        \"\"\"\n        Do not return anything, modify nums in-place instead.\n        \"\"\"\n        n = len(nums)\n        i = 0\n        non = 0\n\n        while i \nhttps://leetcode.com/problems/find-all-duplicates-in-an-array/ \nOne of those questions where you'd have to read question description properly.\nclass Solution:\n    def findDuplicates(self, nums: List[int]) -> List[int]:\n        result = []\n\n        for i, n in enumerate(nums):\n            if nums[abs(n) - 1] \nhttps://leetcode.com/explore/challenge/card/january-leetcoding-challenge-2021/582/week-4-january-22nd-january-28th/3612/ \nOnly 3 possiblities. If length diff > 1, not able to equilize using one change. \nTwo loops for length diff == 1 and 0\nclass Solution:\n    def isOneEditDistance(self, s: str, t: str) -> bool:\n        if abs(len(s)-len(t)) > 1:\n            return False\n\n        if abs(len(s)-len(t)) == 1:\n            i = 0\n            while i \nhttps://leetcode.com/problems/squirrel-simulation/solution/ \nGreat question. Distance finding is simple. Visualize how that'll happen. \nThe first visit should be to the node closest to squirrel and farthest to tree \ntotal - dist_t[m_idx] + dist_s[m_idx] == total - m \nclass Solution:\n    def minDistance(self, height: int, width: int, tree: List[int], squirrel: List[int], nuts: List[List[int]]) -> int:\n        # distances from squirrel\n        # distances from tree\n        # max(t[x]-s[x])\n\n        s, t = [[0] * len(nuts)] * 2\n        m, m_idx = float('-inf'), 0\n        total = 0\n\n        for i, n in enumerate(nuts):\n            x = n[0]\n            y = n[1]\n\n            dist_t = abs(tree[0] - x) + abs(tree[1] - y)\n            dist_s = abs(squirrel[0] - x) + abs(squirrel[1] - y)\n\n            total += 2 * dist_t\n            dist_diff = (dist_t-dist_s)\n            if m \nRecursion\nhttps://leetcode.com/problems/powx-n/ \nCalculate only half and based on power's divisibility by 2, take action. \nStop when power is 0\nclass Solution:\n    def myPow(self, x: float, n: int) -> float:\n        if n \nhttps://leetcode.com/problems/broken-calculator/ \nProof: https://leetcode.com/problems/broken-calculator/discuss/236565/Detailed-Proof-Of-Correctness-Greedy-Algorithm\nclass Solution:\n    def brokenCalc(self, X: int, Y: int) -> int:\n        steps = 0\n\n        while Y > X:\n            if Y % 2:\n                Y += 1\n            else:\n                Y //= 2\n\n            steps += 1\n\n        return steps + (X-Y)\n\nhttps://leetcode.com/problems/jump-game-ii/ \nCheck the spread after each step. Start should be the beginning of the spread and end should be the max one can go after taking xth step.\nclass Solution:\n    def jump(self, nums: List[int]) -> int:\n        n = len(nums)\n        start = end = 0\n        steps = 0\n\n        while end \nhttps://leetcode.com/problems/jump-game/ \nSimilar idea to jump-game-ii, if max_end == end at the end of our cycle, return False\nclass Solution:\n    def canJump(self, nums: List[int]) -> bool:\n        start = 0\n        end = 0\n        n = len(nums)\n\n        if n in [0, 1]:\n            return True\n\n        while True:\n            max_end = end\n\n            for i in range(start, end+1):\n                max_end = max(max_end, i + nums[i])\n\n            if max_end == end:\n                return False\n            elif max_end >= (n-1):\n                return True\n\n            start = end + 1\n            end = max_end\n\n        return True\n\nhttps://leetcode.com/problems/number-of-equivalent-domino-pairs/ \nIn such cases, instead of traversing the store backwards to stop at store_object_idx , run the loop backwards for efficiency. Makes life a lot easier. \nAlso, one critical edge case here is that f==s, one can miss that\nclass Solution:\n    def numEquivDominoPairs(self, dominoes: List[List[int]]) -> int:\n        store = {}\n        pairs = 0\n\n        for f, s in dominoes[::-1]:\n            pairs += store.get((f, s), 0)\n\n            if f != s:\n                pairs += store.get((s, f), 0)\n\n            store[(f, s)]  = store.get((f, s), 0) + 1\n\n        return pairs\n\n"},"Tricks/":{"url":"Tricks/","title":"Tricks","keywords":"","body":"Tricks\nPrefix array and sum calculation\n        P = [0]\n\n        for x in A: P.append(P[-1] + x)\n        def sum_and_number_of_elements(x, y):\n            # _IMP:_ x should be the start of slice+1; same for y\n            return (P[j] - P[i]), (j - i)\n\nRather than doing all sorts of complicated stuff with // +- 1, just use math \nimport math\n\nmath.ceil\nmath.floor\n\nTo compare references, do it with is \nkey in min/max/sorted should get a function. You can create a lambda if required. \nMake a comparison function and use it with lambda. (check Multiple Arrays section)\nSort list with a tie-breaker\nExample: https://leetcode.com/problems/remove-covered-intervals/\nAlso look at tricky sorting in Algorithms section\nsorted(list, key = lambda x: (x[0], -x[1]))\n\nSecond element is a tie-breaker. \nConvert list into a dictionary\n{item[0]: item[1:] for item in list}\n\nSort dictionary by value\n{k: v fo r k, v in sorted(x.items(), key=lambda item: item[1])}\n\nMost frequent in an array or a string\nfrom collections import Counter\nC = Counter(list/string)\nC.most_common(n) #returns a list of top n\n\nOr we can just keep track of the most frequent element while going throught the list\nheapq insert with priority\nimport heapq\nheap = []\nheapq.heappush(heap, (priority, item))\n\nheapq also has a merge function\nWe can use this to merge sorted lists\nfrom heapq import merge\nmerge(list1, list2)\n\nEfficient looping:\ns can be a list or a string\nfor i, c in enumerate(s):\n    # i is index\n    # c is s[i]\n\nlist.insert(index, elem)\nThe last one gets the priority\nTricky Sorting\npython sorted function can be fed a custom comparator. \nComing up with a comparator is the most important part.\nfunctools.cmp_to_key(comparator) can be used as a key to make this work.\nhttps://leetcode.com/problems/largest-number/\nimport functools\n\nclass Solution:\n    def largestNumber(self, nums: List[int]) -> str:\n        comparator = lambda x, y: 1 if x+y > y+x else -1 if x+y \n"},"BehavioralQuestions.html":{"url":"BehavioralQuestions.html","title":"Behavioral Questions","keywords":"","body":"Behavioural\nAlso check the internships 2022 Google Sheet\n\nWhat is the feedback you get for your work and how had you improve?\nWhenever I'm working on important projects, I try to seek constructive feedback from my peers and managers. I think it's an absolute necessity; it improves the quality of the work more often than not. Whenever I receive a feedback, I get more clarifications and destruct it so nothing gets lost in the translation. \nThinking on a broader scale when designing an application. Shouldn't have blinkers just about finishing a project.\n\n\nWhat is one weakness you have?\nI would say \"restlessness\" is the one weakness I have. Once I start working on some task or a project i tend to neglect non-work stuff which, to be fair, isn't healthy mentally and physically. It does have its benefits given I intend to work in fast-paced environments where i can put this restlessness to use but there's also another side to it. Prioritizing, planning and balancing that plan with actions is equally important -- A person can only have so much bandwidth. I've started prioritizing and plan my day accordingly.\n\n\nWhat kind of work environment do you flourish in?\nI find the impact of my work motivational. I think I'll flourish in a fast-paced, team-work based environment focused on innovation and creativity. Given my curious nature, I relish collaborating with Subject Matter Experts and glean important aspects of software engineering from their \"wisdom of production\".\n\n\nHow did you find out about this opportunity and what interested you?\nI have a couple of years of experience in the domain of High Frequency Trading. I am very much aware of IMC's presence in this space and I admire the culture here.\nI've heard great things about the firm but the one strikes me the most is the fact that organizational hierarchy doesn't stop one from bringing their innovative ideas to the table. I think this kind environment will be very conducive for my growth as a software professional.\n\n\nWhy did you choose your college?\nGeorgia Tech well known to be the best graduate school for computing systems and distributed systems, subdomains of computer science that I'm very interested in. Coursework also perfectly compliments my professional experience so far and what I intend to dive deeper in the future which lies at the intersection of non-tech fields and high performance computing.\n\n\nWhat is your favourite project? Explain it to a non-technical person\nLet's say a person wants to buy some candies, shoes and jackets for their trip. They can either go to different stores around the town, gather all the things they need or they can just walk up to the nearest mall and shop efficiently and with less hassle. The first approach adds a lot of overhead in terms of fuel consumption, time, etc \nSimilarly, a global firm with geographically scattered offices can have language silos. They have different repositories or \"shops\" to store perticular language packages and binaries. These different shops is an inefficient way of querying packages. Therefore, I deployed and maintained a universal artifact repository which is kind of like a \"mall of binaries\" and built various plugins to reduce the aformentioned overhead. \nThis one stop solution is currently serving more than 1 million binaries at the firm with 0 seconds of downtime.\n\n\n\n"}}}