{"index":{"version":"0.5.12","fields":[{"name":"title","boost":10},{"name":"keywords","boost":15},{"name":"body","boost":1}],"ref":"url","documentStore":{"store":{"./":["code","competit","introduct","note"],"GeneralInstructions.html":["(https://leetcode.com/contest/weekli","(kinda!)","+","190/problems/pseudo","=>","[new]","abstract","approach","avoid","basically,","binari","bracket","brute","built","class","class,","code","contest","copi","creat","decor","docstr","end","everyth","first","forc","function","further","gener","getter","helper","implement","improv","instruct","keep","languag","level","librari","list","lists.","maintain","methods,","mistak","object","oblivi","oop:","optim","palindrom","paramet","pass","path","possibl","possible:","problem","property,","python","question!","readabl","refer","rememb","runtim","set","set([something]","sets,","setter","solv","somehow.","stuff","stupid","tree/)","us","user","valu","variabl","way","well","work","write"],"DataStructures/":["&","data","question","standard","structur"],"DataStructures/Arrays/":["'quirky'","(1)","+","3",":","array","binari","check","element","element/","find","gener","greater","hash","help","https://leetcode.com/problems/next","https://www.geeksforgeeks.org/maximum","https://www.geeksforgeeks.org/next","increas","instructions:","length","on","permutation/solution/","posit","post","power","pre","prioriti","problem","question","remov","search","similar","sort","stack","strictli","sub","valu","weapon"],"DataStructures/Arrays/TwoPointers.html":["(n","(not","0","1)):","1/3286/","2","=","==",">",">=","array.","break","challenge/528/week","class","day","decid","def","easi","effect","end","faster","gener","https://leetcode.com/explore/challenge/card/30","https://leetcode.com/problems/3sum/","https://leetcode.com/problems/contain","https://leetcode.com/problems/two","k’","leetcod","len(nums)","list[int])","maintain","move","movezeroes(self,","n","n:","none:","num","nums:","nums[p]","nums[p],","nums[z]","nums[z],","on","p","pair","pointer","pointers:","prop","realli","return","search","size","slower","solut","solution:","structure:","subarray","sum/","techniqu","two","typic","us","water/","z"],"DataStructures/Arrays/Subarrays.html":["(d","(end_index","(i","(n","(sorted)","(start_index","*","+","+=","0","0:","0}","1","1)","1))","1)/2","1]","2","3/","=","==",">","[0]","absolut","addit","answer","array","basic","befor","binari","catch:","checks:","class","comparison","complex","constraint","continu","current","d","data","deal","def","desir","diff","differ","domain","don’t","dp","dure","each","element","element/","element:","end","enumerate(nums):","enumerate(prefix):","equal","everytim","exclud","final_answ","find","frequenc","https://leetcode.com/problems/longest","https://leetcode.com/problems/maximum","https://www.geeksforgeeks.org/maximum","https://www.geeksforgeeks.org/numb","https://www.geeksforgeeks.org/xor","i)","i,","impli","includ","increas","instead","int)","int:","interv","iteration.","ith","k/","k:","keep","left","length","less","limit/","list[int],","look","matched:","max/min.","max/min:","maximum","maxnonoverlapping(self,","maxval","minval","modulo","more","move:","multi,","n","n)","negative,","new","non","number","nums:","odd","older","on","oper","optim","outsid","overlap","p","pointer","post","pre","prefix","prefix.append(prefix[","prefix_arr[0]","prefix_arr[1]","previou","problem","produc","product","quantiti","question","refer","relat","remov","requir","return","right","run","satisfi","search","set","similar","size","slide","solution:","start","step","store","strictli","sub","subarray","subarray/","subarrays,","subarrays:","subsequ","subsequences.","sum","sum,","sum/","sum_po","sum_pos:","sum_pos[p]","swap","target","target/","target:","thing","till","travers","two","unless","valu","well","whole","window","xors/","{0:","{}"],"DataStructures/Arrays/Subsets.html":["!=","%","(1","(check","*","+","/","0","0:","1","1,","18/","1:","1]","1])","2","2)","=","==",">","[","[1]","[]","archives:","array","base","checks:","choices:","class","def","divis","dp","each","element,","enumerate(nums):","geek","https://leetcode.com/problems/largest","https://www.geeksforgeeks.org/partit","https://www.geeksforgeeks.org/tag/subset/","i):","i,","implement","implementation:","index","issubsetsum(list,","j","largestdivisiblesubset(self,","leav","len(nums)","li","like:","lis.","list[int])","list[int]:","list[n","max_len","max_len:","method","miscellan","n","n,","num","nums:","nums[j]","o(n2)","optim","pre","pre[i]","pre[index]","prioriti","problem","question","queue","range(0,","recurs","result","result.append(nums[index])","return","section)","set_len","set_len[i]","set_len[i]:","set_len[j]","set_len[j])","similar","smart","solut","solution:","sort","sorted(nums)","standard","subset","subset/","subset/discuss/84006/class","sum","take","target","this:","two","way","whole"],"DataStructures/Arrays/Triplets.html":["#","(i","(n","(nums[i]","+","+=","0","0,","0:","1","1)","1):","1,","1]","1]:","2","2):","=","==",">","[0","[]","\\","approach","avoid","better","binari","check","class","collect","continu","def","defaultdict","defaultdict(list)","dictionary.","elem,","element","element,","enumerate(nums):","find","fix","found","g","greater","https://leetcode.com/problems/3sum/","https://leetcode.com/problems/count","i):","i,","import","int:","j","j,","j:","k","kind","last","len(nums)","len(rating)):","len(rating))]","list[int])","list[list[int]]:","modifi","n","need","num","number","nums:","nums[i","nums[i]","nums[j])]","nums[j])])))","nums[j],","numteams(self,","one.","one:","optim","posit","positions[","positions[num].append(i)","possibl","prune","range(0,","range(1,","range(i","rating:","rating[i]","rating[j]:","repetition.","result","result.append([x,","result_","result_s.add(tuple(sorted([nums[i],","result_s.pop()","result_s:","return","s","s[i]","s[j]","save","search","second","set","set()","solution:","sort","sorted(nums)","step","sum.","sum_po","sum_pos:","sum_pos[","teams/","that'","third","threesum(self,","total","tri_sum","triplet","us","veri","way","x,","y,","z","z])"],"DataStructures/Arrays/DequeTrick.html":["((i","(eg.","+","+=","/","0","1","1))","1):","1,","15th","1:","1]","1][0]","1]]","21st/3330/","3","=","==",">","[[i,","[]","[max(nums)]","__init__(self):","add","ahead","append","backward","base","boundari","calls/","challenge/536/week","class","collect","compar","current","def","defaultdict","defaultdict(int)","dequ","deque()","direction(intenum):","each","element","element:","enum","enumerate(heights):","etc","extrem","find","first","gener","go","greater","greater,","h","heights:","here:","histogram/","https://leetcode.com/explore/challenge/card/may","https://leetcode.com/problems/largest","https://leetcode.com/problems/next","https://leetcode.com/problems/numb","https://leetcode.com/problems/onlin","https://leetcode.com/problems/slid","i,","i/","i]","idea","import","incom","info","int)","int:","intenum","it'","k","k):","k:","keep","l","largestrectanglearea(self,","last","leetcod","len(heights)","len(nums):","list[int])","list[int],","list[int]:","location)","loop","maitain","maximum/","maxslidingwindow(self,","monoqueu","more","n","n)]","next","next(self,","nextgreaterelement(self,","now","num","nums1:","nums2:","nums:","nums[queue[","on","origin","outsid","ping(self,","pop","previou","price:","question","question,","queue","queue.append((","r","range(0,","range(len(nums2)","recent","recentcounter:","rectangl","requir","result","return","run","self.count","self.queu","self.queue[","self.window","self.window[0]","similar","simpl","slide","smaller","solution:","span/","stack","stack/queu","stack[","stock","stockspanner:","store","store[nums2[i]]","structure:","t:","target","techniqu","trick","us","veri","want","window"],"DataStructures/Strings/":["string"],"DataStructures/Strings/StandardQuestions.html":[">","brute","characters/","https://leetcode.com/problems/longest","question","repeat","set","slide","standard","substr","window","without"],"DataStructures/Trees/":["(collections.deque)","(levelwis","(recurs","+","439df7e5ea1f","answer.","append","befor","cases.","check","combo","curat","data","decent","don't","down","encount","find","global","hashing)","https://medium.com/@codingfreak/binari","inord","interview","iterative)","keep","left","left/","level","levelwis","levelwise,","list:","make","node","node.","node/","order","pass","popleft","postord","practic","preorder","present","problem","push","question","queue.","record","recurs","return","right","see","situations,","solut","solution,","solution.","sure","travers","tree","tree,","up","updat","value.","vertic","want"],"DataStructures/Trees/Inorder.html":["\"","\"\")","+","+=","0","=",">",">\")","[]","base","binarytreepaths(self,","bst","case","class","criteria,","current","current.left","current.right","current.right:","current.v","current:","def","don't","fals","find","flag","for,","give","https://leetcode.com/problems/binari","https://leetcode.com/problems/sum","inord","int:","iter","leaves/","left","list","list[str]:","look","make","node.left","node.right:","node:","particularli","path","path):","paths.","paths/","recur","recurs","result","result.append(path","return","root","root:","satisfi","set","solution:","sort","stack","stack.append(current)","stack.pop()","str(node.val)","str(node.val))","sumofleftleaves(self,","sure","total_sum","travers","traverse(node,","traverse(node.left,","traverse(node.right,","traverse(root,","tree","tree,","treenode)","true","unnecessari","until","up","us","want"],"DataStructures/Trees/Preorder.html":["#","(current","(not","(sum","*","+","+=","0","0)","0,","1","1)","10","=","==",">","[]","[])","[],","[node.val])","[node.val],","__init__(self,","addnums(node,","addnums(node.left,","addnums(node.right,","addnums(root,","always,","binari","check","class","course)","cover","current","current):","current_sum","current_sum):","def","definit","direct","direction,","down","elif","else:","exist","gener","go","https://leetcode.com/problems/binari","https://leetcode.com/problems/path","https://leetcode.com/problems/sum","ii/","iii/","int)","int:","leaf","left","left,","left:","length","length)","length):","level","levelwis","list[list[int]]:","longestzigzag(self,","max(self.max_length,","new_path_sum","new_path_sum.append(new_sum)","new_sum","node","node.","node.left","node.left:","node.right:","node.v","node.val)","node.val):","node:","none","numbers/","order","pass","path","path,","path.append(node.val)","path_sum):","path_sum:","pathsum(self,","perfect","preorder","process","replac","result","result.append(path)","return","right","right,","right:","root","root.left","root.right,","root:","s","self.left","self.max_length","self.result","self.right","self.tot","self.val","solution:","sometim","sum","sum:","sumnumbers(self,","travers","traversal/","traverse(node,","traverse(node.left,","traverse(node.right,","traverse(root,","tree","tree.","treenode)","treenode,","treenode:","valu","want","x","x):","zigzag"],"DataStructures/Trees/Postorder.html":["#","'treenode')","'treenode',","'treenode':","(float('","(l","(left_max","(node.v","(right_min","+","+=","0","0}","0},","1","199/problems/numb","1}","2","2:",":","=","==",">",">=","[]","[p.val,","__init__(self,","afterwards.","ancestor","appl","apple_in_path","attribut","back","base","befor","binari","bool:","bottom,","bst:","call","check","child","class","collect","common","complex","consolid","contest","countpairs(self,","current,","d1","d1,","d2","d2,","data","def","defaultdict","defaultdict(int)","defaultdict(list)","definit","deque,","distance:","don't","e","e.g.","easier","edges:","exist","fals","find","findfrequenttreesum(self,","float('inf'))","forget","frequent","gener","globals/","go","good","greater","handl","hasapple:","hasapple[node]","hasapple[node]:","https://leetcode.com/contest/weekli","https://leetcode.com/problems/lowest","https://leetcode.com/problems/minimum","https://leetcode.com/problems/most","https://leetcode.com/problems/valid","import","inf'),","initi","insert","int)","int,","int:","isvalidbst(self,","key,","kinda","l","l,","l.items():","lc","leaf","left","left,","left.","left=none,","left_max,","left_min","list[bool])","list[int]:","list[list[int]],","look","lowestcommonancestor(self,","max","max(self.max_count,","max_count","mintime(self,","n:","need","node","node'","node.","node.left","node.left:","node.right:","node.val)","node.val]","node.val])","node:","nodes.","none","note:","one.","optim","p:","pairs/","pass","posit","postord","postorder(node):","postorder(node.left)","postorder(node.right)","postorder.","properties,","properties;","q.val])","q.val]))","q:","r","r.items():","rc","record","record/upd","recurse(node.left)","recurse(node.right)","recurse(node:","result","result.append(key)","return","right","right;","right=none):","right_max,","right_min","root.left","root.right:","root:","s,","same","search","self.lca","self.left","self.max_count","self.right","self.tot","self.val","self.valid","self.walk","send","set()","solut","solution:","sometim","subtre","subtree.","sum","sum/","sums.items():","sums[l","target","time","travers","traverse(0)","traverse(node):","traverse(node.left)","traverse(node.right)","traverse(root)","traverse(v)","tree","tree.","tree/","tree;","tree[e].append(s)","tree[node]:","tree[s].append(e)","treenode)","treenode,","treenode:","tricki","true","up","us","v","val","val=0,","valu","value.","value:","versa.","vice","visit","visited.add(node)","visited:","{0","{0:","{1:"],"DataStructures/Trees/LevelWise.html":["!=","(x_found","(y_found","+=","0","1","1)","1))","1):","=","==",">","append","binari","bool:","class","collect","current","current,","current.left:","current.right:","current.v","current.val))","deepestleavessum(self,","def","dequ","deque()","fals","gener","https://leetcode.com/problems/cousin","https://leetcode.com/problems/deepest","import","int)","int,","int:","iscousins(self,","leav","len(queue)","level","level_sum","levelwis","more","node","parent","queue","queue.append((current.left,","queue.append((current.right,","queue.append((root,","queue.append(current.left)","queue.append(current.right)","queue.append(root)","queue.popleft()","queue:","return","root","root:","size","size:","solution:","sum/","travers","tree/","treenode)","treenode,","true","valu","wise","x:","x_found","y:","y_found","y_found)","y_found):"],"Datastructures/Trees/TreeToGraph.html":["!=","#","(add","0:","1","1)","1:","=","==",">","[]","[node.parent,","[target.val]","__init__(self,","addit","alter","approaches:","arbitari","attribut","binari","class","collect","construct","convert","data:","def","defaultdict(list)","defaultdict,","definit","dequ","deque()","distanc","distancek(self,","effici","especially,","filter","graph","graph.","graph:","graph[node.val].append(parent)","graph[parent].append(node.val)","graph[v]:","handling.","https://leetcode.com/problems/al","import","input","int)","iteration.","k","k:","keep","len(queue)","level","list[int]:","loop","make","mark","memori","mind","need","nei","neightbor","new","node","node.","node.left,","node.right]","node.val)","node:","none","note","o(n)","object","out","parent)","parent):","perform","proper","queue","queue.append(nei)","queue.append(target.val)","queue.popleft()","queue:","range(size):","requir","result","result.append(nei)","return","root:","self.left","self.right","self.val","set()","size","solution:","sometimes,","space","start","step;","store","sure","target","target:","there'","thing","travers","traverse(node,","traverse(node.left,","traverse(node.right,","traverse(root,","tree","tree/","treenod","treenode,","treenode:","two","v","valu","visit","visited.add(v)","want","whole","wise","x","x):"],"DataStructures/Trees/ConstructTree.html":["#","(end","+","//","0","1","1)","1,","1:","1]","2","3","=","==",">",">=","])","__init__(self,","alway","array","array.","balanc","befor","binari","binarysearch(start","binarysearch(start,","break","bstfrompreorder(self,","buildtree(self,","class","construct","construct(0,","construct(i_s,","construct(l,","construct(max_index","construct(pivot","construct.postorder_index","constructmaximumbinarytree(self,","constructtree(0,","constructtree(arr:","constructtree(pivot,","constructtree(start","constructtree(start,","def","definit","divid","e","easi","element","end","end)","end,","end:","enumerate(inorder):","function.","https://leetcode.com/problems/bal","https://leetcode.com/problems/construct","https://leetcode.com/problems/maximum","i,","i_","i_e)","i_e):","i_e:","import","inord","inorder:","int:","key","key)","key:","l","last","left","left=none,","len(arr)","len(inorder)","len(list):","len(nums))","len(postorder)","len(preorder)","list)","list[int])","list[int],","make","max_index","max_index)","mid","node","node.","node.left","node.right","node.v","none","notic","nums:","nums[i]","nums[max_index]","nums[max_index]:","one!!","parts.","pivot","postord","postorder:","preorder","preorder:","preorder[end","preorder[mid","preorder[start","preorder[start]","preorder[start])","present","question","questions:","r)","r):","r:","range(l,","return","right","right=none):","root","root.left","root.right","root.val:","search","self.constructtree(arr[:mid])","self.constructtree(arr[mid","self.left","self.right","self.val","solution:","start","start)","static","subtre","sure","traversal/","tree","tree/","tree/discuss/540038/python","treenode()","treenode(arr[mid])","treenode(postorder[construct.postorder_index])","treenode(preorder[start])","treenode:","understand","unus","us","val","val=0,","variabl","we'r"],"DataStructures/Graphs/":["beginn","cours","decent","discussion/655708/graph","graph","https://leetcode.com/discuss/gener","https://leetcode.com/problems/array","iv","nesting/","practic","problem","problemset:","sampl","schedul","solut"],"DataStructures/Graphs/Coloring.html":["!=","\"meaningful\"","(c","(node,","(use","+","0))","1","1))","1):","1:","1]","1])","1]:","2","2,","2])","3,","4])","=","==",">","[","[0","adjacent/","allow","altern","basically,","bfs(i):","bfs(s):","bfs)","bifurc","bipartite/","bipartition/","blue","blue,","blue])","blue_edges:","bool:","c","chang","class","code","collect","color","color)","color))","color,","color:","color_left","color_left))","colors.pop()","colors.remove(color)","colors/","continu","cycl","d","def","defaultdict","defaultdict(list)","defaultdict,","dequ","deque()","differ","disconnect","don't","edg","end","exists,","exists:","expect","expected):","expected,","extrem","fals","fill","find","first","flower","flowers.pop()","flowers.remove(planted[n","flowers:","gardennoadj(self,","graph","graph:","graph[end].append(start)","graph[i]","graph[node]:","graph[s].append([d,","graph[start].append(end)","https://leetcode.com/problems/flow","https://leetcode.com/problems/i","https://leetcode.com/problems/poss","https://leetcode.com/problems/shortest","import","int,","isbipartite(self,","keep","key","len(graph)):","len(graph))]","length","list[int]:","list[list[int]])","list[list[int]],","loop","make","mind","miss","n","n)]","n:","neigh","neigh:","node","node,","on","one:","over","pair","path","paths:","plant","planted[i","planted[n","problem","proper","queue","queue.append((0,","queue.append((i,","queue.append((v,","queue.popleft()","queue:","range(0,","range(1,","red","red,","red])","red_edges:","represent","result","result[node]","return","run","s","s,","sections.","see","seen","seen.add((node,","seen:","set","set()","set([1,","set([red,","shortestalternatingpaths(self,","similar","solut","solution:","solv","start,","store","sure","these,","tips:","travers","true","up","v","v,","vertic","visit","visited[node]","visited[node]:","visited[s]:","want"],"DataStructures/Graphs/GraphBFS.html":["(0,","(d","(djikstra","(k","(time","+","0","0))","1","1))","1):","=","==",">",">=","[]","[float('inf')","amaz","arsenal.","bf","bool:","c","c,","canvisitallrooms(self,","class","collect","continu","cost","d","d,","def","defaultdict","defaultdict(list)","delay","dequ","deque()","deque,","dst:","even","extrem","fals","findcheapestprice(self,","flight","flights:","function","graph","graph[c]:","graph[node]:","graph[u].append((v,","grid","heap","heap.append((0,","heap:","heapq","heapq.heappop(heap)","heapq.heappush(heap,","here.","https://leetcode.com/problems/cheapest","https://leetcode.com/problems/key","https://leetcode.com/problems/network","import","int)","int,","int:","k","k))","k:","len(rooms)","len(visited)","list[list[int]])","list[list[int]],","max(max_time,","max_tim","method:","myriad","n","n)]","n,","n:","n_d","n_d,","networkdelaytime(self,","node","optim","play","power","prioriti","problems.","question","queue","queue)","queue.append(0)","queue.append(v)","queue.popleft()","queue:","quickest","range(0,","reach","return","room","rooms/","rooms:","rooms[room]:","set()","similar","solution:","src,","src:","stops/","substitut","there'","time","time)","time,","time/","times:","tool","true","two","u,","us","v","v))","v,","variabl","visit","visited.add(room)","visited:","visited[c]","visited[node]","w","w))","w,","way","well.","within","x;","{}"],"DataStructures/Graphs/GraphDFS.html":["(len(tickets)","(postorder).","*","+","+=","1","1):","198/problems/numb","1}","=","==",">","['jfk'])","[1]","[]","[n])","add","again","alreadi","array","augment","befor","bidirectional.","bool:","c,","calcul","canfinish(self,","check","children","class","collect","come","consolid","contest","countsubtrees(self,","cours","current","cycl","cycle,","d","d)]","data","def","defaultdict","defaultdict(int)","defaultdict(list)","df","dfs(i):","dfs(j):","dfs.","didn't","edg","edges:","edges[(current,","edges[(s,","eg.","exit","f","fals","fetch","find","finditinerary(self,","first","g_visit","g_visited.add(i)","g_visited:","globally,","graph","graph:","graph[c].append(p)","graph[current]:","graph[d].append(s)","graph[i]:","graph[node]:","graph[s]","graph[s].append(d)","great","https://leetcode.com/contest/weekli","https://leetcode.com/problems/cours","https://leetcode.com/problems/reconstruct","import","info","info[l]","info[labels[node]]","init","instead","int,","it'","itinerary/","j","l,","label/","labels:","leav","len(path)","lexograph","list[int]:","list[list[int]])","list[list[int]],","list[list[str]])","list[str]:","local","look","loop","minu","n","n)]","n)]:","n:","need","node","nodes.","not!","numcourses):","numcourses:","on","p","path","path):","path[:]","posibl","possibl","prerequisites:","process","question","question:","range(0,","realiz","repeat","result","result[node]","return","s","s,","same","schedul","schedule/","self.itinerari","self.itinerary:","set()","similar","solution:","sort","sorted(graph[s])","store","str)","sub","there'","thought","tickets:","time","traverse('jfk',","traverse(0)","traverse(current,","traverse(n,","traverse(node):","traverse(v).items():","tree","true","type","unvisit","v","visit","visited.add(i)","visited.add(node)","visited.remove(i)","visited:","{labels[node]:","{}"],"DataStructures/Graphs/TopologySort.html":["1]","=","==",">","[]","[c","c","c,","checkifprerequisite(self,","class","collect","def","defaultdict","defaultdict(list)","defaultdict(set)","defaultdict,","dequ","deque()","deque,","findorder(self,","graph","graph[c].add(p)","graph[c].append(p)","graph[c]:","graph[node]:","https://leetcode.com/problems/cours","ii/","import","incom","incoming[n].remove(c)","incoming[n]:","incoming[nei].remove(node)","incoming[nei]:","incoming[p].add(c)","int,","iv/","len(topo)","list[bool]:","list[int]:","list[list[int]])","list[list[int]],","n","n))","n:","nei","node","numcours","numcourses))","numcourses:","p","p,","pre","pre[n]","pre[n].union(pre[c].union(set([c])))","pre[p]","prerequisites:","queries:","queries]","queue","queue.append(n)","queue.append(nei)","queue.append(node)","queue.append(s)","queue.popleft()","queue:","return","s","schedul","set(range(0,","solution:","sort","start","starts.remove(p)","starts:","topo","topo.append(node)","topo[::","topolog","u_set","u_set.remove(p)","u_set:"],"Algorithms/":["(arrays,","(trees,","14th/3328/","180/problems/lucki","2","8th",">","addit","algorithm","alien","bitwis","challenge/535/week","class","contest","data","default)","design","dict.get(key,","dictionari","do:","dp","especially)","etc)","factors/divisor","faulti","function","graphs,","habit","heap","https://leetcode.com/contest/weekli","https://leetcode.com/discuss/interview","https://leetcode.com/explore/challenge/card/may","https://www.geeksforgeeks.org/tag/array","input","jump","k","kadan","keyboard","leetcod","link","list","lists,","ll","matrix","maximum","memoiz","number","o(n)?","order","palindrom","phone","question","question/281470/","question/643158/googl","questions*","questions,","questions:","repetit","runtimes:","spiral","stock","stream","stream/","string","strings,","sum","think","travers","trie:","understand","weekli","zip"],"Algorithms/TrickySorting.html":["1","=",">","class","come","compar","comparator.","custom","def","fed","function","functool","functools.cmp_to_key(comparator)","https://leetcode.com/problems/largest","import","key","lambda","largestnumber(self,","list[int])","make","number/","nums:","part.","python","solution:","sort","str:","tricki","up","us","work.","x+i","x,","y+x","y:"],"Algorithms/DFSandBFS.html":["#","(x","(you'll","+","0)])","0,","1","1,","=","==",">",">=","[[[","[[fals","```pi","apend","array","avoid","b","base","be","bf","binari","bit","board:","bool:","canmeasurewater(self,","case","class","collect","collections.dequ","condit","continu","creat","def","dequ","deque([(0,","deque([[0,","df","dfs(letter,","done","eg.","element","elimination/","empti","end","error","everywhere,","exceed","excel","exhaust","exist(self,","extrem","faster","few","find","first","float('inf')]","forget","game","game/","gener","get","go","greedi","grid","grid:","grid[x][y]:","https://leetcode.com/problems/jump","https://leetcode.com/problems/shortest","https://leetcode.com/problems/wat","https://leetcode.com/problems/word","ii/","impli","import","input","int)","int,","int:","j","job","jug","jump","k","k:","k]])","k_left","left","len(board)","len(board[0])","len(grid)","len(grid[0])","len(word):","letter","limit","list[list[int]],","list[list[str]],","littl","long","loop","matrix/","minimum","modif","need","notes:","obstacl","oper","optim","optimally.","orang","otherwise)","over","part","path","popleft","problem","problems,","question","questions,","questions:","queue","queue.popleft()","queue:","range(0,","range(x)]","reach","repetit","requir","return","rotten","run","search","seen","set","set()","shortestpath(self,","size","slower","solut","solution:","solutions:","somewher","stack","start","step","steps,","str)","such","there'","through","tip:","true","type","up","us","useful:","visit","visited[x][y][1]","water","well","word","word:","work","x","x)]","x,","x:","y","y)","y))]","y)]","y,","y:","z:"],"Algorithms/Combinatorics.html":["\"\"","':'","(==r)","(k","(ncr)","*","+","+=","0)","1","1)","1,","2","23:","2:","2]","3","4","4):","4:","4]","4])","59:","5:",":","=","==",">","[]","[fals","[false]","[num],","[nums[j]])","_helper_generator(self,","a:","accept,","add","addit","allow","arr:","array","backtrack([])","backtrack([],","backtrack(bucket","backtrack(bucket):","backtrack(bucket,","base","book","bucket","bucket.append(arr[k])","bucket.pop()","bucket[0:","bucket[2:","call","case","cc","chang","cheat","choices:","choos","class","collect","combin","combinations:","combinator","continu","counter","counter(nums)","counter)","counter):","counter:","counter[num]","counter[num]:","d","deep","def","depth","df","digits/","domain)","domain:","don't","element","element:","fals","far;","filter","given","go","helper","helperncr(","helperncr(0,","helperncr(s,","helperncr(s:","https://leetcode.com/problems/combin","https://leetcode.com/problems/largest","https://leetcode.com/problems/permut","https://leetcode.com/problems/permutations/","if(","ii/","import","includ","included[i]","included[i]:","index","instanti","int(bucket)","int(bucket[2:","int(bucket[2])","int)","int,","item","j","k","k:","largesttimefromdigits(self,","len(arr)","len(bucket)","len(domain)","len(nums)):","len(nums))]","len(nums):","level","list)","list,","list:","list[int])","list[list[int]]:","loop","made","make","n","n):","ncr","ncr.append(bucket[:])","need","next","node","none:","normal","normalsubset(self,","note","num","number","nums:","out","param","permut","permute(bucket","permute(bucket)","permute(bucket):","permute(self,","permuteunique(self,","pop","process","questions:","r","r):","r:","range(0,","recurs","recursion:","reference:","repetition,","result","result.append(bucket[:])","return","reverse=true)","revert","right","s:","same","scenario","select","select.","self.n","self.n):","self.powerset","self.powerset.append(self.subset[:])","self.recurse(k,","self.solution_search(0,","self.solution_search(k","self.subset","self.subset.append(domain[k])","self.subset.pop()","self.t","self.t:","sheet","similar","solution.","solution:","solution_search(self,","solutiongenerator:","sorted(a,","step","str(d[i]))","str:","subset","sum/discuss/16510/python","t:","time","track","true","two","uniqu","us","visit","visited[j]","visited[j]:","‘reject’"],"Algorithms/Backtracking.html":["!=","#","'(',","')',","'visited'","((i,","(i","(i,","(int","(posit","(use","(veri","+","+=",",","0","0,","1","1)","1),","1):","1);","1,","1;","2","3000",":","=","==",">","_helpercopypaste(self,","accept","actual","add","answer:","array,","backtrack","backtrack(curr","backtrack:","base","bits.","boolean","bucket","canjumpfromposition(int","care","cases:","check","class","close","complet","condit","constraint","copied))","copied,","copied:","count","current","current),","current,","current:","def","df","dfs(self,","differ","direct","each","empti","exhaust","exists:","failur","functools.lru_cach","furthestjump","game","gener","getmaximumgold(self,","gold/","grid","grid:","grid[i][j]","hat","https://leetcode.com/problems/2","https://leetcode.com/problems/jump","https://leetcode.com/problems/numb","https://leetcode.com/problems/path","i:","if(curr","if(i","if(n","int","int)","int,","int:","int[]","intmax","intmin","j","j)","j))","j)):","j),","j,","j:","keep","key","keyboard/submissions/","len(grid),","len(grid[0])","length","limit","list[list[int]])","m","m,","math.min(posit","max","max(self.dfs(i,","max(self.dfs(x,","maximum","maximumsum","maximumsum)","memo","min","min(2","minsteps(self,","move","n","n):","n:","necessari","nextposit","nums)","nums.length","nums[position],","of.","on","ones.","open","option","other/","param,","parenthes","permut","posit","position,","possibl","problems)","public","range(m))","range(n)","recurs","recursion)","recursion,","remov","requir","return","search","see","seen),","seen):","seen.add((i,","seen.discard((i,","seen:","select","self._helpercopypaste(n,","set","set())","set)","similar","solut","solution:","stack","step","string","success","sum","sum,","sum:","taken","target","true;","type","updat","us","way","wear","x,","y","y,","{","}"],"Algorithms/BinarySearch.html":["(i)","(start","*","+","+=","0","0:","1","1,","1.","154","=",">",">=","answer","appropri","arr:","arr[0]","array","array/","article:","beginn","binari","bloomday:","bloomday[0]","bouquet","bs","calc_sum(mid):","can_carry(capacity):","case","change.","check","class","closest","current","d","d:","day","day)","day:","days/","decid","decrement","def","diff","direct","discussion/691825/binari","discussion/786126/python","done:","else:","end","enumerate(bloomday):","enumerate(weights):","equal","equality,","equality.","etc","fals","findbestvalue(self,","findmin(self,","float('","float('inf')","go","good","https://leetcode.com/discuss/gener","https://leetcode.com/problems/capac","https://leetcode.com/problems/find","https://leetcode.com/problems/minimum","https://leetcode.com/problems/sum","i,","i.e.","ii/","includ","inf')","instead","int)","int,","int:","it'","iter","iteration.","k","k:","leetcod","len(bloomday)","len(nums)","list[int])","list[int],","loop)","lot","m","m:","make","mani","max(end,","max(start,","maximum,","mid","mid;","min(start,","mindays(self,","minimum","mutat","n","n:","necessari","need","never","next","num","num)","number","nums:","nums[0]","nums[end]:","nums[start]","on","ones.","packag","pattern","place","power","problem","problem,","questions.","quicker","recurs","reduc","remember:","req","result","return","rotat","same","sampl","search","set:","ship","shipwithindays(self,","solut","solution:","solv","somehow","sort","sorted;","start","start.","start:","streak","such","sum(i","target/","target:","templat","terminates.","thing","ultim","understand","unlik","us","verify(mid):","w","w)","want","weights:","within"],"Algorithms/BucketTrick.html":["#","'can'","(t","+","//","1","1)","1)]","1]","=",">",">=","abs(state[b","b","bool:","bucket","bucket,","buckets,","class","code","comparison","containsnearbyalmostduplicate(self,","def","del","duplic","enumerate(nums):","equal","facilit","found","good","hash","here.","https://leetcode.com/problems/contain","i,","iii/","illustr","inspir","int)","int,","k","k:","linear","list[int],","maintain","n","n)","neightbor","number","nums:","operations,","perfectly:","possibl","problem","rang","return","run","same","search","slide","solution.","solution:","sort.","state","state:","state[nums[i","t","t:","this.","time.","trick","true","two","unless","us","w","w:","w]","want","window","{}"],"Algorithms/Bitwise.html":["&","'e',","'i',","'o',","'u'])","(1","(bits[i","(n","(num","(see","*","*=","+","0","1","1)","1):","1}","2","2,","22nd","28th/3343/","4","=","==",">","[0]","[]","^=","bit","bit:","bits[0]","bits[i]","bitwis","challenge/537/week","class","contain","continu","countbits(self,","counts/","def","dict","even","findthelongestsubstring(self,","https://leetcode.com/explore/challenge/card/may","https://leetcode.com/problems/find","https://leetcode.com/problems/pow","i:","imperfect","int)","int:","j","last_pow","last_power]","leetcod","len(s):","list[int]:","longest","max_len","n","num","num:","number","p","power","power_v","power_val:","question)","range(1,","return","s:","set","set(['a',","solution:","store","str)","substr","th","toggl","trick:","two/","us","vowel","vowel_set","{64:"],"Algorithms/DynamicProgramming-I.html":["#(climb","'pivot'","(bag_weight","(bottom","(leetcod","(len(values)","(n","(top","(total_sum","(x","(y",")","*","+","/","0","0)","0):","0/1","0:","1","1)","1),","1):","1)]","1,","1.","1035","1:","1]","1],","1][i","1][y]","1d","2","2)","2.","2]","4","70),","=","==",">",">=","[0]","[[0","[[0]","[[fals","\\","_","algorithms.","alway","anoth","answer","appli","array","backtrack","bag_weight","bag_weight):","basic","break,","brute","calcul","case","case)","caus","cell","cell.","cell_column)","cells,","change,","check","choices,","class","climb","coin","column","combin","complet","complex","complexity:","conditionally:","continu","correct","count","current","def","depend","dfs(0,","dfs(x","dfs(x,","dfs(x:","differ","difference,","discussion/651719/how","divid","down","dp","dp:","dp[0]","dp[1]","dp[2]","dp[i","dp[i]","dp[n","dp[n]","dynam","each","effici","eg.","elif(weight","equat","etc","exact","except","exclude)","fals","false,","figur","final","find","follow","forc","fulli","gener","go:","goe","greedi","half","here,","https://leetcode.com/discuss/gener","https://leetcode.com/problems/hous","https://leetcode.com/problems/uniqu","i:","if(failure_base_case):","if(i","if(success_base_case):","ii","improv","includ","independently.","instead","insur","int)","int,","int:","interview","intuit","j","knapsack","knapsack(self,","knapsack,","larg","leave,","leetcod","leetcode:","len(nums)","len(values)+","lis,","list[int])","loop","lot","m","m:","maintain","make","max","max(","max(include,","max(memo[i","max(nums[0],","memo","memo[0]","memo[1]","memo[i","memo[i]","memo[n","memo[x","memo[x][i","memo[x][y]","memoiz","memori","min.","minimum","multipl","n","n)","n):","n:","need","number","nums:","nums[0]","nums[1])","nums[i])","nums[i],","o(2^n)","obstruction.","on","onc","optim","out","over","overlap","particular","partitions:","path","paths/submissions/","perfect","possibl","possible.","previou","problem","process:","program","program:","programming)","programming:","properti","question","range(0,","range(2,","range(3,","recurs","recurse(0,","recurse(curr","recurse(current,","recurse(current:","reduc","remov","requir","rest","return","rob(self,","robber/","row","row[i","row[i]","runtim","satisfi","search","self.solution_function(case_one,","self.solution_function(case_two,","set","similar","size","small","solut","solution:","solution_function(self,","solutions.","solutions:","solv","someth","squar","squares,","stair","stairs:","start","step","step,","string","structur","subarray.","subproblem","subset","subsets:","substructur","sum","sum,","tabl","table[i][weight]","take","techniqu","templat","template:","this:","time","top","total","tree","trick","true","two","understand","uniqu","uniquepaths(self,","up","us","usually,","valu","values,","visit","visited[x][y]","visited[x][y]:","want","weight","weights,","word","x","x):","x)]","y","y)","y):","y)]","y:"],"Algorithms/DynamicProgramming-II.html":["\"solut","(m,","+","0","1","1)","1))","1):","1)]","1,","1]","1])","1]:","1][i","1][y],","2","4208fed71aa3","50","=","==",">","[[0","\\","break","chang","class","coin","common","decent","decod","def","diagram","dict()","dp","dp[x","dp[x][i","dp[x][y]","dynam","else:","essenti","explaination\"","explaination:","given","https://blog.usejournal.com/top","https://leetcode.com/problems/longest","https://www.techiedelight.com/longest","ii","int:","lc","lcs(len(text1),","lcs(m","lcs(m,","leetcod","len(s)","len(text1)","len(text2)","len(text2))","li","longest","longestcommonsubsequence(self,","longestpalindromesubseq(self,","lps(0,","lps(m","lps(m,","m","max(dp[x","max(lcs(m","max(lps(m","memo","memo:","memo[(m,","memoiz","n","n)","n),","n):","n)]","n:","overlap","pages.","palindrom","perfect","practic","practice:","problem","problemset:","program","programming/","question","range(0,","range(1,","recurs","recursion:","return","s:","s[m]","s[n]:","solut","solution:","solv","squar","step","str)","str,","subsequ","subsequence/","text1:","text1[i","text1[m","text2:","text2[n","text2[x","tree","us","visual","way","word","x","y"],"Algorithms/DynamicProgramming-III.html":["\"","\"complete\"","#","%","(0,","(1,","(2,","(4,","(6,","(7,","(dp[pos]","(i","(includ","(n","(out","*","**","+","+=","0","1","1)","1)):","1):","1)]","1,","10","10):","10)]","1]","2,","2/","3),","3,","4)]","6)","6),","6,","7","7),","8),","9","9),","=","==",">","[(4,","[0]","[1","[[]","[]","[],","\\","actual","add","again","alreadi","amount","amount)","amount/sum:","answer","backtrack","backtrack(j,","binari","bounds):","break","calculations.","call","case","chang","change/","charact","check","class","closest","coin","coins,","coins:","coins[j])","coins[j]))","combin","combinations:","compute.","constant","constraints:","continu","current","declar","def","destination'","destinations;","dialer/","dict","differ","don't","down","dp","dp1","dp1[n]","dp;","dp[","dp[i","dp[i].append(match","dp[i].append(word)","duplic","dynam","elimin","else:","end","failur","find","float('inf')","given","hop","hop,","hop.","hops[pos]:","https://leetcode.com/problems/coin","https://leetcode.com/problems/combin","https://leetcode.com/problems/knight","https://leetcode.com/problems/sqrtx/","https://leetcode.com/problems/word","i:","idea:","ii/","iii","iii/","includ","indic","int)","int:","intuit","iv/","j","jump","knightdialer(self,","know","len(coins)):","len(coins).","len(dp)):","len(s)","len(word)","len(word)]:","list[str])","list[str]:","loop","match","memo","memoiz","mid","min","min(min_steps,","min_step","mod","mod)","multipl","mysqrt(self,","n","n:","necessarili","necessary,","need","notic","number","on","order","perspect","po","point","possibl","possible:","present","preserv","previou","problem","program","range(0,","range(1,","range(i,","reach","read:","recurs","recursion/","repres","result","return","revers","rule","run","s:","s[:i].endswith(word):","s_set","s_set:","save","search","set","set(s)","set(word)","sets:","similar","so,","solution:","start","state","step","store","str,","string","success","sum","sum(dp)","sum/","sum/amount","sum/amount:","take","target.","that'","there'","think","thumb:","top","total","total_step","uniqu","updat","valu","want","way","well):","word","word)","wordbreak(self,","worddict","worddict:","x","x:"],"Algorithms/DynamicProgramming-IV.html":["(knight","+","0","0:","1","1]","1][","1][y]","29th","30th/3375/","5","=","==",">","[[0","array","auxillari","challenge/543/week","class","continu","current","def","depend","dialer)","differ","dp","dp[","dp[0][0]","dp[x","dp[x][i","dp[x][y]","dynam","enough.","https://leetcode.com/explore/challenge/card/jun","int)","int,","int:","iv","june","leetcod","m","m:","n","n:","need","on","optim","otherwise,","overlap","past","places.","posit","problems:","program","properti","range(x):","range(x)]","range(y):","range(y)]","reach","results,","return","solution:","sometim","subproblem","substructur","two","uniquepaths(self,","us","x","y"],"Miscellaneous/":["miscellan"],"Miscellaneous/Stocks.html":["+","0","0,","1","1]","2","=","==","approach","better","between","buy","calcul","can't","cash","cash,","cash.","class","comment","continu","current","day","day,","def","differ","dp","dynam","element","elements/","end","end,","far,","far.","fee","fee)","fee):","fee/","first","found","hold","hold,","https://leetcode.com/problems/best","https://www.geeksforgeeks.org/maximum","https://www.geeksforgeeks.org/stock","i+1","iv/discuss/54117/clean","java","k","keep","len(prices)):","limit,","list.","list[i","list[i]","local","maintain","max(cash,","max(hold,","maxima","maximum","maxprofit(self,","minima","minimum","necessary.","number","on","own","prices,","prices[0]","prices[i]","prices[i])","profit","program","range(1,","return","same","sell","sell/","share","similar","solut","solution(object):","stock","stock,","stock.","temporari","th","till","time","track","transact","transform","transit","twice/","two","updat","us","variabl","want","without"],"Miscellaneous/Intervals.html":["(last","(start","+","+=","0","1","1][1]","1][1]):","1][1],","252","253","435","56","=",">",">=","[]","accept","arrow","balloons/","base","burst","can't","case","check","class","compact","cours","def","e","else:","end","end)","end])","eraseoverlapintervals(self,","fals","findminarrowshots(self,","float('","https://leetcode.com/problems/cours","https://leetcode.com/problems/insert","https://leetcode.com/problems/interv","https://leetcode.com/problems/merg","https://leetcode.com/problems/minimum","https://leetcode.com/problems/non","ii","iii/","inf')","insert(self,","int:","intersections/solution/","interv","interval/","intervals.","intervals/","intervals:","key","lambda","like:","list","list);","list[int])","list[list[int]])","list[list[int]],","list[list[int]]:","make","max(result[","max_heap","meet","merg","merge(self,","min(min_end,","min_end","min_end:","n_e","n_s,","newinterv","newinterval:","non","number","on","overlap","overlap,","points:","possibl","previou","problem","push","question","questions,","remov","result","result.append([start,","result;","result[","return","room","s,","schedul","select","set","similar","simpl","solution:","someth","sort","sorted(intervals,","sorted(points,","start","start,","stretch","templat","time","time.","times,","trivial","veri","x:","x[0])"],"Miscellaneous/Parenthesis.html":["!=","''","''.join(stack)","'('","'(',","'(':","')'","')',","')':","'*'","'*':","'*']:","(","(,",")","),","+","+=","0","1)","1,","2","=","==",">","['(',","[')',","[]","\\","backtrack","backtrack(curr","backtrack(i","backtrack:","base","c","call","cases:","charact","character,","class","close","come","count","current","def","differ","down","elif","else:","empti","encount","extend","failur","fals","gener","https://leetcode.com/problems/gener","https://leetcode.com/problems/minimum","https://leetcode.com/problems/valid","idea.","instant","intuit","it'","keep","length","make","match","memo[(i,","minremovetomakevalid(self,","n","normal","on","one,","one.","one;","ones.","open","parenthes","parentheses/","parenthesi","pop","possibl","push","question","remov","return","s:","s[i]","simpl","solution:","stack","stack)","stack)]","stack.append(current)","stack.pop()","stack:","str)","str:","string","string/","success","that'","thing","top","tricky:","valid","veri","whole"],"Miscellaneous/InterestingMiscellaneous.html":["!=","\"\"\"","')","(","(care","(n","(target)","+","+=","0","0):","1","1)","1):","1,","1383:","14th/3357/","15th","180/problems/maximum","1:","1]","2","21st/3393/","3","621:","857:","8th","=",">","[]","achiev","algo","all,","alway","anything,","array/","best","better","blue","blue.","c","c,","cache/","cache:","challenge/540/week","challenge/546/week","class","color","combo","contest","cost","count","creat","cycl","data","def","descript","dict","dict()","differ","duplic","each","else:","encount","enumerate(nums):","exit\")","find","findduplicates(self,","first","first.","follows:","freq","freq.get(t,","freq.items():","freq[t]","frequency.","gener","good","heap","heap)","heap:","heapq","heapq.heappop(heap)","heapq.heappush(heap,","here","hire","https://leetcode.com/contest/weekli","https://leetcode.com/explore/challenge/card/juli","https://leetcode.com/explore/challenge/card/jun","https://leetcode.com/problems/find","https://leetcode.com/problems/lru","https://leetcode.com/problems/maximum","https://leetcode.com/problems/minimum","https://leetcode.com/problems/mov","https://leetcode.com/problems/task","i,","import","increas","instead.","int)","int:","interest","it'","it.","iter","juli","june","k","k,","largest","leastinterval(self,","leetcod","left,","len(nums)","list","list[int])","list[int]:","list[str],","loop","lru","maintain","max","min","miscellan","modifi","movezeroes(self,","n","n:","need","neg","non","none:","noth","nth","num","nums:","nums[abs(n)","on","one.","partial","perform","place","pointer","pop","print(\">>","prioriti","properly.","push","py","question","question.","queue","queue,","queue.append((c","queue.pop())","queue:","quicksort","range(0,","read","realli","red","remain","result","result.append('","result.append(t)","return","right","same","schedul","scheduler/","sign","similar","simpl","size","smallest","solution:","sort","sort:","step","stop","structures.","swap","t","t))","t,","task","tasks:","team/","team/discuss/539797/c%2b%2bpython","then,","there'","those","trick","us","variat","versa.","vice","way","workers/","you'd","zeroes/submissions/"],"PythonicTricks/":["#","#return","(priority,","=","@functools.lru_cache(maxsize=none)","[]","array","c","c.most_common(n)","cach","collect","convert","counter","counter(list/string)","def","dictionari","effici","elem)","element","enumerate(s):","fib_lru_cache(n):","float('","float('inf')","fo","frequent","function","functool","functools.lru_cach","get","go","heap","heapq","heapq.heappush(heap,","https://dbader.org/blog/python","i,","import","index","inf')","insert","int_max","int_max:","int_min","int_min:","item","item))","item:","item[1:]","item[1])}","k,","keep","key=lambda","last","list","list.insert(index,","list}","looping:","lru","memoiz","n","on","prioriti","python","r","result","s","s[i]","sort","sorted(x.items(),","store","string","throught","top","track","trick","us","v","valu","{item[0]:","{k:"],"BehavioralQuestions.html":["answer","answer.","base","behavior","better","challeng","colleg","customer?","deliv","direct","do?","drawn","experience,","experience.","faced?","follow","graduat","interact","made","mention","on","previou","problem","project,","question","recent","specifics,","sure","tell","time","two","up","vagu","work"]},"length":42},"tokenStore":{"root":{"0":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.02564102564102564},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0037735849056603774},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.006802721088435374},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.01},"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":0.007751937984496124},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.015625},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.018115942028985508},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.009828009828009828},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.020689655172413793},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002976190476190476},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.008403361344537815},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.016556291390728478},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.01775147928994083},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.03968253968253968},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.020061728395061727},"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.016666666666666666},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.010050251256281407},"Algorithms/DynamicProgramming-IV.html":{"ref":"Algorithms/DynamicProgramming-IV.html","tf":0.00980392156862745},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0091324200913242},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.008888888888888889},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.010101010101010102}},":":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0037735849056603774},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.006802721088435374},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0213903743315508},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0029585798816568047},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.007716049382716049},"Algorithms/DynamicProgramming-IV.html":{"ref":"Algorithms/DynamicProgramming-IV.html","tf":0.029411764705882353}}},"}":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0037735849056603774},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457}},",":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457}}}},",":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0036231884057971015},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.007380073800738007},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.0033112582781456954},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}},")":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.010869565217391304},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.002652519893899204},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0030864197530864196}},")":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.007067137809187279},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907}}},"]":{"docs":{},")":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0036900369003690036}}}},":":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.003367003367003367}}}},"/":{"1":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}},"docs":{}}},"1":{"0":{"3":{"5":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}},"docs":{}},"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.010869565217391304},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.005025125628140704}},")":{"docs":{},":":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.002512562814070352}}},"]":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.002512562814070352}}}}},"3":{"8":{"3":{"docs":{},":":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.003367003367003367}}}},"docs":{}},"docs":{}},"4":{"docs":{},"t":{"docs":{},"h":{"docs":{},"/":{"3":{"3":{"2":{"8":{"docs":{},"/":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678}}}},"docs":{}},"5":{"7":{"docs":{},"/":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.003367003367003367}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}}}},"5":{"4":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0029585798816568047}}},"docs":{},"t":{"docs":{},"h":{"docs":{"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":0.003875968992248062},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.003367003367003367}}}}},"8":{"0":{"docs":{},"/":{"docs":{},"p":{"docs":{},"r":{"docs":{},"o":{"docs":{},"b":{"docs":{},"l":{"docs":{},"e":{"docs":{},"m":{"docs":{},"s":{"docs":{},"/":{"docs":{},"l":{"docs":{},"u":{"docs":{},"c":{"docs":{},"k":{"docs":{},"i":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678}}}}}}},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"i":{"docs":{},"m":{"docs":{},"u":{"docs":{},"m":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.003367003367003367}}}}}}}}}}}}}}}}}}}},"docs":{},"/":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.006802721088435374}}}},"9":{"0":{"docs":{},"/":{"docs":{},"p":{"docs":{},"r":{"docs":{},"o":{"docs":{},"b":{"docs":{},"l":{"docs":{},"e":{"docs":{},"m":{"docs":{},"s":{"docs":{},"/":{"docs":{},"p":{"docs":{},"s":{"docs":{},"e":{"docs":{},"u":{"docs":{},"d":{"docs":{},"o":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.010752688172043012}}}}}}}}}}}}}}}}}}},"8":{"docs":{},"/":{"docs":{},"p":{"docs":{},"r":{"docs":{},"o":{"docs":{},"b":{"docs":{},"l":{"docs":{},"e":{"docs":{},"m":{"docs":{},"s":{"docs":{},"/":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"b":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.003484320557491289}}}}}}}}}}}}}}}}},"9":{"docs":{},"/":{"docs":{},"p":{"docs":{},"r":{"docs":{},"o":{"docs":{},"b":{"docs":{},"l":{"docs":{},"e":{"docs":{},"m":{"docs":{},"s":{"docs":{},"/":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"b":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457}}}}}}}}}}}}}}}}},"docs":{}},"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0037735849056603774},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.013605442176870748},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.015},"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":0.011627906976744186},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.014492753623188406},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.027586206896551724},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.016042780748663103},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.008928571428571428},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.007067137809187279},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.012605042016806723},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.013937282229965157},"Algorithms/TrickySorting.html":{"ref":"Algorithms/TrickySorting.html","tf":0.04878048780487805},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0036900369003690036},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.007957559681697613},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.006622516556291391},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.029585798816568046},"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.020202020202020204},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.023809523809523808},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.013888888888888888},"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.016666666666666666},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.010050251256281407},"Algorithms/DynamicProgramming-IV.html":{"ref":"Algorithms/DynamicProgramming-IV.html","tf":0.00980392156862745},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.01098901098901099},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0045662100456621},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.020202020202020204}},")":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0037735849056603774},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.01},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.021739130434782608},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.013793103448275862},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.011904761904761904},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.005305039787798408},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.013245033112582781},"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.010101010101010102},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.023809523809523808},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.004629629629629629},"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.016666666666666666},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.002512562814070352},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.017777777777777778},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.003367003367003367}},")":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0037735849056603774},"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":0.007751937984496124},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.006896551724137931},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.007067137809187279},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907},"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.011111111111111112}},":":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.002512562814070352}}}},"/":{"2":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0037735849056603774}}},"docs":{}},":":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005},"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":0.003875968992248062},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.006896551724137931},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.003484320557491289},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.0033112582781456954},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.007936507936507936},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.004629629629629629},"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.005555555555555556},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.002512562814070352},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.003367003367003367}}},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.006622516556291391},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}},";":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.0033112582781456954}}},"]":{"docs":{"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.010101010101010102},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0030864197530864196},"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.005555555555555556},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.002512562814070352}}}},"/":{"3":{"2":{"8":{"6":{"docs":{},"/":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"]":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0037735849056603774},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.006802721088435374},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005},"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":0.003875968992248062},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.008928571428571428},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.007067137809187279},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.007874015748031496},"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.010101010101010102},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.009259259259259259},"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.011111111111111112},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.002512562814070352},"Algorithms/DynamicProgramming-IV.html":{"ref":"Algorithms/DynamicProgramming-IV.html","tf":0.029411764705882353},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.003367003367003367}},")":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.006802721088435374},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395},"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.002777777777777778}}},":":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395},"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.008333333333333333}}},"[":{"0":{"docs":{},"]":{"docs":{"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":0.003875968992248062}}}},"1":{"docs":{},"]":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0045662100456621}},")":{"docs":{},":":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0045662100456621}}}},",":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0045662100456621}}}}},"docs":{"Algorithms/DynamicProgramming-IV.html":{"ref":"Algorithms/DynamicProgramming-IV.html","tf":0.00980392156862745}},"i":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098},"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.002777777777777778}}},"y":{"docs":{},"]":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098},"Algorithms/DynamicProgramming-IV.html":{"ref":"Algorithms/DynamicProgramming-IV.html","tf":0.0196078431372549}},",":{"docs":{"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.002777777777777778}}}}}},"]":{"docs":{"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":0.003875968992248062}}},",":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}},",":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.013605442176870748},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.01},"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":0.011627906976744186},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.01488095238095238},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0036900369003690036},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.007957559681697613},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.009933774834437087},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0029585798816568047},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098},"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.022222222222222223},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.005025125628140704},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.013333333333333334},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.003367003367003367}}},":":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.006802721088435374},"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":0.003875968992248062},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002976190476190476},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.007716049382716049},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.003367003367003367}}},"}":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.003484320557491289},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.007936507936507936}}},";":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.0033112582781456954}}},".":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0029585798816568047},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}},"d":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0030864197530864196}}}},"2":{"1":{"docs":{},"s":{"docs":{},"t":{"docs":{},"/":{"3":{"3":{"3":{"0":{"docs":{},"/":{"docs":{"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":0.003875968992248062}}}},"docs":{}},"9":{"3":{"docs":{},"/":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.003367003367003367}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}}}},"2":{"docs":{},"n":{"docs":{},"d":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.007936507936507936}}}}},"3":{"docs":{},":":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.002652519893899204}}}},"5":{"2":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0045662100456621}}},"3":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0045662100456621}}},"docs":{}},"8":{"docs":{},"t":{"docs":{},"h":{"docs":{},"/":{"3":{"3":{"4":{"3":{"docs":{},"/":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.007936507936507936}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}}}},"9":{"docs":{},"t":{"docs":{},"h":{"docs":{"Algorithms/DynamicProgramming-IV.html":{"ref":"Algorithms/DynamicProgramming-IV.html","tf":0.00980392156862745}}}}},"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0037735849056603774},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.013605442176870748},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.01},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004914004914004914},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.008928571428571428},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395},"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.002652519893899204},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.006622516556291391},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.007936507936507936},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0030864197530864196},"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.005555555555555556},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.008888888888888889},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.003367003367003367}},")":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.013605442176870748},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}},":":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.01}}}},":":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.002652519893899204}}},",":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.007936507936507936},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.002512562814070352}}},"]":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.002652519893899204},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.004629629629629629}},")":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395}}}},".":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0030864197530864196}}},"/":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.002512562814070352}}}},"3":{"0":{"0":{"0":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.0033112582781456954}}},"docs":{}},"docs":{},"t":{"docs":{},"h":{"docs":{},"/":{"3":{"3":{"7":{"5":{"docs":{},"/":{"docs":{"Algorithms/DynamicProgramming-IV.html":{"ref":"Algorithms/DynamicProgramming-IV.html","tf":0.00980392156862745}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}}}},"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02},"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":0.003875968992248062},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002976190476190476},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.002652519893899204},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.010101010101010102}},"/":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0037735849056603774}}},",":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.002512562814070352}}},")":{"docs":{},",":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.002512562814070352}}}}},"4":{"2":{"0":{"8":{"docs":{},"f":{"docs":{},"e":{"docs":{},"d":{"7":{"1":{"docs":{},"a":{"docs":{},"a":{"3":{"docs":{"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.002777777777777778}}},"docs":{}}}},"docs":{}},"docs":{}}}}},"docs":{}},"docs":{}},"3":{"5":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0045662100456621}}},"9":{"docs":{},"d":{"docs":{},"f":{"7":{"docs":{},"e":{"5":{"docs":{},"e":{"docs":{},"a":{"1":{"docs":{},"f":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011235955056179775}}}},"docs":{}}}},"docs":{}}},"docs":{}}}},"docs":{}},"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.005305039787798408},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.007936507936507936},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0030864197530864196}},"]":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.002652519893899204}},")":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.002652519893899204}}}},")":{"docs":{},":":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.002652519893899204}}},"]":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.002512562814070352}}}},":":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.002652519893899204}}}},"5":{"0":{"docs":{"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.002777777777777778}}},"6":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0045662100456621}}},"9":{"docs":{},":":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.002652519893899204}}}},"docs":{"Algorithms/DynamicProgramming-IV.html":{"ref":"Algorithms/DynamicProgramming-IV.html","tf":0.00980392156862745}},":":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.002652519893899204}}}},"6":{"2":{"1":{"docs":{},":":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.003367003367003367}}}},"docs":{}},"docs":{},")":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.002512562814070352}},",":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.005025125628140704}}}},",":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.002512562814070352}}}},"7":{"0":{"docs":{},")":{"docs":{},",":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}}},"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.002512562814070352}},")":{"docs":{},",":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.002512562814070352}}}}},"8":{"5":{"7":{"docs":{},":":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.003367003367003367}}}},"docs":{}},"docs":{},"t":{"docs":{},"h":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.003367003367003367}}}},")":{"docs":{},",":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.005025125628140704}}}}},"9":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.002512562814070352}},")":{"docs":{},",":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.005025125628140704}}}}},"docs":{},"c":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.023622047244094488},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.017777777777777778},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.006734006734006734},"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.030612244897959183}},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{"./":{"ref":"./","tf":0.25},"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.043010752688172046},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395},"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.010101010101010102}}}},"m":{"docs":{},"p":{"docs":{},"e":{"docs":{},"t":{"docs":{},"i":{"docs":{},"t":{"docs":{"./":{"ref":"./","tf":0.25}}}}}},"a":{"docs":{},"r":{"docs":{"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":0.003875968992248062},"Algorithms/TrickySorting.html":{"ref":"Algorithms/TrickySorting.html","tf":0.04878048780487805}},"i":{"docs":{},"s":{"docs":{},"o":{"docs":{},"n":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0037735849056603774},"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.010101010101010102}}}}}},"a":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},".":{"docs":{"Algorithms/TrickySorting.html":{"ref":"Algorithms/TrickySorting.html","tf":0.024390243902439025}}}}}}}},"c":{"docs":{},"t":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0045662100456621}}}}},"l":{"docs":{},"e":{"docs":{},"x":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.007547169811320755},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}},"i":{"docs":{},"t":{"docs":{},"y":{"docs":{},":":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}}}}},"t":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":3.3366445916114786},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}}},"u":{"docs":{},"t":{"docs":{},"e":{"docs":{},".":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.002512562814070352}}}}}}},"b":{"docs":{},"o":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011235955056179775},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.003367003367003367}}},"i":{"docs":{},"n":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.002652519893899204},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.010050251256281407}},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},":":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.002652519893899204},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.002512562814070352}}}}}}},"o":{"docs":{},"r":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":10.0026525198939}}}}}}}}},"m":{"docs":{},"o":{"docs":{},"n":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457},"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.008333333333333333}}}},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}}}},"e":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.003484320557491289},"Algorithms/TrickySorting.html":{"ref":"Algorithms/TrickySorting.html","tf":0.024390243902439025},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0044444444444444444}}}},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.010752688172043012},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.003484320557491289},"Algorithms/":{"ref":"Algorithms/","tf":0.024691358024691357},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.003367003367003367}}}}},"i":{"docs":{},"n":{"docs":{},"u":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.007547169811320755},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.01060070671378092},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.008403361344537815},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0036900369003690036},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.007957559681697613},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.007936507936507936},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0030864197530864196},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.005025125628140704},"Algorithms/DynamicProgramming-IV.html":{"ref":"Algorithms/DynamicProgramming-IV.html","tf":0.029411764705882353},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}}},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.007936507936507936}},"s":{"docs":{},"n":{"docs":{},"e":{"docs":{},"a":{"docs":{},"r":{"docs":{},"b":{"docs":{},"y":{"docs":{},"a":{"docs":{},"l":{"docs":{},"m":{"docs":{},"o":{"docs":{},"s":{"docs":{},"t":{"docs":{},"d":{"docs":{},"u":{"docs":{},"p":{"docs":{},"l":{"docs":{},"i":{"docs":{},"c":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.010101010101010102}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.018867924528301886},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.0033112582781456954}},"s":{"docs":{},":":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.002512562814070352}}}}}}}},"u":{"docs":{},"c":{"docs":{},"t":{"docs":{"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":5.017857142857143}},"(":{"0":{"docs":{},",":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.005952380952380952}}}},"docs":{},"i":{"docs":{},"_":{"docs":{},"s":{"docs":{},",":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.005952380952380952}}}}}},"l":{"docs":{},",":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.005952380952380952}}}},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"_":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002976190476190476}}}}}}}}}}},"p":{"docs":{},"i":{"docs":{},"v":{"docs":{},"o":{"docs":{},"t":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002976190476190476}}}}}}}},".":{"docs":{},"p":{"docs":{},"o":{"docs":{},"s":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},"_":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.005952380952380952}}}}}}}}}}}}}}}}}},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"i":{"docs":{},"m":{"docs":{},"u":{"docs":{},"m":{"docs":{},"b":{"docs":{},"i":{"docs":{},"n":{"docs":{},"a":{"docs":{},"r":{"docs":{},"y":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002976190476190476}}}}}}}}}}}}}}}}}}}}}}}}},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"(":{"0":{"docs":{},",":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002976190476190476}}}},"docs":{},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},":":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002976190476190476}}}}}},"p":{"docs":{},"i":{"docs":{},"v":{"docs":{},"o":{"docs":{},"t":{"docs":{},",":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002976190476190476}}}}}}}},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002976190476190476}},",":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002976190476190476}}}}}}}}}}}}}}}}},"a":{"docs":{},"n":{"docs":{},"t":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.002512562814070352}}}}}},"o":{"docs":{},"l":{"docs":{},"i":{"docs":{},"d":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.003484320557491289}}}}}}},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0106951871657754},"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.01020408163265306}}}}}},"d":{"docs":{},"i":{"docs":{},"t":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0036900369003690036},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.006622516556291391}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{},"y":{"docs":{},":":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}}}}}}}}}}}},"p":{"docs":{},"i":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.021505376344086023}},"e":{"docs":{},"d":{"docs":{},")":{"docs":{},")":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.0033112582781456954}}}},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.0033112582781456954}}},":":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.0033112582781456954}}}}}}},"l":{"docs":{},"l":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005},"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":0.01937984496124031},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.009828009828009828},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.013793103448275862},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.01060070671378092},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.012605042016806723},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.010452961672473868},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.015748031496062992},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.007380073800738007},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.002652519893899204},"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.01020408163265306}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},".":{"docs":{},"d":{"docs":{},"e":{"docs":{},"q":{"docs":{},"u":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0036900369003690036}}}}}}}}}}}}},"g":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.02631578947368421}}}}},"o":{"docs":{},"r":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":10.02826855123675},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.003367003367003367}},")":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395}},")":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395}}}},",":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395}}},":":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395}}},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395}},")":{"docs":{},")":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395}}}}}}}}},"s":{"docs":{},".":{"docs":{},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.007067137809187279}}}}}}},"r":{"docs":{},"e":{"docs":{},"m":{"docs":{},"o":{"docs":{},"v":{"docs":{},"e":{"docs":{},"(":{"docs":{},"c":{"docs":{},"o":{"docs":{},"l":{"docs":{},"o":{"docs":{},"r":{"docs":{},")":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.007067137809187279}}}}}}}}}}}}}}}},"/":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395}}}}}},"u":{"docs":{},"m":{"docs":{},"n":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0030864197530864196}}}}}},"u":{"docs":{},"r":{"docs":{},"s":{"docs":{"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.0625},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.003484320557491289},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0045662100456621}},"e":{"docs":{},")":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0036231884057971015}}}}}},"n":{"docs":{},"t":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.0033112582781456954},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0030864197530864196},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0044444444444444444},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.02356902356902357}},"p":{"docs":{},"a":{"docs":{},"i":{"docs":{},"r":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457}}}}}}}}}}}}},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.003484320557491289}}}}}}}}}}}}}}},"/":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.007936507936507936}}}},"e":{"docs":{},"r":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.005305039787798408},"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.01020408163265306}},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},")":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.002652519893899204}}}}}}},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"/":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},")":{"docs":{"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.01020408163265306}}}}}}}}}}}}}}},")":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.005305039787798408}},":":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.002652519893899204}}}},":":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.002652519893899204}}},"[":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"]":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.005305039787798408}},":":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.002652519893899204}}}}}}}}}},"b":{"docs":{},"i":{"docs":{},"t":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.007936507936507936}}}}}}}}}}}}}}},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0036231884057971015}}}}},"s":{"docs":{},"t":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.003367003367003367}}}},"i":{"docs":{},"n":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098},"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.002777777777777778},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.007537688442211055}},"s":{"docs":{},",":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.002512562814070352}}},":":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.002512562814070352}}},"[":{"docs":{},"j":{"docs":{},"]":{"docs":{},")":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.002512562814070352}},")":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.002512562814070352}}}}}}}}}},"r":{"docs":{},"r":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}}}}}},"l":{"docs":{},"a":{"docs":{},"s":{"docs":{},"s":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.010752688172043012},"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0037735849056603774},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.006802721088435374},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.015},"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":0.023255813953488372},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.015625},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.018115942028985508},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0171990171990172},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.013793103448275862},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0106951871657754},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.017857142857142856},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.01060070671378092},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.012605042016806723},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.010452961672473868},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.015748031496062992},"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678},"Algorithms/TrickySorting.html":{"ref":"Algorithms/TrickySorting.html","tf":0.024390243902439025},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.01107011070110701},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.013262599469496022},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.006622516556291391},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.014792899408284023},"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.010101010101010102},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.015873015873015872},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.009259259259259259},"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.013888888888888888},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.007537688442211055},"Algorithms/DynamicProgramming-IV.html":{"ref":"Algorithms/DynamicProgramming-IV.html","tf":0.00980392156862745},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0182648401826484},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0044444444444444444},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.010101010101010102}},",":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.010752688172043012}}}}}},"o":{"docs":{},"s":{"docs":{},"e":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.0033112582781456954},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.013333333333333334}},"s":{"docs":{},"t":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0029585798816568047},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.002512562814070352}}}}}}},"i":{"docs":{},"m":{"docs":{},"b":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0030864197530864196}}}}}},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"t":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.021505376344086023},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0036900369003690036},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.003367003367003367}}}}},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"i":{"docs":{},"a":{"docs":{},",":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125}}}}}}}}}},"h":{"docs":{},"e":{"docs":{},"c":{"docs":{},"k":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.02247191011235955},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0036231884057971015},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004914004914004914},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.003484320557491289},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.0033112582781456954},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0029585798816568047},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0030864197530864196},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.005025125628140704},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0045662100456621}},"s":{"docs":{},":":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0037735849056603774},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.006802721088435374}}}},"i":{"docs":{},"f":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"r":{"docs":{},"e":{"docs":{},"q":{"docs":{},"u":{"docs":{},"i":{"docs":{},"s":{"docs":{},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.007874015748031496}}}}}}}}}}}}}}}}}}}}}}}},"a":{"docs":{},"t":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.002652519893899204}}}}},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.02631578947368421}},"e":{"docs":{},"/":{"5":{"2":{"8":{"docs":{},"/":{"docs":{},"w":{"docs":{},"e":{"docs":{},"e":{"docs":{},"k":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282}}}}}}}},"docs":{}},"3":{"5":{"docs":{},"/":{"docs":{},"w":{"docs":{},"e":{"docs":{},"e":{"docs":{},"k":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678}}}}}}}},"6":{"docs":{},"/":{"docs":{},"w":{"docs":{},"e":{"docs":{},"e":{"docs":{},"k":{"docs":{"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":0.003875968992248062}}}}}}}},"7":{"docs":{},"/":{"docs":{},"w":{"docs":{},"e":{"docs":{},"e":{"docs":{},"k":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.007936507936507936}}}}}}}},"docs":{}},"4":{"0":{"docs":{},"/":{"docs":{},"w":{"docs":{},"e":{"docs":{},"e":{"docs":{},"k":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.003367003367003367}}}}}}}},"3":{"docs":{},"/":{"docs":{},"w":{"docs":{},"e":{"docs":{},"e":{"docs":{},"k":{"docs":{"Algorithms/DynamicProgramming-IV.html":{"ref":"Algorithms/DynamicProgramming-IV.html","tf":0.00980392156862745}}}}}}}},"6":{"docs":{},"/":{"docs":{},"w":{"docs":{},"e":{"docs":{},"e":{"docs":{},"k":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.003367003367003367}}}}}}}},"docs":{}},"docs":{}},"docs":{}}}}}}}},"r":{"docs":{},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.002512562814070352},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0044444444444444444}},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"/":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.07692307692307693}}}},",":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0044444444444444444}}}}}}}}},"n":{"docs":{},"g":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.005305039787798408},"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.002777777777777778},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.010050251256281407}},"e":{"docs":{},".":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0029585798816568047}}},",":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}},"/":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.002512562814070352}}}}}}},"o":{"docs":{},"i":{"docs":{},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},":":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.006802721088435374},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.002652519893899204}}},",":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}}}}},"o":{"docs":{},"s":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.005305039787798408}}}}},"i":{"docs":{},"l":{"docs":{},"d":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457}},"r":{"docs":{},"e":{"docs":{},"n":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.003484320557491289}}}}}}}}},"a":{"docs":{},"t":{"docs":{},"c":{"docs":{},"h":{"docs":{},":":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.011320754716981131}}}}}},"l":{"docs":{},"l":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.010610079575596816},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.002512562814070352},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0044444444444444444}},"s":{"docs":{},"/":{"docs":{"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":0.003875968992248062}}}}},"c":{"docs":{},"u":{"docs":{},"l":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.003484320557491289},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},".":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.002512562814070352}}}}}}}}}}},"_":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},"(":{"docs":{},"m":{"docs":{},"i":{"docs":{},"d":{"docs":{},")":{"docs":{},":":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0029585798816568047}}}}}}}}}}}}}},"s":{"docs":{},"e":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.03125},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0036900369003690036},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.002652519893899204},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.008875739644970414},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0030864197530864196},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.010050251256281407},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0091324200913242}},"s":{"docs":{},".":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011235955056179775}}},":":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.006622516556291391},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.008888888888888889}}}},")":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}},"h":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.03296703296703297}},",":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.01098901098901099}}},".":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}}},"n":{"docs":{},"v":{"docs":{},"i":{"docs":{},"s":{"docs":{},"i":{"docs":{},"t":{"docs":{},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"m":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907}}}}}}}}}}}}}}}}}}}}},"f":{"docs":{},"i":{"docs":{},"n":{"docs":{},"i":{"docs":{},"s":{"docs":{},"h":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.003484320557491289}}}}}}}}}}}}}},"m":{"docs":{},"e":{"docs":{},"a":{"docs":{},"s":{"docs":{},"u":{"docs":{},"r":{"docs":{},"e":{"docs":{},"w":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0036900369003690036}}}}}}}}}}}}}}}}}}}},"j":{"docs":{},"u":{"docs":{},"m":{"docs":{},"p":{"docs":{},"f":{"docs":{},"r":{"docs":{},"o":{"docs":{},"m":{"docs":{},"p":{"docs":{},"o":{"docs":{},"s":{"docs":{},"i":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.0033112582781456954}}}}}}}}}}}}}}}}}}}}}},"_":{"docs":{},"c":{"docs":{},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},"y":{"docs":{},"(":{"docs":{},"c":{"docs":{},"a":{"docs":{},"p":{"docs":{},"a":{"docs":{},"c":{"docs":{},"i":{"docs":{},"t":{"docs":{},"y":{"docs":{},")":{"docs":{},":":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0029585798816568047}}}}}}}}}}}}}}}}}}},"'":{"docs":{},"t":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0045662100456621}}}}},"r":{"docs":{},"e":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.0033112582781456954}}}},"u":{"docs":{},"s":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}},"c":{"docs":{},"h":{"docs":{"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.01020408163265306}},"e":{"docs":{},"/":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.003367003367003367}}},":":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.003367003367003367}}}}}}},"u":{"docs":{},"r":{"docs":{},"r":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.007547169811320755},"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":0.003875968992248062},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0390625},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.007246376811594203},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.020689655172413793},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.003484320557491289},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.009933774834437087},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.008875739644970414},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.01256281407035176},"Algorithms/DynamicProgramming-IV.html":{"ref":"Algorithms/DynamicProgramming-IV.html","tf":0.0196078431372549},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.044444444444444446}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.015625}},":":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.013793103448275862}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125}},":":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.013793103448275862}}}}}}}},"v":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.020689655172413793}},"a":{"docs":{},"l":{"docs":{},")":{"docs":{},")":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.013793103448275862}}}}}}}},":":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.015625},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.0033112582781456954}}},")":{"docs":{},":":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0036231884057971015}}},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.0033112582781456954}}}},"_":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.010869565217391304}},")":{"docs":{},":":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0036231884057971015}}}}}}}},",":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.006896551724137931},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.0033112582781456954}}}}}}},"a":{"docs":{},"t":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011235955056179775}}}}},"s":{"docs":{},"t":{"docs":{},"o":{"docs":{},"m":{"docs":{"Algorithms/TrickySorting.html":{"ref":"Algorithms/TrickySorting.html","tf":0.024390243902439025}},"e":{"docs":{},"r":{"docs":{},"?":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.02631578947368421}}}}}}}}}},"y":{"docs":{},"c":{"docs":{},"l":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.003484320557491289},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.003367003367003367}},"e":{"docs":{},",":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.003484320557491289}}}}}}},",":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.003484320557491289},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.007874015748031496},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.006734006734006734}}},"c":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.002652519893899204}}},"e":{"docs":{},"l":{"docs":{},"l":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}},".":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}},"_":{"docs":{},"c":{"docs":{},"o":{"docs":{},"l":{"docs":{},"u":{"docs":{},"m":{"docs":{},"n":{"docs":{},")":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}}}}}}}},"s":{"docs":{},",":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}}}}},".":{"docs":{},"m":{"docs":{},"o":{"docs":{},"s":{"docs":{},"t":{"docs":{},"_":{"docs":{},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"m":{"docs":{},"o":{"docs":{},"n":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.01020408163265306}}}}}}}}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.0033112582781456954}},"r":{"docs":{},"o":{"docs":{},"d":{"docs":{},"u":{"docs":{},"c":{"docs":{},"t":{"docs":{"./":{"ref":"./","tf":10.25}}}}}}}},")":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0037735849056603774},"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":0.011627906976744186},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.007246376811594203},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.006896551724137931},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.008403361344537815},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.007380073800738007},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.005305039787798408},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.006622516556291391},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.008875739644970414},"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.010101010101010102},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.007936507936507936},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.006172839506172839},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.005025125628140704},"Algorithms/DynamicProgramming-IV.html":{"ref":"Algorithms/DynamicProgramming-IV.html","tf":0.00980392156862745},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.003367003367003367}}},":":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0037735849056603774},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005},"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":0.011627906976744186},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.010869565217391304},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.007371007371007371},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.006896551724137931},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002976190476190476},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.008403361344537815},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0036900369003690036},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.013245033112582781},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.014792899408284023},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.007936507936507936},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.009259259259259259},"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.013888888888888888},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.005025125628140704},"Algorithms/DynamicProgramming-IV.html":{"ref":"Algorithms/DynamicProgramming-IV.html","tf":0.00980392156862745},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0091324200913242},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.003367003367003367}}},"e":{"docs":{},"r":{"docs":{},"v":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.011320754716981131},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":10.036529680365296}},"i":{"docs":{},"e":{"docs":{},"w":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011235955056179775},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}}},"a":{"docs":{},"l":{"docs":{},"/":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0045662100456621}}},"s":{"docs":{},".":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0045662100456621}}},"/":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0091324200913242}}},":":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0365296803652968}}}}}}},"s":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"/":{"docs":{},"s":{"docs":{},"o":{"docs":{},"l":{"docs":{},"u":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"/":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0045662100456621}}}}}}}}}}}}}}}}}}}},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":5}}}}},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.02631578947368421}}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":0.003875968992248062}}}}}},",":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.006896551724137931},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.007067137809187279},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.01680672268907563},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.006968641114982578},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.015748031496062992},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.007380073800738007},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.005305039787798408},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.016556291390728478},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0029585798816568047},"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.010101010101010102},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.006172839506172839},"Algorithms/DynamicProgramming-IV.html":{"ref":"Algorithms/DynamicProgramming-IV.html","tf":0.00980392156862745}}},"(":{"docs":{},"b":{"docs":{},"u":{"docs":{},"c":{"docs":{},"k":{"docs":{},"e":{"docs":{},"t":{"docs":{},")":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.005305039787798408}}},"[":{"2":{"docs":{},":":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.002652519893899204}}},"]":{"docs":{},")":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.002652519893899204}}}}},"docs":{}}}}}}}}},"[":{"docs":{},"]":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.0033112582781456954}}}},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.0033112582781456954}}}},"i":{"docs":{},"n":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.0033112582781456954}}}}},"u":{"docs":{},"i":{"docs":{},"t":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.002512562814070352},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0044444444444444444}}}}},"_":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.01020408163265306}},":":{"docs":{"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.01020408163265306}}}}},"i":{"docs":{},"n":{"docs":{"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.01020408163265306}},":":{"docs":{"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.01020408163265306}}}}}}}},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"u":{"docs":{},"c":{"docs":{},"t":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":5.010752688172043}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},":":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02}}}}}}}}}}},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0037735849056603774},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.003484320557491289},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0029585798816568047},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}},".":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.003367003367003367}}}}}},"a":{"docs":{},"n":{"docs":{},"t":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0044444444444444444}},"i":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.002652519893899204}}}}}}},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457},"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.01020408163265306}},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0045662100456621}}}}}}}}}}},"p":{"docs":{},"i":{"docs":{},"r":{"docs":{"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.010101010101010102}}}}},"u":{"docs":{},"r":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}}},"c":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"s":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0037735849056603774},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.003367003367003367}}}}}},"l":{"docs":{},"u":{"docs":{},"d":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0037735849056603774},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.002652519893899204},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0029585798816568047},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.002512562814070352}},"e":{"docs":{},"d":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.005305039787798408}},":":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.002652519893899204}}}}}}}}}}},"o":{"docs":{},"m":{"docs":{"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":0.003875968992248062},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.015748031496062992}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"[":{"docs":{},"n":{"docs":{},"]":{"docs":{},".":{"docs":{},"r":{"docs":{},"e":{"docs":{},"m":{"docs":{},"o":{"docs":{},"v":{"docs":{},"e":{"docs":{},"(":{"docs":{},"c":{"docs":{},")":{"docs":{"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.007874015748031496}}}}}}}}}}}},":":{"docs":{"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.007874015748031496}}}},"e":{"docs":{},"i":{"docs":{},"]":{"docs":{},".":{"docs":{},"r":{"docs":{},"e":{"docs":{},"m":{"docs":{},"o":{"docs":{},"v":{"docs":{},"e":{"docs":{},"(":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},")":{"docs":{"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.007874015748031496}}}}}}}}}}}}}}},":":{"docs":{"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.007874015748031496}}}}}}},"p":{"docs":{},"]":{"docs":{},".":{"docs":{},"a":{"docs":{},"d":{"docs":{},"d":{"docs":{},"(":{"docs":{},"c":{"docs":{},")":{"docs":{"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.015748031496062992}}}}}}}}}}}}}}}}}},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.027210884353741496},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.002652519893899204},"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.01020408163265306}}},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"l":{"docs":{},"y":{"docs":{},".":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}}}}}}}}}}},"i":{"docs":{},"c":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.002512562814070352}}}}},"f":{"docs":{},"o":{"docs":{"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":0.003875968992248062},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.006968641114982578}},"[":{"docs":{},"l":{"docs":{},"]":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.003484320557491289}}},"a":{"docs":{},"b":{"docs":{},"e":{"docs":{},"l":{"docs":{},"s":{"docs":{},"[":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"]":{"docs":{},"]":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.006968641114982578}}}}}}}}}}}}}}}}},"'":{"docs":{},")":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0029585798816568047},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0091324200913242},"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.01020408163265306}},",":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457}}}}}},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011235955056179775},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":5.015625},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.005952380952380952}},"e":{"docs":{},"r":{"docs":{},":":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002976190476190476}}}}}}}},"i":{"docs":{},"t":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.003484320557491289}},"i":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457}}}}},"p":{"docs":{},"u":{"docs":{},"t":{"docs":{"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"Algorithms/":{"ref":"Algorithms/","tf":0.024691358024691357},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0036900369003690036}}}}}},"m":{"docs":{},"p":{"docs":{},"l":{"docs":{},"e":{"docs":{},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.021505376344086023},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.006802721088435374}},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},":":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.006802721088435374}}}}}}}}}}}}},"i":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0037735849056603774},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0036900369003690036}}}},"r":{"docs":{},"o":{"docs":{},"v":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.010752688172043012},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}}},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.01},"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":0.023255813953488372},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.007371007371007371},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.013793103448275862},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002976190476190476},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.01060070671378092},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.02100840336134454},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.010452961672473868},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.015748031496062992},"Algorithms/TrickySorting.html":{"ref":"Algorithms/TrickySorting.html","tf":0.04878048780487805},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.01107011070110701},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.002652519893899204},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.003367003367003367},"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.030612244897959183}}}}},"e":{"docs":{},"r":{"docs":{},"f":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.015873015873015872}}}}}}}}}},")":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0037735849056603774}},":":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.006802721088435374},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005}}}},",":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.007547169811320755},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.006802721088435374},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.01},"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":0.003875968992248062},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002976190476190476},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.005917159763313609},"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.010101010101010102},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.003367003367003367},"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.01020408163265306}}},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.015625},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0029585798816568047},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.003367003367003367}},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},".":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0037735849056603774},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0029585798816568047}}}}},"v":{"docs":{},"e":{"docs":{},")":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.033707865168539325}}}}}}}}},"m":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.002652519893899204},"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.01020408163265306}},")":{"docs":{},")":{"docs":{"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.01020408163265306}}}},":":{"docs":{"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.01020408163265306}}},"[":{"1":{"docs":{},":":{"docs":{},"]":{"docs":{"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.01020408163265306}}}},"]":{"docs":{},")":{"docs":{},"}":{"docs":{"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.01020408163265306}}}}}},"docs":{}}}},"h":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0037735849056603774}}},"'":{"docs":{"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":0.003875968992248062},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.003484320557491289},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.005917159763313609},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.022222222222222223},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.010101010101010102}}},"i":{"docs":{},"n":{"docs":{},"e":{"docs":{},"r":{"docs":{},"a":{"docs":{},"r":{"docs":{},"y":{"docs":{},"/":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.003484320557491289}}}}}}}}}},".":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.003367003367003367}}}},"s":{"docs":{},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},"(":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},",":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.02040816326530612}}}}}}}}}}}}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"i":{"docs":{},"d":{"docs":{},"b":{"docs":{},"s":{"docs":{},"t":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457}}}}}}}}}}}}}}}},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"s":{"docs":{},"i":{"docs":{},"n":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.006896551724137931}}}}}}}}}}}}}}},"b":{"docs":{},"i":{"docs":{},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395}}}}}}}}}}}}}}}}}},"/":{"docs":{"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":0.003875968992248062}}},"]":{"docs":{"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":0.003875968992248062}}},"d":{"docs":{},"e":{"docs":{},"a":{"docs":{"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":0.003875968992248062}},":":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.002512562814070352}}},".":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0044444444444444444}}}}}},"i":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098},"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":3.333333333333333},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0045662100456621}},"/":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0036231884057971015},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.007874015748031496},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0036900369003690036},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.002652519893899204},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0029585798816568047},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.005025125628140704}}},"i":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":3.333333333333333}},"/":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0036231884057971015},"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.010101010101010102},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.002512562814070352},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0045662100456621}}}}},"_":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002976190476190476}},"e":{"docs":{},")":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002976190476190476}},":":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002976190476190476}}}},":":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002976190476190476}}}}},"v":{"docs":{"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.0625},"Algorithms/DynamicProgramming-IV.html":{"ref":"Algorithms/DynamicProgramming-IV.html","tf":3.3431372549019605}},"/":{"docs":{"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.007874015748031496},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.002512562814070352}},"d":{"docs":{},"i":{"docs":{},"s":{"docs":{},"c":{"docs":{},"u":{"docs":{},"s":{"docs":{},"s":{"docs":{},"/":{"5":{"4":{"1":{"1":{"7":{"docs":{},"/":{"docs":{},"c":{"docs":{},"l":{"docs":{},"e":{"docs":{},"a":{"docs":{},"n":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}}}}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}}},"f":{"docs":{},"(":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.005305039787798408}},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{},"r":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.006622516556291391}}}}}},"i":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.0033112582781456954},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}},"n":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.0033112582781456954}}},"f":{"docs":{},"a":{"docs":{},"i":{"docs":{},"l":{"docs":{},"u":{"docs":{},"r":{"docs":{},"e":{"docs":{},"_":{"docs":{},"b":{"docs":{},"a":{"docs":{},"s":{"docs":{},"e":{"docs":{},"_":{"docs":{},"c":{"docs":{},"a":{"docs":{},"s":{"docs":{},"e":{"docs":{},")":{"docs":{},":":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"u":{"docs":{},"c":{"docs":{},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{},"_":{"docs":{},"b":{"docs":{},"a":{"docs":{},"s":{"docs":{},"e":{"docs":{},"_":{"docs":{},"c":{"docs":{},"a":{"docs":{},"s":{"docs":{},"e":{"docs":{},")":{"docs":{},":":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}}}}}}}}}}}}}}}}}}}}},":":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.0033112582781456954},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.007936507936507936},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.002512562814070352}}},".":{"docs":{},"e":{"docs":{},".":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0029585798816568047}}}}},"l":{"docs":{},"l":{"docs":{},"u":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.010101010101010102}}}}}}}},"+":{"1":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}},"docs":{}}},"n":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.02564102564102564},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0037735849056603774},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.013605442176870748},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.03},"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":0.003875968992248062},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.007067137809187279},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.006968641114982578},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.007874015748031496},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.021220159151193633},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.016556291390728478},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0029585798816568047},"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.020202020202020204},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.007936507936507936},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.013888888888888888},"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.03333333333333333},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.007537688442211055},"Algorithms/DynamicProgramming-IV.html":{"ref":"Algorithms/DynamicProgramming-IV.html","tf":0.00980392156862745},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.013333333333333334},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.010101010101010102},"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.01020408163265306}},"o":{"docs":{},"t":{"docs":{},"e":{"docs":{"./":{"ref":"./","tf":0.25},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.002652519893899204}},":":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457}}},"s":{"docs":{},":":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0036900369003690036}}}}},"i":{"docs":{},"c":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002976190476190476},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.002512562814070352}}}},"!":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.003484320557491289}}},"h":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.003367003367003367}}}},"n":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0037735849056603774},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0045662100456621},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.003367003367003367}},"e":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.007246376811594203},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0106951871657754},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.017857142857142856}},":":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.005305039787798408},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.003367003367003367}}}}},"w":{"docs":{"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":0.003875968992248062}}},"d":{"docs":{},"e":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.033707865168539325},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0036231884057971015},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.009828009828009828},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.006896551724137931},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0213903743315508},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.017857142857142856},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.008403361344537815},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.017421602787456445},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.015748031496062992},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.002652519893899204}},".":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011235955056179775},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0036231884057971015},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0106951871657754},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.005952380952380952}},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.007246376811594203},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.008928571428571428}},":":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0036231884057971015},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457}}},",":{"docs":{"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.008928571428571428}},":":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.010869565217391304},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004914004914004914}}},"]":{"docs":{"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877}}}}}}}},"v":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.007246376811594203},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002976190476190476}},"a":{"docs":{},"l":{"docs":{},")":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.018115942028985508},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004914004914004914},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0106951871657754}},":":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0036231884057971015}}}},"]":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457}},")":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457}}}}}}}},"/":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011235955056179775}}},":":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.010869565217391304},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.009828009828009828},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877}}},"'":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457}}},"s":{"docs":{},".":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.003484320557491289}}}},",":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.007067137809187279}}}}},"r":{"docs":{},"m":{"docs":{},"a":{"docs":{},"l":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.002652519893899204},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0044444444444444444}},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.002652519893899204}}}}}}}}}}}}}}}}}}},":":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.007067137809187279},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.01680672268907563},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.003484320557491289},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.007874015748031496},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.006622516556291391},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0029585798816568047},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.004629629629629629},"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.016666666666666666},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.002512562814070352},"Algorithms/DynamicProgramming-IV.html":{"ref":"Algorithms/DynamicProgramming-IV.html","tf":0.00980392156862745},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.003367003367003367}}},"u":{"docs":{},"m":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.006802721088435374},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.01},"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":0.003875968992248062},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.002652519893899204},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.005917159763313609},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.007936507936507936},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.003367003367003367}},"s":{"1":{"docs":{},":":{"docs":{"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":0.003875968992248062}}}},"2":{"docs":{},":":{"docs":{"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":0.003875968992248062}}}},"docs":{},":":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0037735849056603774},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.006802721088435374},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.01},"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":0.003875968992248062},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.005952380952380952},"Algorithms/TrickySorting.html":{"ref":"Algorithms/TrickySorting.html","tf":0.024390243902439025},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.007957559681697613},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.005917159763313609},"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.010101010101010102},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0030864197530864196},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.006734006734006734}}},"[":{"0":{"docs":{},"]":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0029585798816568047},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.004629629629629629}}}},"1":{"docs":{},"]":{"docs":{},")":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}}},"docs":{},"p":{"docs":{},"]":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282}},",":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282}}}},"o":{"docs":{},"s":{"docs":{},"i":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"]":{"docs":{},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.0033112582781456954}}}}}}}}}}}},"z":{"docs":{},"]":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282}},",":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282}}}}},"j":{"docs":{},"]":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.006802721088435374}},")":{"docs":{},"]":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005}},")":{"docs":{},")":{"docs":{},")":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005}}}}}}},",":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005}}}}},"i":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005}},"]":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002976190476190476}},")":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}},",":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}}},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"u":{"docs":{},"e":{"docs":{},"[":{"docs":{"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":0.003875968992248062}}}}}}}},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"_":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},"]":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002976190476190476}},":":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002976190476190476}}}}}}}}}}}}},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"]":{"docs":{},":":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.005917159763313609}}}}}}},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},"]":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.008875739644970414}}}}}}}},"a":{"docs":{},"b":{"docs":{},"s":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.003367003367003367}}}}}}}}},")":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.0033112582781456954}}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.006622516556291391}}}}}}}}}},"b":{"docs":{},"e":{"docs":{},"r":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0037735849056603774},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005},"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.005305039787798408},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0029585798816568047},"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.010101010101010102},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.007936507936507936},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.007716049382716049},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.007537688442211055},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.02197802197802198},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0045662100456621}},"s":{"docs":{},"/":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0036231884057971015}}}},"/":{"docs":{"Algorithms/TrickySorting.html":{"ref":"Algorithms/TrickySorting.html","tf":0.024390243902439025}}}}}},"t":{"docs":{},"e":{"docs":{},"a":{"docs":{},"m":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005}}}}}}}}}}}}},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"r":{"docs":{},"s":{"docs":{"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.007874015748031496}},"e":{"docs":{},"s":{"docs":{},")":{"docs":{},":":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.003484320557491289}}},")":{"docs":{"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.007874015748031496}}}},":":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.003484320557491289},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.007874015748031496}}}}}}}}}},")":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0029585798816568047}}},":":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.007936507936507936}}}}},")":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0037735849056603774},"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.010101010101010102},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0030864197530864196},"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.005555555555555556}},"]":{"docs":{"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":0.003875968992248062},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.007067137809187279},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.006968641114982578},"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.03333333333333333}},":":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.003484320557491289}}}},")":{"docs":{"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.007874015748031496}}},":":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.002652519893899204},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.006622516556291391},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.004629629629629629},"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.011111111111111112}}},",":{"docs":{"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.011111111111111112}}}},"e":{"docs":{},"g":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.003367003367003367}},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"v":{"docs":{},"e":{"docs":{},",":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0037735849056603774}}}}}}}}},"w":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0037735849056603774},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877}},"_":{"docs":{},"p":{"docs":{},"a":{"docs":{},"t":{"docs":{},"h":{"docs":{},"_":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.010869565217391304}},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"n":{"docs":{},"e":{"docs":{},"w":{"docs":{},"_":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},")":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0036231884057971015}}}}}}}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.007246376811594203}}}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"v":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0091324200913242}},"a":{"docs":{},"l":{"docs":{},":":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0045662100456621}}}}}}}}}}}},"e":{"docs":{},"d":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.009828009828009828},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.010452961672473868},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0036900369003690036},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.002652519893899204},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0029585798816568047},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0030864197530864196},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.010050251256281407},"Algorithms/DynamicProgramming-IV.html":{"ref":"Algorithms/DynamicProgramming-IV.html","tf":0.00980392156862745},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.006734006734006734}}}},"x":{"docs":{},"t":{"docs":{"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":0.011627906976744186},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.002652519893899204},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0029585798816568047}},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":0.003875968992248062}}}}}}}},"g":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"e":{"docs":{},"l":{"docs":{},"e":{"docs":{},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":0.003875968992248062}}}}}}}}}}}}}}}}}}}}}},"p":{"docs":{},"o":{"docs":{},"s":{"docs":{},"i":{"docs":{},"t":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.006622516556291391}}}}}}}}},"i":{"docs":{"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.016042780748663103},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.007874015748031496}},"g":{"docs":{},"h":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395}},"t":{"docs":{},"b":{"docs":{},"o":{"docs":{},"r":{"docs":{"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.010101010101010102}}}}}},":":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395}}}}}},"s":{"docs":{},"t":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"/":{"docs":{"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.0625}}}}}}}},"t":{"docs":{},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"k":{"docs":{},"d":{"docs":{},"e":{"docs":{},"l":{"docs":{},"a":{"docs":{},"y":{"docs":{},"t":{"docs":{},"i":{"docs":{},"m":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907}}}}}}}}}}}}}}}}}}}}}},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.0033112582781456954},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0029585798816568047}},"l":{"docs":{},"i":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.002512562814070352}}}}},"y":{"docs":{},",":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.002512562814070352}}},".":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}}}}}}}},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0029585798816568047}}}}}},",":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.006802721088435374},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.008403361344537815}}},"_":{"docs":{},"d":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907}},",":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907}}}},"e":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0045662100456621}}},"s":{"docs":{},",":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0045662100456621}}}}},"c":{"docs":{},"r":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.005305039787798408}},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"b":{"docs":{},"u":{"docs":{},"c":{"docs":{},"k":{"docs":{},"e":{"docs":{},"t":{"docs":{},"[":{"docs":{},":":{"docs":{},"]":{"docs":{},")":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.002652519893899204}}}}}}}}}}}}}}}}}}}}}},"t":{"docs":{},"h":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.003367003367003367}}}}},"(":{"0":{"docs":{},",":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.005025125628140704}}}},"1":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.006802721088435374},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.007936507936507936}},")":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02}}},",":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.007537688442211055}}}},"2":{"docs":{},",":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.005025125628140704}}}},"4":{"docs":{},",":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.002512562814070352}}}},"6":{"docs":{},",":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.002512562814070352}}}},"7":{"docs":{},",":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.002512562814070352}}}},"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0044444444444444444},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.003367003367003367}},"h":{"docs":{},"t":{"docs":{},"t":{"docs":{},"p":{"docs":{},"s":{"docs":{},":":{"docs":{},"/":{"docs":{},"/":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},".":{"docs":{},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"/":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"/":{"docs":{},"w":{"docs":{},"e":{"docs":{},"e":{"docs":{},"k":{"docs":{},"l":{"docs":{},"i":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.010752688172043012}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"k":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.002652519893899204}},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"a":{"docs":{},"!":{"docs":{},")":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.010752688172043012}}}}}}}},"n":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"Algorithms/DynamicProgramming-IV.html":{"ref":"Algorithms/DynamicProgramming-IV.html","tf":0.00980392156862745}}}}}}}},"n":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0037735849056603774},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.007936507936507936},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.002512562814070352},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.003367003367003367}},"o":{"docs":{},"t":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0036231884057971015}}},"d":{"docs":{},"e":{"docs":{},".":{"docs":{},"v":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004914004914004914}}}},",":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395}}}}}},"u":{"docs":{},"m":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.007936507936507936}},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.01}}}}}}}},"c":{"docs":{},"r":{"docs":{},")":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.002652519893899204}}}}}},"d":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0037735849056603774},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907}},"j":{"docs":{},"i":{"docs":{},"k":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"a":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907}}}}}}}}},"p":{"docs":{},"[":{"docs":{},"p":{"docs":{},"o":{"docs":{},"s":{"docs":{},"]":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.002512562814070352}}}}}}}}},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002976190476190476}},"_":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0037735849056603774}}}}}}}}}},"g":{"docs":{},".":{"docs":{"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":0.003875968992248062}}}}},"i":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0037735849056603774},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.009933774834437087},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.005025125628140704}},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.0033112582781456954}}},"n":{"docs":{},"t":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.0033112582781456954}}},"c":{"docs":{},"l":{"docs":{},"u":{"docs":{},"d":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.002512562814070352}}}}}}},")":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0029585798816568047}}}},"s":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{},"e":{"docs":{},"d":{"docs":{},")":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0037735849056603774}}}}}}}},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.005917159763313609},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0045662100456621}},"_":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0037735849056603774}}}}}}}}}}}},"u":{"docs":{},"m":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0036231884057971015}}}},"e":{"docs":{},"e":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.007936507936507936}}}}},"c":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395}},"h":{"docs":{},"e":{"docs":{},"c":{"docs":{},"k":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.006802721088435374}}}}}},"o":{"docs":{},"l":{"docs":{},"l":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},".":{"docs":{},"d":{"docs":{},"e":{"docs":{},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},")":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011235955056179775}}}}}}}}}}}}}}}}}}},"u":{"docs":{},"r":{"docs":{},"r":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0036231884057971015}}}}}}}},"a":{"docs":{},"r":{"docs":{},"e":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.003367003367003367}}}}}},"(":{"docs":{},"i":{"docs":{"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":0.003875968992248062}},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.0033112582781456954}}}}},"l":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004914004914004914}},"e":{"docs":{},"v":{"docs":{},"e":{"docs":{},"l":{"docs":{},"w":{"docs":{},"i":{"docs":{},"s":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011235955056179775}}}}}}}},"f":{"docs":{},"t":{"docs":{},"_":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457}}}}}}}},"n":{"docs":{},"(":{"docs":{},"t":{"docs":{},"i":{"docs":{},"c":{"docs":{},"k":{"docs":{},"e":{"docs":{},"t":{"docs":{},"s":{"docs":{},")":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.003484320557491289}}}}}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{},"e":{"docs":{},"s":{"docs":{},")":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}}}}}}}}},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}}}}}},"a":{"docs":{},"s":{"docs":{},"t":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0045662100456621}}}}}},"r":{"docs":{},"e":{"docs":{},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{},"s":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.033707865168539325}}}}}}},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},"_":{"docs":{},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457}}}}}}}}}}},"f":{"docs":{},"l":{"docs":{},"o":{"docs":{},"a":{"docs":{},"t":{"docs":{},"(":{"docs":{},"'":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457}}}}}}}}},"x":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0036900369003690036},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}},"_":{"docs":{},"f":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"d":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.027586206896551724}}}}}}}}},"y":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}},"_":{"docs":{},"f":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"d":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.006896551724137931}}}}}}}},"o":{"docs":{},"u":{"docs":{},"'":{"docs":{},"l":{"docs":{},"l":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0036900369003690036}}}}}}}},"a":{"docs":{},"d":{"docs":{},"d":{"docs":{"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877}}}},"r":{"docs":{},"r":{"docs":{},"a":{"docs":{},"y":{"docs":{},"s":{"docs":{},",":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678}}}}}}}}},"u":{"docs":{},"s":{"docs":{},"e":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.0033112582781456954}}}}},"t":{"docs":{"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.020202020202020204}},"i":{"docs":{},"m":{"docs":{},"e":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907}}}}},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"s":{"docs":{},",":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678}}}}}}},"o":{"docs":{},"p":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}},"t":{"docs":{},"a":{"docs":{},"l":{"docs":{},"_":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}}}}}}}},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},")":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.003367003367003367}}}}}}}}},"p":{"docs":{},"o":{"docs":{},"s":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},")":{"docs":{},".":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.003484320557491289}}}}}}}}}},"i":{"docs":{},"t":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.0033112582781456954}}}}}},"r":{"docs":{},"i":{"docs":{},"o":{"docs":{},"r":{"docs":{},"i":{"docs":{},"t":{"docs":{},"y":{"docs":{},",":{"docs":{"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.01020408163265306}}}}}}}}}}},"=":{"docs":{},"=":{"docs":{},"r":{"docs":{},")":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.002652519893899204}}}}}},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"i":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.0033112582781456954}}}}}},"b":{"docs":{},"i":{"docs":{},"t":{"docs":{},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.007936507936507936}}}}}}},"a":{"docs":{},"g":{"docs":{},"_":{"docs":{},"w":{"docs":{},"e":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}}}}}}}}},"o":{"docs":{},"t":{"docs":{},"t":{"docs":{},"o":{"docs":{},"m":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}}}}}},"m":{"docs":{},",":{"docs":{"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.005555555555555556}}}},"o":{"docs":{},"u":{"docs":{},"t":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.005025125628140704}}}}},",":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0044444444444444444}}}},"+":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.010752688172043012},"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.04},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.01509433962264151},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.013605442176870748},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.02},"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":0.003875968992248062},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011235955056179775},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0390625},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.043478260869565216},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.022113022113022112},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.020833333333333332},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.007067137809187279},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.01680672268907563},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.006968641114982578},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0036900369003690036},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.026525198938992044},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.039735099337748346},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.008875739644970414},"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.04040404040404041},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.023809523809523808},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.023148148148148147},"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.041666666666666664},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.022613065326633167},"Algorithms/DynamicProgramming-IV.html":{"ref":"Algorithms/DynamicProgramming-IV.html","tf":0.00980392156862745},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.02197802197802198},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0045662100456621},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.06666666666666667},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.013468013468013467}},"=":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0037735849056603774},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.01},"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":0.003875968992248062},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.010869565217391304},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.007371007371007371},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.006896551724137931},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.013937282229965157},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.002652519893899204},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.0033112582781456954},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.008875739644970414},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.005025125628140704},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0045662100456621},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0044444444444444444},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.010101010101010102}}}},"=":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.0641025641025641},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.022641509433962263},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.08163265306122448},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.08},"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":0.05813953488372093},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0546875},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.043478260869565216},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.06142506142506143},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.1103448275862069},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.058823529411764705},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.08333333333333333},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.07420494699646643},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.06302521008403361},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.04878048780487805},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.10236220472440945},"Algorithms/TrickySorting.html":{"ref":"Algorithms/TrickySorting.html","tf":0.024390243902439025},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.055350553505535055},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.05570291777188329},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.023178807947019868},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.08875739644970414},"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.030303030303030304},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.09523809523809523},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.044753086419753084},"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.041666666666666664},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.03768844221105527},"Algorithms/DynamicProgramming-IV.html":{"ref":"Algorithms/DynamicProgramming-IV.html","tf":0.06862745098039216},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.03296703296703297},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0776255707762557},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.035555555555555556},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.037037037037037035},"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.04081632653061224}},">":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.010752688172043012}}},"=":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0037735849056603774},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.006802721088435374},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005},"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":0.007751937984496124},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.018115942028985508},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004914004914004914},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.020689655172413793},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.016042780748663103},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002976190476190476},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.007067137809187279},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.012605042016806723},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.003484320557491289},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.007874015748031496},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0036900369003690036},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.026525198938992044},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.013245033112582781},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.015873015873015872},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.027777777777777776},"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.025},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.007537688442211055},"Algorithms/DynamicProgramming-IV.html":{"ref":"Algorithms/DynamicProgramming-IV.html","tf":0.0392156862745098},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.017777777777777778}}}},"[":{"0":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.01},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.007067137809187279}},"]":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0037735849056603774},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.007936507936507936},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0030864197530864196},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.002512562814070352}}}},"1":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.002512562814070352}},"]":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.006802721088435374},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.003484320557491289}}}},"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.006802721088435374},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395}},"n":{"docs":{},"e":{"docs":{},"w":{"docs":{},"]":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.010752688172043012}}}}},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},".":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"]":{"docs":{},")":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.007246376811594203}}},",":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.007246376811594203}}}}}}},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},",":{"docs":{"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877}}}}}}}}}}}}},"]":{"docs":{},")":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.003484320557491289}}}},"u":{"docs":{},"m":{"docs":{},"]":{"docs":{},",":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.002652519893899204}}}},"s":{"docs":{},"[":{"docs":{},"j":{"docs":{},"]":{"docs":{},"]":{"docs":{},")":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.002652519893899204}}}}}}}}}}},"]":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.006802721088435374},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005},"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":0.011627906976744186},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.015625},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.007246376811594203},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004914004914004914},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0106951871657754},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.008403361344537815},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.003484320557491289},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.015748031496062992},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.01856763925729443},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.007936507936507936},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.002512562814070352},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0091324200913242},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0044444444444444444},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.013468013468013467},"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.01020408163265306}},")":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0036231884057971015}}},",":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0036231884057971015},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.002512562814070352}}}},"[":{"0":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098},"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.002777777777777778},"Algorithms/DynamicProgramming-IV.html":{"ref":"Algorithms/DynamicProgramming-IV.html","tf":0.00980392156862745}},"]":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}},"docs":{},"i":{"docs":{},",":{"docs":{"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":0.003875968992248062}}}},"[":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0036900369003690036}}},"f":{"docs":{},"a":{"docs":{},"l":{"docs":{},"s":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0036900369003690036},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}}}},"]":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.002512562814070352}}}},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},")":{"docs":{},"]":{"docs":{"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":0.003875968992248062}}}}}}}}}}}},"p":{"docs":{},".":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},",":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004914004914004914}}}}}}}},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},".":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"]":{"docs":{"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877}}}}}}}}}}}}},"f":{"docs":{},"l":{"docs":{},"o":{"docs":{},"a":{"docs":{},"t":{"docs":{},"(":{"docs":{},"'":{"docs":{},"i":{"docs":{},"n":{"docs":{},"f":{"docs":{},"'":{"docs":{},")":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907}}}}}}}}}}}}},"a":{"docs":{},"l":{"docs":{},"s":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.002652519893899204}},"e":{"docs":{},"]":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.002652519893899204}}}}}}}},"'":{"docs":{},"j":{"docs":{},"f":{"docs":{},"k":{"docs":{},"'":{"docs":{},"]":{"docs":{},")":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.003484320557491289}}}}}}}},"(":{"docs":{},"'":{"docs":{},",":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0044444444444444444}}}}},")":{"docs":{},"'":{"docs":{},",":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0044444444444444444}}}}}},"c":{"docs":{"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.007874015748031496}}},"(":{"4":{"docs":{},",":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.002512562814070352}}}},"docs":{}}},"a":{"docs":{},"b":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.010752688172043012}}}}}}},"o":{"docs":{},"l":{"docs":{},"u":{"docs":{},"t":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.007547169811320755}}}}}},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"[":{"docs":{},"b":{"docs":{"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.010101010101010102}}}}}}}}}}}},"p":{"docs":{},"p":{"docs":{},"r":{"docs":{},"o":{"docs":{},"a":{"docs":{},"c":{"docs":{},"h":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.010752688172043012},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}},"e":{"docs":{},"s":{"docs":{},":":{"docs":{"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877}}}}}}}},"p":{"docs":{},"r":{"docs":{},"i":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0029585798816568047}}}}}}},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":0.003875968992248062},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011235955056179775},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.006896551724137931}}}}},"l":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457}},"e":{"docs":{},"_":{"docs":{},"i":{"docs":{},"n":{"docs":{},"_":{"docs":{},"p":{"docs":{},"a":{"docs":{},"t":{"docs":{},"h":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.012285012285012284}}}}}}}}}}},"i":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0030864197530864196}}}}},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0036900369003690036}}}}}},"v":{"docs":{},"o":{"docs":{},"i":{"docs":{},"d":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.010752688172043012},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0036900369003690036}}}}}},"r":{"docs":{},"r":{"docs":{},"a":{"docs":{},"y":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":10.08},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.018867924528301886},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.006802721088435374},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002976190476190476},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.003484320557491289},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.007380073800738007},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.005305039787798408},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.008875739644970414},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0030864197530864196},"Algorithms/DynamicProgramming-IV.html":{"ref":"Algorithms/DynamicProgramming-IV.html","tf":0.00980392156862745},"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.01020408163265306}},".":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002976190476190476}}},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.0033112582781456954}}},"/":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0029585798816568047},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.003367003367003367}}}}},":":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.002652519893899204},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.005917159763313609}}},"[":{"0":{"docs":{},"]":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0029585798816568047}}}},"docs":{}},"o":{"docs":{},"w":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0091324200913242}}}}},"c":{"docs":{},"h":{"docs":{},"i":{"docs":{},"v":{"docs":{},"e":{"docs":{},"s":{"docs":{},":":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.006802721088435374}}}}}}}}},"b":{"docs":{},"i":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877}}}}}}}},"s":{"docs":{},"e":{"docs":{},"n":{"docs":{},"a":{"docs":{},"l":{"docs":{},".":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907}}}}}}}},"t":{"docs":{},"i":{"docs":{},"c":{"docs":{},"l":{"docs":{},"e":{"docs":{},":":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0029585798816568047}}}}}}}}},"d":{"docs":{},"d":{"docs":{"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":0.003875968992248062},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.003484320557491289},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.002652519893899204},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.0033112582781456954},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.002512562814070352}},"i":{"docs":{},"t":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0037735849056603774},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.002652519893899204}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"(":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},",":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0036231884057971015}}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},",":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0036231884057971015}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},",":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0036231884057971015}}}}}}}}}}}}},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},",":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0036231884057971015}}}}}}}}}}}}},"j":{"docs":{},"a":{"docs":{},"c":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"/":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395}}}}}}}}}},"n":{"docs":{},"s":{"docs":{},"w":{"docs":{},"e":{"docs":{},"r":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0037735849056603774},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0029585798816568047},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.005025125628140704},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.07894736842105263}},".":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011235955056179775},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.02631578947368421}}},":":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.0033112582781456954}}}}}}},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457}}}}}}}},"o":{"docs":{},"t":{"docs":{},"h":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}}},"y":{"docs":{},"t":{"docs":{},"h":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},",":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.003367003367003367}}}}}}}}}},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":0.003875968992248062}}}}}},"l":{"docs":{},"w":{"docs":{},"a":{"docs":{},"y":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002976190476190476},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.003367003367003367}},"s":{"docs":{},",":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0036231884057971015}}}}}}},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877}},"n":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395}}}}}},"l":{"docs":{},"o":{"docs":{},"w":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.002652519893899204}}}},",":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.003367003367003367}}}},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},"i":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.006968641114982578},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.002512562814070352}}}}}}},"g":{"docs":{},"o":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.003367003367003367}},"r":{"docs":{},"i":{"docs":{},"t":{"docs":{},"h":{"docs":{},"m":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":10.012345679012345}},"s":{"docs":{},".":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}}}}}}}}},"i":{"docs":{},"e":{"docs":{},"n":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678}}}}}},"f":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"w":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{},"s":{"docs":{},".":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457}}}}}}}}}}}},"t":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"b":{"docs":{},"u":{"docs":{},"t":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877}}}}}}}}},"m":{"docs":{},"a":{"docs":{},"z":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907}}}},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.005025125628140704}},")":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.005025125628140704}}},"/":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},":":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.002512562814070352}}}}}}}}}}}},"g":{"docs":{},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.003484320557491289},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.002512562814070352}}}}}},"u":{"docs":{},"g":{"docs":{},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.003484320557491289}}}}}}},"x":{"docs":{},"i":{"docs":{},"l":{"docs":{},"l":{"docs":{},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{"Algorithms/DynamicProgramming-IV.html":{"ref":"Algorithms/DynamicProgramming-IV.html","tf":0.00980392156862745}}}}}}}}}},":":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.002652519893899204}}},"c":{"docs":{},"c":{"docs":{},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.0033112582781456954},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0091324200913242}},",":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.002652519893899204}}}}}}},"t":{"docs":{},"u":{"docs":{},"a":{"docs":{},"l":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.006622516556291391},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.002512562814070352}}}}}},"h":{"docs":{},"i":{"docs":{},"e":{"docs":{},"v":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.003367003367003367}}}}}}}},"b":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0036900369003690036},"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.030303030303030304}},"a":{"docs":{},"s":{"docs":{},"i":{"docs":{},"c":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0037735849056603774},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{},"y":{"docs":{},",":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.010752688172043012},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395}}}}}}}}},"e":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.006802721088435374},"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":0.003875968992248062},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0036900369003690036},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.002652519893899204},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.0033112582781456954},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0091324200913242},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0044444444444444444},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.02631578947368421}}}},"c":{"docs":{},"k":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457}},"w":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":0.003875968992248062}}}}}},"t":{"docs":{},"r":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":3.3366445916114786},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.002512562814070352},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.013333333333333334}},"(":{"docs":{},"[":{"docs":{},"]":{"docs":{},")":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.002652519893899204}}},",":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.002652519893899204}}}}},"b":{"docs":{},"u":{"docs":{},"c":{"docs":{},"k":{"docs":{},"e":{"docs":{},"t":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.005305039787798408}},")":{"docs":{},":":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.002652519893899204}}}},",":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.002652519893899204}}}}}}}}},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{},"r":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.006622516556291391},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.008888888888888889}}}}}},"j":{"docs":{},",":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.005025125628140704}}}},"i":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.013333333333333334}}}},":":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.0033112582781456954},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0044444444444444444}}}}}}}}}},"l":{"docs":{},"a":{"docs":{},"n":{"docs":{},"c":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002976190476190476}}}}},"l":{"docs":{},"o":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"/":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0045662100456621}}}}}}}}},"g":{"docs":{},"_":{"docs":{},"w":{"docs":{},"e":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}},")":{"docs":{},":":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.010752688172043012},"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0037735849056603774},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0036231884057971015},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.007371007371007371},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.006896551724137931},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0106951871657754},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.017857142857142856},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0036900369003690036},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":5.005917159763314},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.002512562814070352}}},"y":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"p":{"docs":{},"a":{"docs":{},"t":{"docs":{},"h":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125}}}}}}}}}}}}}}}}},"s":{"docs":{},"e":{"docs":{},"a":{"docs":{},"r":{"docs":{},"c":{"docs":{},"h":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002976190476190476}},",":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.005952380952380952}}}}}}}}}}}}}}}}}}},"f":{"docs":{},"u":{"docs":{},"r":{"docs":{},"c":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395}}}}}},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{},"/":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395}}}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"/":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395}}}}}}}}}}}},"d":{"docs":{},"i":{"docs":{},"r":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"a":{"docs":{},"l":{"docs":{},".":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.003484320557491289}}}}}}}}}}}}}},"t":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0036900369003690036},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.015873015873015872}},"w":{"docs":{},"i":{"docs":{},"s":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":10.007936507936508}}}}},"s":{"docs":{},".":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.0033112582781456954}}},"[":{"0":{"docs":{},"]":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.007936507936507936}}}},"docs":{},"i":{"docs":{},"]":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.015873015873015872}}}}}},":":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.007936507936507936}}}}},"r":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"e":{"docs":{},"t":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.010752688172043012}}}}}}},"u":{"docs":{},"t":{"docs":{},"e":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.010752688172043012},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.07692307692307693},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}}},"e":{"docs":{},"a":{"docs":{},"k":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002976190476190476},"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.002777777777777778},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.002512562814070352}},",":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}}}}},"u":{"docs":{},"i":{"docs":{},"l":{"docs":{},"t":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.010752688172043012}}},"d":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002976190476190476}}}}}}}}}}}}}}},"c":{"docs":{},"k":{"docs":{},"e":{"docs":{},"t":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.007957559681697613},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.0033112582781456954},"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":5.040404040404041}},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},"[":{"docs":{},"k":{"docs":{},"]":{"docs":{},")":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.002652519893899204}}}}}}}}}}}}}}}},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.002652519893899204}}}}}}}},"[":{"0":{"docs":{},":":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.002652519893899204}}}},"2":{"docs":{},":":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.002652519893899204}}}},"docs":{}},",":{"docs":{"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.010101010101010102}}},"s":{"docs":{},",":{"docs":{"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.010101010101010102}}}}}}}},"y":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.038461538461538464}}},"r":{"docs":{},"s":{"docs":{},"t":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0045662100456621}}}}}},"e":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0036900369003690036}},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0037735849056603774},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.02247191011235955},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002976190476190476},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.003484320557491289}}}}},"t":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.003367003367003367},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.02631578947368421}}}}},"w":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.01098901098901099}}}}}}},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{},"n":{"docs":{"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.0625},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0029585798816568047}}}}}},"s":{"docs":{},"t":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.003367003367003367}}}},"h":{"docs":{},"a":{"docs":{},"v":{"docs":{},"i":{"docs":{},"o":{"docs":{},"r":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":5.026315789473684}}}}}}}}},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"d":{"docs":{},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":0.003875968992248062}}}}},"s":{"docs":{},")":{"docs":{},":":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.005025125628140704}}}}}}},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"t":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0029585798816568047}}}}}}},"o":{"docs":{},"l":{"docs":{},":":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.006896551724137931},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.003484320557491289},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.01107011070110701},"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.010101010101010102}}},"e":{"docs":{},"a":{"docs":{},"n":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.0033112582781456954}}}}}},"k":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.002652519893899204}}}},"t":{"docs":{},"t":{"docs":{},"o":{"docs":{},"m":{"docs":{},",":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457}}}}}}},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{},":":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0036900369003690036}}}}}}},"s":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0029585798816568047}},"t":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125}},":":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457}}},"f":{"docs":{},"r":{"docs":{},"o":{"docs":{},"m":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002976190476190476}}}}}}}}}}}}}}}}}}}}}},"f":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":5.004201680672269},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":5.011070110701107}},"s":{"docs":{},"(":{"docs":{},"i":{"docs":{},")":{"docs":{},":":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395}}}}},"s":{"docs":{},")":{"docs":{},":":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395}}}}}},")":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395}}}}},"l":{"docs":{},"u":{"docs":{},"e":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.006734006734006734}},",":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395}}},"]":{"docs":{},")":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.007067137809187279}}}},"_":{"docs":{},"e":{"docs":{},"d":{"docs":{},"g":{"docs":{},"e":{"docs":{},"s":{"docs":{},":":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.007067137809187279}}}}}}}}},".":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.003367003367003367}}}}},"o":{"docs":{},"o":{"docs":{},"m":{"docs":{},"d":{"docs":{},"a":{"docs":{},"y":{"docs":{},":":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.005917159763313609}}},"[":{"0":{"docs":{},"]":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.005917159763313609}}}},"docs":{}}}}}}}}}},"d":{"1":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457}},",":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457}}}},"2":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457}},",":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457}}}},"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.007547169811320755},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.007067137809187279},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.008403361344537815},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.006968641114982578},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.002652519893899204},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0029585798816568047}},"e":{"docs":{},"c":{"docs":{},"o":{"docs":{},"r":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.010752688172043012}}},"d":{"docs":{"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.002777777777777778}}}},"i":{"docs":{},"d":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0029585798816568047}}}},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011235955056179775},"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.0625},"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.002777777777777778}}}}},"r":{"docs":{},"e":{"docs":{},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0029585798816568047}}}}}}}},"l":{"docs":{},"a":{"docs":{},"r":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.002512562814070352}}}}}},"f":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0037735849056603774},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.006802721088435374},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.015},"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":0.027131782945736434},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0234375},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.03260869565217391},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.02702702702702703},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.013793103448275862},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.016042780748663103},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.02976190476190476},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.014134275618374558},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.012605042016806723},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.020905923344947737},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.015748031496062992},"Algorithms/TrickySorting.html":{"ref":"Algorithms/TrickySorting.html","tf":0.024390243902439025},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.014760147601476014},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.026525198938992044},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.013245033112582781},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.023668639053254437},"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.010101010101010102},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.015873015873015872},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.012345679012345678},"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.025},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.007537688442211055},"Algorithms/DynamicProgramming-IV.html":{"ref":"Algorithms/DynamicProgramming-IV.html","tf":0.00980392156862745},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0182648401826484},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0044444444444444444},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.010101010101010102},"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.01020408163265306}},"a":{"docs":{},"u":{"docs":{},"l":{"docs":{},"t":{"docs":{},"d":{"docs":{},"i":{"docs":{},"c":{"docs":{},"t":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005},"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":0.003875968992248062},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.007371007371007371},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.008403361344537815},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.013937282229965157},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.007874015748031496}},"(":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},")":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.007067137809187279},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.008403361344537815},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.010452961672473868},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.007874015748031496}}}}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},")":{"docs":{"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":0.003875968992248062},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.006968641114982578}}}}}},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{},")":{"docs":{"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.031496062992125984}}}}}}},",":{"docs":{"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.007874015748031496}}}}}}},")":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678}}}}}}},"i":{"docs":{},"n":{"docs":{},"i":{"docs":{},"t":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0036231884057971015},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.005952380952380952}}}}}}},"a":{"docs":{},"l":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0037735849056603774}}}},"s":{"docs":{},"i":{"docs":{},"r":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0037735849056603774}}},"g":{"docs":{},"n":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678}}}}},"t":{"docs":{},"i":{"docs":{},"n":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"'":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.002512562814070352}}},"s":{"docs":{},";":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.002512562814070352}}}}}}}}}}}},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.003367003367003367}}}}}}}},"q":{"docs":{},"u":{"docs":{"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":5.01937984496124},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.013793103448275862},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.007067137809187279},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.007874015748031496},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.007380073800738007}},"e":{"docs":{},"(":{"docs":{},")":{"docs":{"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":0.015503875968992248},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.013793103448275862},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.007067137809187279},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.015748031496062992}}},"[":{"docs":{},"(":{"0":{"docs":{},",":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0036900369003690036}}}},"docs":{}},"[":{"0":{"docs":{},",":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0036900369003690036}}}},"docs":{}}}},",":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.007874015748031496}}}}}},"e":{"docs":{},"p":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.002652519893899204}},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"l":{"docs":{},"e":{"docs":{},"a":{"docs":{},"v":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.006896551724137931}}}}}}}}}}}}}}}}}}}}}},"l":{"docs":{"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.010101010101010102}},"a":{"docs":{},"y":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907}}}},"i":{"docs":{},"v":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.02631578947368421}}}}},"p":{"docs":{},"t":{"docs":{},"h":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.002652519893899204}}}},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098},"Algorithms/DynamicProgramming-IV.html":{"ref":"Algorithms/DynamicProgramming-IV.html","tf":0.00980392156862745}}}}}}},"o":{"docs":{},"c":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.010752688172043012}}}}}},"m":{"docs":{},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0037735849056603774}},")":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.010610079575596816}}},":":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.005305039787798408}}}}}}},"n":{"docs":{},"’":{"docs":{},"t":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0037735849056603774}}}},"'":{"docs":{},"t":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011235955056179775},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004914004914004914},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.005305039787798408},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.005025125628140704}}}},"e":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0036900369003690036}},":":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0029585798816568047}}}}},"w":{"docs":{},"n":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.033707865168539325},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.007246376811594203},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.002512562814070352},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0044444444444444444}}}},":":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678}}},"?":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.02631578947368421}}}},"a":{"docs":{},"t":{"docs":{},"a":{"docs":{"DataStructures/":{"ref":"DataStructures/","tf":5.2},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0037735849056603774},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011235955056179775},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.003484320557491289},"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.003367003367003367}},":":{"docs":{"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877}}}}},"y":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.014792899408284023},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.01098901098901099}},")":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.005917159763313609}}},":":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0029585798816568047}}},"s":{"docs":{},"/":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0029585798816568047}}}},",":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.01098901098901099}}}}},"i":{"docs":{},"f":{"docs":{},"f":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0037735849056603774},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0029585798816568047}},"e":{"docs":{},"r":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0037735849056603774},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.0033112582781456954},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0030864197530864196},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.002512562814070352},"Algorithms/DynamicProgramming-IV.html":{"ref":"Algorithms/DynamicProgramming-IV.html","tf":0.00980392156862745},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.016483516483516484},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0044444444444444444},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.003367003367003367}},"e":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},",":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0030864197530864196}}}}}}}}}}},"v":{"docs":{},"i":{"docs":{},"s":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.013605442176870748}}},"d":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002976190476190476},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}}},"c":{"docs":{},"t":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.007936507936507936},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.002512562814070352},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.006734006734006734}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"a":{"docs":{},"r":{"docs":{},"y":{"docs":{},".":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005}}}},"i":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678},"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.02040816326530612}}}}}}}},".":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"(":{"docs":{},"k":{"docs":{},"e":{"docs":{},"y":{"docs":{},",":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678}}}}}}}}}}},"(":{"docs":{},")":{"docs":{"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.005555555555555556},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.003367003367003367}}}}}},"r":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.007246376811594203},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.0033112582781456954},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0029585798816568047},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.02631578947368421}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},")":{"docs":{},":":{"docs":{"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":0.003875968992248062}}}}}}}}}}}},",":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0036231884057971015}}}}}}}}}},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"n":{"docs":{},"c":{"docs":{"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877}},"e":{"docs":{},":":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457}}},"k":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877}}}}}}}}}}}}}},"c":{"docs":{},"u":{"docs":{},"s":{"docs":{},"s":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"/":{"6":{"5":{"1":{"7":{"1":{"9":{"docs":{},"/":{"docs":{},"h":{"docs":{},"o":{"docs":{},"w":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}}}}},"docs":{}},"docs":{}},"docs":{}},"5":{"7":{"0":{"8":{"docs":{},"/":{"docs":{},"g":{"docs":{},"r":{"docs":{},"a":{"docs":{},"p":{"docs":{},"h":{"docs":{"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.0625}}}}}}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"9":{"1":{"8":{"2":{"5":{"docs":{},"/":{"docs":{},"b":{"docs":{},"i":{"docs":{},"n":{"docs":{},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0029585798816568047}}}}}}}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"7":{"8":{"6":{"1":{"2":{"6":{"docs":{},"/":{"docs":{},"p":{"docs":{},"y":{"docs":{},"t":{"docs":{},"h":{"docs":{},"o":{"docs":{},"n":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0029585798816568047}}}}}}}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}}}}}}},"o":{"docs":{},"n":{"docs":{},"n":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395}}}}}}}}}},"d":{"docs":{},"n":{"docs":{},"'":{"docs":{},"t":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.003484320557491289}}}}}},"g":{"docs":{},"i":{"docs":{},"t":{"docs":{},"s":{"docs":{},"/":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.002652519893899204}}}}}}},"a":{"docs":{},"g":{"docs":{},"r":{"docs":{},"a":{"docs":{},"m":{"docs":{"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.002777777777777778}}}}}},"l":{"docs":{},"e":{"docs":{},"r":{"docs":{},"/":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.002512562814070352}}},")":{"docs":{"Algorithms/DynamicProgramming-IV.html":{"ref":"Algorithms/DynamicProgramming-IV.html","tf":0.00980392156862745}}}}}}}},"p":{"1":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.005025125628140704}},"[":{"docs":{},"n":{"docs":{},"]":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.002512562814070352}}}}}},"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0037735849056603774},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.034013605442176874},"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.007716049382716049},"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.008333333333333333},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.010050251256281407},"Algorithms/DynamicProgramming-IV.html":{"ref":"Algorithms/DynamicProgramming-IV.html","tf":0.0196078431372549},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}},":":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}},"[":{"0":{"docs":{},"]":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}},"[":{"0":{"docs":{},"]":{"docs":{"Algorithms/DynamicProgramming-IV.html":{"ref":"Algorithms/DynamicProgramming-IV.html","tf":0.00980392156862745}}}},"docs":{}}}},"1":{"docs":{},"]":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}},"2":{"docs":{},"]":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}},"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.002512562814070352},"Algorithms/DynamicProgramming-IV.html":{"ref":"Algorithms/DynamicProgramming-IV.html","tf":0.00980392156862745}},"i":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0030864197530864196},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.002512562814070352}},"]":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"c":{"docs":{},"h":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.002512562814070352}}}}}}},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},")":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.002512562814070352}}}}}}}}}}}}}}}}},"n":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0030864197530864196}},"]":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0030864197530864196}}}},"x":{"docs":{"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.002777777777777778},"Algorithms/DynamicProgramming-IV.html":{"ref":"Algorithms/DynamicProgramming-IV.html","tf":0.0196078431372549}},"]":{"docs":{},"[":{"docs":{},"i":{"docs":{"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.002777777777777778},"Algorithms/DynamicProgramming-IV.html":{"ref":"Algorithms/DynamicProgramming-IV.html","tf":0.0196078431372549}}},"y":{"docs":{},"]":{"docs":{"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.008333333333333333},"Algorithms/DynamicProgramming-IV.html":{"ref":"Algorithms/DynamicProgramming-IV.html","tf":0.029411764705882353}}}}}}}},";":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.002512562814070352}}}},"u":{"docs":{},"r":{"docs":{},"e":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0037735849056603774}}}},"p":{"docs":{},"l":{"docs":{},"i":{"docs":{},"c":{"docs":{"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.010101010101010102},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.002512562814070352},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.003367003367003367}}}}}}},",":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907}}},"s":{"docs":{},"t":{"docs":{},":":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.008403361344537815}}}}},")":{"docs":{},"]":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.003484320557491289}}}},"f":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":5.003484320557491},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":5.014760147601476},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.002652519893899204},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.0033112582781456954}},"s":{"docs":{},"(":{"0":{"docs":{},",":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}},"docs":{},"i":{"docs":{},")":{"docs":{},":":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.006968641114982578}}}}},"j":{"docs":{},")":{"docs":{},":":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.003484320557491289}}}}},"l":{"docs":{},"e":{"docs":{},"t":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},",":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0036900369003690036}}}}}}}}},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.0033112582781456954}}}}}}},"x":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}},",":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}},":":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}}},".":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.003484320557491289}}}}},":":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.005917159763313609}}},"y":{"docs":{},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":5.012345679012346},"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":3.3388888888888886},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":3.333333333333333},"Algorithms/DynamicProgramming-IV.html":{"ref":"Algorithms/DynamicProgramming-IV.html","tf":3.3431372549019605},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}}}},"r":{"docs":{},"a":{"docs":{},"w":{"docs":{},"n":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.02631578947368421}}}}}}},"e":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.005952380952380952},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0091324200913242}},"n":{"docs":{},"d":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.010752688172043012},"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0037735849056603774},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002976190476190476},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.007380073800738007},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.04437869822485207},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.005025125628140704},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.01098901098901099},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0228310502283105}},")":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.005952380952380952},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0091324200913242}}},",":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.005952380952380952},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}},":":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.005952380952380952}}},"]":{"docs":{},")":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0045662100456621}}}}},"u":{"docs":{},"m":{"docs":{"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":0.003875968992248062}},"e":{"docs":{},"r":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},")":{"docs":{},":":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0037735849056603774},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.006802721088435374},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005},"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.010101010101010102},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.003367003367003367}}}}}}}},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"f":{"docs":{},"i":{"docs":{},"x":{"docs":{},")":{"docs":{},":":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0037735849056603774}}}}}}}}}},"h":{"docs":{},"e":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},"s":{"docs":{},")":{"docs":{},":":{"docs":{"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":0.003875968992248062}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},")":{"docs":{},":":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002976190476190476}}}}}}}}}}},"b":{"docs":{},"l":{"docs":{},"o":{"docs":{},"o":{"docs":{},"m":{"docs":{},"d":{"docs":{},"a":{"docs":{},"y":{"docs":{},")":{"docs":{},":":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0029585798816568047}}}}}}}}}}}},"w":{"docs":{},"e":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},"s":{"docs":{},")":{"docs":{},":":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0029585798816568047}}}}}}}}}}},"s":{"docs":{},")":{"docs":{},":":{"docs":{"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.01020408163265306}}}}}}}}}}}}},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011235955056179775},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0044444444444444444},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.003367003367003367}}}}}}},"o":{"docs":{},"u":{"docs":{},"g":{"docs":{},"h":{"docs":{},".":{"docs":{"Algorithms/DynamicProgramming-IV.html":{"ref":"Algorithms/DynamicProgramming-IV.html","tf":0.00980392156862745}}}}}}}},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"y":{"docs":{},"t":{"docs":{},"h":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.010752688172043012}}},"i":{"docs":{},"m":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0037735849056603774}}}}},"w":{"docs":{},"h":{"docs":{},"e":{"docs":{},"r":{"docs":{},"e":{"docs":{},",":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0036900369003690036}}}}}}}}}},"n":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.015873015873015872}}}}},"l":{"docs":{},"e":{"docs":{},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.011320754716981131},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005},"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":0.011627906976744186},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.005952380952380952},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0036900369003690036},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.005305039787798408},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.01098901098901099},"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.01020408163265306}},"/":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.04},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0037735849056603774}}},":":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0037735849056603774},"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":0.003875968992248062},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.002652519893899204}}},",":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.006802721088435374},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005}}},"s":{"docs":{},"/":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}}}}},",":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005}}},")":{"docs":{"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.01020408163265306}}}}},"i":{"docs":{},"f":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0036231884057971015},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0044444444444444444}},"(":{"docs":{},"w":{"docs":{},"e":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}}}}}}}},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.002512562814070352}},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"/":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0036900369003690036}}}}}}}}}}}},"s":{"docs":{},"e":{"docs":{},":":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0036231884057971015},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.005917159763313609},"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.011111111111111112},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.002512562814070352},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0091324200913242},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0044444444444444444},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.006734006734006734}}}}}},"a":{"docs":{},"s":{"docs":{},"i":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002976190476190476}},"e":{"docs":{},"r":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457}}}}}},"c":{"docs":{},"h":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.007547169811320755},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.006802721088435374},"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":0.003875968992248062},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.006622516556291391},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0030864197530864196},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.003367003367003367}}}}},"f":{"docs":{},"f":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282}}}}},"i":{"docs":{},"c":{"docs":{},"i":{"docs":{"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098},"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.01020408163265306}}}}}}},"q":{"docs":{},"u":{"docs":{},"a":{"docs":{},"l":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.007547169811320755},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0029585798816568047},"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.010101010101010102}},"i":{"docs":{},"t":{"docs":{},"y":{"docs":{},",":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0029585798816568047}}},".":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0029585798816568047}}}}}}},"t":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}}}},"x":{"docs":{},"c":{"docs":{},"l":{"docs":{},"u":{"docs":{},"d":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0037735849056603774}},"e":{"docs":{},")":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}}}}},"e":{"docs":{},"e":{"docs":{},"d":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0036900369003690036}}}},"l":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0036900369003690036}}},"p":{"docs":{},"t":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}}}},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"m":{"docs":{"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":0.003875968992248062},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0036900369003690036}}}}},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0044444444444444444}}}}}},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0036231884057971015},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457}},"s":{"docs":{},",":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395}}},":":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.0033112582781456954}}}},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0036900369003690036}}}}}}}}}},"t":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.003484320557491289}},"\"":{"docs":{},")":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.003367003367003367}}}}}},"p":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395}},"e":{"docs":{},"d":{"docs":{},")":{"docs":{},":":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395}}}},",":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395}}}}}}},"r":{"docs":{},"i":{"docs":{},"e":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},",":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.02631578947368421}}},".":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.02631578947368421}}}}}}}}}},"l":{"docs":{},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"\"":{"docs":{"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.002777777777777778}}},":":{"docs":{"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.005555555555555556}}}}}}}}}}}}},"h":{"docs":{},"a":{"docs":{},"u":{"docs":{},"s":{"docs":{},"t":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0036900369003690036},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.0033112582781456954}}}}}}},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.004629629629629629}}}}}},"t":{"docs":{},"c":{"docs":{"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":0.003875968992248062},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0029585798816568047},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}},")":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678}}}}},".":{"docs":{},"g":{"docs":{},".":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457}}}}},"d":{"docs":{},"g":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.017421602787456445}},"e":{"docs":{},"s":{"docs":{},":":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004914004914004914},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.006968641114982578}}},"[":{"docs":{},"(":{"docs":{},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{},"r":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},",":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.010452961672473868}}}}}}}}}},"s":{"docs":{},",":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.003484320557491289}}}}}}}}}},"s":{"docs":{},"p":{"docs":{},"e":{"docs":{},"c":{"docs":{},"i":{"docs":{},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{},"y":{"docs":{},",":{"docs":{"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877}}},")":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678}}}}}}}}}}},"s":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"i":{"docs":{"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.002777777777777778}}}}}}}},"g":{"docs":{},".":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.003484320557491289},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.01107011070110701},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.004629629629629629}}}},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{},"i":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0036900369003690036},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.0033112582781456954},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.008888888888888889}}}}}},"r":{"docs":{},"r":{"docs":{},"o":{"docs":{},"r":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0036900369003690036}}}}},"a":{"docs":{},"s":{"docs":{},"e":{"docs":{},"o":{"docs":{},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"l":{"docs":{},"a":{"docs":{},"p":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0045662100456621}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"f":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.006968641114982578}},"i":{"docs":{},"r":{"docs":{},"s":{"docs":{},"t":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.010752688172043012},"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":0.007751937984496124},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.01060070671378092},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.003484320557491289},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0036900369003690036},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.003367003367003367}},".":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.003367003367003367}}}}}},"n":{"docs":{},"d":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.011320754716981131},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.01},"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":0.003875968992248062},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011235955056179775},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004914004914004914},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.003484320557491289},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0036900369003690036},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.007716049382716049},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.010050251256281407},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.006734006734006734}},"f":{"docs":{},"r":{"docs":{},"e":{"docs":{},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457}}}}}}}}}}}}}}}}}}}}}}},"c":{"docs":{},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"p":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"p":{"docs":{},"r":{"docs":{},"i":{"docs":{},"c":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907}}}}}}}}}}}}}}}}}}}}},"i":{"docs":{},"t":{"docs":{},"i":{"docs":{},"n":{"docs":{},"e":{"docs":{},"r":{"docs":{},"a":{"docs":{},"r":{"docs":{},"y":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.003484320557491289}}}}}}}}}}}}}}}}},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.007874015748031496}}}}}}}}}}}}},"b":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0029585798816568047}}}}}}}}}}}}}}}}},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.005917159763313609}}}}}}}},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},"o":{"docs":{},"w":{"docs":{},"s":{"docs":{},"h":{"docs":{},"o":{"docs":{},"t":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0045662100456621}}}}}}}}}}}}}}}}}}}}},"t":{"docs":{},"h":{"docs":{},"e":{"docs":{},"l":{"docs":{},"o":{"docs":{},"n":{"docs":{},"g":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.007936507936507936}}}}}}}}}}}}}}}}}}}}}}}}}}},"d":{"docs":{},"u":{"docs":{},"p":{"docs":{},"l":{"docs":{},"i":{"docs":{},"c":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.003367003367003367}}}}}}}}}}}}}}}}}}},"a":{"docs":{},"l":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}},"_":{"docs":{},"a":{"docs":{},"n":{"docs":{},"s":{"docs":{},"w":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0037735849056603774}}}}}}}}}},"x":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005}}},"l":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.002652519893899204}}}}},"l":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395}}}},"g":{"docs":{},"u":{"docs":{},"r":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}}},"b":{"docs":{},"_":{"docs":{},"l":{"docs":{},"r":{"docs":{},"u":{"docs":{},"_":{"docs":{},"c":{"docs":{},"a":{"docs":{},"c":{"docs":{},"h":{"docs":{},"e":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{},":":{"docs":{"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.01020408163265306}}}}}}}}}}}}}}}}}},"o":{"docs":{"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.01020408163265306}},"r":{"docs":{},"c":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.010752688172043012},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}},",":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125}}},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.007380073800738007}}}}}},"u":{"docs":{},"n":{"docs":{},"d":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005},"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.010101010101010102},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.01098901098901099}}}}},"l":{"docs":{},"l":{"docs":{},"o":{"docs":{},"w":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.02631578947368421}},"s":{"docs":{},":":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.003367003367003367}}}}}}}}},"u":{"docs":{},"n":{"docs":{},"c":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.021505376344086023},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907},"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678},"Algorithms/TrickySorting.html":{"ref":"Algorithms/TrickySorting.html","tf":0.024390243902439025},"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.01020408163265306}},".":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002976190476190476}}}}}},"o":{"docs":{},"o":{"docs":{},"l":{"docs":{"Algorithms/TrickySorting.html":{"ref":"Algorithms/TrickySorting.html","tf":0.024390243902439025},"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.01020408163265306}},"s":{"docs":{},".":{"docs":{},"c":{"docs":{},"m":{"docs":{},"p":{"docs":{},"_":{"docs":{},"t":{"docs":{},"o":{"docs":{},"_":{"docs":{},"k":{"docs":{},"e":{"docs":{},"y":{"docs":{},"(":{"docs":{},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{},"a":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},")":{"docs":{"Algorithms/TrickySorting.html":{"ref":"Algorithms/TrickySorting.html","tf":0.024390243902439025}}}}}}}}}}}}}}}}}}}}}}}},"l":{"docs":{},"r":{"docs":{},"u":{"docs":{},"_":{"docs":{},"c":{"docs":{},"a":{"docs":{},"c":{"docs":{},"h":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.0033112582781456954},"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.01020408163265306}}}}}}}}}}}}}}}}}},"r":{"docs":{},"t":{"docs":{},"h":{"docs":{},"e":{"docs":{},"r":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.010752688172043012}}},"s":{"docs":{},"t":{"docs":{},"j":{"docs":{},"u":{"docs":{},"m":{"docs":{},"p":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.0033112582781456954}}}}}}}}}}}},"l":{"docs":{},"l":{"docs":{},"i":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}}}},"a":{"docs":{},"s":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.007380073800738007}}}}}},"l":{"docs":{},"s":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.020689655172413793},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.007067137809187279},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.010452961672473868},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.005305039787798408},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0029585798816568047},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0030864197530864196},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0045662100456621},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.008888888888888889}},"e":{"docs":{},",":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}}}},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"s":{"docs":{},"/":{"docs":{},"d":{"docs":{},"i":{"docs":{},"v":{"docs":{},"i":{"docs":{},"s":{"docs":{},"o":{"docs":{},"r":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678}}}}}}}}}}}}}},"i":{"docs":{},"l":{"docs":{},"i":{"docs":{},"t":{"docs":{"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.010101010101010102}}}}}},"e":{"docs":{},"d":{"docs":{},"?":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.02631578947368421}}}}}},"u":{"docs":{},"l":{"docs":{},"t":{"docs":{},"i":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678}}}}}},"r":{"docs":{},";":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.002652519893899204}}},",":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}},".":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}},"i":{"docs":{},"l":{"docs":{},"u":{"docs":{},"r":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.0033112582781456954},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.005025125628140704},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0044444444444444444}}}}}}},"r":{"docs":{},"e":{"docs":{},"q":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.006734006734006734}},"u":{"docs":{},"e":{"docs":{},"n":{"docs":{},"c":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0037735849056603774}},"y":{"docs":{},".":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.003367003367003367}}}}},"t":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457},"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.02040816326530612}}}}}},".":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"(":{"docs":{},"t":{"docs":{},",":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.003367003367003367}}}}}}}},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{},"m":{"docs":{},"s":{"docs":{},"(":{"docs":{},")":{"docs":{},":":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.003367003367003367}}}}}}}}}}},"[":{"docs":{},"t":{"docs":{},"]":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.006734006734006734}}}}}}}},"l":{"docs":{},"a":{"docs":{},"g":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125}}}},"o":{"docs":{},"a":{"docs":{},"t":{"docs":{},"(":{"docs":{},"'":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0029585798816568047},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0091324200913242},"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.01020408163265306}},"i":{"docs":{},"n":{"docs":{},"f":{"docs":{},"'":{"docs":{},")":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.005917159763313609},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.005025125628140704},"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.01020408163265306}},")":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457}}},"]":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0036900369003690036}}}}}}}}}}}},"w":{"docs":{},"e":{"docs":{},"r":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395}},"s":{"docs":{},".":{"docs":{},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395}}}}}}},"r":{"docs":{},"e":{"docs":{},"m":{"docs":{},"o":{"docs":{},"v":{"docs":{},"e":{"docs":{},"(":{"docs":{},"p":{"docs":{},"l":{"docs":{},"a":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"d":{"docs":{},"[":{"docs":{},"n":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395}}}}}}}}}}}}}}}}}}},":":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395}}}}}}}},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907}},"s":{"docs":{},":":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.008403361344537815}}}}}}}}},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"h":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.003484320557491289}}}}},"d":{"docs":{"Algorithms/TrickySorting.html":{"ref":"Algorithms/TrickySorting.html","tf":0.024390243902439025}}},"w":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0036900369003690036}}},"e":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.01098901098901099}},")":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.01098901098901099}},":":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}},"/":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}}}},"g":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005}},"e":{"docs":{},"n":{"docs":{},"e":{"docs":{},"r":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":5.010752688172043},"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.04},"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282},"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":0.003875968992248062},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0036231884057971015},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.006896551724137931},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0036900369003690036},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.0033112582781456954},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0044444444444444444},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.003367003367003367}}}}},"t":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0036900369003690036},"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.01020408163265306}},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.010752688172043012}}}}},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"i":{"docs":{},"m":{"docs":{},"u":{"docs":{},"m":{"docs":{},"g":{"docs":{},"o":{"docs":{},"l":{"docs":{},"d":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.0033112582781456954}}}}}}}}}}}}}}}}}}}},"e":{"docs":{},"k":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.013605442176870748}}}}},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"t":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.003484320557491289}},"e":{"docs":{},"r":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005},"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":0.011627906976744186},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457}},",":{"docs":{"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":0.007751937984496124}}}}}}},"e":{"docs":{},"d":{"docs":{},"i":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0036900369003690036},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}}}},"a":{"docs":{},"p":{"docs":{},"h":{"docs":{"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":5.016042780748663},"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":10.0625},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0176678445229682},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":5.012605042016807},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":5.020905923344948},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.015748031496062992}},".":{"docs":{"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877}}},":":{"docs":{"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.003484320557491289}}},"[":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},".":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"]":{"docs":{},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},")":{"docs":{"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877}}}}}}}}}}}}}}}}}}}}}},"]":{"docs":{},":":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.007067137809187279},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.006968641114982578},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.007874015748031496}}}}}}}},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"]":{"docs":{},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},".":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},")":{"docs":{"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877}}}}}}}}}}}}}}}}}}}}}}}}}},"v":{"docs":{},"]":{"docs":{},":":{"docs":{"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877}}}}},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"]":{"docs":{},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},")":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395}}}}}}}}}}}}}}}}}}}},"i":{"docs":{},"]":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395}},":":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.003484320557491289}}}}},"s":{"docs":{},"]":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.003484320557491289}},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"[":{"docs":{},"d":{"docs":{},",":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.007067137809187279}}}}},"d":{"docs":{},")":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.006968641114982578}}}}}}}}}}}}},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},"]":{"docs":{},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},")":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395}}}}}}}}}}}}}}}}}}}},"c":{"docs":{},"]":{"docs":{},":":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.007874015748031496}}},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"p":{"docs":{},")":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.003484320557491289},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.007874015748031496}}}}}}}}}},"d":{"docs":{},"d":{"docs":{},"(":{"docs":{},"p":{"docs":{},")":{"docs":{"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.007874015748031496}}}}}}}}}},"u":{"docs":{},"r":{"docs":{},"r":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"]":{"docs":{},":":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.003484320557491289}}}}}}}}}}},"u":{"docs":{},"]":{"docs":{},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"(":{"docs":{},"v":{"docs":{},",":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.008403361344537815}}}}}}}}}}}}}}},"d":{"docs":{},"]":{"docs":{},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"s":{"docs":{},")":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.003484320557491289}}}}}}}}}}}}}}},"s":{"docs":{},",":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678}}}}}},"d":{"docs":{},"u":{"docs":{},"a":{"docs":{},"t":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.02631578947368421}}}}}}},"i":{"docs":{},"d":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.014760147601476014},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.0033112582781456954}},":":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0036900369003690036},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.0033112582781456954}}},"[":{"docs":{},"x":{"docs":{},"]":{"docs":{},"[":{"docs":{},"y":{"docs":{},"]":{"docs":{},":":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0036900369003690036}}}}}}}},"i":{"docs":{},"]":{"docs":{},"[":{"docs":{},"j":{"docs":{},"]":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.006622516556291391}}}}}}}}}}},"o":{"docs":{"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":0.003875968992248062},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0036231884057971015},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004914004914004914},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0036900369003690036},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.007957559681697613},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0029585798816568047},"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.01020408163265306}},"o":{"docs":{},"d":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004914004914004914},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.005917159763313609},"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.010101010101010102},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.003367003367003367}}}},"l":{"docs":{},"d":{"docs":{},"/":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.0033112582781456954}}}}},":":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}},"e":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}},"l":{"docs":{},"o":{"docs":{},"b":{"docs":{},"a":{"docs":{},"l":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011235955056179775}},"s":{"docs":{},"/":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457}}}},"l":{"docs":{},"y":{"docs":{},",":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.003484320557491289}}}}}}}}}},"i":{"docs":{},"v":{"docs":{},"e":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125}},"n":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.002652519893899204},"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.002777777777777778},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.005025125628140704}}}}}},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"n":{"docs":{},"n":{"docs":{},"o":{"docs":{},"a":{"docs":{},"d":{"docs":{},"j":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395}}}}}}}}}}}}}}}}},"m":{"docs":{},"e":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.007380073800738007},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.0033112582781456954}},"/":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0036900369003690036}}}}}},"_":{"docs":{},"v":{"docs":{},"i":{"docs":{},"s":{"docs":{},"i":{"docs":{},"t":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.003484320557491289}},"e":{"docs":{},"d":{"docs":{},".":{"docs":{},"a":{"docs":{},"d":{"docs":{},"d":{"docs":{},"(":{"docs":{},"i":{"docs":{},")":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.003484320557491289}}}}}}}}},":":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.010452961672473868}}}}}}}}}}}},"h":{"docs":{"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":0.007751937984496124}},"e":{"docs":{},"l":{"docs":{},"p":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02}},"e":{"docs":{},"r":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.010752688172043012},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.002652519893899204}},"n":{"docs":{},"c":{"docs":{},"r":{"docs":{},"(":{"0":{"docs":{},",":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.002652519893899204}}}},"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.002652519893899204}},"s":{"docs":{},",":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.002652519893899204}}},":":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.002652519893899204}}}}}}}}}}}},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},"s":{"docs":{},":":{"docs":{"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":0.003875968992248062}}}}}}}},"r":{"docs":{},"e":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.003367003367003367}},":":{"docs":{"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":0.003875968992248062}}},".":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907},"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.010101010101010102}}},",":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}}},"a":{"docs":{},"p":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.008403361344537815},"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.026936026936026935},"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.01020408163265306}},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"(":{"0":{"docs":{},",":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907}}}},"docs":{}}}}}}}}}},":":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.008403361344537815},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.006734006734006734}}},"q":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.008403361344537815},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.003367003367003367},"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.02040816326530612}},".":{"docs":{},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"p":{"docs":{},")":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.008403361344537815},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.003367003367003367}}}}}}}}}},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"(":{"docs":{},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"p":{"docs":{},",":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.012605042016806723},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.006734006734006734},"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.01020408163265306}}}}}}}}}}}}}}}}}},")":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.003367003367003367}}}}}},"a":{"docs":{},"s":{"docs":{},"h":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02},"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.010101010101010102}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},")":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011235955056179775}}}}}}},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"l":{"docs":{},"e":{"docs":{},":":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457}}},"[":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"]":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004914004914004914}},":":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457}}}}}}}}}}}}}}},"n":{"docs":{},"d":{"docs":{},"l":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},".":{"docs":{"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877}}}}}}}}},"b":{"docs":{},"i":{"docs":{},"t":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678}}}}},"t":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.0033112582781456954}}},"l":{"docs":{},"f":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}}},"t":{"docs":{},"t":{"docs":{},"p":{"docs":{},"s":{"docs":{},":":{"docs":{},"/":{"docs":{},"/":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},".":{"docs":{},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"/":{"docs":{},"p":{"docs":{},"r":{"docs":{},"o":{"docs":{},"b":{"docs":{},"l":{"docs":{},"e":{"docs":{},"m":{"docs":{},"s":{"docs":{},"/":{"2":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.0033112582781456954}}},"3":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},"/":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005}}}}}}},"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02},"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":0.003875968992248062}}}},"t":{"docs":{},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"k":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907}}}}}}}},"u":{"docs":{},"m":{"docs":{},"b":{"docs":{"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":0.003875968992248062},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.0033112582781456954}}}}},"o":{"docs":{},"n":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0045662100456621}}}}},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"t":{"docs":{},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282},"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.010101010101010102}}}}}},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"u":{"docs":{},"c":{"docs":{},"t":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.005952380952380952}}}}}}}}},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005}}}},"s":{"docs":{},"i":{"docs":{},"n":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.006896551724137931}}}}},"r":{"docs":{},"s":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.003484320557491289},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.015748031496062992},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0045662100456621}}}}},"m":{"docs":{},"b":{"docs":{},"i":{"docs":{},"n":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.002652519893899204},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.010050251256281407}}}}}},"i":{"docs":{},"n":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.005025125628140704}}}}},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"p":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907}}}}}}}}},"a":{"docs":{},"p":{"docs":{},"a":{"docs":{},"c":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0029585798816568047}}}}}}},"t":{"docs":{},"w":{"docs":{},"o":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282}}}},"a":{"docs":{},"s":{"docs":{},"k":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.003367003367003367}}}}}},"l":{"docs":{},"o":{"docs":{},"n":{"docs":{},"g":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0037735849056603774},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.07692307692307693},"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.005555555555555556}}}}}}},"w":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457}}}}}}},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.013605442176870748},"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":0.003875968992248062},"Algorithms/TrickySorting.html":{"ref":"Algorithms/TrickySorting.html","tf":0.024390243902439025},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.002652519893899204}}}}}}}},"r":{"docs":{},"u":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.003367003367003367}}}}},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"i":{"docs":{},"m":{"docs":{},"u":{"docs":{},"m":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.007547169811320755},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002976190476190476},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.003367003367003367}}}}}}}},"i":{"docs":{},"n":{"docs":{},"i":{"docs":{},"m":{"docs":{},"u":{"docs":{},"m":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0029585798816568047},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0045662100456621},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.008888888888888889},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.003367003367003367}}}}}}}},"o":{"docs":{},"s":{"docs":{},"t":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457}}}},"v":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.003367003367003367}}}},"e":{"docs":{},"r":{"docs":{},"g":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0045662100456621}}}}}},"o":{"docs":{},"n":{"docs":{},"l":{"docs":{},"i":{"docs":{},"n":{"docs":{"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":0.003875968992248062}}}}}}},"s":{"docs":{},"l":{"docs":{},"i":{"docs":{},"d":{"docs":{"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":0.003875968992248062}}}}},"u":{"docs":{},"m":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0036231884057971015},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0029585798816568047}}}},"h":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.007380073800738007}}}}}}}}},"q":{"docs":{},"r":{"docs":{},"t":{"docs":{},"x":{"docs":{},"/":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.002512562814070352}}}}}}}},"b":{"docs":{},"i":{"docs":{},"n":{"docs":{},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0036231884057971015}}}}}}},"a":{"docs":{},"l":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002976190476190476}}}},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.01098901098901099}}}}}},"p":{"docs":{},"a":{"docs":{},"t":{"docs":{},"h":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.007246376811594203},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.0033112582781456954}}}}},"o":{"docs":{},"s":{"docs":{},"s":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395}}}},"w":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.007936507936507936}}}},"e":{"docs":{},"r":{"docs":{},"m":{"docs":{},"u":{"docs":{},"t":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.002652519893899204}},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"/":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.002652519893899204}}}}}}}}}}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"i":{"docs":{},"d":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.008888888888888889}}}}}}},"d":{"docs":{},"e":{"docs":{},"e":{"docs":{},"p":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.006896551724137931}}}}}}}}},"a":{"docs":{},"l":{"docs":{"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877}}},"r":{"docs":{},"r":{"docs":{},"a":{"docs":{},"y":{"docs":{"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.0625}}}}}}},"f":{"docs":{},"l":{"docs":{},"o":{"docs":{},"w":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395}}}}},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.005917159763313609},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.007936507936507936},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.003367003367003367}}}}}},"i":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395}},"n":{"docs":{},"s":{"docs":{},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0045662100456621}}}}}},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"v":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0045662100456621}}}}}}}},"k":{"docs":{},"e":{"docs":{},"y":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907}}}},"n":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.002512562814070352}}}}}}}},"r":{"docs":{},"e":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"u":{"docs":{},"c":{"docs":{},"t":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.003484320557491289}}}}}}}}}}}}},"j":{"docs":{},"u":{"docs":{},"m":{"docs":{},"p":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.007380073800738007},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.0033112582781456954}}}}}},"w":{"docs":{},"a":{"docs":{},"t":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0036900369003690036}}}},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0036900369003690036},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.002512562814070352}}}}}},"h":{"docs":{},"o":{"docs":{},"u":{"docs":{},"s":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}}}},"u":{"docs":{},"n":{"docs":{},"i":{"docs":{},"q":{"docs":{},"u":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}}}}},"g":{"docs":{},"e":{"docs":{},"n":{"docs":{},"e":{"docs":{},"r":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0044444444444444444}}}}}}}}}}}}}}}},"e":{"docs":{},"x":{"docs":{},"p":{"docs":{},"l":{"docs":{},"o":{"docs":{},"r":{"docs":{},"e":{"docs":{},"/":{"docs":{},"c":{"docs":{},"h":{"docs":{},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"e":{"docs":{},"/":{"docs":{},"c":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{},"/":{"3":{"0":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282}}},"docs":{}},"docs":{},"m":{"docs":{},"a":{"docs":{},"y":{"docs":{"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":0.003875968992248062},"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.007936507936507936}}}}},"j":{"docs":{},"u":{"docs":{},"n":{"docs":{"Algorithms/DynamicProgramming-IV.html":{"ref":"Algorithms/DynamicProgramming-IV.html","tf":0.00980392156862745},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.003367003367003367}}},"l":{"docs":{},"i":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.003367003367003367}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"/":{"docs":{},"w":{"docs":{},"e":{"docs":{},"e":{"docs":{},"k":{"docs":{},"l":{"docs":{},"i":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.003484320557491289},"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.003367003367003367}}}}}}}}}}}}}}}},"d":{"docs":{},"i":{"docs":{},"s":{"docs":{},"c":{"docs":{},"u":{"docs":{},"s":{"docs":{},"s":{"docs":{},"/":{"docs":{},"g":{"docs":{},"e":{"docs":{},"n":{"docs":{},"e":{"docs":{},"r":{"docs":{"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.0625},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.005917159763313609},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"v":{"docs":{},"i":{"docs":{},"e":{"docs":{},"w":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.024691358024691357}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"w":{"docs":{},"w":{"docs":{},"w":{"docs":{},".":{"docs":{},"g":{"docs":{},"e":{"docs":{},"e":{"docs":{},"k":{"docs":{},"s":{"docs":{},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"e":{"docs":{},"k":{"docs":{},"s":{"docs":{},".":{"docs":{},"o":{"docs":{},"r":{"docs":{},"g":{"docs":{},"/":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"i":{"docs":{},"m":{"docs":{},"u":{"docs":{},"m":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.011320754716981131},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.01098901098901099}}}}}}}}},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02}}}}},"u":{"docs":{},"m":{"docs":{},"b":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.007547169811320755}}}}}},"x":{"docs":{},"o":{"docs":{},"r":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0037735849056603774}}}}},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},"i":{"docs":{},"t":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.006802721088435374}}}}}}}},"t":{"docs":{},"a":{"docs":{},"g":{"docs":{},"/":{"docs":{},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{},"/":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.006802721088435374}}}}}}}}},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},"a":{"docs":{},"y":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678}}}}}}}}}}},"s":{"docs":{},"t":{"docs":{},"o":{"docs":{},"c":{"docs":{},"k":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}}}}}}}}}}}}}}}}}}}}}}},"t":{"docs":{},"e":{"docs":{},"c":{"docs":{},"h":{"docs":{},"i":{"docs":{},"e":{"docs":{},"d":{"docs":{},"e":{"docs":{},"l":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},".":{"docs":{},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"/":{"docs":{},"l":{"docs":{},"o":{"docs":{},"n":{"docs":{},"g":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.005555555555555556}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"m":{"docs":{},"e":{"docs":{},"d":{"docs":{},"i":{"docs":{},"u":{"docs":{},"m":{"docs":{},".":{"docs":{},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"/":{"docs":{},"@":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"f":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"k":{"docs":{},"/":{"docs":{},"b":{"docs":{},"i":{"docs":{},"n":{"docs":{},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011235955056179775}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"b":{"docs":{},"l":{"docs":{},"o":{"docs":{},"g":{"docs":{},".":{"docs":{},"u":{"docs":{},"s":{"docs":{},"e":{"docs":{},"j":{"docs":{},"o":{"docs":{},"u":{"docs":{},"r":{"docs":{},"n":{"docs":{},"a":{"docs":{},"l":{"docs":{},".":{"docs":{},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"/":{"docs":{},"t":{"docs":{},"o":{"docs":{},"p":{"docs":{"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.002777777777777778}}}}}}}}}}}}}}}}}}}}}}}}},"d":{"docs":{},"b":{"docs":{},"a":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},".":{"docs":{},"o":{"docs":{},"r":{"docs":{},"g":{"docs":{},"/":{"docs":{},"b":{"docs":{},"l":{"docs":{},"o":{"docs":{},"g":{"docs":{},"/":{"docs":{},"p":{"docs":{},"y":{"docs":{},"t":{"docs":{},"h":{"docs":{},"o":{"docs":{},"n":{"docs":{"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.01020408163265306}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"o":{"docs":{},"g":{"docs":{},"r":{"docs":{},"a":{"docs":{},"m":{"docs":{},"/":{"docs":{"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":0.003875968992248062}}}}}}}}}},"r":{"docs":{},"e":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.003367003367003367}}}}},"o":{"docs":{},"p":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.005025125628140704}},",":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.002512562814070352}}},".":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.002512562814070352}}},"s":{"docs":{},"[":{"docs":{},"p":{"docs":{},"o":{"docs":{},"s":{"docs":{},"]":{"docs":{},":":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.002512562814070352}}}}}}}}}},"l":{"docs":{},"d":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.03296703296703297}},",":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}}}}},"k":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.015},"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":0.011627906976744186},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0427807486631016},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.025210084033613446},"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0036900369003690036},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.010610079575596816},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0029585798816568047},"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.010101010101010102},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.006734006734006734}},"e":{"docs":{},"e":{"docs":{},"p":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.010752688172043012},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0037735849056603774},"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":0.003875968992248062},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011235955056179775},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.0033112582781456954},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0044444444444444444},"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.01020408163265306}}}},"y":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.008928571428571428},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395},"Algorithms/TrickySorting.html":{"ref":"Algorithms/TrickySorting.html","tf":0.024390243902439025},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.0033112582781456954},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0136986301369863}},",":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457}}},")":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.005952380952380952}}},":":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002976190476190476}}},"b":{"docs":{},"o":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678}},"/":{"docs":{},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"m":{"docs":{},"i":{"docs":{},"s":{"docs":{},"s":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"/":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.0033112582781456954}}}}}}}}}}}}}}}}}}}},"=":{"docs":{},"l":{"docs":{},"a":{"docs":{},"m":{"docs":{},"b":{"docs":{},"d":{"docs":{},"a":{"docs":{"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.01020408163265306}}}}}}}}}}},"’":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282}}},"/":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.007547169811320755}}},":":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0037735849056603774},"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":0.003875968992248062},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.008403361344537815},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0036900369003690036},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.005305039787798408},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0029585798816568047},"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.010101010101010102}}},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005}},"a":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457}}}}}},")":{"docs":{},":":{"docs":{"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":0.003875968992248062}}},")":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907}}}},"a":{"docs":{},"d":{"docs":{},"a":{"docs":{},"n":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678}}}}}},"]":{"docs":{},"]":{"docs":{},")":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0036900369003690036}}}}},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.014760147601476014}}}}}}},"n":{"docs":{},"a":{"docs":{},"p":{"docs":{},"s":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}}}}}},",":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}}}}}}},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},"d":{"docs":{},"i":{"docs":{},"a":{"docs":{},"l":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.002512562814070352}}}}}}}}}}}}}}}}}},"o":{"docs":{},"w":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.002512562814070352}}}}},",":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.003367003367003367},"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.01020408163265306}}}},"l":{"docs":{"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":0.003875968992248062},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.012285012285012284},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.005952380952380952}},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{},"u":{"docs":{},"a":{"docs":{},"g":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.010752688172043012}}}}}}},"r":{"docs":{},"g":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.003367003367003367}},"d":{"docs":{},"i":{"docs":{},"v":{"docs":{},"i":{"docs":{},"s":{"docs":{},"i":{"docs":{},"b":{"docs":{},"l":{"docs":{},"e":{"docs":{},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.006802721088435374}}}}}}}}}}}}}}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{},"l":{"docs":{},"e":{"docs":{},"a":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":0.003875968992248062}}}}}}}}}}}}}}}}}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"b":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Algorithms/TrickySorting.html":{"ref":"Algorithms/TrickySorting.html","tf":0.024390243902439025}}}}}}}}}}}}}},"t":{"docs":{},"i":{"docs":{},"m":{"docs":{},"e":{"docs":{},"f":{"docs":{},"r":{"docs":{},"o":{"docs":{},"m":{"docs":{},"d":{"docs":{},"i":{"docs":{},"g":{"docs":{},"i":{"docs":{},"t":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.002652519893899204}}}}}}}}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"t":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005},"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":0.007751937984496124},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002976190476190476},"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.01020408163265306}},"_":{"docs":{},"p":{"docs":{},"o":{"docs":{},"w":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.015873015873015872}},"e":{"docs":{},"r":{"docs":{},"]":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.007936507936507936}}}}}}}}}}},"b":{"docs":{},"e":{"docs":{},"l":{"docs":{},"/":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.003484320557491289}}},"s":{"docs":{},":":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.003484320557491289}}}}}}},"m":{"docs":{},"b":{"docs":{},"d":{"docs":{},"a":{"docs":{"Algorithms/TrickySorting.html":{"ref":"Algorithms/TrickySorting.html","tf":0.024390243902439025},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0136986301369863}}}}}}},"e":{"docs":{},"v":{"docs":{},"e":{"docs":{},"l":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.010752688172043012},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.02247191011235955},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0036231884057971015},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":3.333333333333333},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0106951871657754},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.002652519893899204}},"w":{"docs":{},"i":{"docs":{},"s":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011235955056179775},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0036231884057971015},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.006896551724137931}},"e":{"docs":{},",":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011235955056179775}}}}}}},"_":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.027586206896551724}}}}}}}}},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0037735849056603774},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.007246376811594203},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.01060070671378092},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.006622516556291391},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.008888888888888889}},")":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0036231884057971015}},":":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0036231884057971015}}}}}}},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},")":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.013605442176870748},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.01},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.005917159763313609},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0030864197530864196},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.003367003367003367}},":":{"docs":{"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":0.003875968992248062},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.005305039787798408}}},")":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002976190476190476}},":":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.002652519893899204}}},"]":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.002652519893899204}}}}}}}}},"r":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},")":{"docs":{},")":{"docs":{},":":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005}}},"]":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.01}}}}}}}}}},"o":{"docs":{},"o":{"docs":{},"m":{"docs":{},"s":{"docs":{},")":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907}}}}}}}},"h":{"docs":{},"e":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},"s":{"docs":{},")":{"docs":{"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":0.003875968992248062}}}}}}}}}},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"u":{"docs":{},"e":{"docs":{},")":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.013793103448275862},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877}}}}}}}},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},")":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002976190476190476},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.002652519893899204}}}}}},"i":{"docs":{},"n":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},")":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002976190476190476}}}}}}}}}},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},")":{"docs":{},":":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002976190476190476}}}}}}}},"p":{"docs":{},"o":{"docs":{},"s":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},")":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002976190476190476}}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},")":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002976190476190476}}}}}}}}},"i":{"docs":{},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},")":{"docs":{},")":{"docs":{},":":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}}}}}}}},"a":{"docs":{},"t":{"docs":{},"h":{"docs":{},")":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.003484320557491289}}}}}}},"g":{"docs":{},"r":{"docs":{},"a":{"docs":{},"p":{"docs":{},"h":{"docs":{},")":{"docs":{},")":{"docs":{},":":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395}}},"]":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395}}}}}}}},"i":{"docs":{},"d":{"docs":{},")":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0036900369003690036}},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.0033112582781456954}}}},"[":{"0":{"docs":{},"]":{"docs":{},")":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0036900369003690036},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.0033112582781456954}}}}},"docs":{}}}}}},"v":{"docs":{},"i":{"docs":{},"s":{"docs":{},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{},"d":{"docs":{},")":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.008403361344537815}}}}}}}}},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{},"e":{"docs":{},"s":{"docs":{},")":{"docs":{},"+":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}}}}}}}},"t":{"docs":{},"o":{"docs":{},"p":{"docs":{},"o":{"docs":{},")":{"docs":{"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.007874015748031496}}}}}},"e":{"docs":{},"x":{"docs":{},"t":{"1":{"docs":{},")":{"docs":{"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.002777777777777778}}}},"2":{"docs":{},")":{"docs":{"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.002777777777777778}},")":{"docs":{"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.005555555555555556}}}}},"docs":{}}}}},"b":{"docs":{},"o":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{},")":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0036900369003690036}}},"[":{"0":{"docs":{},"]":{"docs":{},")":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0036900369003690036}}}}},"docs":{}}}}}},"u":{"docs":{},"c":{"docs":{},"k":{"docs":{},"e":{"docs":{},"t":{"docs":{},")":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.007957559681697613}}}}}}}},"l":{"docs":{},"o":{"docs":{},"o":{"docs":{},"m":{"docs":{},"d":{"docs":{},"a":{"docs":{},"y":{"docs":{},")":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0029585798816568047}}}}}}}}}}},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},")":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.002512562814070352}},":":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0036900369003690036}}},"]":{"docs":{},":":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.002512562814070352}}}}}}}}},"d":{"docs":{},"o":{"docs":{},"m":{"docs":{},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{},")":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.002652519893899204}}}}}}}},"p":{"docs":{},")":{"docs":{},")":{"docs":{},":":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.002512562814070352}}}}}}},"s":{"docs":{},")":{"docs":{"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.005555555555555556},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.002512562814070352}},":":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.007936507936507936}}}}},"c":{"docs":{},"o":{"docs":{},"i":{"docs":{},"n":{"docs":{},"s":{"docs":{},")":{"docs":{},")":{"docs":{},":":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.005025125628140704}}}},".":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.002512562814070352}}}}}}}}}}},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282},"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":0.003875968992248062},"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0029585798816568047},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.007936507936507936},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0030864197530864196},"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.002777777777777778},"Algorithms/DynamicProgramming-IV.html":{"ref":"Algorithms/DynamicProgramming-IV.html","tf":0.00980392156862745},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.006734006734006734}},"e":{"docs":{},":":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}}}}}}},"f":{"docs":{},"t":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0037735849056603774},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.02247191011235955},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0036231884057971015},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.009828009828009828},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.008928571428571428},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0036900369003690036}},"/":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011235955056179775}}},",":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.010869565217391304},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.003367003367003367}}},":":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0036231884057971015}}},".":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457}}},"=":{"docs":{},"n":{"docs":{},"o":{"docs":{},"n":{"docs":{},"e":{"docs":{},",":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.005952380952380952}}}}}}}},"_":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},",":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457}}}}},"i":{"docs":{},"n":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457}}}}}}}},"s":{"docs":{},"s":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.011320754716981131}}}},"a":{"docs":{},"v":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.006802721088435374},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.006896551724137931},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.003484320557491289}},"e":{"docs":{},"s":{"docs":{},"/":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125}}}},",":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}}},"f":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0036231884057971015},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004914004914004914}}},"s":{"docs":{},"t":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.003367003367003367}}}}}}}}}}}}}}}}}}},"x":{"docs":{},"o":{"docs":{},"g":{"docs":{},"r":{"docs":{},"a":{"docs":{},"p":{"docs":{},"h":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.003484320557491289}}}}}}}}},"t":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0036900369003690036}}}}}}},"i":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.013605442176870748},"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.002777777777777778}},"b":{"docs":{},"r":{"docs":{},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.010752688172043012}}}}}}},"s":{"docs":{},"t":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.010752688172043012},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125},"Algorithms/":{"ref":"Algorithms/","tf":0.024691358024691357},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0045662100456621},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.003367003367003367},"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.04081632653061224}},"s":{"docs":{},".":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.010752688172043012}}},",":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678}}}},"[":{"docs":{},"i":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}},"n":{"docs":{},"t":{"docs":{},"]":{"docs":{},")":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.006802721088435374},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.015},"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":0.007751937984496124},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.008928571428571428},"Algorithms/TrickySorting.html":{"ref":"Algorithms/TrickySorting.html","tf":0.024390243902439025},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.007957559681697613},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.005917159763313609},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0030864197530864196},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0045662100456621},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.006734006734006734}}},",":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0037735849056603774},"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":0.007751937984496124},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002976190476190476},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.008875739644970414},"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.010101010101010102}}},":":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.006802721088435374},"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":0.007751937984496124},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.007067137809187279},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.003484320557491289},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.007874015748031496},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.007936507936507936},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.003367003367003367}}}}}},"]":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}},"n":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.006802721088435374}}},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"[":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"]":{"docs":{},"]":{"docs":{},":":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.01},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0036231884057971015},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.005305039787798408},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0091324200913242}}},",":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.008403361344537815},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.003484320557491289},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.007874015748031496},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0036900369003690036},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0045662100456621}}},")":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.01060070671378092},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.003484320557491289},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.015748031496062992},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.0033112582781456954},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0136986301369863}}}}}}}},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"]":{"docs":{},"]":{"docs":{},")":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.003484320557491289}}},",":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0036900369003690036}}}}}}}}}}}}},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"]":{"docs":{},":":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.003484320557491289},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.002512562814070352}}},")":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.002512562814070352}}},",":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.003367003367003367}}}}}}},"b":{"docs":{},"o":{"docs":{},"o":{"docs":{},"l":{"docs":{},"]":{"docs":{},")":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457}}},":":{"docs":{"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.007874015748031496}}}}}}}}},":":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011235955056179775},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.005305039787798408}}},")":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002976190476190476},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.005305039787798408}},";":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0045662100456621}}}},",":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.002652519893899204}}},".":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}},"i":{"docs":{},"n":{"docs":{},"s":{"docs":{},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},",":{"docs":{"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.01020408163265306}}}}}}}}}}}}}}}},"}":{"docs":{"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.01020408163265306}}}},".":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.006802721088435374}}},",":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}},"m":{"docs":{},"i":{"docs":{},"t":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0036900369003690036},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.0033112582781456954}},"/":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0037735849056603774}}},",":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}}}},"k":{"docs":{},"e":{"docs":{},":":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.006802721088435374},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0045662100456621}}}}},"n":{"docs":{},"k":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.024691358024691357}}},"e":{"docs":{},"a":{"docs":{},"r":{"docs":{"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.010101010101010102}}}}}},"t":{"docs":{},"t":{"docs":{},"l":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0036900369003690036}}}}}},"o":{"docs":{},"o":{"docs":{},"k":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0037735849056603774},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.003484320557491289}}},"p":{"docs":{"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":0.003875968992248062},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.006968641114982578},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0036900369003690036},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.005305039787798408},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.002512562814070352},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.003367003367003367}},")":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.005917159763313609}}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},":":{"docs":{"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.01020408163265306}}}}}}}},"c":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},")":{"docs":{"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":0.003875968992248062}}}}}}},"l":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.003484320557491289},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.016483516483516484}}}}},"n":{"docs":{},"g":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0036900369003690036}},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.015873015873015872},"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.005555555555555556}},"z":{"docs":{},"i":{"docs":{},"g":{"docs":{},"z":{"docs":{},"a":{"docs":{},"g":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0036231884057971015}}}}}}}}}}}}}},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"m":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"s":{"docs":{},"e":{"docs":{},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.008333333333333333}}}}}}}}}}}}}}}}}}}}}}}}},"p":{"docs":{},"a":{"docs":{},"l":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"r":{"docs":{},"o":{"docs":{},"m":{"docs":{},"e":{"docs":{},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"s":{"docs":{},"e":{"docs":{},"q":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.005555555555555556}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"w":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"m":{"docs":{},"o":{"docs":{},"n":{"docs":{},"a":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457}}}}}}}}}}}}}}}}}}}}}}}}}},"t":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0029585798816568047},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}},",":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.003484320557491289}}},".":{"docs":{},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{},"m":{"docs":{},"s":{"docs":{},"(":{"docs":{},")":{"docs":{},":":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457}}}}}}}}}}},"c":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457},"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.002777777777777778}},"s":{"docs":{},"(":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"(":{"docs":{},"t":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"1":{"docs":{},")":{"docs":{},",":{"docs":{"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.005555555555555556}}}}},"docs":{}}}}}}}}},"m":{"docs":{"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.005555555555555556}},",":{"docs":{"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.011111111111111112}}}}}}},"l":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678}}},"p":{"docs":{},"s":{"docs":{},"(":{"0":{"docs":{},",":{"docs":{"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.005555555555555556}}}},"docs":{},"m":{"docs":{"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.005555555555555556}},",":{"docs":{"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.011111111111111112}}}}}}},"r":{"docs":{},"u":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.003367003367003367},"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.01020408163265306}}}}},"m":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.0033112582781456954},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.008875739644970414},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0030864197530864196},"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.016666666666666666},"Algorithms/DynamicProgramming-IV.html":{"ref":"Algorithms/DynamicProgramming-IV.html","tf":0.00980392156862745}},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.010752688172043012},"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282},"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.010101010101010102},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.01098901098901099},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.003367003367003367}}}}}}},"t":{"docs":{},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":0.003875968992248062}}}}}}},"t":{"docs":{},"c":{"docs":{},"h":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.002512562814070352},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0044444444444444444}},"e":{"docs":{},"d":{"docs":{},":":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0037735849056603774}}}}}}},"r":{"docs":{},"i":{"docs":{},"x":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.024691358024691357}},"/":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0036900369003690036}}}}}},"h":{"docs":{},".":{"docs":{},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},"p":{"docs":{},"o":{"docs":{},"s":{"docs":{},"i":{"docs":{},"t":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.0033112582781456954}}}}}}}}}}}}}},"x":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004914004914004914},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.0033112582781456954},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.013468013468013467}},"/":{"docs":{},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{},".":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0037735849056603774}}},":":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0037735849056603774}}}}}}},"i":{"docs":{},"m":{"docs":{},"u":{"docs":{},"m":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0037735849056603774},"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.006622516556291391},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.016483516483516484}},"/":{"docs":{"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":0.003875968992248062}}},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.009933774834437087}},")":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.0033112582781456954}}}}}},",":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0029585798816568047}}}}},"a":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}}},"n":{"docs":{},"o":{"docs":{},"n":{"docs":{},"o":{"docs":{},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"l":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0037735849056603774}}}}}}}}}}}}}}}}}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0037735849056603774}}}}},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.013605442176870748},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.007936507936507936}},":":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.006802721088435374}}}}}},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457}}}}}}},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.005952380952380952}},")":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002976190476190476}}}}}}}},"t":{"docs":{},"i":{"docs":{},"m":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.012605042016806723}}}}},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"p":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0045662100456621}}}}}}},"s":{"docs":{},"l":{"docs":{},"i":{"docs":{},"d":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"w":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"o":{"docs":{},"w":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":0.003875968992248062}}}}}}}}}}}}}}}}}}}}},"(":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},".":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},",":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0036231884057971015}}}}}}}}},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{},",":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457}}}}}}}}}}}},"d":{"docs":{},"f":{"docs":{},"s":{"docs":{},"(":{"docs":{},"i":{"docs":{},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.0033112582781456954}}}},"x":{"docs":{},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.0033112582781456954}}}}}}}}}}}},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},",":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0029585798816568047}}}}}}}},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"_":{"docs":{},"t":{"docs":{},"i":{"docs":{},"m":{"docs":{},"e":{"docs":{},",":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907}}}}}}}}}},"e":{"docs":{},"m":{"docs":{},"o":{"docs":{},"[":{"docs":{},"i":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}}}}}},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},",":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.005917159763313609}}}}}},"i":{"docs":{},"n":{"docs":{},"c":{"docs":{},"l":{"docs":{},"u":{"docs":{},"d":{"docs":{},"e":{"docs":{},",":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}}}}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{},",":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}}},"docs":{}}}}}},"d":{"docs":{},"p":{"docs":{},"[":{"docs":{},"x":{"docs":{"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.002777777777777778}}}}}},"l":{"docs":{},"c":{"docs":{},"s":{"docs":{},"(":{"docs":{},"m":{"docs":{"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.005555555555555556}}}}}},"p":{"docs":{},"s":{"docs":{},"(":{"docs":{},"m":{"docs":{"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.005555555555555556}}}}}}},"c":{"docs":{},"a":{"docs":{},"s":{"docs":{},"h":{"docs":{},",":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.01098901098901099}}}}}}},"h":{"docs":{},"o":{"docs":{},"l":{"docs":{},"d":{"docs":{},",":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.01098901098901099}}}}}}},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"u":{"docs":{},"l":{"docs":{},"t":{"docs":{},"[":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0045662100456621}}}}}}}}}},"p":{"docs":{},"r":{"docs":{},"o":{"docs":{},"f":{"docs":{},"i":{"docs":{},"t":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}}}}}}}}}}}}},"k":{"docs":{},"e":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011235955056179775},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002976190476190476},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395},"Algorithms/TrickySorting.html":{"ref":"Algorithms/TrickySorting.html","tf":0.024390243902439025},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.005305039787798408},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0029585798816568047},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0045662100456621},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.013333333333333334}}}},"r":{"docs":{},"k":{"docs":{"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877}}}},"d":{"docs":{},"e":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.002652519893899204},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.02631578947368421}}}},"n":{"docs":{},"i":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0029585798816568047}}}}},"e":{"docs":{},"t":{"docs":{},"h":{"docs":{},"o":{"docs":{},"d":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.006802721088435374}},"s":{"docs":{},",":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.010752688172043012}}}},":":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907}}}}}}},"m":{"docs":{},"o":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.0033112582781456954},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0030864197530864196},"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.005555555555555556},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.002512562814070352}},"r":{"docs":{},"i":{"docs":{"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}},"i":{"docs":{},"z":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.006172839506172839},"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.005555555555555556},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.002512562814070352},"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.02040816326530612}}}},"[":{"0":{"docs":{},"]":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}},"1":{"docs":{},"]":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}},"docs":{},"i":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}},"]":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}},"n":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}},"x":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0030864197530864196}},"]":{"docs":{},"[":{"docs":{},"i":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}},"y":{"docs":{},"]":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.004629629629629629}}}}}}},"(":{"docs":{},"m":{"docs":{},",":{"docs":{"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.03333333333333333}}}},"i":{"docs":{},",":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.035555555555555556}}}}}},":":{"docs":{"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.005555555555555556}}}}},"e":{"docs":{},"t":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0091324200913242}}}},"r":{"docs":{},"g":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0091324200913242}},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0045662100456621}}}}}}}}}}},"n":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.02631578947368421}}}}}}}},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"k":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.010752688172043012}}}}},"c":{"docs":{},"e":{"docs":{},"l":{"docs":{},"l":{"docs":{},"a":{"docs":{},"n":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.006802721088435374},"Miscellaneous/":{"ref":"Miscellaneous/","tf":11},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":5}}}}}}}},"s":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395}}}},"n":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.0033112582781456954},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.007537688442211055},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.006734006734006734}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0037735849056603774}}}}},"t":{"docs":{},"i":{"docs":{},"m":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457}}}}}}}}}}}},"d":{"docs":{"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395}},"a":{"docs":{},"y":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0029585798816568047}}}}}}}}}}}},"u":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.003484320557491289}}},"i":{"docs":{},"m":{"docs":{},"u":{"docs":{},"m":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0036900369003690036},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.008875739644970414},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.006172839506172839},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.016483516483516484}}}},"a":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.01098901098901099}}}}},"(":{"2":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.0033112582781456954}}},"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},",":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0029585798816568047}}}}}}}},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{},"_":{"docs":{},"s":{"docs":{},"t":{"docs":{},"e":{"docs":{},"p":{"docs":{},"s":{"docs":{},",":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.002512562814070352}}}}}}}},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},",":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0045662100456621}}}}}}}}}}},"s":{"docs":{},"t":{"docs":{},"e":{"docs":{},"p":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.0033112582781456954}}}}}}}}}}}}},".":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}},"_":{"docs":{},"s":{"docs":{},"t":{"docs":{},"e":{"docs":{},"p":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.005025125628140704}}}}}},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0182648401826484}},":":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0045662100456621}}}}}}},"r":{"docs":{},"e":{"docs":{},"m":{"docs":{},"o":{"docs":{},"v":{"docs":{},"e":{"docs":{},"t":{"docs":{},"o":{"docs":{},"m":{"docs":{},"a":{"docs":{},"k":{"docs":{},"e":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"i":{"docs":{},"d":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0044444444444444444}}}}}}}}}}}}}}}}}}}}}}}}}},"d":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.008928571428571428},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.023668639053254437},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.005025125628140704}},";":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0029585798816568047}}}}},"o":{"docs":{},"v":{"docs":{},"e":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.0033112582781456954}},"z":{"docs":{},"e":{"docs":{},"r":{"docs":{},"o":{"docs":{},"e":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.003367003367003367}}}}}}}}}}}}}},":":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.007547169811320755}}}}},"d":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.005025125628140704}},"u":{"docs":{},"l":{"docs":{},"o":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0037735849056603774}}}}},"i":{"docs":{},"f":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0036900369003690036}},"i":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.003367003367003367}}}}},")":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.002512562814070352}}}},"r":{"docs":{},"e":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.011320754716981131},"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":0.003875968992248062},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.006896551724137931}}}},"n":{"docs":{},"o":{"docs":{},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"u":{"docs":{"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":0.003875968992248062}}}}}}}}},"u":{"docs":{},"l":{"docs":{},"t":{"docs":{},"i":{"docs":{},",":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0037735849056603774}}},"p":{"docs":{},"l":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.002512562814070352}}}}}}},"t":{"docs":{},"a":{"docs":{},"t":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0029585798816568047}}}}}},"y":{"docs":{},"r":{"docs":{},"i":{"docs":{},"a":{"docs":{},"d":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907}}}}}},"s":{"docs":{},"q":{"docs":{},"r":{"docs":{},"t":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.002512562814070352}}}}}}}}}}}}},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.0033112582781456954}}},":":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0029585798816568047},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0030864197530864196},"Algorithms/DynamicProgramming-IV.html":{"ref":"Algorithms/DynamicProgramming-IV.html","tf":0.00980392156862745}}}},"o":{"docs":{},"b":{"docs":{},"j":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.010752688172043012},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877}}}}}},"l":{"docs":{},"i":{"docs":{},"v":{"docs":{},"i":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.010752688172043012}}}}}},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"c":{"docs":{},"l":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0036900369003690036}}}}},"r":{"docs":{},"u":{"docs":{},"c":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},".":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}}}}}}}}}}},"o":{"docs":{},"p":{"docs":{},":":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.010752688172043012}}}}},"p":{"docs":{},"t":{"docs":{},"i":{"docs":{},"m":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.010752688172043012},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0037735849056603774},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.006802721088435374},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.008403361344537815},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0036900369003690036},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.006172839506172839},"Algorithms/DynamicProgramming-IV.html":{"ref":"Algorithms/DynamicProgramming-IV.html","tf":0.00980392156862745}},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{},"y":{"docs":{},".":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0036900369003690036}}}}}}}},"o":{"docs":{},"n":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.006622516556291391}}}}}},"e":{"docs":{},"r":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0037735849056603774},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.007380073800738007}},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},",":{"docs":{"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.010101010101010102}}}}}}}}}},"n":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.0033112582781456954},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.008888888888888889}}}}},"n":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02},"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.038461538461538464},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0037735849056603774},"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":0.007751937984496124},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.006968641114982578},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.0033112582781456954},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0029585798816568047},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.002512562814070352},"Algorithms/DynamicProgramming-IV.html":{"ref":"Algorithms/DynamicProgramming-IV.html","tf":0.00980392156862745},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0136986301369863},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0044444444444444444},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.006734006734006734},"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.01020408163265306},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.02631578947368421}},"e":{"docs":{},".":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0044444444444444444},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.003367003367003367}}},":":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395}}},"!":{"docs":{},"!":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002976190476190476}}}},"s":{"docs":{},".":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.0033112582781456954},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0029585798816568047},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0044444444444444444}}}},",":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0044444444444444444}}},";":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0044444444444444444}}}},"c":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0030864197530864196}}}},"d":{"docs":{},"d":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0037735849056603774}}}},"l":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0037735849056603774}}}}}},"u":{"docs":{},"t":{"docs":{"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.005305039787798408},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}},"s":{"docs":{},"i":{"docs":{},"d":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0037735849056603774},"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":0.003875968992248062}}}}}}},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0036900369003690036},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}},"l":{"docs":{},"a":{"docs":{},"p":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0037735849056603774},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098},"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.002777777777777778},"Algorithms/DynamicProgramming-IV.html":{"ref":"Algorithms/DynamicProgramming-IV.html","tf":0.00980392156862745},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0091324200913242}},",":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0091324200913242}}}}}}}}},"(":{"2":{"docs":{},"^":{"docs":{},"n":{"docs":{},")":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}}}},"docs":{},"n":{"2":{"docs":{},")":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.006802721088435374}}}},"docs":{},")":{"docs":{"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877}},"?":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":0.003875968992248062}}}}}},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011235955056179775},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0036231884057971015},"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.002512562814070352}}}}},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0036900369003690036}}}}}},"t":{"docs":{},"h":{"docs":{},"e":{"docs":{},"r":{"docs":{},"w":{"docs":{},"i":{"docs":{},"s":{"docs":{},"e":{"docs":{},")":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0036900369003690036}}},",":{"docs":{"Algorithms/DynamicProgramming-IV.html":{"ref":"Algorithms/DynamicProgramming-IV.html","tf":0.00980392156862745}}}}}}},"/":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.0033112582781456954}}}}}}},"f":{"docs":{},".":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.0033112582781456954}}}},"w":{"docs":{},"n":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}}},"p":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.02564102564102564},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.007547169811320755},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.003484320557491289},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.023622047244094488},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.007936507936507936}},"a":{"docs":{},"l":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"r":{"docs":{},"o":{"docs":{},"m":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.010752688172043012},"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678},"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.008333333333333333}}}}}}}}},"r":{"docs":{},"a":{"docs":{},"m":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.002652519893899204}},"e":{"docs":{},"t":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.010752688172043012}}}},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.0033112582781456954}}}}},"t":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0036900369003690036}},"i":{"docs":{},"c":{"docs":{},"u":{"docs":{},"l":{"docs":{},"a":{"docs":{},"r":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}},"l":{"docs":{},"i":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125}}}}}}}}},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},":":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}}}}}},"a":{"docs":{},"l":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.003367003367003367}}}}},"s":{"docs":{},".":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002976190476190476}}}},".":{"docs":{"Algorithms/TrickySorting.html":{"ref":"Algorithms/TrickySorting.html","tf":0.024390243902439025}}}},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.020689655172413793}},")":{"docs":{"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877}},":":{"docs":{"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877}}}},"h":{"docs":{},"e":{"docs":{},"s":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.0033112582781456954},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0044444444444444444}},"e":{"docs":{},"s":{"docs":{},"/":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.017777777777777778}}}}},"i":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":10.017777777777777}}}}}}}}}},"s":{"docs":{},"s":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.03225806451612903},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.02247191011235955},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0036231884057971015},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457}}},"t":{"docs":{"Algorithms/DynamicProgramming-IV.html":{"ref":"Algorithms/DynamicProgramming-IV.html","tf":0.00980392156862745}}}},"t":{"docs":{},"h":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.010752688172043012},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.015625},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.007246376811594203},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.006968641114982578},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.007380073800738007},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0030864197530864196}},")":{"docs":{},":":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.003484320557491289}}}},"s":{"docs":{},".":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125}}},"/":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125}},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"m":{"docs":{},"i":{"docs":{},"s":{"docs":{},"s":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"/":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}}}}}}}}}}}}},"u":{"docs":{},"m":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.007246376811594203}}}}}}}}}},":":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.007067137809187279}}}},",":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0036231884057971015}}},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},".":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},")":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0036231884057971015}}}}}}}}}}}}}}}}}}},"_":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},")":{"docs":{},":":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0036231884057971015}}}},":":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0036231884057971015}}}}}}},"[":{"docs":{},":":{"docs":{},"]":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.003484320557491289}}}}}},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"n":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0029585798816568047}}}}}}},"i":{"docs":{},"r":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395}},"s":{"docs":{},"/":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457}}}}}},"c":{"docs":{},"k":{"docs":{},"a":{"docs":{},"g":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0029585798816568047}}}}}},"g":{"docs":{},"e":{"docs":{},"s":{"docs":{},".":{"docs":{"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.002777777777777778}}}}}}},"o":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.002512562814070352}},"s":{"docs":{},"s":{"docs":{},"i":{"docs":{},"b":{"docs":{},"l":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.010752688172043012},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.003484320557491289},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.0033112582781456954},"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.010101010101010102},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0030864197530864196},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.005025125628140704},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0045662100456621},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0044444444444444444}},"e":{"docs":{},":":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.010752688172043012},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.002512562814070352}}},".":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}}}}}},"i":{"docs":{},"t":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.04},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.015},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.0033112582781456954},"Algorithms/DynamicProgramming-IV.html":{"ref":"Algorithms/DynamicProgramming-IV.html","tf":0.00980392156862745}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"[":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"]":{"docs":{},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"i":{"docs":{},")":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005}}}}}}}}}}}}}}}}}},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.0033112582781456954}}}}}}},"b":{"docs":{},"l":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.003484320557491289}}}}},"t":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.007547169811320755}},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.02247191011235955},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":5.002457002457002},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.005952380952380952}},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},")":{"docs":{},":":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457}}}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},")":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},")":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457}}}}}}}}}}}}}},".":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457}}},":":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002976190476190476}}}}}}}}}},"w":{"docs":{},"e":{"docs":{},"r":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0029585798816568047},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.007936507936507936}},"_":{"docs":{},"v":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.031746031746031744}},"a":{"docs":{},"l":{"docs":{},":":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.007936507936507936}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.002512562814070352}},"e":{"docs":{},"r":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":5.0256410256410255},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.011320754716981131},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.003367003367003367}},"s":{"docs":{},":":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282}}}}}},"s":{"docs":{},":":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0045662100456621}}}}}}},"p":{"docs":{"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":0.007751937984496124},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.002652519893899204},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.008888888888888889},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.003367003367003367}},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011235955056179775},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0036900369003690036}}}}}}}},"r":{"docs":{},"o":{"docs":{},"b":{"docs":{},"l":{"docs":{},"e":{"docs":{},"m":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.010752688172043012},"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.04},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.007547169811320755},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.02040816326530612},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011235955056179775},"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.125},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.007067137809187279},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.007380073800738007},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.008875739644970414},"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.010101010101010102},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.013888888888888888},"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.005555555555555556},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.002512562814070352},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0045662100456621},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.02631578947368421}},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{},":":{"docs":{"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.0625},"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.002777777777777778}}}}},".":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907}}},",":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0036900369003690036}}},")":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.0033112582781456954}}},":":{"docs":{"Algorithms/DynamicProgramming-IV.html":{"ref":"Algorithms/DynamicProgramming-IV.html","tf":0.00980392156862745}}}},",":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0029585798816568047}}}}}}},"p":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282}},"e":{"docs":{},"r":{"docs":{"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395}},"t":{"docs":{},"y":{"docs":{},",":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.010752688172043012}}}},"i":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098},"Algorithms/DynamicProgramming-IV.html":{"ref":"Algorithms/DynamicProgramming-IV.html","tf":0.00980392156862745}},"e":{"docs":{},"s":{"docs":{},",":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457}}},";":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457}}}}}}},"l":{"docs":{},"y":{"docs":{},".":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.003367003367003367}}}}}}}},"d":{"docs":{},"u":{"docs":{},"c":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.007547169811320755}},"t":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.01509433962264151}}}}}},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0036231884057971015},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.006968641114982578},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.002652519893899204}},":":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}}}}},"g":{"docs":{},"r":{"docs":{},"a":{"docs":{},"m":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":5.007716049382716},"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":3.336111111111111},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":3.333333333333333},"Algorithms/DynamicProgramming-IV.html":{"ref":"Algorithms/DynamicProgramming-IV.html","tf":3.3431372549019605},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}},":":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},")":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0030864197530864196}}},":":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}},"/":{"docs":{"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.002777777777777778}}}}}}}}}}},"f":{"docs":{},"i":{"docs":{},"t":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.016483516483516484}}}}},"j":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},",":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.02631578947368421}}}}}}}},"e":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.007547169811320755},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.006802721088435374},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.007874015748031496}},"f":{"docs":{},"i":{"docs":{},"x":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.011320754716981131}},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"f":{"docs":{},"i":{"docs":{},"x":{"docs":{},"[":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0037735849056603774}}}}}}}}}}}}}}}}},"_":{"docs":{},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0037735849056603774}}}},"1":{"docs":{},"]":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0037735849056603774}}}},"docs":{}}}}}}}}},"v":{"docs":{},"i":{"docs":{},"o":{"docs":{},"u":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0037735849056603774},"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":0.003875968992248062},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.002512562814070352},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0045662100456621},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.02631578947368421}}}}}},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.006802721088435374}}},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},"]":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.006802721088435374}}}}}}}},"n":{"docs":{},"]":{"docs":{"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.007874015748031496}},".":{"docs":{},"u":{"docs":{},"n":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"(":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"[":{"docs":{},"c":{"docs":{},"]":{"docs":{},".":{"docs":{},"u":{"docs":{},"n":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{},"(":{"docs":{},"[":{"docs":{},"c":{"docs":{},"]":{"docs":{},")":{"docs":{},")":{"docs":{},")":{"docs":{"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.007874015748031496}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"p":{"docs":{},"]":{"docs":{"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.007874015748031496}}}}},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.02247191011235955},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":5.003623188405797},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.005952380952380952}},":":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.005952380952380952}}},"[":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002976190476190476}}}}},"m":{"docs":{},"i":{"docs":{},"d":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002976190476190476}}}}},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002976190476190476}},"]":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002976190476190476}},")":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002976190476190476}}}}}}}}}}}}}}},"s":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011235955056179775},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002976190476190476},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.002512562814070352}}}},"r":{"docs":{},"v":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.002512562814070352}}}}}},"r":{"docs":{},"e":{"docs":{},"q":{"docs":{},"u":{"docs":{},"i":{"docs":{},"s":{"docs":{},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{},"s":{"docs":{},":":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.006968641114982578},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.031496062992125984}}}}}}}}}}}}}},"i":{"docs":{},"o":{"docs":{},"r":{"docs":{},"i":{"docs":{},"t":{"docs":{},"i":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.04},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.006802721088435374},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.008403361344537815},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.006734006734006734},"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.02040816326530612}}}}}}},"c":{"docs":{},"e":{"docs":{},":":{"docs":{"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":0.003875968992248062}}},"s":{"docs":{},",":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}},"[":{"0":{"docs":{},"]":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}},"docs":{},"i":{"docs":{},"]":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.01098901098901099}},")":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.01098901098901099}}}}}}}}},"n":{"docs":{},"t":{"docs":{},"(":{"docs":{},"\"":{"docs":{},">":{"docs":{},">":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.003367003367003367}}}}}}}}},"u":{"docs":{},"n":{"docs":{},"e":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005}}}}},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{},"i":{"docs":{},"c":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011235955056179775},"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.0625},"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.002777777777777778}},"e":{"docs":{},":":{"docs":{"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.002777777777777778}}}}}}}}}},"y":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.003367003367003367}},"t":{"docs":{},"h":{"docs":{},"o":{"docs":{},"n":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.03225806451612903},"Algorithms/TrickySorting.html":{"ref":"Algorithms/TrickySorting.html","tf":0.024390243902439025},"PythonicTricks/":{"ref":"PythonicTricks/","tf":5.010204081632653}}}}}}},"e":{"docs":{},"r":{"docs":{},"m":{"docs":{},"u":{"docs":{},"t":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.005305039787798408},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.0033112582781456954}},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"/":{"docs":{},"s":{"docs":{},"o":{"docs":{},"l":{"docs":{},"u":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"/":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02}}}}}}}}}}}}}}}}},"e":{"docs":{},"(":{"docs":{},"b":{"docs":{},"u":{"docs":{},"c":{"docs":{},"k":{"docs":{},"e":{"docs":{},"t":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.002652519893899204}},")":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.002652519893899204}},":":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.002652519893899204}}}}}}}}}},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.002652519893899204}}}}}}}},"u":{"docs":{},"n":{"docs":{},"i":{"docs":{},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.002652519893899204}}}}}}}}}}}}}}}}}},"f":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0036231884057971015},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098},"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.002777777777777778}},"l":{"docs":{},"y":{"docs":{},":":{"docs":{"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.010101010101010102}}}}}}}},"o":{"docs":{},"r":{"docs":{},"m":{"docs":{"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0106951871657754},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.006734006734006734}}}}}},"s":{"docs":{},"p":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.002512562814070352}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":0.003875968992248062}}}}}}}}}},"v":{"docs":{},"o":{"docs":{},"t":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.01488095238095238}}}}}},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011235955056179775},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0136986301369863},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.008888888888888889},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.003367003367003367}}}},"b":{"docs":{},"l":{"docs":{},"i":{"docs":{},"c":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.006622516556291391}}}}}}},":":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457}}},"l":{"docs":{},"a":{"docs":{},"n":{"docs":{},"t":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.01060070671378092}},"e":{"docs":{},"d":{"docs":{},"[":{"docs":{},"i":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.007067137809187279}}},"n":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395}}}}}}}},"y":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907}}},"c":{"docs":{},"e":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0029585798816568047},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.003367003367003367}},"s":{"docs":{},".":{"docs":{"Algorithms/DynamicProgramming-IV.html":{"ref":"Algorithms/DynamicProgramming-IV.html","tf":0.00980392156862745}}}}}}}},",":{"docs":{"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.015748031496062992}}},"h":{"docs":{},"o":{"docs":{},"n":{"docs":{},"e":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678}}}}}}},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{"DataStructures/":{"ref":"DataStructures/","tf":0.2},"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0037735849056603774},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.006802721088435374},"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":0.007751937984496124},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":5.076923076923077},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011235955056179775},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002976190476190476},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.006968641114982578},"Algorithms/":{"ref":"Algorithms/","tf":0.037037037037037035},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0036900369003690036},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098},"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.002777777777777778},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0045662100456621},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0044444444444444444},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.006734006734006734},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":5.052631578947368}},"!":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.010752688172043012}}},",":{"docs":{"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":0.003875968992248062}}},"s":{"docs":{},":":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002976190476190476},"Algorithms/":{"ref":"Algorithms/","tf":0.024691358024691357},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0036900369003690036},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.002652519893899204}}},"*":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678}}},",":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0036900369003690036},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0045662100456621}}},".":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0029585798816568047}}}},":":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.003484320557491289}}},"/":{"2":{"8":{"1":{"4":{"7":{"0":{"docs":{},"/":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"6":{"4":{"3":{"1":{"5":{"8":{"docs":{},"/":{"docs":{},"g":{"docs":{},"o":{"docs":{},"o":{"docs":{},"g":{"docs":{},"l":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678}}}}}}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},")":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.007936507936507936}}},".":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.003367003367003367}}}}}}}},"u":{"docs":{},"e":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.006802721088435374},"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":0.01937984496124031},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.020689655172413793},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.007067137809187279},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.008403361344537815},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.015748031496062992},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.02214022140221402},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.013468013468013467}},".":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011235955056179775}},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"0":{"docs":{},")":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907}}}},"docs":{},"(":{"0":{"docs":{},",":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.007067137809187279}}}},"docs":{"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":0.003875968992248062}},"c":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.003367003367003367}},"u":{"docs":{},"r":{"docs":{},"r":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},",":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.006896551724137931}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},",":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.006896551724137931}}}}}}}}}}}}}}}},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},",":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.006896551724137931}}}}}}},"i":{"docs":{},",":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395}}}},"v":{"docs":{},",":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.007067137809187279}}}}},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{},"r":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},")":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.006896551724137931}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},")":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.006896551724137931}}}}}}}}}}}}}}}},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},")":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.006896551724137931}}}}}}},"n":{"docs":{},"e":{"docs":{},"i":{"docs":{},")":{"docs":{"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.007874015748031496}}}}},")":{"docs":{"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.007874015748031496}}},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},")":{"docs":{"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.007874015748031496}}}}}}},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},".":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},")":{"docs":{"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877}}}}}}}}}}}}},"v":{"docs":{},")":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907}}}},"s":{"docs":{},")":{"docs":{"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.007874015748031496}}}}}}}}}}},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.013793103448275862},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.007067137809187279},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.015748031496062992},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0036900369003690036}}}}}}}},"(":{"docs":{},")":{"docs":{},")":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.003367003367003367}}}}}}}}},":":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.013793103448275862},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.007067137809187279},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.015748031496062992},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0036900369003690036},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.006734006734006734}}},")":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907}}},",":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.003367003367003367}}}}},"r":{"docs":{},"i":{"docs":{},"e":{"docs":{},"s":{"docs":{},":":{"docs":{"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.007874015748031496}}},"]":{"docs":{"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.007874015748031496}}}}}}}},"a":{"docs":{},"n":{"docs":{},"t":{"docs":{},"i":{"docs":{},"t":{"docs":{},"i":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0037735849056603774}}}}}}}},"i":{"docs":{},"c":{"docs":{},"k":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907}}}},"r":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0029585798816568047}}}},"s":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.003367003367003367}}}}}}}}}},".":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"]":{"docs":{},")":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457}},")":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457}}}}}}}}},":":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457}}}},"r":{"docs":{"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":0.003875968992248062},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.02457002457002457},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.005305039787798408},"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.01020408163265306}},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.003367003367003367}},"a":{"docs":{},"b":{"docs":{},"l":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.010752688172043012}}}}},":":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.002512562814070352}}}},"l":{"docs":{},"l":{"docs":{},"i":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.003367003367003367}}}},"i":{"docs":{},"z":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.003484320557491289}}}}},"c":{"docs":{},"h":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0036900369003690036},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.010050251256281407},"Algorithms/DynamicProgramming-IV.html":{"ref":"Algorithms/DynamicProgramming-IV.html","tf":0.00980392156862745}}}}},"f":{"docs":{},"e":{"docs":{},"r":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.021505376344086023},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0037735849056603774}},"e":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},":":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.002652519893899204}}}}}}}}}},"m":{"docs":{},"e":{"docs":{},"m":{"docs":{},"b":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.010752688172043012}},"e":{"docs":{},"r":{"docs":{},":":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0029585798816568047}}}}}}}},"o":{"docs":{},"v":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0037735849056603774},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.0033112582781456954},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0182648401826484},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.008888888888888889}}}},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.006734006734006734}}}}}},"t":{"docs":{},"u":{"docs":{},"r":{"docs":{},"n":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0037735849056603774},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.006802721088435374},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005},"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":0.007751937984496124},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011235955056179775},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0625},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.03985507246376811},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0343980343980344},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.041379310344827586},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0213903743315508},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.044642857142857144},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.02120141342756184},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.029411764705882353},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.04529616724738676},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.015748031496062992},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0036900369003690036},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.042440318302387266},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.033112582781456956},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.020710059171597635},"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.010101010101010102},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.015873015873015872},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.033950617283950615},"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.05277777777777778},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.020100502512562814},"Algorithms/DynamicProgramming-IV.html":{"ref":"Algorithms/DynamicProgramming-IV.html","tf":0.00980392156862745},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.01098901098901099},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0136986301369863},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.017777777777777778},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.013468013468013467}}}}}},"l":{"docs":{},"a":{"docs":{},"t":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0037735849056603774}}}}},"q":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0029585798816568047}},"u":{"docs":{},"i":{"docs":{},"r":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0037735849056603774},"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":0.003875968992248062},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0036900369003690036},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.0033112582781456954},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0030864197530864196}}}}}},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125}},"s":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.006802721088435374},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.02247191011235955},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.010610079575596816},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.009933774834437087},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0029585798816568047},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.010802469135802469},"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.008333333333333333},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.005025125628140704}},"e":{"docs":{},"(":{"0":{"docs":{},",":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}},"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},")":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},")":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457}}}}}}}}},":":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457}}}}}}},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{},"r":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},",":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}},":":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}}}}}}}}}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},":":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.002652519893899204},"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.005555555555555556}}},")":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.0033112582781456954}}},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.0033112582781456954}}},"/":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.002512562814070352}}}}}}}}},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":0.003875968992248062},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.02631578947368421}},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},":":{"docs":{"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":0.003875968992248062}}}}}}}}}}}}},"t":{"docs":{},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{},"l":{"docs":{"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":0.003875968992248062}}}}}}},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011235955056179775},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457}},"/":{"docs":{},"u":{"docs":{},"p":{"docs":{},"d":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457}}}}}}}}}},"s":{"docs":{},"u":{"docs":{},"l":{"docs":{},"t":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.013605442176870748},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.015},"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":0.011627906976744186},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.015625},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.007246376811594203},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004914004914004914},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0106951871657754},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.007067137809187279},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.010452961672473868},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.010610079575596816},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.008875739644970414},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.002512562814070352},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0182648401826484},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.010101010101010102},"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.01020408163265306}},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},"]":{"docs":{},")":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.006802721088435374}}}}}}}}}}}}},"e":{"docs":{},"i":{"docs":{},")":{"docs":{"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877}}}}}},"[":{"docs":{},"x":{"docs":{},",":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005}}}},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},",":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0045662100456621}}}}}}}}},"p":{"docs":{},"a":{"docs":{},"t":{"docs":{},"h":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125}},")":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0036231884057971015}}}}}}},"k":{"docs":{},"e":{"docs":{},"y":{"docs":{},")":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457}}}}}},"b":{"docs":{},"u":{"docs":{},"c":{"docs":{},"k":{"docs":{},"e":{"docs":{},"t":{"docs":{},"[":{"docs":{},":":{"docs":{},"]":{"docs":{},")":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.005305039787798408}}}}}}}}}}}},"'":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.003367003367003367}}},"t":{"docs":{},")":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.003367003367003367}}}}}}}}}}}},"_":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005}},"s":{"docs":{},".":{"docs":{},"a":{"docs":{},"d":{"docs":{},"d":{"docs":{},"(":{"docs":{},"t":{"docs":{},"u":{"docs":{},"p":{"docs":{},"l":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{},"e":{"docs":{},"d":{"docs":{},"(":{"docs":{},"[":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},",":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005}}}}}}}}}}}}}}}}}}}}}}}}}}}},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005}}}}}}}},":":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005}}}}},"[":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0091324200913242}},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"]":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.007067137809187279},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.003484320557491289}}}}}}}},"s":{"docs":{},",":{"docs":{"Algorithms/DynamicProgramming-IV.html":{"ref":"Algorithms/DynamicProgramming-IV.html","tf":0.00980392156862745}}}},";":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0045662100456621}}}}}},"t":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}},"p":{"docs":{},"e":{"docs":{},"t":{"docs":{},"i":{"docs":{},"t":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0036900369003690036}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},".":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005}}},",":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.002652519893899204}}}}}}}}},"a":{"docs":{},"t":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.07692307692307693},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.003484320557491289}}}}},"l":{"docs":{},"a":{"docs":{},"c":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0036231884057971015}}}}},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.002512562814070352}},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395}}}}}}}}},"d":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.010101010101010102}},",":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395}}},"]":{"docs":{},")":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395}}}},"_":{"docs":{},"e":{"docs":{},"d":{"docs":{},"g":{"docs":{},"e":{"docs":{},"s":{"docs":{},":":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.007067137809187279}}}}}}}}},"u":{"docs":{},"c":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0029585798816568047},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}}},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.002512562814070352}},"e":{"docs":{},"=":{"docs":{},"t":{"docs":{},"r":{"docs":{},"u":{"docs":{},"e":{"docs":{},")":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.002652519893899204}}}}}}}}}},"t":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.002652519893899204}}}}}}},"u":{"docs":{},"n":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.007547169811320755},"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":0.003875968992248062},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0036900369003690036},"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.010101010101010102},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.005025125628140704}},"t":{"docs":{},"i":{"docs":{},"m":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.010752688172043012},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}},"e":{"docs":{},"s":{"docs":{},":":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678}}}}}}}}},"l":{"docs":{},"e":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.002512562814070352}}}}},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0037735849056603774},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.033707865168539325},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0036231884057971015},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.012285012285012284},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.008928571428571428},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.002652519893899204},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.003367003367003367}},",":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.010869565217391304}}},":":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0036231884057971015}}},";":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457}}},"=":{"docs":{},"n":{"docs":{},"o":{"docs":{},"n":{"docs":{},"e":{"docs":{},")":{"docs":{},":":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.005952380952380952}}}}}}}}},"_":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},",":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457}}}}},"i":{"docs":{},"n":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457}}}}}}}}}},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.010101010101010102}},"e":{"docs":{},"(":{"0":{"docs":{},",":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.006802721088435374},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.025},"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":0.007751937984496124},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.014134275618374558},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.003484320557491289},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.01107011070110701},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.007957559681697613},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.012345679012345678},"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.005555555555555556},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.01256281407035176},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.003367003367003367}}}},"1":{"docs":{},",":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.007936507936507936},"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.005555555555555556},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.002512562814070352},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}},"2":{"docs":{},",":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}},"3":{"docs":{},",":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}},"docs":{},"i":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005}},",":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.005025125628140704}}}},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"2":{"docs":{},")":{"docs":{"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":0.003875968992248062}}}},"docs":{}}}}}}}},",":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002976190476190476}}}},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},")":{"docs":{},":":{"docs":{"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877}}}}}}}},"x":{"docs":{},")":{"docs":{},"]":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0036900369003690036},"Algorithms/DynamicProgramming-IV.html":{"ref":"Algorithms/DynamicProgramming-IV.html","tf":0.00980392156862745}}},":":{"docs":{"Algorithms/DynamicProgramming-IV.html":{"ref":"Algorithms/DynamicProgramming-IV.html","tf":0.00980392156862745}}}}},"m":{"docs":{},")":{"docs":{},")":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.0033112582781456954}}}}},"n":{"docs":{},")":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.0033112582781456954}}}},"y":{"docs":{},")":{"docs":{},":":{"docs":{"Algorithms/DynamicProgramming-IV.html":{"ref":"Algorithms/DynamicProgramming-IV.html","tf":0.00980392156862745}}},"]":{"docs":{"Algorithms/DynamicProgramming-IV.html":{"ref":"Algorithms/DynamicProgramming-IV.html","tf":0.00980392156862745}}}}}}}}},"t":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},":":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005}}},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.01}}}},"j":{"docs":{},"]":{"docs":{},":":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005}}}}}}}}}}},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0036231884057971015},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.013793103448275862},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.008928571428571428}},":":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0234375},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.021739130434782608},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.014742014742014743},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.027586206896551724},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877}}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0036231884057971015},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002976190476190476}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002976190476190476}},",":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0036231884057971015}}},":":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457}}}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},":":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002976190476190476}}}}}}}},"m":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0091324200913242}},"s":{"docs":{},"/":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907}}},":":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.008403361344537815}}},"[":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"m":{"docs":{},"]":{"docs":{},":":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907}}}}}}}}}}}},"t":{"docs":{},"t":{"docs":{},"e":{"docs":{},"n":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0036900369003690036}}}}},"a":{"docs":{},"t":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.005917159763313609}}}}},"b":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0030864197530864196}}}}}}}},"b":{"docs":{},"e":{"docs":{},"r":{"docs":{},"/":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}}}}},"w":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}},"[":{"docs":{},"i":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}},"]":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}}}}},".":{"docs":{},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{},"m":{"docs":{},"s":{"docs":{},"(":{"docs":{},")":{"docs":{},":":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457}}}}}}}}}}},"c":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457}}},")":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002976190476190476}},":":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.005952380952380952},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.002652519893899204}}}},":":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002976190476190476},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.002652519893899204}}}},"s":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.007246376811594203},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.003484320557491289},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.007874015748031496},"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.01020408163265306}},"e":{"docs":{},"t":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.010752688172043012},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0037735849056603774},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.01},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.07692307692307693},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.007067137809187279},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0036900369003690036},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.009933774834437087},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.007936507936507936},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.002512562814070352},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0045662100456621}},"(":{"docs":{},"[":{"1":{"docs":{},",":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.007067137809187279}}}},"docs":{},"s":{"docs":{},"o":{"docs":{},"m":{"docs":{},"e":{"docs":{},"t":{"docs":{},"h":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"]":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.010752688172043012}}}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"d":{"docs":{},",":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395}}}}}},"'":{"docs":{},"a":{"docs":{},"'":{"docs":{},",":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.007936507936507936}}}}}}},")":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.01},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.010452961672473868},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0036900369003690036}},")":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.0033112582781456954}}}},"r":{"docs":{},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{},"e":{"docs":{},"(":{"0":{"docs":{},",":{"docs":{"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.015748031496062992}}}},"docs":{}}}}}}},"s":{"docs":{},")":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.002512562814070352}}}},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},")":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.002512562814070352}}}}}}}},"s":{"docs":{},",":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.010752688172043012}}},":":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.002512562814070352}}}},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.010752688172043012}}}}},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.006802721088435374}},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.02040816326530612}},":":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.006802721088435374}}}}},"j":{"docs":{},"]":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.006802721088435374}},")":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.006802721088435374}}}}}}}}}},")":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.0033112582781456954}}},":":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0029585798816568047}}}},"a":{"docs":{},"r":{"docs":{},"c":{"docs":{},"h":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02},"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0037735849056603774},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.005952380952380952},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.01107011070110701},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":3.3399558498896242},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":5.008875739644971},"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.010101010101010102},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.002512562814070352}}}}}},"c":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},")":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.006802721088435374}}},"s":{"docs":{},".":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395}}}}}}}},"o":{"docs":{},"n":{"docs":{},"d":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005}}}}}},"l":{"docs":{},"f":{"docs":{},".":{"docs":{},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":0.011627906976744186}}}}},"n":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"u":{"docs":{},"c":{"docs":{},"t":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"(":{"docs":{},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},"[":{"docs":{},":":{"docs":{},"m":{"docs":{},"i":{"docs":{},"d":{"docs":{},"]":{"docs":{},")":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002976190476190476}}}}}}}},"m":{"docs":{},"i":{"docs":{},"d":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002976190476190476}}}}}}}}}}}}}}}}}}}}}}},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"u":{"docs":{"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":0.007751937984496124}},"e":{"docs":{},"[":{"docs":{"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":0.003875968992248062}}}}}}}},"w":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"o":{"docs":{},"w":{"docs":{"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":0.007751937984496124}},"[":{"0":{"docs":{},"]":{"docs":{"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":0.003875968992248062}}}},"docs":{}}}}}}},"a":{"docs":{},"l":{"docs":{},"k":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.009828009828009828}}}}}},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0036231884057971015},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.005952380952380952}}}}},"c":{"docs":{},"a":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.007371007371007371}}}}},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.010869565217391304}}}}}}}},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.007371007371007371}}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"u":{"docs":{},"l":{"docs":{},"t":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.014492753623188406}}}}}},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{},"s":{"docs":{},"e":{"docs":{},"(":{"docs":{},"k":{"docs":{},",":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.002652519893899204}}}}}}}}}}},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0036231884057971015},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.005952380952380952}}}}}}},"t":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.007957559681697613}},"o":{"docs":{},"t":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.010869565217391304},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457}}}},":":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.002652519893899204}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0036231884057971015},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.005952380952380952}},"i":{"docs":{},"d":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.007371007371007371}}}}}}},"i":{"docs":{},"t":{"docs":{},"i":{"docs":{},"n":{"docs":{},"e":{"docs":{},"r":{"docs":{},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.010452961672473868}}},"y":{"docs":{},":":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.003484320557491289}}}}}}}}}}}},"n":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.002652519893899204}},")":{"docs":{},":":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.002652519893899204}}}}},"p":{"docs":{},"o":{"docs":{},"w":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.005305039787798408}},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},".":{"docs":{},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{},"[":{"docs":{},":":{"docs":{},"]":{"docs":{},")":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.002652519893899204}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"o":{"docs":{},"l":{"docs":{},"u":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"_":{"docs":{},"s":{"docs":{},"e":{"docs":{},"a":{"docs":{},"r":{"docs":{},"c":{"docs":{},"h":{"docs":{},"(":{"0":{"docs":{},",":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.002652519893899204}}}},"docs":{},"k":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.005305039787798408}}}}}}}}}},"f":{"docs":{},"u":{"docs":{},"n":{"docs":{},"c":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"(":{"docs":{},"c":{"docs":{},"a":{"docs":{},"s":{"docs":{},"e":{"docs":{},"_":{"docs":{},"o":{"docs":{},"n":{"docs":{},"e":{"docs":{},",":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}}}},"t":{"docs":{},"w":{"docs":{},"o":{"docs":{},",":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}}}}}}}}}}}}}}}}}}}}}}}}}},"u":{"docs":{},"b":{"docs":{},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.002652519893899204}},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"d":{"docs":{},"o":{"docs":{},"m":{"docs":{},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{},"[":{"docs":{},"k":{"docs":{},"]":{"docs":{},")":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.002652519893899204}}}}}}}}}}}}}}}}}}},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.002652519893899204}}}}}}}}}}}}}},"_":{"docs":{},"h":{"docs":{},"e":{"docs":{},"l":{"docs":{},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{},"c":{"docs":{},"o":{"docs":{},"p":{"docs":{},"y":{"docs":{},"p":{"docs":{},"a":{"docs":{},"s":{"docs":{},"t":{"docs":{},"e":{"docs":{},"(":{"docs":{},"n":{"docs":{},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.009933774834437087}}}}}}}}}}}}}}}}}}}}}}},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.007957559681697613},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.0033112582781456954},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0045662100456621}},".":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.002652519893899204}}}}}},"l":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.03296703296703297}},"/":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}}},"e":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011235955056179775},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.0033112582781456954}},"n":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.007067137809187279},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0036900369003690036}},".":{"docs":{},"a":{"docs":{},"d":{"docs":{},"d":{"docs":{},"(":{"docs":{},"(":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},",":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395}}}}}}},"i":{"docs":{},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.0033112582781456954}}}}}}}}},"d":{"docs":{},"i":{"docs":{},"s":{"docs":{},"c":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{},"(":{"docs":{},"(":{"docs":{},"i":{"docs":{},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.0033112582781456954}}}}}}}}}}}}}},":":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.0033112582781456954}}},")":{"docs":{},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.0033112582781456954}}},":":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.0033112582781456954}}}}}},"n":{"docs":{},"d":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004914004914004914}}}}},"o":{"docs":{},"l":{"docs":{},"v":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.010752688172043012},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0029585798816568047},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.009259259259259259},"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.002777777777777778}}},"u":{"docs":{},"t":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.006802721088435374},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011235955056179775},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457},"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.0625},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.01060070671378092},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0036900369003690036},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.009933774834437087},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.008875739644970414},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.012345679012345678},"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.005555555555555556},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},":":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0037735849056603774},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.006802721088435374},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.015},"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":0.01937984496124031},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.015625},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.018115942028985508},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.014742014742014743},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.020689655172413793},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.011904761904761904},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.01060070671378092},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.012605042016806723},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.010452961672473868},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.015748031496062992},"Algorithms/TrickySorting.html":{"ref":"Algorithms/TrickySorting.html","tf":0.024390243902439025},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.01107011070110701},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.007957559681697613},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.0033112582781456954},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.014792899408284023},"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.010101010101010102},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.015873015873015872},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.015432098765432098},"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.013888888888888888},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.010050251256281407},"Algorithms/DynamicProgramming-IV.html":{"ref":"Algorithms/DynamicProgramming-IV.html","tf":0.00980392156862745},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0182648401826484},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0044444444444444444},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.013468013468013467}}},",":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011235955056179775}}},".":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011235955056179775},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.002652519893899204},"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.020202020202020204}}},"s":{"docs":{},":":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0036900369003690036},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}},".":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}},"_":{"docs":{},"s":{"docs":{},"e":{"docs":{},"a":{"docs":{},"r":{"docs":{},"c":{"docs":{},"h":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.002652519893899204}}}}}}}}}}}}}},"f":{"docs":{},"u":{"docs":{},"n":{"docs":{},"c":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}}}}}}}}}}}}}}},"g":{"docs":{},"e":{"docs":{},"n":{"docs":{},"e":{"docs":{},"r":{"docs":{},"a":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},":":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.002652519893899204}}}}}}}}}}}},"(":{"docs":{},"o":{"docs":{},"b":{"docs":{},"j":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},")":{"docs":{},":":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}}}}}}}}}}}}}}},"m":{"docs":{},"e":{"docs":{},"h":{"docs":{},"o":{"docs":{},"w":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.005917159763313609}},".":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.010752688172043012}}}}}},"t":{"docs":{},"i":{"docs":{},"m":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0036231884057971015},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004914004914004914},"Algorithms/DynamicProgramming-IV.html":{"ref":"Algorithms/DynamicProgramming-IV.html","tf":0.00980392156862745}},"e":{"docs":{},"s":{"docs":{},",":{"docs":{"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877}}}}}}},"h":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0045662100456621}}}},"w":{"docs":{},"h":{"docs":{},"e":{"docs":{},"r":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0036900369003690036}}}}}}}},"r":{"docs":{},"t":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.04},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.006802721088435374},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.003484320557491289},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":5.0078740157480315},"Algorithms/TrickySorting.html":{"ref":"Algorithms/TrickySorting.html","tf":5.048780487804878},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.008875739644970414},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0136986301369863},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.006734006734006734},"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.01020408163265306}},"e":{"docs":{},"d":{"docs":{},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},")":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.006802721088435374},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005}}}}}}},"g":{"docs":{},"r":{"docs":{},"a":{"docs":{},"p":{"docs":{},"h":{"docs":{},"[":{"docs":{},"s":{"docs":{},"]":{"docs":{},")":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.003484320557491289}}}}}}}}}}},"a":{"docs":{},",":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.002652519893899204}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"s":{"docs":{},",":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0091324200913242}}}}}}}}}}}},"p":{"docs":{},"o":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"s":{"docs":{},",":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0045662100456621}}}}}}}}},"x":{"docs":{},".":{"docs":{},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{},"m":{"docs":{},"s":{"docs":{},"(":{"docs":{},")":{"docs":{},",":{"docs":{"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.01020408163265306}}}}}}}}}}}}},";":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0029585798816568047}}}}},".":{"docs":{"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.010101010101010102}}},":":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.003367003367003367}}}}},",":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.002512562814070352}}}},"t":{"docs":{},"u":{"docs":{},"f":{"docs":{},"f":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.010752688172043012}}}},"p":{"docs":{},"i":{"docs":{},"d":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.010752688172043012}}}}}},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{"DataStructures/":{"ref":"DataStructures/","tf":0.2},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.006802721088435374},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":5.076923076923077}}}}}}},"c":{"docs":{},"k":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.04},"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":0.011627906976744186},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.015625},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0036900369003690036},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.016556291390728478},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.05333333333333334}},"/":{"docs":{},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"u":{"docs":{"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":0.007751937984496124}}}}}}},"[":{"docs":{"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":0.003875968992248062}}},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{},"r":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},")":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0044444444444444444}}}}}}}}}}}}}}}}},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0044444444444444444}}}}}}}},")":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0044444444444444444}},"]":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.035555555555555556}}}},":":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.008888888888888889}}}}},"r":{"docs":{},"t":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0037735849056603774},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0106951871657754},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.008928571428571428},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.007874015748031496},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0036900369003690036},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.04142011834319527},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.01507537688442211},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0136986301369863}},")":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002976190476190476}}},",":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0136986301369863}}},"s":{"docs":{},".":{"docs":{},"r":{"docs":{},"e":{"docs":{},"m":{"docs":{},"o":{"docs":{},"v":{"docs":{},"e":{"docs":{},"(":{"docs":{},"p":{"docs":{},")":{"docs":{"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.007874015748031496}}}}}}}}}}}},":":{"docs":{"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.015748031496062992}}}},".":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0029585798816568047}}},":":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0029585798816568047}}}}},"t":{"docs":{},"i":{"docs":{},"c":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002976190476190476}}}},"e":{"docs":{"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.020202020202020204},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.005025125628140704}},":":{"docs":{"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.010101010101010102}}},"[":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.010101010101010102}}}}}}}}}}},"i":{"docs":{},"r":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0030864197530864196}},"s":{"docs":{},":":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}}}}},"r":{"docs":{},"u":{"docs":{},"c":{"docs":{},"t":{"docs":{},"u":{"docs":{},"r":{"docs":{"DataStructures/":{"ref":"DataStructures/","tf":5.2},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}},"e":{"docs":{},":":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282},"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":0.003875968992248062}}},"s":{"docs":{},".":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.003367003367003367}}}}}}}}}},"i":{"docs":{},"c":{"docs":{},"t":{"docs":{},"l":{"docs":{},"i":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0037735849056603774}}}}}},"n":{"docs":{},"g":{"docs":{"DataStructures/Strings/":{"ref":"DataStructures/Strings/","tf":11},"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.006622516556291391},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.002512562814070352},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.022222222222222223},"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.02040816326530612}},"s":{"docs":{},",":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678}}}},"/":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0044444444444444444}}}}}},"(":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},".":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},")":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.015625}},")":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125}}}}}}}}}}}},"d":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},")":{"docs":{},")":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.002652519893899204}}}}}}}}},")":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.003484320557491289},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0036900369003690036},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.007936507936507936},"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.013888888888888888},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0044444444444444444}}},"e":{"docs":{},"a":{"docs":{},"m":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678}},"/":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678}}}},"k":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.005917159763313609}}}},"t":{"docs":{},"c":{"docs":{},"h":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0091324200913242}}}}}},":":{"docs":{"Algorithms/TrickySorting.html":{"ref":"Algorithms/TrickySorting.html","tf":0.024390243902439025},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.002652519893899204},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0044444444444444444}}},",":{"docs":{"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.008333333333333333},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.002512562814070352}}}},"e":{"docs":{},"p":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0037735849056603774},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.01},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.007380073800738007},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.002652519893899204},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.006622516556291391},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0030864197530864196},"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.005555555555555556},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.007537688442211055},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.003367003367003367}},";":{"docs":{"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877}}},"s":{"docs":{},",":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.007380073800738007}}}},",":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}}},"o":{"docs":{},"r":{"docs":{},"e":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.011320754716981131},"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":0.003875968992248062},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.006968641114982578},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.007936507936507936},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.005025125628140704},"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.01020408163265306}},"[":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"2":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"]":{"docs":{"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":0.003875968992248062}}}}}}},"docs":{}}}}}}}},"c":{"docs":{},"k":{"docs":{"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":0.003875968992248062},"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":10.027472527472527}},"s":{"docs":{},"p":{"docs":{},"a":{"docs":{},"n":{"docs":{},"n":{"docs":{},"e":{"docs":{},"r":{"docs":{},":":{"docs":{"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":0.003875968992248062}}}}}}}}}},",":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}},".":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.01098901098901099}}}}},"p":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.003367003367003367}},"s":{"docs":{},"/":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907}}}}}}},"i":{"docs":{},"m":{"docs":{},"i":{"docs":{},"l":{"docs":{},"a":{"docs":{},"r":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0037735849056603774},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.006802721088435374},"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":0.003875968992248062},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.003484320557491289},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.002652519893899204},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.0033112582781456954},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.009259259259259259},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.002512562814070352},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.01098901098901099},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0045662100456621},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.003367003367003367}}}}}},"p":{"docs":{},"l":{"docs":{"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":0.003875968992248062},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0045662100456621},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0044444444444444444},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.003367003367003367}}}}},"z":{"docs":{},"e":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.022641509433962263},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.027586206896551724},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0036900369003690036},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.003367003367003367}},":":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.013793103448275862}}}}},"t":{"docs":{},"u":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},",":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011235955056179775}}}}}}}}}}},"g":{"docs":{},"n":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.003367003367003367}}}}},"u":{"docs":{},"b":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0037735849056603774},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.003484320557491289}},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},"a":{"docs":{},"y":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":10.064150943396227}},"/":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0037735849056603774}}},"s":{"docs":{},",":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0037735849056603774}}},":":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.007547169811320755}}}},".":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}}}}}},"s":{"docs":{},"e":{"docs":{},"q":{"docs":{},"u":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0037735849056603774},"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.008333333333333333}},"e":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},".":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0037735849056603774}}}},"/":{"docs":{"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.008333333333333333}}}}}}}}},"t":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":10.006802721088436},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.002652519893899204},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}},"/":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.006802721088435374}},"d":{"docs":{},"i":{"docs":{},"s":{"docs":{},"c":{"docs":{},"u":{"docs":{},"s":{"docs":{},"s":{"docs":{},"/":{"8":{"4":{"0":{"0":{"6":{"docs":{},"/":{"docs":{},"c":{"docs":{},"l":{"docs":{},"a":{"docs":{},"s":{"docs":{},"s":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.006802721088435374}}}}}}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}},"s":{"docs":{},":":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}}}},"t":{"docs":{},"r":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.07692307692307693},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.015873015873015872}},"u":{"docs":{},"c":{"docs":{},"t":{"docs":{},"u":{"docs":{},"r":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098},"Algorithms/DynamicProgramming-IV.html":{"ref":"Algorithms/DynamicProgramming-IV.html","tf":0.00980392156862745}}}}}}}},"i":{"docs":{},"t":{"docs":{},"u":{"docs":{},"t":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907}}}}}}}},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.007371007371007371},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002976190476190476}},"e":{"docs":{},".":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457}}}}}}},"p":{"docs":{},"r":{"docs":{},"o":{"docs":{},"b":{"docs":{},"l":{"docs":{},"e":{"docs":{},"m":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0030864197530864196},"Algorithms/DynamicProgramming-IV.html":{"ref":"Algorithms/DynamicProgramming-IV.html","tf":0.00980392156862745}}}}}}}}}},"m":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.01509433962264151},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.02040816326530612},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.007246376811594203},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004914004914004914},"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.006622516556291391},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.006172839506172839},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.010050251256281407}},"/":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0037735849056603774},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.006896551724137931},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.002512562814070352}},"d":{"docs":{},"i":{"docs":{},"s":{"docs":{},"c":{"docs":{},"u":{"docs":{},"s":{"docs":{},"s":{"docs":{},"/":{"1":{"6":{"5":{"1":{"0":{"docs":{},"/":{"docs":{},"p":{"docs":{},"y":{"docs":{},"t":{"docs":{},"h":{"docs":{},"o":{"docs":{},"n":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.002652519893899204}}}}}}}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}}}}}}}},"a":{"docs":{},"m":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.002512562814070352}},":":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.005025125628140704}}}}}}}}}},",":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0037735849056603774},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.0033112582781456954},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0030864197530864196}}},"_":{"docs":{},"p":{"docs":{},"o":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.007547169811320755},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005}},"s":{"docs":{},":":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0037735849056603774},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005}}},"[":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005}},"p":{"docs":{},"]":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0037735849056603774}}}}}}}}},".":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005}}},"o":{"docs":{},"f":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},"l":{"docs":{},"e":{"docs":{},"a":{"docs":{},"v":{"docs":{},"e":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125}}}}}}}}}}}}}}}}}}}},":":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.014492753623188406},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.0033112582781456954}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"b":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0036231884057971015}}}}}}}}}}}}}}},"s":{"docs":{},".":{"docs":{},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{},"m":{"docs":{},"s":{"docs":{},"(":{"docs":{},")":{"docs":{},":":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457}}}}}}}}}}},"[":{"docs":{},"l":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004914004914004914}}}}},"(":{"docs":{},"i":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0029585798816568047}}},"d":{"docs":{},"p":{"docs":{},")":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.002512562814070352}}}}}}},"r":{"docs":{},"e":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011235955056179775},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002976190476190476},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.02631578947368421}}}},"c":{"docs":{},"h":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0036900369003690036},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0029585798816568047}}},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.0033112582781456954},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.005025125628140704},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0044444444444444444}}}}}}}},"l":{"docs":{},"o":{"docs":{},"w":{"docs":{},"e":{"docs":{},"r":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0036900369003690036}}}}}},"i":{"docs":{},"d":{"docs":{},"e":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.007547169811320755},"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":0.011627906976744186},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.07692307692307693},"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.020202020202020204}}}}}},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"s":{"docs":{},"f":{"docs":{},"i":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0037735849056603774},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}}}}},"v":{"docs":{},"e":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.002512562814070352}}}},"m":{"docs":{},"e":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.003484320557491289},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.002652519893899204},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0029585798816568047},"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.010101010101010102},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.003367003367003367}}},"p":{"docs":{},"l":{"docs":{"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.0625},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0029585798816568047}}}}}},"w":{"docs":{},"a":{"docs":{},"p":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0037735849056603774},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.003367003367003367}}}}},"m":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.006802721088435374}}}},"l":{"docs":{},"l":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}},"e":{"docs":{},"r":{"docs":{"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":0.007751937984496124}}},"s":{"docs":{},"t":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.003367003367003367}}}}}}}}},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.013333333333333334},"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.01020408163265306}}}},"j":{"docs":{},"]":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005}}}},"m":{"docs":{},"]":{"docs":{"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.005555555555555556}}}},"n":{"docs":{},"]":{"docs":{},":":{"docs":{"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.005555555555555556}}}}},":":{"docs":{},"i":{"docs":{},"]":{"docs":{},".":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"s":{"docs":{},"w":{"docs":{},"i":{"docs":{},"t":{"docs":{},"h":{"docs":{},"(":{"docs":{},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},")":{"docs":{},":":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.002512562814070352}}}}}}}}}}}}}}}}}}}}}},"p":{"docs":{},"a":{"docs":{},"n":{"docs":{},"/":{"docs":{"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":0.003875968992248062}}}},"c":{"docs":{},"e":{"docs":{"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877}}}}},"i":{"docs":{},"r":{"docs":{},"a":{"docs":{},"l":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678}}}}}},"e":{"docs":{},"c":{"docs":{},"i":{"docs":{},"f":{"docs":{},"i":{"docs":{},"c":{"docs":{},"s":{"docs":{},",":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.02631578947368421}}}}}}}}}}},",":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.007067137809187279},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.006968641114982578},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0045662100456621}}},"c":{"docs":{},"h":{"docs":{},"e":{"docs":{},"d":{"docs":{},"u":{"docs":{},"l":{"docs":{"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.0625},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.003484320557491289},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.015748031496062992},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0045662100456621},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.003367003367003367}},"e":{"docs":{},"/":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.003484320557491289}}},"r":{"docs":{},"/":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.003367003367003367}}}}}}}}}},"e":{"docs":{},"n":{"docs":{},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{},"o":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.002652519893899204}}}}}}}}},"h":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"l":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"n":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"p":{"docs":{},"a":{"docs":{},"t":{"docs":{},"h":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395}}}}}}}}}}}}}}}}}}}}}}}},"p":{"docs":{},"a":{"docs":{},"t":{"docs":{},"h":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0036900369003690036}}}}}}}}}}}}}}}}}},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.002652519893899204}}}}},"i":{"docs":{},"p":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0029585798816568047}},"w":{"docs":{},"i":{"docs":{},"t":{"docs":{},"h":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"a":{"docs":{},"y":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0029585798816568047}}}}}}}}}}}}}}}}}}}},"a":{"docs":{},"r":{"docs":{},"e":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.016483516483516484}}}}}},"r":{"docs":{},"c":{"docs":{},",":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907}}},":":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907}}}}},":":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.002652519893899204},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.007936507936507936},"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.005555555555555556},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.002512562814070352},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.008888888888888889}}},"q":{"docs":{},"u":{"docs":{},"a":{"docs":{},"r":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0030864197530864196},"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.002777777777777778}},"e":{"docs":{},"s":{"docs":{},",":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}}}}}}},"_":{"docs":{},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.005025125628140704}},":":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.002512562814070352}}}}}}}},"t":{"docs":{"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.010101010101010102},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.006734006734006734}},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":10.0561797752809},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.007246376811594203},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004914004914004914},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":5.021390374331551},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":5.017857142857143},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.013937282229965157},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098},"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.002777777777777778}},"/":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.007371007371007371},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.006896551724137931},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002976190476190476}},")":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.010752688172043012}}},"d":{"docs":{},"i":{"docs":{},"s":{"docs":{},"c":{"docs":{},"u":{"docs":{},"s":{"docs":{},"s":{"docs":{},"/":{"5":{"4":{"0":{"0":{"3":{"8":{"docs":{},"/":{"docs":{},"p":{"docs":{},"y":{"docs":{},"t":{"docs":{},"h":{"docs":{},"o":{"docs":{},"n":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002976190476190476}}}}}}}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}},",":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.02247191011235955},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125}}},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877}},"e":{"docs":{},")":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.015625},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.007246376811594203},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.007371007371007371},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.006896551724137931}}},",":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.007246376811594203},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.006896551724137931},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0106951871657754}}},":":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0036231884057971015},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.020833333333333332}}},"(":{"docs":{},")":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002976190476190476}}},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},"[":{"docs":{},"m":{"docs":{},"i":{"docs":{},"d":{"docs":{},"]":{"docs":{},")":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002976190476190476}}}}}}}}}}},"p":{"docs":{},"o":{"docs":{},"s":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},"[":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"u":{"docs":{},"c":{"docs":{},"t":{"docs":{},".":{"docs":{},"p":{"docs":{},"o":{"docs":{},"s":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},"_":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},"]":{"docs":{},")":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002976190476190476}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},"[":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},"]":{"docs":{},")":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002976190476190476}}}}}}}}}}}}}}}}}}}}}}},".":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.007246376811594203},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457}}},";":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457}}},"[":{"docs":{},"e":{"docs":{},"]":{"docs":{},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"s":{"docs":{},")":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457}}}}}}}}}}}}}},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"]":{"docs":{},":":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004914004914004914}}}}}}}},"s":{"docs":{},"]":{"docs":{},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"e":{"docs":{},")":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457}}}}}}}}}}}}}}}}},"a":{"docs":{},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0037735849056603774},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011235955056179775},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":5.015625},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":5.003623188405797},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":5.002457002457002},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":3.3402298850574708},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.016042780748663103},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395},"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678}},"e":{"docs":{},"(":{"0":{"docs":{},")":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.003484320557491289}}}},"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},",":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.010869565217391304},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877}}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},",":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.018115942028985508},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877}}},")":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004914004914004914}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},",":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.018115942028985508},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877}}},")":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004914004914004914}}}}}}}}},")":{"docs":{},":":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.007371007371007371},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.003484320557491289}}}}}}},",":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.003484320557491289}}}},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},",":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.010869565217391304},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877}}},")":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004914004914004914}}}}}}},"v":{"docs":{},")":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457}},".":{"docs":{},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{},"m":{"docs":{},"s":{"docs":{},"(":{"docs":{},")":{"docs":{},":":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.003484320557491289}}}}}}}}}}}}},"'":{"docs":{},"j":{"docs":{},"f":{"docs":{},"k":{"docs":{},"'":{"docs":{},",":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.003484320557491289}}}}}}}},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{},"r":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},",":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.003484320557491289}}}}}}}}}}}},"a":{"docs":{},"l":{"docs":{},"/":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0036231884057971015},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.005952380952380952}}}}}}}}},"c":{"docs":{},"k":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.002652519893899204},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495},"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.01020408163265306}}}},"n":{"docs":{},"s":{"docs":{},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.04945054945054945}}}}},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"m":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}}}},"i":{"docs":{},"t":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}}}}},"i":{"docs":{},"_":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005}}}}}},"p":{"docs":{},"l":{"docs":{},"e":{"docs":{},"t":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":10.005}}}}}},"c":{"docs":{},"k":{"docs":{"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":5.003875968992248},"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":5.01010101010101},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.003367003367003367},"PythonicTricks/":{"ref":"PythonicTricks/","tf":5.010204081632653}},"i":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457},"Algorithms/TrickySorting.html":{"ref":"Algorithms/TrickySorting.html","tf":5.024390243902439}}},":":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.007936507936507936}}},"y":{"docs":{},":":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0044444444444444444}}}}}},"e":{"docs":{},":":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678}}}},"v":{"docs":{},"i":{"docs":{},"a":{"docs":{},"l":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0045662100456621}}}}}}},"u":{"docs":{},"e":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.006896551724137931},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.007067137809187279},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.008403361344537815},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.013937282229965157},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0036900369003690036},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.005305039787798408},"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.010101010101010102},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.006172839506172839}},";":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.0033112582781456954}}}}}},"e":{"docs":{},"c":{"docs":{},"h":{"docs":{},"n":{"docs":{},"i":{"docs":{},"q":{"docs":{},"u":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.02564102564102564},"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":0.003875968992248062},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}}}}}},"a":{"docs":{},"m":{"docs":{},"s":{"docs":{},"/":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005}}}},"/":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.003367003367003367}},"d":{"docs":{},"i":{"docs":{},"s":{"docs":{},"c":{"docs":{},"u":{"docs":{},"s":{"docs":{},"s":{"docs":{},"/":{"5":{"3":{"9":{"7":{"9":{"7":{"docs":{},"/":{"docs":{},"c":{"docs":{},"%":{"2":{"docs":{},"b":{"docs":{},"%":{"2":{"docs":{},"b":{"docs":{},"p":{"docs":{},"y":{"docs":{},"t":{"docs":{},"h":{"docs":{},"o":{"docs":{},"n":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.003367003367003367}}}}}}}}}},"docs":{}}}},"docs":{}}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}}}},"m":{"docs":{},"p":{"docs":{},"l":{"docs":{},"a":{"docs":{},"t":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0029585798816568047},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0045662100456621}},"e":{"docs":{},":":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}}}}},"o":{"docs":{},"r":{"docs":{},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}}}}}}},"r":{"docs":{},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"s":{"docs":{},".":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0029585798816568047}}}}}}}}}}},"x":{"docs":{},"t":{"1":{"docs":{},":":{"docs":{"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.008333333333333333}}},"[":{"docs":{},"i":{"docs":{"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.002777777777777778}}},"m":{"docs":{"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.005555555555555556}}}}},"2":{"docs":{},":":{"docs":{"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.008333333333333333}}},"[":{"docs":{},"n":{"docs":{"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.005555555555555556}}},"x":{"docs":{"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.002777777777777778}}}}},"docs":{}}},"l":{"docs":{},"l":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.02631578947368421}}}}},"w":{"docs":{},"o":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":5.0256410256410255},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.011320754716981131},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.006802721088435374},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.002652519893899204},"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.010101010101010102},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098},"Algorithms/DynamicProgramming-IV.html":{"ref":"Algorithms/DynamicProgramming-IV.html","tf":0.00980392156862745},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.02631578947368421}},"/":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.007936507936507936}}}},"i":{"docs":{},"c":{"docs":{},"e":{"docs":{},"/":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}}}}},"y":{"docs":{},"p":{"docs":{},"i":{"docs":{},"c":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282}}}},"e":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.003484320557491289},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0036900369003690036},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.0033112582781456954}}}}},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0037735849056603774},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.013605442176870748},"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":0.003875968992248062},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0106951871657754},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.006622516556291391}},"/":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0037735849056603774},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0029585798816568047}}},":":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0037735849056603774},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0029585798816568047}}},".":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.002512562814070352}}}}}}},"k":{"docs":{},"e":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.006802721088435374},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0030864197530864196},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.005025125628140704}},"n":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.0033112582781456954}}}}},"b":{"docs":{},"l":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.004629629629629629}},"e":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"[":{"docs":{},"w":{"docs":{},"e":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},"]":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}}}}}}}}}}}}}},"s":{"docs":{},"k":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.003367003367003367}},"s":{"docs":{},":":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.006734006734006734}}}}}}},"h":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.007936507936507936},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.016483516483516484}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0037735849056603774},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.008875739644970414},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0044444444444444444}}},"k":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.002512562814070352}}}},"s":{"docs":{},":":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.006802721088435374},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}},".":{"docs":{"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.010101010101010102}}}},"r":{"docs":{},"d":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.01}}}}},"a":{"docs":{},"t":{"docs":{},"'":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.002512562814070352},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0044444444444444444}}}}},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.01}}}}}}}}}}}}},"o":{"docs":{},"u":{"docs":{},"g":{"docs":{},"h":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.007380073800738007}},"t":{"docs":{"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.01020408163265306}}}}}}}},"e":{"docs":{},"r":{"docs":{},"e":{"docs":{},"'":{"docs":{"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.003484320557491289},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0036900369003690036},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.002512562814070352},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.003367003367003367}}}}},"s":{"docs":{},"e":{"docs":{},",":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395}}}}},"n":{"docs":{},",":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.003367003367003367}}}}},"o":{"docs":{},"u":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.003484320557491289}}}}}},"s":{"docs":{},"e":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.003367003367003367}}}}},"u":{"docs":{},"m":{"docs":{},"b":{"docs":{},":":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.002512562814070352}}}}}}},"i":{"docs":{},"l":{"docs":{},"l":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0037735849056603774},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.01098901098901099}}}},"m":{"docs":{},"e":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.003484320557491289},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.002652519893899204},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0030864197530864196},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.01098901098901099},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0045662100456621},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.05263157894736842}},")":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907}}},",":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907}}},"/":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907}}},"s":{"docs":{},":":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.008403361344537815}}},",":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0045662100456621}}}},".":{"docs":{"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.010101010101010102},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0045662100456621}}}}},"p":{"docs":{},"s":{"docs":{},":":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395}}}},":":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0036900369003690036}}}},"c":{"docs":{},"k":{"docs":{},"e":{"docs":{},"t":{"docs":{},"s":{"docs":{},":":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.006968641114982578}}}}}}}}},"o":{"docs":{},"t":{"docs":{},"a":{"docs":{},"l":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.01},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.004629629629629629},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.005025125628140704}},"_":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0234375}}}},"t":{"docs":{},"e":{"docs":{},"p":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.005025125628140704}}}}}}}}}},"o":{"docs":{},"l":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907}}}},"p":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.002512562814070352},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0044444444444444444},"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.01020408163265306}},"o":{"docs":{"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.007874015748031496}},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},")":{"docs":{"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.007874015748031496}}}}}}}}}}}}}}},"[":{"docs":{},":":{"docs":{},":":{"docs":{"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.007874015748031496}}}}},"l":{"docs":{},"o":{"docs":{},"g":{"docs":{"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":5.0078740157480315}}}}}}},"g":{"docs":{},"g":{"docs":{},"l":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.007936507936507936}}}}}},":":{"docs":{"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":0.003875968992248062},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.002652519893899204},"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.010101010101010102}}},")":{"docs":{},")":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.006734006734006734}}}},",":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.003367003367003367}}}},"u":{"docs":{},"s":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.03225806451612903},"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005},"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":0.003875968992248062},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.015625},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002976190476190476},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.008403361344537815},"Algorithms/TrickySorting.html":{"ref":"Algorithms/TrickySorting.html","tf":0.024390243902439025},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.01107011070110701},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.005305039787798408},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.006622516556291391},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0029585798816568047},"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.020202020202020204},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.007936507936507936},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.006172839506172839},"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.002777777777777778},"Algorithms/DynamicProgramming-IV.html":{"ref":"Algorithms/DynamicProgramming-IV.html","tf":0.00980392156862745},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.01098901098901099},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.010101010101010102},"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.02040816326530612}},"e":{"docs":{},"r":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.010752688172043012}}},"f":{"docs":{},"u":{"docs":{},"l":{"docs":{},":":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0036900369003690036}}}}}}},"u":{"docs":{},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{},"y":{"docs":{},",":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}}}}}}},"n":{"docs":{},"l":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0037735849056603774},"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.010101010101010102}}}}},"i":{"docs":{},"k":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0029585798816568047}}}}},"n":{"docs":{},"e":{"docs":{},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125}}}}}}}}}}},"t":{"docs":{},"i":{"docs":{},"l":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125}}}}},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002976190476190476},"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0029585798816568047},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}}}}}}}},"u":{"docs":{},"s":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002976190476190476}}}},"v":{"docs":{},"i":{"docs":{},"s":{"docs":{},"i":{"docs":{},"t":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.003484320557491289}}}}}}},"i":{"docs":{},"q":{"docs":{},"u":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.002652519893899204},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0030864197530864196},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.010050251256281407}},"e":{"docs":{},"p":{"docs":{},"a":{"docs":{},"t":{"docs":{},"h":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0030864197530864196},"Algorithms/DynamicProgramming-IV.html":{"ref":"Algorithms/DynamicProgramming-IV.html","tf":0.00980392156862745}}}}}}}}}}}}}}}}}},"p":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.02247191011235955},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004914004914004914},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395},"Algorithms/TrickySorting.html":{"ref":"Algorithms/TrickySorting.html","tf":0.024390243902439025},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0036900369003690036},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.02631578947368421}},"d":{"docs":{},"a":{"docs":{},"t":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011235955056179775},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.0033112582781456954},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.002512562814070352},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}}}},",":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.008403361344537815}}},"_":{"docs":{},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.007874015748031496}},".":{"docs":{},"r":{"docs":{},"e":{"docs":{},"m":{"docs":{},"o":{"docs":{},"v":{"docs":{},"e":{"docs":{},"(":{"docs":{},"p":{"docs":{},")":{"docs":{"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.007874015748031496}}}}}}}}}}}},":":{"docs":{"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.015748031496062992}}}}}}},"l":{"docs":{},"t":{"docs":{},"i":{"docs":{},"m":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0029585798816568047}}}}}}},"v":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004914004914004914},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.012605042016806723},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.003484320557491289},"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.02040816326530612}},"a":{"docs":{},"l":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.005952380952380952}},"u":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.021505376344086023},"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.01509433962264151},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0036231884057971015},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.009828009828009828},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.006896551724137931},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.005025125628140704},"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.01020408163265306}},"e":{"docs":{},".":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011235955056179775},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457}}},":":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457}}},"s":{"docs":{},",":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}}}},"=":{"0":{"docs":{},",":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.005952380952380952}}}},"docs":{}},"i":{"docs":{},"d":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.017777777777777778}}}}},"r":{"docs":{},"i":{"docs":{},"a":{"docs":{},"b":{"docs":{},"l":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.010752688172043012},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002976190476190476},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}},"t":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.003367003367003367}}}}}},"g":{"docs":{},"u":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.02631578947368421}}}}},"e":{"docs":{},"r":{"docs":{},"i":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005},"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":0.003875968992248062},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0045662100456621},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0044444444444444444}},"f":{"docs":{},"y":{"docs":{},"(":{"docs":{},"m":{"docs":{},"i":{"docs":{},"d":{"docs":{},")":{"docs":{},":":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0029585798816568047}}}}}}}}}}},"t":{"docs":{},"i":{"docs":{},"c":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011235955056179775},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395}}}}},"s":{"docs":{},"a":{"docs":{},".":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.003367003367003367}}}}}}},"i":{"docs":{},"c":{"docs":{},"e":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.003367003367003367}}}},"s":{"docs":{},"i":{"docs":{},"t":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0106951871657754},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.012605042016806723},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.0313588850174216},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.025830258302583026},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.002652519893899204},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}},"e":{"docs":{},"d":{"docs":{},".":{"docs":{},"a":{"docs":{},"d":{"docs":{},"d":{"docs":{},"(":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},")":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.003484320557491289}}}}}}},"v":{"docs":{},")":{"docs":{"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877}}}},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"m":{"docs":{},")":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907}}}}}}},"i":{"docs":{},")":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.003484320557491289}}}}}}}},"r":{"docs":{},"e":{"docs":{},"m":{"docs":{},"o":{"docs":{},"v":{"docs":{},"e":{"docs":{},"(":{"docs":{},"i":{"docs":{},")":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.003484320557491289}}}}}}}}}}}},":":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.012605042016806723},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.006968641114982578}}},"[":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"]":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.01060070671378092},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907}},":":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395}}}}}}}},"s":{"docs":{},"]":{"docs":{},":":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395}}}}},"c":{"docs":{},"]":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.008403361344537815}}}},"x":{"docs":{},"]":{"docs":{},"[":{"docs":{},"y":{"docs":{},"]":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0030864197530864196}},"[":{"1":{"docs":{},"]":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0036900369003690036}}}},"docs":{}},":":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}}}}}},"j":{"docs":{},"]":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.005305039787798408}},":":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.002652519893899204}}}}}}}}}},"u":{"docs":{},"a":{"docs":{},"l":{"docs":{"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.002777777777777778}}}}}}},",":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.012605042016806723}}},")":{"docs":{},")":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907}}}},"o":{"docs":{},"w":{"docs":{},"e":{"docs":{},"l":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.023809523809523808}},"_":{"docs":{},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.015873015873015872}}}}}}}}}}},"w":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.012605042016806723},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.011834319526627219},"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.010101010101010102}},"a":{"docs":{},"y":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.010752688172043012},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.006802721088435374},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.0033112582781456954},"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.002777777777777778},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.010050251256281407},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.003367003367003367}}},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0036900369003690036}},"/":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282}}}}}},"n":{"docs":{},"t":{"docs":{"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":0.003875968992248062},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.02247191011235955},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0036231884057971015},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0029585798816568047},"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.010101010101010102},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0030864197530864196},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.010050251256281407},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}}},"e":{"docs":{},"l":{"docs":{},"l":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.010752688172043012},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0037735849056603774},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0036900369003690036}},".":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907}}},")":{"docs":{},":":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.002512562814070352}}}}}},"a":{"docs":{},"p":{"docs":{},"o":{"docs":{},"n":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02}}}}},"r":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.0033112582781456954}}}},"'":{"docs":{},"r":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002976190476190476}}}},"e":{"docs":{},"k":{"docs":{},"l":{"docs":{},"i":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678}}}}}},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0030864197530864196}},"s":{"docs":{},":":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.005917159763313609}}},",":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}}}}}}},"o":{"docs":{},"r":{"docs":{},"k":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.010752688172043012},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0036900369003690036},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.02631578947368421}},".":{"docs":{"Algorithms/TrickySorting.html":{"ref":"Algorithms/TrickySorting.html","tf":0.024390243902439025}}},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"/":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.003367003367003367}}}}}}},"d":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0036900369003690036},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098},"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.002777777777777778},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.005025125628140704}},":":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0036900369003690036}}},")":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.002512562814070352}}},"b":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"k":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.002512562814070352}}}}}}}}}}}}},"d":{"docs":{},"i":{"docs":{},"c":{"docs":{},"t":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.002512562814070352}},":":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.007537688442211055}}}}}}}}}},"r":{"docs":{},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.010752688172043012}}}}}},"h":{"docs":{},"o":{"docs":{},"l":{"docs":{},"e":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0037735849056603774},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.006802721088435374},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0044444444444444444}}}}}},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"o":{"docs":{},"w":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.007547169811320755},"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":0.01937984496124031},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.07692307692307693},"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.020202020202020204}}}}}},"t":{"docs":{},"h":{"docs":{},"o":{"docs":{},"u":{"docs":{},"t":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.07692307692307693},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}}},"i":{"docs":{},"n":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0029585798816568047}}}}}},"s":{"docs":{},"e":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":3.333333333333333},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0106951871657754}}}}},")":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0029585798816568047}},")":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.008403361344537815}}}},",":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907}}},":":{"docs":{"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.010101010101010102}}},"]":{"docs":{"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.010101010101010102}}}},"&":{"docs":{"DataStructures/":{"ref":"DataStructures/","tf":0.2},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.007936507936507936}}},"'":{"docs":{},"q":{"docs":{},"u":{"docs":{},"i":{"docs":{},"r":{"docs":{},"k":{"docs":{},"y":{"docs":{},"'":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02}}}}}}}}},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"'":{"docs":{},")":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457}}},",":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004914004914004914}}},":":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457}}}}}}}}}}}},":":{"docs":{},"'":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.002652519893899204}}}},"(":{"docs":{},"'":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0044444444444444444}},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.0033112582781456954},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0044444444444444444}}},":":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0044444444444444444}}}}},")":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.003367003367003367}},"'":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0044444444444444444}},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.0033112582781456954},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0044444444444444444}}},":":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0044444444444444444}}}}},"v":{"docs":{},"i":{"docs":{},"s":{"docs":{},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{},"d":{"docs":{},"'":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.006622516556291391}}}}}}}}}},"c":{"docs":{},"a":{"docs":{},"n":{"docs":{},"'":{"docs":{"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.010101010101010102}}}}}},"e":{"docs":{},"'":{"docs":{},",":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.007936507936507936}}}}},"i":{"docs":{},"'":{"docs":{},",":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.007936507936507936}}}}},"o":{"docs":{},"'":{"docs":{},",":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.007936507936507936}}}}},"u":{"docs":{},"'":{"docs":{},"]":{"docs":{},")":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.007936507936507936}}}}}},"p":{"docs":{},"i":{"docs":{},"v":{"docs":{},"o":{"docs":{},"t":{"docs":{},"'":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}}}}}},"'":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.008888888888888889}},".":{"docs":{},"j":{"docs":{},"o":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},")":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.008888888888888889}}}}}}}}}}}}}}},"*":{"docs":{},"'":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0044444444444444444}},":":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0044444444444444444}}},"]":{"docs":{},":":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.008888888888888889}}}}}}},":":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.002652519893899204},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.0033112582781456954}}},">":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0037735849056603774},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.02040816326530612},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.03},"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":0.01937984496124031},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.15384615384615385},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.015625},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.014492753623188406},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.014742014742014743},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.013793103448275862},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.03273809523809524},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.014134275618374558},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.02100840336134454},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.017421602787456445},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.015748031496062992},"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678},"Algorithms/TrickySorting.html":{"ref":"Algorithms/TrickySorting.html","tf":0.04878048780487805},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.014760147601476014},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.03183023872679045},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.016556291390728478},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.01775147928994083},"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.010101010101010102},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.023809523809523808},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.015432098765432098},"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.019444444444444445},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.01256281407035176},"Algorithms/DynamicProgramming-IV.html":{"ref":"Algorithms/DynamicProgramming-IV.html","tf":0.00980392156862745},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0228310502283105},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0044444444444444444},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.013468013468013467}},"=":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002976190476190476},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0036900369003690036},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0029585798816568047},"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.010101010101010102},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0045662100456621}}},"\"":{"docs":{},")":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.015625}}}}},"z":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.038461538461538464},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005}},"]":{"docs":{},")":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005}}}},"i":{"docs":{},"g":{"docs":{},"z":{"docs":{},"a":{"docs":{},"g":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0036231884057971015}}}}}},"p":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678}}}},":":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0036900369003690036}}},"e":{"docs":{},"r":{"docs":{},"o":{"docs":{},"e":{"docs":{},"s":{"docs":{},"/":{"docs":{},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"m":{"docs":{},"i":{"docs":{},"s":{"docs":{},"s":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"/":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.003367003367003367}}}}}}}}}}}}}}}}}}}}},"*":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.011320754716981131},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.013605442176870748},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.010869565217391304},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.003484320557491289},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.002652519893899204},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0029585798816568047},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.007936507936507936},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.006172839506172839},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.005025125628140704}},"=":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.007936507936507936}}},"*":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.002512562814070352}}}},"x":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0036231884057971015},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.033210332103321034},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.018518518518518517},"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.016666666666666666},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.002512562814070352},"Algorithms/DynamicProgramming-IV.html":{"ref":"Algorithms/DynamicProgramming-IV.html","tf":0.049019607843137254}},"o":{"docs":{},"r":{"docs":{},"s":{"docs":{},"/":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0037735849056603774}}}}}},",":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005},"Algorithms/TrickySorting.html":{"ref":"Algorithms/TrickySorting.html","tf":0.024390243902439025},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.01107011070110701},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.0033112582781456954}}},")":{"docs":{},":":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0036231884057971015},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}},"]":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0036900369003690036},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0030864197530864196}}}},":":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.013793103448275862},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0036900369003690036},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.005025125628140704},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0136986301369863}}},"_":{"docs":{},"f":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"d":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.013793103448275862}}}}}}}},";":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907}}},"+":{"docs":{},"i":{"docs":{"Algorithms/TrickySorting.html":{"ref":"Algorithms/TrickySorting.html","tf":0.04878048780487805}}}},"[":{"0":{"docs":{},"]":{"docs":{},")":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0136986301369863}}}}},"docs":{}}},"{":{"0":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457}},":":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0037735849056603774},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457}}}},"1":{"docs":{},":":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457}}}},"6":{"4":{"docs":{},":":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.007936507936507936}}}},"docs":{}},"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.009933774834437087}},"}":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.0037735849056603774},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.003484320557491289},"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.010101010101010102}}},"l":{"docs":{},"a":{"docs":{},"b":{"docs":{},"e":{"docs":{},"l":{"docs":{},"s":{"docs":{},"[":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"]":{"docs":{},":":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.003484320557491289}}}}}}}}}}}}}}},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{},"m":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{},":":{"docs":{"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.01020408163265306}}}}},"docs":{}}}}}},"k":{"docs":{},":":{"docs":{"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.01020408163265306}}}}},"!":{"docs":{},"=":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.006802721088435374},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.027586206896551724},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0106951871657754},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.0033112582781456954},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0044444444444444444},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.003367003367003367}}}},"%":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.006802721088435374},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.005025125628140704}}},"/":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.02040816326530612},"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":0.003875968992248062},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}},"/":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.005952380952380952},"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.020202020202020204}}}},"j":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.013605442176870748},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.02},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.003484320557491289},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0036900369003690036},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.002652519893899204},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.013245033112582781},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.007936507936507936},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.007537688442211055}},",":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.0033112582781456954}}},":":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.0033112582781456954}}},"u":{"docs":{},"m":{"docs":{},"p":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0036900369003690036},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.002512562814070352}}}},"g":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.007380073800738007}}},"n":{"docs":{},"e":{"docs":{"Algorithms/DynamicProgramming-IV.html":{"ref":"Algorithms/DynamicProgramming-IV.html","tf":0.0196078431372549},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.006734006734006734}}}},"l":{"docs":{},"i":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.006734006734006734}}}}},"o":{"docs":{},"b":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0036900369003690036}}}},")":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.0033112582781456954}},")":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.006622516556291391}},":":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.0033112582781456954}}}},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.0033112582781456954}}}},"a":{"docs":{},"v":{"docs":{},"a":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}}}},"#":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.021739130434782608},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.014742014742014743},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.03208556149732621},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.03571428571428571},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.007380073800738007},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.023178807947019868},"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.010101010101010102},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.007537688442211055},"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.02040816326530612}},"(":{"docs":{},"c":{"docs":{},"l":{"docs":{},"i":{"docs":{},"m":{"docs":{},"b":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}}}}}},"r":{"docs":{},"e":{"docs":{},"t":{"docs":{},"u":{"docs":{},"r":{"docs":{},"n":{"docs":{"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.01020408163265306}}}}}}}}},"\\":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098},"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.013888888888888888},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.002512562814070352},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.013333333333333334}}},"y":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.02214022140221402},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.0033112582781456954},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.018518518518518517},"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.016666666666666666},"Algorithms/DynamicProgramming-IV.html":{"ref":"Algorithms/DynamicProgramming-IV.html","tf":0.049019607843137254}},",":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.01},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.007380073800738007},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.0033112582781456954}}},":":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.013793103448275862},"Algorithms/TrickySorting.html":{"ref":"Algorithms/TrickySorting.html","tf":0.024390243902439025},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.007380073800738007},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0030864197530864196}}},"_":{"docs":{},"f":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"d":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.013793103448275862}},")":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.006896551724137931}},":":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.006896551724137931}}}}}}}}}},"+":{"docs":{},"x":{"docs":{"Algorithms/TrickySorting.html":{"ref":"Algorithms/TrickySorting.html","tf":0.024390243902439025}}}},")":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.007380073800738007},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}},")":{"docs":{},"]":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0036900369003690036}}}},"]":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0036900369003690036},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0030864197530864196}}},":":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}},"o":{"docs":{},"u":{"docs":{},"'":{"docs":{},"d":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.003367003367003367}}}}}}},"_":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}},"_":{"docs":{},"i":{"docs":{},"n":{"docs":{},"i":{"docs":{},"t":{"docs":{},"_":{"docs":{},"_":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},")":{"docs":{},":":{"docs":{"DataStructures/Arrays/DequeTrick.html":{"ref":"DataStructures/Arrays/DequeTrick.html","tf":0.007751937984496124}}}},",":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0036231884057971015},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.002457002457002457},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.005952380952380952}}}}}}}}}}}}}}},"h":{"docs":{},"e":{"docs":{},"l":{"docs":{},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{},"_":{"docs":{},"g":{"docs":{},"e":{"docs":{},"n":{"docs":{},"e":{"docs":{},"r":{"docs":{},"a":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.002652519893899204}}}}}}}}}}}}}}}}}},"c":{"docs":{},"o":{"docs":{},"p":{"docs":{},"y":{"docs":{},"p":{"docs":{},"a":{"docs":{},"s":{"docs":{},"t":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.0033112582781456954}}}}}}}}}}}}}}}}}}}}}}}},"\"":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.015625},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.005025125628140704}},"\"":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.005305039787798408}},")":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125}}},"\"":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.006734006734006734}}}},"m":{"docs":{},"e":{"docs":{},"a":{"docs":{},"n":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"f":{"docs":{},"u":{"docs":{},"l":{"docs":{},"\"":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395}}}}}}}}}}}}},"s":{"docs":{},"o":{"docs":{},"l":{"docs":{},"u":{"docs":{},"t":{"docs":{"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.002777777777777778}}}}}}},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"p":{"docs":{},"l":{"docs":{},"e":{"docs":{},"t":{"docs":{},"e":{"docs":{},"\"":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.002512562814070352}}}}}}}}}}}},"]":{"docs":{},")":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002976190476190476}}}},"`":{"docs":{},"`":{"docs":{},"`":{"docs":{},"p":{"docs":{},"i":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.007380073800738007}}}}}}},"‘":{"docs":{},"r":{"docs":{},"e":{"docs":{},"j":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"’":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.002652519893899204}}}}}}}}}},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.0033112582781456954}}},"}":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.0033112582781456954}}},"^":{"docs":{},"=":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.007936507936507936}}}},")":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0044444444444444444}},",":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0044444444444444444}}}},"@":{"docs":{},"f":{"docs":{},"u":{"docs":{},"n":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"o":{"docs":{},"l":{"docs":{},"s":{"docs":{},".":{"docs":{},"l":{"docs":{},"r":{"docs":{},"u":{"docs":{},"_":{"docs":{},"c":{"docs":{},"a":{"docs":{},"c":{"docs":{},"h":{"docs":{},"e":{"docs":{},"(":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"=":{"docs":{},"n":{"docs":{},"o":{"docs":{},"n":{"docs":{},"e":{"docs":{},")":{"docs":{"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.01020408163265306}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"length":4570},"corpusTokens":["!=","\"","\"\"","\"\"\"","\"\")","\"complete\"","\"meaningful\"","\"solut","#","#(climb","#return","%","&","''","''.join(stack)","'('","'(',","'(':","')","')'","')',","')':","'*'","'*':","'*']:","':'","'can'","'e',","'i',","'o',","'pivot'","'quirky'","'treenode')","'treenode',","'treenode':","'u'])","'visited'","(","((i","((i,","(,","(0,","(1","(1)","(1,","(2,","(4,","(6,","(7,","(==r)","(add","(arrays,","(bag_weight","(bits[i","(bottom","(c","(care","(check","(collections.deque)","(current","(d","(djikstra","(dp[pos]","(eg.","(end","(end_index","(float('","(https://leetcode.com/contest/weekli","(i","(i)","(i,","(includ","(int","(k","(kinda!)","(knight","(l","(last","(leetcod","(left_max","(len(tickets)","(len(values)","(levelwis","(m,","(n","(ncr)","(node,","(node.v","(not","(num","(nums[i]","(out","(posit","(postorder).","(priority,","(recurs","(right_min","(see","(sorted)","(start","(start_index","(sum","(t","(target)","(time","(top","(total_sum","(trees,","(use","(veri","(x","(x_found","(y","(y_found","(you'll",")","),","*","**","*=","+","+=",",","/","//","0","0)","0))","0):","0)])","0,","0/1","0:","0}","0},","1","1)","1))","1)):","1),","1)/2","1):","1);","1)]","1,","1.","1/3286/","10","10):","10)]","1035","1383:","14th/3328/","14th/3357/","154","15th","18/","180/problems/lucki","180/problems/maximum","190/problems/pseudo","198/problems/numb","199/problems/numb","1:","1;","1]","1])","1],","1]:","1][","1][0]","1][1]","1][1]):","1][1],","1][i","1][y]","1][y],","1]]","1d","1}","2","2)","2):","2,","2.","2/","21st/3330/","21st/3393/","22nd","23:","252","253","28th/3343/","29th","2:","2]","2])","3","3),","3,","3/","3000","30th/3375/","4","4):","4)]","4208fed71aa3","435","439df7e5ea1f","4:","4]","4])","5","50","56","59:","5:","6)","6),","6,","621:","7","7),","70),","8),","857:","8th","9","9),",":","=","==","=>",">",">\")",">=","@functools.lru_cache(maxsize=none)","[","['(',","[')',","['jfk'])","[(4,","[0","[0]","[1","[1]","[[0","[[0]","[[[","[[]","[[fals","[[i,","[]","[])","[],","[c","[fals","[false]","[float('inf')","[max(nums)]","[n])","[new]","[node.parent,","[node.val])","[node.val],","[num],","[nums[j]])","[p.val,","[target.val]","\\","])","^=","_","__init__(self):","__init__(self,","_helper_generator(self,","_helpercopypaste(self,","```pi","a:","abs(state[b","absolut","abstract","accept","accept,","achiev","actual","add","addit","addnums(node,","addnums(node.left,","addnums(node.right,","addnums(root,","adjacent/","afterwards.","again","ahead","algo","algorithm","algorithms.","alien","all,","allow","alreadi","alter","altern","alway","always,","amaz","amount","amount)","amount/sum:","ancestor","anoth","answer","answer.","answer:","anything,","apend","append","appl","apple_in_path","appli","approach","approaches:","appropri","arbitari","archives:","arr:","arr[0]","array","array,","array.","array/","arrow","arsenal.","article:","attribut","augment","auxillari","avoid","b","back","backtrack","backtrack([])","backtrack([],","backtrack(bucket","backtrack(bucket):","backtrack(bucket,","backtrack(curr","backtrack(i","backtrack(j,","backtrack:","backward","bag_weight","bag_weight):","balanc","balloons/","base","basic","basically,","be","befor","beginn","behavior","best","better","between","bf","bfs(i):","bfs(s):","bfs)","bidirectional.","bifurc","binari","binarysearch(start","binarysearch(start,","binarytreepaths(self,","bipartite/","bipartition/","bit","bit:","bits.","bits[0]","bits[i]","bitwis","bloomday:","bloomday[0]","blue","blue,","blue.","blue])","blue_edges:","board:","book","bool:","boolean","bottom,","boundari","bounds):","bouquet","bracket","break","break,","brute","bs","bst","bst:","bstfrompreorder(self,","bucket","bucket,","bucket.append(arr[k])","bucket.pop()","bucket[0:","bucket[2:","buckets,","buildtree(self,","built","burst","buy","c","c,","c.most_common(n)","cach","cache/","cache:","calc_sum(mid):","calcul","calculations.","call","calls/","can't","can_carry(capacity):","canfinish(self,","canjumpfromposition(int","canmeasurewater(self,","canvisitallrooms(self,","care","case","case)","cases.","cases:","cash","cash,","cash.","catch:","caus","cc","cell","cell.","cell_column)","cells,","challeng","challenge/528/week","challenge/535/week","challenge/536/week","challenge/537/week","challenge/540/week","challenge/543/week","challenge/546/week","chang","change,","change.","change/","charact","character,","characters/","cheat","check","checkifprerequisite(self,","checks:","child","children","choices,","choices:","choos","class","class,","climb","close","closest","code","coin","coins,","coins:","coins[j])","coins[j]))","collect","collections.dequ","colleg","color","color)","color))","color,","color:","color_left","color_left))","colors.pop()","colors.remove(color)","colors/","column","combin","combinations:","combinator","combo","come","comment","common","compact","compar","comparator.","comparison","competit","complet","complex","complexity:","compute.","condit","conditionally:","consolid","constant","constraint","constraints:","construct","construct(0,","construct(i_s,","construct(l,","construct(max_index","construct(pivot","construct.postorder_index","constructmaximumbinarytree(self,","constructtree(0,","constructtree(arr:","constructtree(pivot,","constructtree(start","constructtree(start,","contain","containsnearbyalmostduplicate(self,","contest","continu","convert","copi","copied))","copied,","copied:","correct","cost","count","countbits(self,","counter","counter(list/string)","counter(nums)","counter)","counter):","counter:","counter[num]","counter[num]:","countpairs(self,","counts/","countsubtrees(self,","cours","course)","cover","creat","criteria,","curat","current","current),","current):","current,","current.left","current.left:","current.right","current.right:","current.v","current.val))","current:","current_sum","current_sum):","custom","customer?","cycl","cycle,","d","d)]","d,","d1","d1,","d2","d2,","d:","data","data:","day","day)","day,","day:","days/","deal","decent","decid","declar","decod","decor","decrement","deep","deepestleavessum(self,","def","default)","defaultdict","defaultdict(int)","defaultdict(list)","defaultdict(set)","defaultdict,","definit","del","delay","deliv","depend","depth","dequ","deque()","deque([(0,","deque([[0,","deque,","descript","design","desir","destination'","destinations;","df","dfs(0,","dfs(i):","dfs(j):","dfs(letter,","dfs(self,","dfs(x","dfs(x,","dfs(x:","dfs.","diagram","dialer)","dialer/","dict","dict()","dict.get(key,","dictionari","dictionary.","didn't","diff","differ","difference,","digits/","direct","direction(intenum):","direction,","disconnect","discussion/651719/how","discussion/655708/graph","discussion/691825/binari","discussion/786126/python","distanc","distance:","distancek(self,","divid","divis","do:","do?","docstr","domain","domain)","domain:","don't","done","done:","don’t","down","dp","dp1","dp1[n]","dp:","dp;","dp[","dp[0]","dp[0][0]","dp[1]","dp[2]","dp[i","dp[i]","dp[i].append(match","dp[i].append(word)","dp[n","dp[n]","dp[x","dp[x][i","dp[x][y]","drawn","dst:","duplic","dure","dynam","e","e.g.","each","easi","easier","edg","edges:","edges[(current,","edges[(s,","effect","effici","eg.","elem)","elem,","element","element,","element/","element:","elements/","elif","elif(weight","elimin","elimination/","else:","empti","encount","end","end)","end,","end:","end])","enough.","enum","enumerate(bloomday):","enumerate(heights):","enumerate(inorder):","enumerate(nums):","enumerate(prefix):","enumerate(s):","enumerate(weights):","equal","equality,","equality.","equat","eraseoverlapintervals(self,","error","especially)","especially,","essenti","etc","etc)","even","everyth","everytim","everywhere,","exact","exceed","excel","except","exclud","exclude)","exhaust","exist","exist(self,","exists,","exists:","exit","exit\")","expect","expected):","expected,","experience,","experience.","explaination\"","explaination:","extend","extrem","f","faced?","facilit","factors/divisor","failur","fals","false,","far,","far.","far;","faster","faulti","fed","fee","fee)","fee):","fee/","fetch","few","fib_lru_cache(n):","figur","fill","filter","final","final_answ","find","findbestvalue(self,","findcheapestprice(self,","findduplicates(self,","findfrequenttreesum(self,","finditinerary(self,","findmin(self,","findminarrowshots(self,","findorder(self,","findthelongestsubstring(self,","first","first.","fix","flag","flight","flights:","float('","float('inf')","float('inf'))","float('inf')]","flower","flowers.pop()","flowers.remove(planted[n","flowers:","fo","follow","follows:","for,","forc","forget","found","freq","freq.get(t,","freq.items():","freq[t]","frequenc","frequency.","frequent","fulli","function","function.","functool","functools.cmp_to_key(comparator)","functools.lru_cach","further","furthestjump","g","g_visit","g_visited.add(i)","g_visited:","game","game/","gardennoadj(self,","geek","gener","get","getmaximumgold(self,","getter","give","given","global","globally,","globals/","go","go:","goe","gold/","good","graduat","graph","graph.","graph:","graph[c].add(p)","graph[c].append(p)","graph[c]:","graph[current]:","graph[d].append(s)","graph[end].append(start)","graph[i]","graph[i]:","graph[node.val].append(parent)","graph[node]:","graph[parent].append(node.val)","graph[s]","graph[s].append([d,","graph[s].append(d)","graph[start].append(end)","graph[u].append((v,","graph[v]:","graphs,","great","greater","greater,","greedi","grid","grid:","grid[i][j]","grid[x][y]:","h","habit","half","handl","handling.","hasapple:","hasapple[node]","hasapple[node]:","hash","hashing)","hat","heap","heap)","heap.append((0,","heap:","heapq","heapq.heappop(heap)","heapq.heappush(heap,","heights:","help","helper","helperncr(","helperncr(0,","helperncr(s,","helperncr(s:","here","here,","here.","here:","hire","histogram/","hold","hold,","hop","hop,","hop.","hops[pos]:","https://blog.usejournal.com/top","https://dbader.org/blog/python","https://leetcode.com/contest/weekli","https://leetcode.com/discuss/gener","https://leetcode.com/discuss/interview","https://leetcode.com/explore/challenge/card/30","https://leetcode.com/explore/challenge/card/juli","https://leetcode.com/explore/challenge/card/jun","https://leetcode.com/explore/challenge/card/may","https://leetcode.com/problems/2","https://leetcode.com/problems/3sum/","https://leetcode.com/problems/al","https://leetcode.com/problems/array","https://leetcode.com/problems/bal","https://leetcode.com/problems/best","https://leetcode.com/problems/binari","https://leetcode.com/problems/capac","https://leetcode.com/problems/cheapest","https://leetcode.com/problems/coin","https://leetcode.com/problems/combin","https://leetcode.com/problems/construct","https://leetcode.com/problems/contain","https://leetcode.com/problems/count","https://leetcode.com/problems/cours","https://leetcode.com/problems/cousin","https://leetcode.com/problems/deepest","https://leetcode.com/problems/find","https://leetcode.com/problems/flow","https://leetcode.com/problems/gener","https://leetcode.com/problems/hous","https://leetcode.com/problems/i","https://leetcode.com/problems/insert","https://leetcode.com/problems/interv","https://leetcode.com/problems/jump","https://leetcode.com/problems/key","https://leetcode.com/problems/knight","https://leetcode.com/problems/largest","https://leetcode.com/problems/longest","https://leetcode.com/problems/lowest","https://leetcode.com/problems/lru","https://leetcode.com/problems/maximum","https://leetcode.com/problems/merg","https://leetcode.com/problems/minimum","https://leetcode.com/problems/most","https://leetcode.com/problems/mov","https://leetcode.com/problems/network","https://leetcode.com/problems/next","https://leetcode.com/problems/non","https://leetcode.com/problems/numb","https://leetcode.com/problems/onlin","https://leetcode.com/problems/path","https://leetcode.com/problems/permut","https://leetcode.com/problems/permutations/","https://leetcode.com/problems/poss","https://leetcode.com/problems/pow","https://leetcode.com/problems/reconstruct","https://leetcode.com/problems/shortest","https://leetcode.com/problems/slid","https://leetcode.com/problems/sqrtx/","https://leetcode.com/problems/sum","https://leetcode.com/problems/task","https://leetcode.com/problems/two","https://leetcode.com/problems/uniqu","https://leetcode.com/problems/valid","https://leetcode.com/problems/wat","https://leetcode.com/problems/word","https://medium.com/@codingfreak/binari","https://www.geeksforgeeks.org/maximum","https://www.geeksforgeeks.org/next","https://www.geeksforgeeks.org/numb","https://www.geeksforgeeks.org/partit","https://www.geeksforgeeks.org/stock","https://www.geeksforgeeks.org/tag/array","https://www.geeksforgeeks.org/tag/subset/","https://www.geeksforgeeks.org/xor","https://www.techiedelight.com/longest","i)","i):","i+1","i,","i.e.","i/","i:","i]","i_","i_e)","i_e):","i_e:","idea","idea.","idea:","if(","if(curr","if(failure_base_case):","if(i","if(n","if(success_base_case):","ii","ii/","iii","iii/","illustr","imperfect","implement","implementation:","impli","import","improv","includ","included[i]","included[i]:","incom","incoming[n].remove(c)","incoming[n]:","incoming[nei].remove(node)","incoming[nei]:","incoming[p].add(c)","increas","independently.","index","indic","inf')","inf'),","info","info[l]","info[labels[node]]","init","initi","inord","inorder:","input","insert","insert(self,","inspir","instant","instanti","instead","instead.","instruct","instructions:","insur","int","int(bucket)","int(bucket[2:","int(bucket[2])","int)","int,","int:","int[]","int_max","int_max:","int_min","int_min:","intenum","interact","interest","intersections/solution/","interv","interval/","intervals.","intervals/","intervals:","interview","intmax","intmin","introduct","intuit","isbipartite(self,","iscousins(self,","issubsetsum(list,","isvalidbst(self,","it'","it.","item","item))","item:","item[1:]","item[1])}","iter","iteration.","iterative)","ith","itinerary/","iv","iv/","iv/discuss/54117/clean","j","j)","j))","j)):","j),","j,","j:","java","job","jug","juli","jump","june","k","k))","k):","k,","k/","k:","k]])","k_left","kadan","keep","key","key)","key,","key:","key=lambda","keyboard","keyboard/submissions/","kind","kinda","knapsack","knapsack(self,","knapsack,","knightdialer(self,","know","k’","l","l,","l.items():","label/","labels:","lambda","languag","larg","largest","largestdivisiblesubset(self,","largestnumber(self,","largestrectanglearea(self,","largesttimefromdigits(self,","last","last_pow","last_power]","lc","lcs(len(text1),","lcs(m","lcs(m,","leaf","leastinterval(self,","leav","leave,","leaves/","leetcod","leetcode:","left","left,","left.","left/","left:","left=none,","left_max,","left_min","len(arr)","len(bloomday)","len(board)","len(board[0])","len(bucket)","len(coins)):","len(coins).","len(domain)","len(dp)):","len(graph)):","len(graph))]","len(grid)","len(grid),","len(grid[0])","len(heights)","len(inorder)","len(list):","len(nums)","len(nums))","len(nums)):","len(nums))]","len(nums):","len(path)","len(postorder)","len(preorder)","len(prices)):","len(queue)","len(rating)):","len(rating))]","len(rooms)","len(s)","len(s):","len(text1)","len(text2)","len(text2))","len(topo)","len(values)+","len(visited)","len(word)","len(word):","len(word)]:","length","length)","length):","less","letter","level","level_sum","levelwis","levelwise,","lexograph","li","librari","like:","limit","limit,","limit/","linear","link","lis,","lis.","list","list)","list);","list,","list.","list.insert(index,","list:","list[bool])","list[bool]:","list[i","list[i]","list[int])","list[int],","list[int]:","list[list[int]])","list[list[int]],","list[list[int]]:","list[list[str]])","list[list[str]],","list[n","list[str])","list[str],","list[str]:","lists,","lists.","list}","littl","ll","local","location)","long","longest","longestcommonsubsequence(self,","longestpalindromesubseq(self,","longestzigzag(self,","look","loop","loop)","looping:","lot","lowestcommonancestor(self,","lps(0,","lps(m","lps(m,","lru","m","m,","m:","made","maintain","maitain","make","mani","mark","match","matched:","math.min(posit","matrix","matrix/","max","max(","max(cash,","max(dp[x","max(end,","max(hold,","max(include,","max(lcs(m","max(lps(m","max(max_time,","max(memo[i","max(nums[0],","max(result[","max(self.dfs(i,","max(self.dfs(x,","max(self.max_count,","max(self.max_length,","max(start,","max/min.","max/min:","max_count","max_heap","max_index","max_index)","max_len","max_len:","max_tim","maxima","maximum","maximum,","maximum/","maximumsum","maximumsum)","maxnonoverlapping(self,","maxprofit(self,","maxslidingwindow(self,","maxval","meet","memo","memo:","memo[(i,","memo[(m,","memo[0]","memo[1]","memo[i","memo[i]","memo[n","memo[x","memo[x][i","memo[x][y]","memoiz","memori","mention","merg","merge(self,","method","method:","methods,","mid","mid;","min","min(2","min(min_end,","min(min_steps,","min(start,","min.","min_end","min_end:","min_step","mind","mindays(self,","minima","minimum","minremovetomakevalid(self,","minsteps(self,","mintime(self,","minu","minval","miscellan","miss","mistak","mod","mod)","modif","modifi","modulo","monoqueu","more","move","move:","movezeroes(self,","multi,","multipl","mutat","myriad","mysqrt(self,","n","n)","n))","n),","n):","n)]","n)]:","n,","n:","n_d","n_d,","n_e","n_s,","ncr","ncr.append(bucket[:])","necessari","necessarili","necessary,","necessary.","need","neg","negative,","nei","neigh","neigh:","neightbor","nesting/","networkdelaytime(self,","never","new","new_path_sum","new_path_sum.append(new_sum)","new_sum","newinterv","newinterval:","next","next(self,","nextgreaterelement(self,","nextposit","node","node'","node,","node.","node.left","node.left,","node.left:","node.right","node.right:","node.right]","node.v","node.val)","node.val):","node.val]","node.val])","node/","node:","nodes.","non","none","none:","normal","normalsubset(self,","not!","note","note:","notes:","noth","notic","now","nth","num","num)","num:","number","number/","numbers/","numcours","numcourses))","numcourses):","numcourses:","nums)","nums.length","nums1:","nums2:","nums:","nums[0]","nums[1])","nums[abs(n)","nums[end]:","nums[i","nums[i]","nums[i])","nums[i],","nums[j]","nums[j])]","nums[j])])))","nums[j],","nums[max_index]","nums[max_index]:","nums[p]","nums[p],","nums[position],","nums[queue[","nums[start]","nums[z]","nums[z],","numteams(self,","o(2^n)","o(n)","o(n)?","o(n2)","object","oblivi","obstacl","obstruction.","odd","of.","older","on","onc","one!!","one,","one.","one:","one;","ones.","oop:","open","oper","operations,","optim","optimally.","option","orang","order","origin","other/","otherwise)","otherwise,","out","outsid","over","overlap","overlap,","own","p","p,","p:","packag","pages.","pair","pairs/","palindrom","param","param,","paramet","parent","parent)","parent):","parenthes","parentheses/","parenthesi","part","part.","partial","particular","particularli","partitions:","parts.","pass","past","path","path):","path,","path.append(node.val)","path[:]","path_sum):","path_sum:","paths.","paths/","paths/submissions/","paths:","pathsum(self,","pattern","perfect","perfectly:","perform","permut","permutation/solution/","permute(bucket","permute(bucket)","permute(bucket):","permute(self,","permuteunique(self,","perspect","phone","ping(self,","pivot","place","places.","plant","planted[i","planted[n","play","po","point","pointer","pointers:","points:","pop","popleft","posibl","posit","position,","positions[","positions[num].append(i)","possibl","possible.","possible:","post","postord","postorder(node):","postorder(node.left)","postorder(node.right)","postorder.","postorder:","power","power_v","power_val:","practic","practice:","pre","pre[i]","pre[index]","pre[n]","pre[n].union(pre[c].union(set([c])))","pre[p]","prefix","prefix.append(prefix[","prefix_arr[0]","prefix_arr[1]","preorder","preorder:","preorder[end","preorder[mid","preorder[start","preorder[start]","preorder[start])","prerequisites:","present","preserv","previou","price:","prices,","prices[0]","prices[i]","prices[i])","print(\">>","prioriti","problem","problem,","problems)","problems,","problems.","problems:","problemset:","process","process:","produc","product","profit","program","program:","programming)","programming/","programming:","project,","prop","proper","properly.","properti","properties,","properties;","property,","prune","public","push","py","python","q.val])","q.val]))","q:","quantiti","queries:","queries]","question","question!","question)","question,","question.","question/281470/","question/643158/googl","question:","questions*","questions,","questions.","questions:","queue","queue)","queue,","queue.","queue.append((","queue.append((0,","queue.append((c","queue.append((current.left,","queue.append((current.right,","queue.append((i,","queue.append((root,","queue.append((v,","queue.append(0)","queue.append(current.left)","queue.append(current.right)","queue.append(n)","queue.append(nei)","queue.append(node)","queue.append(root)","queue.append(s)","queue.append(target.val)","queue.append(v)","queue.pop())","queue.popleft()","queue:","quicker","quickest","quicksort","r","r)","r):","r.items():","r:","rang","range(0,","range(1,","range(2,","range(3,","range(i","range(i,","range(l,","range(len(nums2)","range(m))","range(n)","range(size):","range(x):","range(x)]","range(y):","range(y)]","rating:","rating[i]","rating[j]:","rc","reach","read","read:","readabl","realiz","realli","recent","recentcounter:","record","record/upd","rectangl","recur","recurs","recurse(0,","recurse(curr","recurse(current,","recurse(current:","recurse(node.left)","recurse(node.right)","recurse(node:","recursion)","recursion,","recursion/","recursion:","red","red,","red])","red_edges:","reduc","refer","reference:","relat","remain","rememb","remember:","remov","repeat","repetit","repetition,","repetition.","replac","repres","represent","req","requir","rest","result","result.append('","result.append([start,","result.append([x,","result.append(bucket[:])","result.append(key)","result.append(nei)","result.append(nums[index])","result.append(path","result.append(path)","result.append(t)","result;","result[","result[node]","result_","result_s.add(tuple(sorted([nums[i],","result_s.pop()","result_s:","results,","return","revers","reverse=true)","revert","right","right,","right:","right;","right=none):","right_max,","right_min","rob(self,","robber/","room","rooms/","rooms:","rooms[room]:","root","root.left","root.right","root.right,","root.right:","root.val:","root:","rotat","rotten","row","row[i","row[i]","rule","run","runtim","runtimes:","s","s,","s:","s[:i].endswith(word):","s[i]","s[j]","s[m]","s[n]:","s_set","s_set:","same","sampl","satisfi","save","scenario","schedul","schedule/","scheduler/","search","second","section)","sections.","see","seen","seen),","seen):","seen.add((i,","seen.add((node,","seen.discard((i,","seen:","select","select.","self._helpercopypaste(n,","self.constructtree(arr[:mid])","self.constructtree(arr[mid","self.count","self.itinerari","self.itinerary:","self.lca","self.left","self.max_count","self.max_length","self.n","self.n):","self.powerset","self.powerset.append(self.subset[:])","self.queu","self.queue[","self.recurse(k,","self.result","self.right","self.solution_function(case_one,","self.solution_function(case_two,","self.solution_search(0,","self.solution_search(k","self.subset","self.subset.append(domain[k])","self.subset.pop()","self.t","self.t:","self.tot","self.val","self.valid","self.walk","self.window","self.window[0]","sell","sell/","send","set","set()","set())","set(['a',","set([1,","set([red,","set([something]","set(range(0,","set(s)","set(word)","set)","set:","set_len","set_len[i]","set_len[i]:","set_len[j]","set_len[j])","sets,","sets:","setter","share","sheet","ship","shipwithindays(self,","shortestalternatingpaths(self,","shortestpath(self,","sign","similar","simpl","situations,","size","size:","slide","slower","small","smaller","smallest","smart","so,","solut","solution(object):","solution,","solution.","solution:","solution_function(self,","solution_search(self,","solutiongenerator:","solutions.","solutions:","solv","somehow","somehow.","someth","sometim","sometimes,","somewher","sort","sort.","sort:","sorted(a,","sorted(graph[s])","sorted(intervals,","sorted(nums)","sorted(points,","sorted(x.items(),","sorted;","space","span/","specifics,","spiral","squar","squares,","src,","src:","stack","stack)","stack)]","stack.append(current)","stack.pop()","stack/queu","stack:","stack[","stair","stairs:","standard","start","start)","start,","start.","start:","starts.remove(p)","starts:","state","state:","state[nums[i","static","step","step,","step;","steps,","stock","stock,","stock.","stockspanner:","stop","stops/","store","store[nums2[i]]","str(d[i]))","str(node.val)","str(node.val))","str)","str,","str:","streak","stream","stream/","stretch","strictli","string","string/","strings,","structur","structure:","structures.","stuff","stupid","sub","subarray","subarray.","subarray/","subarrays,","subarrays:","subproblem","subsequ","subsequence/","subsequences.","subset","subset/","subset/discuss/84006/class","subsets:","substitut","substr","substructur","subtre","subtree.","success","such","sum","sum(dp)","sum(i","sum,","sum.","sum/","sum/amount","sum/amount:","sum/discuss/16510/python","sum:","sum_po","sum_pos:","sum_pos[","sum_pos[p]","sumnumbers(self,","sumofleftleaves(self,","sums.items():","sums[l","sure","swap","t","t))","t,","t:","tabl","table[i][weight]","take","taken","target","target.","target/","target:","task","tasks:","team/","team/discuss/539797/c%2b%2bpython","teams/","techniqu","tell","templat","template:","temporari","terminates.","text1:","text1[i","text1[m","text2:","text2[n","text2[x","th","that'","then,","there'","these,","thing","think","third","this.","this:","those","thought","threesum(self,","through","throught","thumb:","tickets:","till","time","time)","time,","time.","time/","times,","times:","tip:","tips:","toggl","tool","top","topo","topo.append(node)","topo[::","topolog","total","total_step","total_sum","track","transact","transform","transit","travers","traversal/","traverse('jfk',","traverse(0)","traverse(current,","traverse(n,","traverse(node):","traverse(node,","traverse(node.left)","traverse(node.left,","traverse(node.right)","traverse(node.right,","traverse(root)","traverse(root,","traverse(v)","traverse(v).items():","tree","tree,","tree.","tree/","tree/)","tree/discuss/540038/python","tree;","tree[e].append(s)","tree[node]:","tree[s].append(e)","treenod","treenode()","treenode(arr[mid])","treenode(postorder[construct.postorder_index])","treenode(preorder[start])","treenode)","treenode,","treenode:","tri_sum","trick","trick:","tricki","tricky:","trie:","triplet","trivial","true","true;","twice/","two","two/","type","typic","u,","u_set","u_set.remove(p)","u_set:","ultim","understand","uniqu","uniquepaths(self,","unless","unlik","unnecessari","until","unus","unvisit","up","updat","us","useful:","user","usually,","v","v))","v,","vagu","val","val=0,","valid","valu","value.","value:","values,","variabl","variat","veri","verify(mid):","versa.","vertic","vice","visit","visited.add(i)","visited.add(node)","visited.add(room)","visited.add(v)","visited.remove(i)","visited:","visited[c]","visited[j]","visited[j]:","visited[node]","visited[node]:","visited[s]:","visited[x][y]","visited[x][y]:","visited[x][y][1]","visual","vowel","vowel_set","w","w)","w))","w,","w:","w]","want","water","water/","way","we'r","weapon","wear","weekli","weight","weights,","weights:","well","well):","well.","whole","window","wise","within","without","word","word)","word:","wordbreak(self,","worddict","worddict:","work","work.","workers/","write","x","x):","x)]","x+i","x,","x:","x;","x[0])","x_found","xors/","y","y)","y))]","y):","y)]","y+x","y,","y:","y_found","y_found)","y_found):","you'd","z","z:","z])","zeroes/submissions/","zigzag","zip","{","{0","{0:","{1:","{64:","{item[0]:","{k:","{labels[node]:","{}","}","‘reject’"],"pipeline":["stopWordFilter","stemmer"]},"store":{"./":{"url":"./","title":"Introduction","keywords":"","body":"Introduction\nCompetitive coding notes\n"},"GeneralInstructions.html":{"url":"GeneralInstructions.html","title":"General Instructions","keywords":"","body":"General instructions\nProblem solving\n\nBrute-force approach first\nKeep on optimizing code\nRemember runtimes of python built-in functions and libraries\n\nCode writing\n\nOOP: use class, methods, and class variables\nUse docstrings if possible\nHelper functions to maintain some level of abstraction\nProperty, getters-setters to decorate code further\nUse brackets where ever possible: avoids stupid mistakes and improves code readability\n\nPython stuff\nEverything in python is pass-object reference by value \nBasically, pass by reference for end-user oblivious to the implementation of the language but this is implemented how pass-by-value way (kinda!)\nThis question! => (https://leetcode.com/contest/weekly-contest-190/problems/pseudo-palindromic-paths-in-a-binary-tree/) \nCreate a copy of the parameter somehow. list + [new] works well for lists. \nFor sets, set - set([something] creates a copy\n"},"DataStructures/":{"url":"DataStructures/","title":"Data Structures","keywords":"","body":"Data Structures & standard questions\n"},"DataStructures/Arrays/":{"url":"DataStructures/Arrays/","title":"Arrays","keywords":"","body":"Arrays\nGeneral instructions:\n\nFind 3 elements in array questions \nGenerally sort + hash or sort + Binary Search is a powerful weapon\n\nCheck if pre and post array can help \nhttps://www.geeksforgeeks.org/maximum-length-of-strictly-increasing-sub-array-after-removing-at-most-one-element/\n\n'Quirky' stack problems \nhttps://www.geeksforgeeks.org/next-greater-element/ : Position priority\n\nSimilar to stack problems (1) but value priority and then position \nhttps://leetcode.com/problems/next-permutation/solution/\n\n\n"},"DataStructures/Arrays/TwoPointers.html":{"url":"DataStructures/Arrays/TwoPointers.html","title":"Two Pointers","keywords":"","body":"2 Pointers technique\nhttps://leetcode.com/problems/container-with-most-water/  \nhttps://leetcode.com/problems/two-sum/\nhttps://leetcode.com/problems/3sum/\nTwo pointers is really an easy and effective technique which is typically used for searching pairs in an array.\n Two pointers:\nAt either ends and decide which one to move\nOne faster and one slower\nMaintain subarray size of K’s props\nGeneral solution structure: \nhttps://leetcode.com/explore/challenge/card/30-day-leetcoding-challenge/528/week-1/3286/\nclass Solution:\n    def moveZeroes(self, nums: List[int]) -> None:\n        n = len(nums)\n        z = 0\n        p = 0\n\n        while (not p == (n - 1)):\n            while z = n or z >= n:\n                break\n\n            nums[z], nums[p] = nums[p], nums[z]\n\n        return nums\n\n"},"DataStructures/Arrays/Subarrays.html":{"url":"DataStructures/Arrays/Subarrays.html","title":"Subarrays","keywords":"","body":"Subarrays\nOptimization checks: \n\nTwo pointers \nSliding window with running values \nPre and Post arrays \nThere can be complex problems outside these as well\n\nFind subarray size K:\nRequires all subarrays of all sizes and find all where a constraint is matched: \nhttps://www.geeksforgeeks.org/number-subarrays-product-less-k/\nSliding window with two pointers \nLeft move: if product is more than the constraint \nRight move: everytime unless the product is more than the constraint \nCatch: Each addition of the element produces (end_index - (start_index - 1)) more subarrays \nCatch: Which implies -- subarray of size d produces d * (d + 1)/2 different subarrays\nhttps://www.geeksforgeeks.org/maximum-subarray-size-subarrays-size-sum-less-k/\nPrefix array to store constraint related data (sorted) \nBinary search + two pointers to find ALL subarrays of that size satisfying the constraint\nhttps://www.geeksforgeeks.org/number-of-subarrays-with-odd-sum/\nPrefix array but instead of sum, store sum modulo 2 \nfinal_answer = prefix_arr[0] * prefix_arr[1]\nOperation on all of subarrays:\nhttps://www.geeksforgeeks.org/xor-subarray-xors/\nCatch: ith element frequency in all subarrays: (i + 1) * (n - i) \nDesired quantity at the end of the whole domain traversal \nhttps://leetcode.com/problems/maximum-subarray/\nKeep current value running and max/min: \n\nIncluding the element \nExcluding the element: basically new subsequence start \n\nLooks like DP question but we don’t have to refer older values as we are dealing subarrays, not subsequences. Answer till  previous is stored in the comparison step of current and absolute max/min.\nhttps://www.geeksforgeeks.org/maximum-product-subarray-set-3/\nmaxVal and minVal at each value during iteration. If negative, swap them before multi, other things similar to maximum subarray sum\nPre and post array\nhttps://www.geeksforgeeks.org/maximum-length-of-strictly-increasing-sub-array-after-removing-at-most-one-element/\ncomplex subarray problems\nhttps://leetcode.com/problems/longest-continuous-subarray-with-absolute-diff-less-than-or-equal-to-limit/\nhttps://leetcode.com/problems/maximum-number-of-non-overlapping-subarrays-with-sum-equals-target/\nclass Solution:\n    def maxNonOverlapping(self, nums: List[int], target: int) -> int:\n        prefix = [0]\n        sum_pos = {0: 0}\n        intervals = 0\n\n        for i, n in enumerate(nums):\n            prefix.append(prefix[-1] + n)\n\n        for i, p in enumerate(prefix):\n            if i == 0: continue\n\n            if p - target in sum_pos:\n                intervals += 1\n                sum_pos = {}\n\n            sum_pos[p] = i\n\n        return intervals\n\n"},"DataStructures/Arrays/Subsets.html":{"url":"DataStructures/Arrays/Subsets.html","title":"Subsets","keywords":"","body":"Subsets\nGeeks for Geeks archives: https://www.geeksforgeeks.org/tag/subset/ \nOptimization checks:\n\nSorting the whole array\nPriority queues (check Miscellaneous Problems section)\n\nFor each element, there are 2 choices: Take or leave \nTwo ways to implement this: \n\nRecursion\nDP\n\nStandard questions\nhttps://www.geeksforgeeks.org/partition-problem-dp-18/\n\nisSubsetSum(list, n, sum / 2) = isSubsetSum(list, n - 1, sum / 2) or isSubsetSum(list, n - 1, sum / 2 - list[n - 1])\n\n \n\n\n\nDP\nProblems like: \n\nLIS\nhttps://leetcode.com/problems/largest-divisible-subset/\n\nBase DP method is LIS.  \nSmart implementation: https://leetcode.com/problems/largest-divisible-subset/discuss/84006/Classic-DP-solution-similar-to-LIS-O(n2)\nclass Solution:\n    def largestDivisibleSubset(self, nums: List[int]) -> List[int]:\n        nums = sorted(nums)\n        set_len = [1] * len(nums)\n        pre = [-1] * len(nums)\n        max_len = 0\n        index = -1\n\n        for i, target in enumerate(nums):\n            for j in range(0, i):\n                if target % nums[j] == 0:\n                    if (1 + set_len[j]) > set_len[i]:\n                        pre[i] = j\n                        set_len[i] = 1 + set_len[j]\n\n            if set_len[i] > max_len:\n                index = i\n                max_len = set_len[i]\n\n        result = []\n        while index != -1:\n            result.append(nums[index])\n            index = pre[index]\n\n        return result\n\n"},"DataStructures/Arrays/Triplets.html":{"url":"DataStructures/Arrays/Triplets.html","title":"Triplets","keywords":"","body":"Triplets\nhttps://leetcode.com/problems/count-number-of-teams/\nclass Solution:\n    def numTeams(self, rating: List[int]) -> int:\n        s = [0 for i in range(0, len(rating))]\n        g = [0 for i in range(0, len(rating))]\n        total = 0\n\n        for i in range(1, len(rating)):\n            for j in range(0, i):\n                if rating[i] > rating[j]:\n                    total += s[j]\n                    s[i] += 1\n\n                if rating[i] \nOptimization step by step\nhttps://leetcode.com/problems/3sum/ \nThis is modified 2 sum. We fix 2 elements and need to find the third one. \nSets are used to avoid repetition. \nWays to find the third one: \n\nBinary Search \nSave positions in a dictionary. Check the last position of that element, if that's greater than the second elem, we have found a possible set\n\nfrom collections import defaultdict\n\nclass Solution:\n    def threeSum(self, nums: List[int]) -> List[List[int]]:\n        n = len(nums)\n        result_s = set()\n        result = []\n        positions = defaultdict(list)\n\n        for i, num in enumerate(nums):\n            positions[num].append(i)\n\n        for i in range(0, n - 2):\n            for j in range(i + 1, n - 1):\n                sum_pos = positions[-(nums[i] + nums[j])]\n                if sum_pos:\n                    if sum_pos[-1] > j:\n                        result_s.add(tuple(sorted([nums[i], nums[j], \\\n                                      -(nums[i] + nums[j])])))\n\n        while result_s:\n            x, y, z = result_s.pop()\n            result.append([x, y, z])\n\n        return result\n\nBetter approach with sorting\nclass Solution:\n    def threeSum(self, nums: List[int]) -> List[List[int]]:\n        nums = sorted(nums)\n        n = len(nums)\n        result = set()\n        i, j, k = 0, 1, n - 1\n\n        for i in range(0, n - 2):\n            # This kind of pruning is very important\n            if i > 0 and nums[i] == nums[i - 1]: \n                continue\n\n            j = (i + 1)\n            k = (n - 1)\n\n            while j  0:\n                    k -= 1\n\n                if tri_sum \n"},"DataStructures/Arrays/DequeTrick.html":{"url":"DataStructures/Arrays/DequeTrick.html","title":"Deque Trick","keywords":"","body":"Deque trick / monoqueue technique\nExtremely useful to find next greater or previous greater, etc\n\nhttps://leetcode.com/problems/next-greater-element-i/\nhttps://leetcode.com/problems/online-stock-span/\nhttps://leetcode.com/problems/sliding-window-maximum/\nhttps://leetcode.com/explore/challenge/card/may-leetcoding-challenge/536/week-3-may-15th-may-21st/3330/\n\nThe idea is to maitain a queue or stack based on our requirements that has this structure: \n \nWe might want to add some more info (eg. location) \nEach incoming element will be compared with the last element: \n\nKeep on popping if stack/queue and the last element is smaller than the current one\nGo ahead and append it to the stack/queue\n\nFor next greater, run the loop backwards and for the sliding window question, \npop the first one if it's outside of the window boundaries ((i - k + 1))\nGeneral solution: \nfrom collections import deque\n\nclass StockSpanner:\n\n    def __init__(self):\n        self.queue = deque()\n        self.counter = 0\n\n    def next(self, price: int) -> int:\n        self.counter += 1\n        result = self.counter\n\n        while self.queue and self.queue[-1][0] \nNext greater\nfrom collections import defaultdict\n\nclass Solution:\n    def nextGreaterElement(self, nums1: List[int], nums2: List[int]) -> List[int]:\n        store = defaultdict(int)\n        stack = []\n        result = []\n\n        for i in range(len(nums2) - 1, -1, -1):\n            store[nums2[i]] = -1\n\n            while stack and stack[-1] \nSliding window solution:  \nA simple question first- \nOur target is very similar here: \nhttps://leetcode.com/problems/number-of-recent-calls/\nfrom collections import deque\n\nclass RecentCounter:\n\n    def __init__(self):\n        self.window = deque()\n\n    def ping(self, t: int) -> int:\n        while self.window and self.window[0] \nNow the original question with sliding window\nfrom collections import deque\n\nclass Solution:\n    def maxSlidingWindow(self, nums: List[int], k: int) -> List[int]:\n        queue = deque()\n        result = []\n\n        if k == 1:\n            return nums\n\n        if k == len(nums):\n            return [max(nums)]\n\n        for i in range(0, k):\n            while queue and nums[queue[-1]] \nhttps://leetcode.com/problems/largest-rectangle-in-histogram/\nfrom collections import deque\nfrom enum import IntEnum\n\nclass Solution:\n    def largestRectangleArea(self, heights: List[int]) -> int:\n        class Direction(IntEnum):\n            L = 0\n            R = 1\n\n        n = len(heights)\n\n        smaller = [[i, i] for i in range(0, n)]\n        queue = deque()\n        queue.append((-1, -1))\n\n        for i, h in enumerate(heights):\n            while queue and h \n"},"DataStructures/Strings/":{"url":"DataStructures/Strings/","title":"Strings","keywords":"","body":"Strings\n"},"DataStructures/Strings/StandardQuestions.html":{"url":"DataStructures/Strings/StandardQuestions.html","title":"Standard Questions","keywords":"","body":"Standard Questions\nBrute -> Sliding Window -> Set\nhttps://leetcode.com/problems/longest-substring-without-repeating-characters/\n"},"DataStructures/Trees/":{"url":"DataStructures/Trees/","title":"Trees","keywords":"","body":"Trees\nDecent curated list: https://medium.com/@codingfreak/binary-tree-interview-questions-and-practice-problems-439df7e5ea1f\nTraversals\n\nInorder (Recursive and Iterative)\nPreorder (Recursive and Iterative)\nPostorder (Recursive and Iterative)\nLevelwise\nVertical order (Levelwise + Hashing)\n\nFinding a solution\n\nSee if you want to pass data down the tree or up the tree\n\nIf up the tree, postorder for recursive solution.\nIf down the tree, preorder for recursive solution, keep globals to record and update answer.  return for no node/ no left/ no right tree cases. If you don't want to encounter no left or no right situations, check before passing down the value.\n\n\nFor levelwise, make sure you check if the left node or right node is present before pushing to the queue. Do it level by level not node by node. popleft and append combo (collections.deque)\n\n\n"},"DataStructures/Trees/Inorder.html":{"url":"DataStructures/Trees/Inorder.html","title":"Inorder Traversal","keywords":"","body":"Inorder Traversal\nIt is useful when you just want to traverse the tree, if you find what you are looking for, set up a flag to make sure you don't recur unnecessary paths. Just return in the case of iterative \nParticularly useful in the case of BST as inorder will give you a sorted list\nIterative\nhttps://leetcode.com/problems/sum-of-left-leaves/\nclass Solution:\n    def sumOfLeftLeaves(self, root: TreeNode) -> int:\n        if not root:\n            return 0\n\n        stack = []\n        current = root\n        total_sum = 0\n\n        while stack or current:\n            while current:\n                stack.append(current)\n                current = current.left\n                if current and not current.left and not current.right:\n                    total_sum += current.val\n\n            current = stack.pop()\n            current = current.right\n\n        return total_sum\n\nRecursive\nhttps://leetcode.com/problems/binary-tree-paths/ \nReturn False only in the case of not satisfying the criteria, do not return True until the base case\nclass Solution:\n    def binaryTreePaths(self, root: TreeNode) -> List[str]:\n        result = []\n\n        def traverse(node, path):\n            if not node:\n                return\n\n            if not node.left and not node.right:\n                result.append(path + str(node.val))\n                return            \n\n            traverse(node.left, path + str(node.val) + \"->\")\n            traverse(node.right, path + str(node.val) + \"->\")\n\n        traverse(root, \"\")\n        return result\n\n"},"DataStructures/Trees/Preorder.html":{"url":"DataStructures/Trees/Preorder.html","title":"Preorder Traversal","keywords":"","body":"Preorder traversal\nPerfect for process node and pass value down the tree. \nSometimes replacement for levelwise (NOT ALWAYS, OF COURSE) \nIf we do not want to cover not root.left or not root.right, check if they exist and go down the tree. \nGeneral solution:\nhttps://leetcode.com/problems/sum-root-to-leaf-numbers/\nclass Solution:\n    def sumNumbers(self, root: TreeNode) -> int:\n        self.total = 0\n\n        if not root:\n            return 0\n\n        def addNums(node, current):\n            if not node.left and not node.right:\n                self.total += (current * 10 + node.val)\n                return\n\n            if node.left:\n                addNums(node.left, current * 10 + node.val)\n\n            if node.right:\n                addNums(node.right, current * 10 + node.val)\n\n        addNums(root, 0)\n        return self.total\n\nhttps://leetcode.com/problems/binary-tree-zigzag-level-order-traversal/\nclass Solution:\n    def longestZigZag(self, root: TreeNode) -> int:\n        if not root:\n            return 0\n\n        self.max_length = 0\n        left = -1\n        right = 1\n\n        def traverse(node, direction, length):\n            if not node:\n                return\n\n            self.max_length  = max(self.max_length, length)\n\n            if direction == left:\n                traverse(node.left, left, 1)\n                traverse(node.right, right, length + 1)\n\n            elif direction == right:\n                traverse(node.left, left, length + 1)\n                traverse(node.right, right, 1)\n\n            else:\n                traverse(node.left, left, 1)\n                traverse(node.right, right, 1)\n\n        traverse(root, 0, 0)\n        return self.max_length\n\nhttps://leetcode.com/problems/path-sum-ii/\nclass Solution:\n    def pathSum(self, root: TreeNode, sum: int) -> List[List[int]]:\n        result = []\n\n        def traverse(node, path, current_sum):\n            if not node:\n                return\n\n            if not node.left and not node.right:\n                if current_sum == (sum - node.val):\n                    path.append(node.val)\n                    result.append(path)\n                return\n\n            traverse(node.left, path + [node.val], current_sum + node.val)\n            traverse(node.right, path + [node.val], current_sum + node.val)\n\n        traverse(root, [], 0)\n        return result\n\nhttps://leetcode.com/problems/path-sum-iii/\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def pathSum(self, root: TreeNode, sum: int) -> int:\n        self.result = 0\n\n        def traverse(node, path_sum):\n            if not node:\n                return \n\n            if node.val == sum:\n                self.result += 1\n\n            new_path_sum = []\n            for s in path_sum:\n                new_sum = s + node.val\n\n                if new_sum == sum:\n                    self.result += 1\n\n                new_path_sum.append(new_sum)\n\n            traverse(node.left, new_path_sum + [node.val])\n            traverse(node.right, new_path_sum + [node.val])            \n\n        traverse(root, [])\n        return self.result\n\n"},"DataStructures/Trees/Postorder.html":{"url":"DataStructures/Trees/Postorder.html","title":"Postorder Traversal","keywords":"","body":"Postorder traversal\nSometimes we need to pass some values back up the tree. \ne.g. node's position from the bottom, max from right and left, check if the node exists in the left or right subtree. sum of the left subtree and right subtree \nBased on these properties, we need to find values of some other properties; use globals/ class attributes to record/update their value.\nOptimization for BST: \nCheck if the target value is greater than current, go right; no need to go left. Vice versa. \nAlso need to do the same sometimes to handle the nodes that don't have either left child or the right one. Don't forget to initialize L or R before calling postorder. Look at the solution of good leaf nodes.\nGeneral solution:\nhttps://leetcode.com/problems/lowest-common-ancestor-of-a-binary-tree/\nclass Solution:\n    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':\n        self.lca = None\n\n        def traverse(node):\n            if not node:\n                return False\n\n            L = traverse(node.left)\n            R = traverse(node.right)\n\n            if (L + R + (node.val in [p.val, q.val])) == 2:\n                self.lca = node\n\n            return L or R or (node.val in [p.val, q.val])\n\n        traverse(root)\n        return self.lca\n\nhttps://leetcode.com/problems/most-frequent-subtree-sum/ \nNote: Recording max_count while inserting so that finding max will be easier afterwards.\nfrom collections import deque, defaultdict\n\nclass Solution:\n    def findFrequentTreeSum(self, root: TreeNode) -> List[int]:\n        if not root:\n            return []\n\n        sums = defaultdict(int)\n        self.max_count = 0\n\n        def traverse(node):\n            if not node:\n                return 0\n\n            L = traverse(node.left)\n            R = traverse(node.right)\n\n            sums[L + R + node.val] += 1\n            self.max_count = max(self.max_count, sums[L + R + node.val])\n\n            return (L + R + node.val)\n\n        traverse(root)\n        result = []\n\n        for key, value in sums.items():\n            if self.max_count == value:\n                result.append(key)\n\n        return result\n\nhttps://leetcode.com/problems/validate-binary-search-tree/\nclass Solution:\n    def isValidBST(self, root: TreeNode) -> bool:\n        self.valid = True\n\n        if not root:\n            return self.valid\n\n        if not root.left and not root.right:\n            return self.valid\n\n        def recurse(node: TreeNode) -> int:\n            if not node:\n                return (float('-inf'), float('inf'))\n\n            left_max, left_min = recurse(node.left)\n            right_max, right_min = recurse(node.right)\n\n            if (left_max >= node.val) or (right_min \nhttps://leetcode.com/problems/minimum-time-to-collect-all-apples-in-a-tree/\nfrom collections import defaultdict\n\nclass Solution:\n    def minTime(self, n: int, edges: List[List[int]], hasApple: List[bool]) -> int:\n        tree = defaultdict(list)\n        self.walk = 0\n        visited = set()\n        for s, e in edges:\n            tree[s].append(e)\n            tree[e].append(s)\n\n        def traverse(node):\n            visited.add(node)\n\n            if not tree[node]:\n                if hasApple[node]:\n                    self.walk += 2\n                return hasApple[node]\n\n            apple_in_path = hasApple[node]\n            for v in tree[node]:\n                if v not in visited:\n                    apple_in_path = traverse(v) or apple_in_path\n\n            if apple_in_path and node:\n                self.walk += 2\n\n            return apple_in_path\n\n\n        traverse(0)\n        return self.walk\n\nhttps://leetcode.com/contest/weekly-contest-199/problems/number-of-good-leaf-nodes-pairs/ \nWe send to send consolidated data up the tree; kinda of tricky and complex\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nfrom collections import defaultdict\n\nclass Solution:\n    def countPairs(self, root: TreeNode, distance: int) -> int:\n        self.total = 0\n\n        def postorder(node):\n            if not node.left and not node.right:\n                return {1: 1}\n\n            L, R = {0 : 0}, {0: 0}\n            if node.left:\n                L = postorder(node.left)\n            if node.right:\n                R = postorder(node.right)\n\n            for d1, lc in L.items():\n                for d2, rc in R.items():\n                    if d1 + d2 \n"},"DataStructures/Trees/LevelWise.html":{"url":"DataStructures/Trees/LevelWise.html","title":"Level-wise Traversal","keywords":"","body":"Levelwise traversals\nGeneral solution: \nhttps://leetcode.com/problems/deepest-leaves-sum/\nfrom collections import deque\n\nclass Solution:\n    def deepestLeavesSum(self, root: TreeNode) -> int:\n        if not root:\n            return 0\n\n        queue = deque()\n        queue.append(root)\n        current = root\n        level_sum = 0\n\n        while queue:\n            size = len(queue)\n            level_sum = 0\n\n            while size:\n                current = queue.popleft()\n                level_sum += current.val\n\n                if current.left:\n                    queue.append(current.left)\n\n                if current.right:\n                    queue.append(current.right)\n\n                size -= 1\n\n        return level_sum\n\nAppend more values into the queue node \nhttps://leetcode.com/problems/cousins-in-binary-tree/\nfrom collections import deque\n\n\nclass Solution:\n    def isCousins(self, root: TreeNode, x: int, y: int) -> bool:\n        if not root:\n            return False\n\n        queue = deque()\n        queue.append((root, -1))\n        current = root\n\n\n        while queue:\n            size = len(queue)\n\n            x_found = -1\n            y_found = -1\n\n            while size:\n\n                current, parent = queue.popleft()\n\n                if current.val == x:\n                    x_found = parent\n\n                if current.val == y:\n                    y_found = parent\n\n                if (x_found != -1) and (y_found != -1) and (x_found != y_found):\n                    return True\n\n                if (x_found == y_found) and (x_found != -1):\n                    return False\n\n                if current.left:\n                    queue.append((current.left, current.val))\n\n                if current.right:\n                    queue.append((current.right, current.val))\n\n                size -= 1\n\n        return False\n\n"},"Datastructures/Trees/TreeToGraph.html":{"url":"Datastructures/Trees/TreeToGraph.html","title":"Tree to Graph","keywords":"","body":"Tree to graph\nSometimes, we need to convert a tree into a graph. \nEspecially, if we want to traverse starting from an arbitary node.\nTwo approaches: \n\nMemory efficient but altering the input data: \nMark every node (add a new attribute to TreeNode object parent) \nPerform level-wise traversal from the target node where the neightbor loop will have [node.parent, node.left, node.right]\n\nConvert you tree into a graph: \nWill require additional O(n) space to store the whole thing \nPerform level-wise traversal starting from the target node\n\n\nhttps://leetcode.com/problems/all-nodes-distance-k-in-binary-tree/ \nNote the graph construction step; keep in mind we have to filter out -1 from the iteration.\nmake sure there's a proper K value handling.\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nfrom collections import defaultdict, deque\n\nclass Solution:\n    def distanceK(self, root: TreeNode, target: TreeNode, K: int) -> List[int]:\n        if K == 0:\n            return [target.val]\n\n        graph = defaultdict(list)\n\n        def traverse(node, parent):\n            if not node:\n                return\n\n            graph[parent].append(node.val)\n            graph[node.val].append(parent)\n            traverse(node.left, node.val)\n            traverse(node.right, node.val)\n\n        traverse(root, -1)\n\n        queue = deque()\n        queue.append(target.val)\n        visited = set()\n        result = []\n        K -= 1\n\n        while queue:\n            size = len(queue)\n\n            for i in range(size):\n                v = queue.popleft()\n                visited.add(v)\n\n                for nei in graph[v]:\n                    if nei not in visited and nei != -1: \n                        if K != 0:\n                            queue.append(nei)\n\n                        if K == 0:\n                            result.append(nei)\n            if K == 0:\n                return result\n            K -= 1\n\n        return []\n\n"},"DataStructures/Trees/ConstructTree.html":{"url":"DataStructures/Trees/ConstructTree.html","title":"Construct Trees","keywords":"","body":"Tree construction questions\nBalanced tree construction\nhttps://leetcode.com/problems/balance-a-binary-search-tree/discuss/540038/python-3-easy-to-understand\nclass Solution:\n    def constructTree(arr: list) -> TreeNode:\n        if not len(list):\n            return None\n\n        mid = len(arr) // 2\n\n        node = TreeNode(arr[mid])\n        node.left = self.constructTree(arr[:mid])\n        node.right = self.constructTree(arr[mid + 1: ])\n\n        return node\n\nConstruction from preorder\nhttps://leetcode.com/problems/construct-binary-search-tree-from-preorder-traversal/\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def bstFromPreorder(self, preorder: List[int]) -> TreeNode:\n\n        if not preorder:\n            return None\n\n        def binarySearch(start, end, key) -> int:\n\n            if start > end:\n                return end + 1\n\n            mid = start + (end - start) // 2\n\n            if preorder[start] > key and preorder[start - 1]  key and preorder[end - 1]  key and preorder[mid - 1]  key:\n                return binarySearch(start, mid - 1, key)\n\n        def constructTree(start, end) -> TreeNode:\n            if start > end:\n                return None\n\n            node = TreeNode(preorder[start])\n\n            pivot = binarySearch(start + 1, end, preorder[start])\n            node.left = constructTree(start + 1, pivot - 1)\n            node.right = constructTree(pivot, end)\n\n            return node\n\n        return constructTree(0, len(preorder) - 1)\n\nSome other constructions\nhttps://leetcode.com/problems/maximum-binary-tree/\nclass Solution:\n    def constructMaximumBinaryTree(self, nums: List[int]) -> TreeNode:\n        if not nums:\n            return None\n\n        def construct(l, r):\n            if l >= r:\n                return None\n\n            max_index = l\n            for i in range(l, r):\n                if nums[i] > nums[max_index]:\n                    max_index = i\n\n            node = TreeNode()\n            node.val = nums[max_index]\n\n            node.left = construct(l, max_index)\n            node.right = construct(max_index + 1, r)\n\n            return node\n\n        return construct(0, len(nums))\n\nImportant questions: \nhttps://leetcode.com/problems/construct-binary-tree-from-inorder-and-postorder-traversal/ \nNotice how we're using a static variable for construct function. \nRoot is always the last unused element present in the postorder array. This element divides the inorder array in 2 parts. \nMake sure you construct the right subtree before the left one!!\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def buildTree(self, inorder: List[int], postorder: List[int]) -> TreeNode:\n\n        def construct(i_s, i_e):\n            if i_s > i_e:\n                return None\n\n            root = TreeNode(postorder[construct.postorder_index])\n            construct.postorder_index -= 1\n\n            pivot = 0\n            for i, e in enumerate(inorder):\n                if e == root.val:\n                    pivot = i\n                    break\n\n            root.right = construct(pivot + 1, i_e)\n            root.left = construct(i_s, pivot - 1)\n\n            return root\n\n        construct.postorder_index = len(postorder) - 1\n        return construct(0, len(inorder) - 1)\n\n"},"DataStructures/Graphs/":{"url":"DataStructures/Graphs/","title":"Graphs","keywords":"","body":"Graphs\nDecent problemset: https://leetcode.com/discuss/general-discussion/655708/graph-problems-for-beginners-practice-problems-and-sample-solutions\n\nhttps://leetcode.com/problems/array-nesting/\n\nCourse schedule IV\n\n\n"},"DataStructures/Graphs/Coloring.html":{"url":"DataStructures/Graphs/Coloring.html","title":"Coloring","keywords":"","body":"Graph coloring\nBasically, bifurcation problems\n\nhttps://leetcode.com/problems/flower-planting-with-no-adjacent/ \nThese set of problems are extremely similar with a code-changing difference \nThe first one is solved with keeping in mind that the solution exists, we just have to find it \nFor the these, we want to see if the solution exists: (use BFS)\nhttps://leetcode.com/problems/is-graph-bipartite/\nhttps://leetcode.com/problems/shortest-path-with-alternating-colors/\nhttps://leetcode.com/problems/possible-bipartition/  \n\nTips: \nMake sure you have a proper representation of graph \nRun the first loop over all vertices so that you don't miss disconnected sections.\nfrom collections import deque\n\nclass Solution:\n    def isBipartite(self, graph: List[List[int]]) -> bool:\n        visited = [0 for i in range(0, len(graph))]\n\n        def bfs(i):\n            queue = deque()\n            queue.append((i, 1))\n\n            while queue:\n                node, color = queue.popleft()\n\n                if visited[node] and visited[node] != color:\n                    return False\n\n                if visited[node]:\n                    continue\n\n                visited[node] = color\n\n                colors = set([1, 2])\n                colors.remove(color)\n                color_left = colors.pop()\n\n                for v in graph[node]:\n                    queue.append((v, color_left))\n\n            return True\n\n        for s in range(0, len(graph)):\n            if not visited[s]:\n                if not bfs(s):\n                    return False\n\n        return True\n\nEdge coloring \nThe key is to store color-node pairing in the seen set -> Allows us to traverse only \"meaningful\" cycles\nfrom collections import defaultdict, deque\n\nclass Solution:\n    def shortestAlternatingPaths(self, n: int, red_edges: List[List[int]], blue_edges: List[List[int]]) -> List[int]:\n        graph = defaultdict(list)\n        red = 1\n        blue = 2\n        queue = deque()\n        seen = set()\n        result = [-1 for i in range(0, n)]\n\n        for s, d in red_edges:\n            graph[s].append([d, red])\n\n        for s, d in blue_edges:\n            graph[s].append([d, blue])\n\n        queue.append((0, red, 0))\n        queue.append((0, blue, 0))\n        while queue:\n            node, color, length = queue.popleft()\n\n            if (node, color) in seen:\n                continue\n            seen.add((node, color))\n\n            if result[node] == -1:\n                result[node] = length\n\n            for v, c in graph[node]:\n                colors = set([red, blue])\n                colors.remove(color)\n                expected = colors.pop()\n                if (c == expected):\n                    queue.append((v, expected, length + 1))\n\n        return result\n\nSolution for the first one: \nJust filling up colors\nfrom collections import defaultdict\n\nclass Solution:\n    def gardenNoAdj(self, N: int, paths: List[List[int]]) -> List[int]:\n        graph = defaultdict(list)\n\n        for start, end in paths:\n            graph[start].append(end)\n            graph[end].append(start)\n\n        planted = [0 for i in range(0, N)]\n\n        for i in range(1, N + 1):\n            neigh = graph[i]\n            if planted[i - 1]:\n                continue\n\n            flowers = set([1, 2, 3, 4])\n            for n in neigh:\n                if planted[n - 1] in flowers:\n                    flowers.remove(planted[n - 1])\n\n            planted[i - 1] = flowers.pop()\n\n        return planted\n\n"},"DataStructures/Graphs/GraphBFS.html":{"url":"DataStructures/Graphs/GraphBFS.html","title":"Graph BFS","keywords":"","body":"Graph BFS\nExtremely powerful tool to have in the arsenal. \nUseful for a myriad of optimization problems. \nQuickest way to reach to X; even optimize cost function (Djikstra substitute using Priority Queue) \nhttps://leetcode.com/problems/keys-and-rooms/\nfrom collections import deque\n\nclass Solution:\n    def canVisitAllRooms(self, rooms: List[List[int]]) -> bool:\n        if not rooms:\n            return True\n\n        queue = deque()\n        visited = set()\n\n        queue.append(0)\n\n        while queue:\n            room = queue.popleft()\n            visited.add(room)\n\n            for v in rooms[room]:\n                if v not in visited:\n                    queue.append(v)\n\n        return True if len(visited) == len(rooms) else False\n\nAmazing priority queue method: \nhttps://leetcode.com/problems/network-delay-time/\nimport heapq\nfrom collections import deque, defaultdict\n\nclass Solution:\n    def networkDelayTime(self, times: List[List[int]], N: int, K: int) -> int:\n        graph = defaultdict(list)\n        heap = []\n        visited = {}\n\n        if not N:\n            return 0\n\n        if K > N:\n            return -1\n\n        for u, v, w in times:\n            graph[u].append((v, w))\n\n        heap.append((0, K))\n        max_time = 0\n\n        while heap:\n            time, node = heapq.heappop(heap)\n\n            if node in visited:\n                continue\n\n            visited[node] = time\n            max_time = max(max_time, time)\n\n            for v, w in graph[node]:\n                if v not in visited:\n                    heapq.heappush(heap, (time + w, v))\n\n        return max_time if len(visited) == N else -1\n\nhttps://leetcode.com/problems/cheapest-flights-within-k-stops/ \nTwo variables at play here. There's similar question for grid as well.\nimport heapq\nfrom collections import defaultdict\n\nclass Solution:\n    def findCheapestPrice(self, n: int, flights: List[List[int]], src: int, dst: int, K: int) -> int:\n        graph = defaultdict(list)\n        visited = [float('inf') for i in range(0, n)]\n        heap = []\n\n        for u, v, w in flights:\n            graph[u].append((v, w))\n\n        heapq.heappush(heap, (0, src, 0))\n\n        while heap:\n            d, c, k = heapq.heappop(heap)\n\n            if k >= visited[c] or k > (K + 1):\n                continue\n\n            if c == dst:\n                return d\n\n            visited[c] = d\n\n            for n, n_d in graph[c]:\n                heapq.heappush(heap, (d + n_d, n, k + 1))\n\n        return -1\n\n"},"DataStructures/Graphs/GraphDFS.html":{"url":"DataStructures/Graphs/GraphDFS.html","title":"Graph DFS","keywords":"","body":"Graph DFS\nOne path at a time type questions eg. Course Scheduling \nVisit the node -> process children -> unvisit it \nIf there's a cycle, we visit the already locally visited node again \nIf we have visited the node before globally, just exit with True as we have already checked and didn't find any cycle \nhttps://leetcode.com/problems/course-schedule/\nfrom collections import defaultdict\n\nclass Solution:\n    def canFinish(self, numCourses: int, prerequisites: List[List[int]]) -> bool:\n        graph = defaultdict(list)\n        g_visited = set()\n\n        for c, p in prerequisites:\n            graph[c].append(p)\n\n        def dfs(i):\n            if i in visited:\n                return False\n\n            if i in g_visited:\n                return True\n\n            if i not in g_visited:\n                g_visited.add(i)\n\n            visited.add(i)\n\n            for j in graph[i]:\n                if not dfs(j):\n                    return False\n\n            visited.remove(i)\n            return True\n\n        for i in range(0, numCourses):\n            if i not in g_visited:\n                visited = set()\n                if not dfs(i):\n                    return False\n\n        return True\n\nhttps://leetcode.com/problems/reconstruct-itinerary/ \nWe need to store visited edges instead of visited nodes. \nEdges are stored as defaultdicts because the possibility of them repeating \nEdges are sorted because we need to return the result that comes first lexographically\nfrom collections import defaultdict\n\nclass Solution:\n    def findItinerary(self, tickets: List[List[str]]) -> List[str]:\n        graph = defaultdict(list)\n        edges = defaultdict(int)\n\n        self.itinerary = []\n\n        for s, d in tickets:\n            graph[s].append(d)\n            edges[(s, d)] += 1\n\n        for s in graph:\n            graph[s] = sorted(graph[s])\n\n        def traverse(current, path):\n            if self.itinerary:\n                return\n\n            if len(path) == (len(tickets) + 1):\n                self.itinerary = path[:]\n\n            for n in graph[current]:\n                if edges[(current, n)]:\n                    edges[(current, n)] -= 1\n                    traverse(n, path + [n])\n                    edges[(current, n)] += 1\n\n        traverse('JFK', ['JFK'])\n        return self.itinerary\n\nGreat question: Looks like a tree question but it's not! \nRealized that the edges can be bidirectional. Just needed to add visited array and augment the graph init loop \nTrees are just graphs minus the posibility of looping \nThought process similar to that of tree DFS. Fetch consolidated data from the leaves and calculate the current one (postorder).\nhttps://leetcode.com/contest/weekly-contest-198/problems/number-of-nodes-in-the-sub-tree-with-the-same-label/\nfrom collections import defaultdict\n\nclass Solution:\n    def countSubTrees(self, n: int, edges: List[List[int]], labels: str) -> List[int]:\n        result = [1] * n\n        graph = defaultdict(list)\n        visited = set()\n\n        for s, d in edges:\n            graph[s].append(d)\n            graph[d].append(s)\n\n        def traverse(node):\n            if node in visited:\n                return {}\n\n            visited.add(node)\n\n            if not graph[node]:\n                return {labels[node]: 1}\n\n            info = defaultdict(int)\n            for v in graph[node]:\n                for L, F in traverse(v).items():\n                    info[L] += F\n\n            info[labels[node]] += 1\n            result[node] = info[labels[node]]\n            return info\n\n        traverse(0)\n        return result\n\n"},"DataStructures/Graphs/TopologySort.html":{"url":"DataStructures/Graphs/TopologySort.html","title":"Topology Sort","keywords":"","body":"Topology Sort\n \nhttps://leetcode.com/problems/course-schedule-ii/\nfrom collections import deque, defaultdict\n\nclass Solution:\n    def findOrder(self, numCourses: int, prerequisites: List[List[int]]) -> List[int]:\n        graph = defaultdict(set)\n        incoming = defaultdict(set)\n        queue = deque()\n        u_set = set(range(0, numCourses))\n        topo = []\n\n        for c, p in prerequisites:\n            graph[c].add(p)\n            incoming[p].add(c)\n\n            if p in u_set:\n                u_set.remove(p)\n\n        for node in u_set:\n            queue.append(node)\n\n        while queue:\n            node = queue.popleft()\n            topo.append(node)\n\n            for nei in graph[node]:\n                incoming[nei].remove(node)\n\n                if not incoming[nei]:\n                    queue.append(nei)\n\n        return topo[::-1] if len(topo) == numCourses else []\n\nhttps://leetcode.com/problems/course-schedule-iv/\nfrom collections import defaultdict, deque\n\nclass Solution:\n    def checkIfPrerequisite(self, n: int, prerequisites: List[List[int]], queries: List[List[int]]) -> List[bool]:\n        graph = defaultdict(list)\n        incoming = defaultdict(set)\n        pre = defaultdict(set)\n\n        starts = set(range(0, n))\n        queue = deque()\n\n        for p, c in prerequisites:\n            graph[c].append(p)\n            incoming[p].add(c)\n\n            if p in starts:\n                starts.remove(p)\n\n        for s in starts:\n            queue.append(s)\n\n        while queue:\n            c = queue.popleft()\n\n            for n in graph[c]:\n                incoming[n].remove(c)\n                pre[n] = pre[n].union(pre[c].union(set([c])))\n\n                if not incoming[n]:\n                    queue.append(n)\n\n        return [c in pre[p] for p, c in queries]\n\n"},"Algorithms/":{"url":"Algorithms/","title":"Algorithms","keywords":"","body":"Algorithms\nTo Do:\nRuntimes: why heap is O(n)?\nAddition questions-> strings, lists, linked lists\nFactors/divisors questions\nstocks\nBitwise\nPalindrome questions, Linked lists\nMemoization to DP jump\nString questions: Alien dictionary\nTrie: https://leetcode.com/discuss/interview-question/643158/google-phone-faulty-keyboard\nhttps://leetcode.com/discuss/interview-question/281470/\nKadane questions* \nMay weekly contest \nK repetition maximum sum \nMatrix traversal questions \nhttps://leetcode.com/contest/weekly-contest-180/problems/lucky-numbers-in-a-matrix \nUnderstand zip function \nspiral order\nhttps://leetcode.com/explore/challenge/card/may-leetcoding-challenge/535/week-2-may-8th-may-14th/3328/ \nDesign input class (Trees, LL especially) or think about inputs (arrays, graphs, etc) \nHabit of dict.get(key, default)\nStreaming data questions: https://www.geeksforgeeks.org/tag/array-stream/\n"},"Algorithms/TrickySorting.html":{"url":"Algorithms/TrickySorting.html","title":"Tricky Sorting","keywords":"","body":"Tricky Sorting\npython sorted function can be fed a custom comparator. \nComing up with a comparator is the most important part.\nfunctools.cmp_to_key(comparator) can be used as a key to make this work.\nhttps://leetcode.com/problems/largest-number/\nimport functools\n\nclass Solution:\n    def largestNumber(self, nums: List[int]) -> str:\n        comparator = lambda x, y: 1 if x+y > y+x else -1 if x+y \n"},"Algorithms/DFSandBFS.html":{"url":"Algorithms/DFSandBFS.html","title":"DFS and BFS","keywords":"","body":"DFS and BFS\nFew notes:\n\nUse BFS if there's a need to go somewhere optimally. \neg. Minimum steps required to reach from A to B type questions, jump game questions\n\n\nUse DFS for exhaustive search in the grid where you have search everywhere, not optimal condition \neg. Find if you can create word X from the grid \n\n\nDo not forget the visited grid\n\nGeneral solutions:\nBFS\n\ncollections.deque is extremely useful: use apend and popleft for queue operations\nRun operations as long as the queue is not empty\nvisited array is an important part of the solution to avoid repetition\n\nExcellent questions:\n\nhttps://leetcode.com/problems/jump-game/ \nDFS is a little bit slower but gets the job done \nBeing greedy from the end to start works well \nhttps://leetcode.com/problems/jump-game-ii/ \nRotten oranges \nTip: \nIn such problems, implied visited through input modification is faster than visited set and step through queue element is faster than looping over queue size \neg. https://leetcode.com/problems/shortest-path-in-binary-matrix/ \n\nhttps://leetcode.com/problems/shortest-path-in-a-grid-with-obstacles-elimination/\n\nWater and jug problem\n```py\nfrom collections import deque\n\nclass Solution:\n    def shortestPath(self, grid: List[List[int]], k: int) -> int:\n        X = len(grid)\n        Y = len(grid[0])\n    visited = [[[-1, float('inf')] for i in range(0, Y)] for j in range(0, X)]\n    # x, y, steps, k-left\n    queue = deque([[0, 0, 0, k]])\n\n    while queue:\n        x, y, steps, k_left = queue.popleft()\n\n        if x = X or y = Y:\n            continue\n\n        if grid[x][y]:\n            k_left -= 1\n\n        if k_left = k_left and visited[x][y][1] \nhttps://leetcode.com/problems/water-and-jug-problem\n```py\nfrom collections import deque\n\nclass Solution:\n    def canMeasureWater(self, x: int, y: int, z: int) -> bool:\n        queue = deque([(0, 0)])\n        seen = set()\n\n        if (x + y) DFS\n\nDo not forget the visited array (you'll end up with stack limit exceeded error otherwise)\n\nhttps://leetcode.com/problems/word-search\nclass Solution:\n    def exist(self, board: List[List[str]], word: str) -> bool:\n        X = len(board)\n        Y = len(board[0])\n\n        visited = [[False for y in range(0, Y))] for x in range(X)]\n\n        def dfs(letter, x, y) -> bool:\n        # base case should be first\n            if letter == len(word):\n                return True\n\n            if x >= X or x = Y or y \n"},"Algorithms/Combinatorics.html":{"url":"Algorithms/Combinatorics.html","title":"Combinatorics","keywords":"","body":"Combinatorics\nSubsets\nReference: CC Cheat sheet book \nNote the number of recursive calls made\nTwo choices:\n\nDon't choose the element: Just make a recursive call \nChoose the element\nSelect step\nGo to the next depth\nPop out so that we don't have to instantiate the bucket\n\n\n\nclass SolutionGenerator:\n    def solution_search(self, k : int, domain: list) -> None:\n        if (k == self.n):\n            self.powerset.append(self.subset[:])\n            return\n        self.solution_search(k + 1, domain)\n        self.subset.append(domain[k])\n        self.solution_search(k + 1, domain)\n        self.subset.pop()\n\n    def _helper_generator(self, domain: list) -> list:\n        self.powerset = []\n        self.subset = []\n        self.n = len(domain)\n        self.solution_search(0, domain)\n        return self.powerset\n\nCombinations: select r out of n (nCr)\n\nRecursion base case change (==r)\nParams of recursion: s: number of selected so far; k: array item index to be processed in that call\nSimilar to normal combinations\n\nclass T:\n    def normalSubset(self, arr: list, r: int) -> list:\n        nCr = []\n        bucket = []\n        n = len(arr)\n\n        def helperNCR(s: int, k: int) -> None:\n            if(s == r):\n                nCr.append(bucket[:])\n                return\n\n            if(s > r or k == n):\n                return\n\n            helperNCR(s, k + 1)\n            bucket.append(arr[k])\n            helperNCR(s + 1, k + 1)\n            bucket.pop()\n\n        helperNCR(0, 0)\n        return nCr\n\nPermutations\nRecursive calls for every element in the loop \nNo need to add a ‘reject’ scenario \nAccept, make changes and revert after going a level deep \nFilter right after the loop using a helper array used for tracking \nhttps://leetcode.com/problems/permutations/\nclass Solution:\n    def permute(self, nums: List[int]) -> List[List[int]]:\n        if not nums:\n            return []\n\n        result = []\n        visited = [False for i in range(0, len(nums))]\n\n        def backtrack(bucket):\n            if len(bucket) == len(nums):\n                result.append(bucket[:])\n                return \n\n            for j in range(0, len(nums)):\n                if visited[j]:\n                    continue\n\n                visited[j] = True\n                backtrack(bucket + [nums[j]])\n                visited[j] = False\n\n\n        backtrack([])\n        return result\n\nhttps://leetcode.com/problems/largest-time-for-given-digits/\nclass Solution:\n    def largestTimeFromDigits(self, A: List[int]) -> str:\n        D = sorted(A, reverse=True)\n        included = [False] * 4\n        bucket = \"\"\n        self.T = \"\"\n\n        def permute(bucket):\n            if self.T:\n                return\n\n            n = len(bucket)\n            if n == 1 and int(bucket) > 2:\n                return\n\n            if n == 2 and int(bucket) > 23:\n                return\n\n            if n == 3 and int(bucket[2]) > 5:\n                return\n\n            if n == 4 and int(bucket[2: 4]) > 59:\n                return \n\n            if n == 4:\n                self.T = bucket[0: 2] + ':' + bucket[2: 4]\n\n            for i in range(0, 4):\n                if included[i]:\n                    continue\n\n                included[i] = True\n                permute(bucket + str(D[i]))\n                included[i] = False\n\n        permute(bucket)\n        return self.T\n\nAdditional questions:\nhttps://leetcode.com/problems/combination-sum/discuss/16510/Python-dfs-solution.\nTo allow repetition, go to the same node after select. \nself.recurse(k, domain)\nUnique permutations\nhttps://leetcode.com/problems/permutations-ii/\nfrom collections import Counter\n\nclass Solution:\n    def permuteUnique(self, nums: List[int]) -> List[List[int]]:\n        counter = Counter(nums)\n        result = []\n\n        def backtrack(bucket, counter):\n            if len(bucket) == len(nums):\n                result.append(bucket[:])\n                return\n\n            for num in counter:\n                if not counter[num]:\n                    continue\n\n                counter[num] -= 1\n                backtrack(bucket + [num], counter)\n                counter[num] += 1\n\n        backtrack([], counter)\n        return result\n\n"},"Algorithms/Backtracking.html":{"url":"Algorithms/Backtracking.html","title":"Backtracking and Complete Search","keywords":"","body":"Backtracking and Complete Search\nExhaustive search for an answer:\nCheck every possible option and see if a solution exists: (very similar to permutation problems) \nhttps://leetcode.com/problems/jump-game \nAccept one of the options at each step \nEmptying the bucket is not necessary \npublic class Solution {\n    public boolean canJumpFromPosition(int position, int[] nums) {\n        if (position == nums.length - 1) {\n            return true;\n        }\n\n        int furthestJump = Math.min(position + nums[position], nums.length - 1);\n        for (int nextPosition = position + 1; nextPosition \nGrid DFS\nSolution of https://leetcode.com/problems/path-with-maximum-gold/ :\ndef dfs(self, i: int, j: int, sum: int, seen: set) -> int:\n    # constraints\n    if(i = m or j = n or not grid[i][j] or (i, j) in seen):\n        return sum\n    # add to the 'visited' set\n    seen.add((i, j))\n    # update current target\n    sum += grid[i][j]\n    # set maximum target\n    maximumSum = 0\n\n    # directions to move in\n    for x, y in ((i, j + 1), (i , j - 1), (i + 1, j), (i - 1, j)):\n    # The actual recursion step\n        maximumSum = max(self.dfs(x, y, sum, seen), maximumSum)\n    # remove from the 'visited' set after recursion \n    seen.discard((i, j))\n    return maximumSum\n\ndef getMaximumGold(self, grid: List[List[int]]) -> int:\n    m, n = len(grid), len(grid[0])\n    return max(self.dfs(i, j, 0, set()) for j in range(n) for i in range(m))\n\nhttps://leetcode.com/problems/2-keys-keyboard/submissions/ \nReturn types should be taken care of. \n\nBase condition\nLimiting condition if required (Use INTMAX for min recursion, INTMIN for max recursion)\nActual recursion\n\nclass Solution:\n    def _helperCopyPaste(self, n: int, current: int, copied: int) -> int:\n        if(current == n):\n            return 0\n        if(current > n):\n            return 3000\n        return min(2 + self._helperCopyPaste(n, current + current, current),\n                   1 + self._helperCopyPaste(n, current + copied, copied))\n\n    def minSteps(self, n: int) -> int:\n        if(n == 1):\n            return 0\n        return 1 + self._helperCopyPaste(n, 1, 1)\n\nhttps://leetcode.com/problems/number-of-ways-to-wear-different-hats-to-each-other/ \nFor selected param, we can use bits. For memo array, we can use functools.lru_cache \nGenerate parentheses\nKeep a count of open and closed ones. \nSuccess cases: string length 2  n and stack == 0 \nFailure cases: string length 2  n and stack != 0 OR stack  n \nWe just backtrack:\n            backtrack(current + '(', stack + 1)\n            backtrack(current + ')', stack - 1)\n\n"},"Algorithms/BinarySearch.html":{"url":"Algorithms/BinarySearch.html","title":"Binary Search","keywords":"","body":"Binary Search\nGood article: https://leetcode.com/discuss/general-discussion/786126/python-powerful-ultimate-binary-search-template-solved-many-problems\nIterative solutions are quicker than the recursive ones. \nIt's necessary to understand where BS terminates. This can answer a lot of questions. It's the start when you want to check the appropriate place for a num in sorted array \nDecide what direction we have to go in case of equality. Minimum of such solutions or maximum, etc \nOne of these things should be done: \nRemember: we should never have a case where start  and somehow start or end do not change.\n\n(start  loop) include mid in the next iteration. i.e. instead of end = mid - 1, use end = mid; same thing for start.\n(start  loop) somehow get the equality thing sorted; decrement end or start: LeetCode 154\n\nGood problem set:\n\nhttps://leetcode.com/discuss/general-discussion/691825/binary-search-for-beginners-problems-patterns-sample-solutions\n\nhttps://leetcode.com/problems/minimum-number-of-days-to-make-m-bouquets\nclass Solution:\n    def minDays(self, bloomDay: List[int], m: int, k: int) -> int:\n        n = len(bloomDay)\n        start = bloomDay[0]\n        end = bloomDay[0]\n\n        if m * k > n:\n            return -1\n\n        for day in bloomDay:\n            start = min(start, day)\n            end = max(end, day)\n\n        def verify(mid):\n            streak = 0\n            req = m\n\n            for i, day in enumerate(bloomDay):\n                if mid >= day:\n                    streak += 1\n\n                if mid \nhttps://leetcode.com/problems/sum-of-mutated-array-closest-to-target/\nclass Solution:\n    def findBestValue(self, arr: List[int], target: int) -> int:\n        start = 0\n        end = arr[0]\n        diff = float('inf')\n        result = float('inf')\n\n        for num in arr:\n            end = max(end, num)\n\n        def calc_sum(mid):\n            return sum(i if i = 0:\n                end = mid - 1\n            else:\n                start = mid + 1\n\n        return result\n\nhttps://leetcode.com/problems/find-minimum-in-rotated-sorted-array/\nclass Solution:\n    def findMin(self, nums: List[int]) -> int:\n        start = 0\n        end = len(nums) - 1\n\n        while start  nums[end]:\n                start = mid + 1\n\n        return nums[start]\n\nhttps://leetcode.com/problems/find-minimum-in-rotated-sorted-array-ii/ \nUnlike the (i) problem, in case of equality, we need to reduce the end by 1.\nclass Solution:\n    def findMin(self, nums: List[int]) -> int:\n        start = 0\n        end = len(nums) - 1\n        result = nums[0]\n\n        if nums[start]  nums[end]:\n                start = mid + 1\n            else:\n                end -= 1\n\n        return nums[start]\n\nhttps://leetcode.com/problems/capacity-to-ship-packages-within-d-days/\nclass Solution:\n    def shipWithinDays(self, weights: List[int], D: int) -> int:\n        start = float('-inf')\n        end = 0\n\n        for i, w in enumerate(weights):\n            start = max(start, w)\n            end += w\n\n        def can_carry(capacity):\n            current = 0\n            days = 1\n\n            for w in weights:\n                current += w\n                if current  D:\n                    return False\n\n            return days \n"},"Algorithms/BucketTrick.html":{"url":"Algorithms/BucketTrick.html","title":"Bucket Trick","keywords":"","body":"Bucket Trick\nThis is inspired from bucket sort. Hashes are good for equalities but not for comparison or range operations, unless we want our search code to run in linear time.\nThis problem illustrates its use perfectly: \nWe use sliding window + buckets here. t buckets to facilitate this. \nIf two numbers are in the same bucket, we have found our solution. If they are in the neightboring buckets, they 'can' a possible solution.\nhttps://leetcode.com/problems/contains-duplicate-iii/\nclass Solution:\n    def containsNearbyAlmostDuplicate(self, nums: List[int], k: int, t: int) -> bool:\n        state = {}\n        w = k + 1\n\n        for i, n in enumerate(nums):\n            b = n // (t + 1)\n\n            # maintain sliding window\n            if i >= w:\n                del state[nums[i - w] // (t + 1)]\n\n            if b in state:\n                return True\n\n            if b - 1 in state and abs(state[b - 1] - n) \n"},"Algorithms/Bitwise.html":{"url":"Algorithms/Bitwise.html","title":"Bitwise","keywords":"","body":"Bitwise\nToggle j-th bit: vowel_set ^= (1  \nWe can use this to store all even or imperfect dict of a set (See longest substring vowel question)\nhttps://leetcode.com/explore/challenge/card/may-leetcoding-challenge/537/week-4-may-22nd-may-28th/3343/\nclass Solution:\n    def countBits(self, num: int) -> List[int]:\n        bits = [0] * (num + 1)\n\n        bits[0] = 0\n        last_power = 0\n        power_val = 1\n\n        for i in range(1, num + 1):\n            if i == power_val:\n                last_power = power_val\n                power_val *= 2\n                bits[i] = 1\n                continue\n\n            if power_val > i:\n                bits[i] = (bits[i - last_power] + 1)\n\n        return bits\n\nhttps://leetcode.com/problems/find-the-longest-substring-containing-vowels-in-even-counts/\nclass Solution:\n    def findTheLongestSubstring(self, s: str) -> int:\n        P = []\n        imperfect = {64: -1}\n        max_len = 0\n\n        if not len(s):\n            return 0\n\n        vowels = set(['a', 'e', 'i', 'o', 'u'])\n        vowel_set = 1 \nhttps://leetcode.com/problems/power-of-two/\nTrick: If a number is a power of 2, n & (n - 1) == 0\n"},"Algorithms/DynamicProgramming-I.html":{"url":"Algorithms/DynamicProgramming-I.html","title":"Dynamic Programming I","keywords":"","body":"Dynamic Programming\nDynamic programming is a technique that combines the correctness of complete search and the efficiency of greedy algorithms. Dynamic programming can be applied if the problem can be divided into overlapping subproblems that can be solved independently.\nWe should always go: recursive solution -> memoization -> Dynamic Programming \nThere are a lot of memoization solved problems in leetcode -> Top interview questions -> DP \nMemoization basically insures that we solve a particular subproblem only once to improve runtime\nRecursive solution: For problems with structure of take or leave, check how it depends on previous values and recurse conditionally: make except and include cases and take max or min. eg. coin-change, LIS, perfect squares, word break, etc  \nHalf the problem is solved once you figure out that the problem is a DP one\nTemplate: https://leetcode.com/discuss/general-discussion/651719/how-to-solve-dp-string-template-and-4-steps-to-be-followed\nThere are two uses for dynamic programming:\n\nFinding an optimal solution: We want to find a solution that is as large as possible or as small as possible.\nCounting the number of solutions: We want to calculate the total number of possible solutions.\n\n1. Optimal Solution\neg. 0/1 Knapsack, partitions: exact sum, minimum sum difference, leetcode 1035\nKnapsack program:\nclass Solution:\n    def knapsack(self, weights, values, bag_weight):\n        table = [[0] * (bag_weight + 1)] for _ in (len(values) + 1)]\n\n        for i in range(0, len(values)+ 1):\n            for weight in range(0, bag_weight + 1):\n                if(i == 0 or weight == 0):\n                    table[i][weight] = 0\n                elif(weight \nSimilar problem for a 1D array\nhttps://leetcode.com/problems/house-robber/ \nRecursive solution is intuitive\nclass Solution:\n    def rob(self, nums: List[int]) -> int:\n        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return nums[0]\n\n        def recurse(current: int, i: int) -> int:\n            if i >= n:\n                return current\n\n            return max(\n                recurse(current, i + 1),\n                recurse(current + nums[i], i + 2)\n            )\n\n        return recurse(0, 0)\n\nSolution using DP:\nclass Solution:\n    def rob(self, nums: List[int]) -> int:\n        n = len(nums)\n\n        if n == 0:\n            return 0\n        if n == 1:\n            return nums[0]\n\n        memo = [0] * n\n        memo[0] = nums[0]\n        memo[1] = max(nums[0], nums[1])\n\n        for i in range(2, n):\n            memo[i] = max(memo[i - 1], memo[i - 2] + nums[i])\n\n        return memo[n - 1]\n\nFor exact sum subsets and minimum difference subsets: \nTrue or False for each cell. Use or instead of max(include, exclude)\nNeed to have another loop over the table to find the 'pivot'\nFor minimum difference, find a True cell and that causes the least difference \n(total_sum - 2 * cell_column)\nFor the minimum number of squares required to get the sum, similar to the exact sum subarray. Rather than True or False, maintain the number of squares required for the sum\n2. Number of solutions\neg. Climbing stairs (LeetCode 70), unique-paths \nhttps://leetcode.com/problems/unique-paths/submissions/ \nRecursive solution: \nclass Solution:\n    def uniquePaths(self, m: int, n: int) -> int:\n        X = n\n        Y = m\n        visited = [[False for i in range(0, Y)] for j in range(0, X)]\n\n        def dfs(x: int, y: int) -> int:\n            if x = X or y = Y:\n                return 0\n\n            if visited[x][y]:\n                return 0\n\n            if x == (X - 1) and y == (Y - 1):\n                return 1\n\n            visited[x][y] = True\n\n            total = dfs(x + 1, y) + \\\n                    dfs(x, y + 1) \n\n            visited[x][y] = False\n\n            return total\n\n        return dfs(0, 0)\n\nDP Solution: \nclass Solution:\n    def uniquePaths(self, m: int, n: int) -> int:\n        X = n\n        Y = m\n\n        if X == 0 and Y == 0:\n            return 0\n\n        if X == 1 and Y == 1:\n            return 1\n\n        if X == 1:\n            return 1\n\n        if Y == 1:\n            return 1\n\n        memo = [[0 for y in range(0, Y)] for x in range(0, X)]\n\n        for x in range(0, X):\n            for y in range(0, Y):\n                if x == 0 and y == 0:\n                    memo[x][y] = 1\n                    continue\n\n                if x == 0 or y == 0:\n                    memo[x][y] = 1\n                    continue\n\n                memo[x][y] = memo[x - 1][y] + memo[x][y - 1]\n\n        return memo[X - 1][Y - 1]\n\nUnique paths II is similar but we set count to 0 in case there is an obstruction. \nFor row and column cells, row[i] = row[i - 1] and similar to columns \nRest is similar\nSimilar problem for a 1D array\nClimbing stairs: \nFor each step, there are multiple choices, generally 2. \nBrute force solution goes something like this:\nclass Solution:\n    def solution_function(self, n):\n        if(success_base_case):\n           return 1\n        if(failure_base_case):\n           return 0\n\n    return self.solution_function(case_one, n) + self.solution_function(case_two, n)\n\nTime Complexity: O(2^n) - tree size\nCheck if the problem satisfies Optimal Substructure Property \nFind an equation for the answer \nHere,\ndp[n] = dp[n  -  1] + dp[n - 2] #(climb stairs case)\n\ndp = [0] * (n + 1)\ndp[0] = 0\ndp[1] = 1\ndp[2] = 2\n\nfor i in range(3, n):\n            dp[i] = dp[i - 1] + dp[i - 2]\nreturn dp[n]\n\nFrom Leetcode:\n\nUsually, solving and fully understanding a dynamic programming problem is a 4 step process: \n\nStart with the recursive backtracking solution\nOptimize by using a memoization table (top-down dynamic programming)\nRemove the need for recursion (bottom-up dynamic programming)\nApply final tricks to reduce the time / memory complexity\n\n\n"},"Algorithms/DynamicProgramming-II.html":{"url":"Algorithms/DynamicProgramming-II.html","title":"Dynamic Programming II","keywords":"","body":"Step-by-step solved DP problems\nEssential leetcode questions for practice:\nDecode Ways \nWord Break \nPerfect Squares \nCoin-change \nLIS \nLCS  \nDecent problemset: https://blog.usejournal.com/top-50-dynamic-programming-practice-problems-4208fed71aa3 \nVisualize the overlap with the recursion tree diagram given on the \"Solution explaination\" pages. \nLongest Common Subsequence\nhttps://leetcode.com/problems/longest-common-subsequence/ \nSolution explaination: https://www.techiedelight.com/longest-common-subsequence/ \nRecursion:\nclass Solution:\n    def longestCommonSubsequence(self, text1: str, text2: str) -> int:\n        def LCS(m, n):\n            if not m or not n:\n                return 0\n\n            if text1[m - 1] == text2[n - 1]:\n                return LCS(m - 1, n - 1) + 1\n\n            return max(LCS(m - 1, n), \\\n                       LCS(m, n - 1))\n\n        return LCS(len(text1), len(text2))\n\nRecursion + Memoization\nclass Solution:\n    def longestCommonSubsequence(self, text1: str, text2: str) -> int:\n        memo = dict()\n\n        def LCS(m, n):\n            if (m, n) in memo:\n                return memo[(m, n)]\n\n            if not m or not n:\n                memo[(m, n)] = 0\n                return memo[(m, n)]\n\n            if text1[m - 1] == text2[n - 1]:\n                memo[(m, n)] = LCS(m - 1, n - 1) + 1\n            else:\n                memo[(m, n)] =  max(LCS(m - 1, n), \\\n                                    LCS(m, n - 1))\n\n            return memo[(m, n)]\n\n        return LCS(len(text1), len(text2))\n\nDP\nclass Solution:\n    def longestCommonSubsequence(self, text1: str, text2: str) -> int:\n        X = len(text2)\n        Y = len(text1)\n\n        dp = [[0 if x == 0 or y == 0 else -1 for y in range(0, Y + 1)] \\\n              for x in range(0, X + 1)]\n\n        for x in range(1, X + 1):\n            for y in range(1, Y + 1):\n                if text1[y - 1] == text2[x - 1]:\n                    dp[x][y] = 1 + dp[x - 1][y - 1]\n                else:\n                    dp[x][y] = max(dp[x - 1][y], dp[x][y - 1])\n\n        return dp[X][Y]\n\nLongest Palindromic Subsequence\nhttps://leetcode.com/problems/longest-palindromic-subsequence/ \nSolution explaination: https://www.techiedelight.com/longest-palindromic-subsequence-using-dynamic-programming/ \nRecursion:\nclass Solution:\n    def longestPalindromeSubseq(self, s: str) -> int:\n        n = len(s)\n\n        def LPS(m, n):\n            if m > n:\n                return 0\n\n            if m == n:\n                return 1\n\n            if s[m] == s[n]:\n                return LPS(m + 1, n - 1) + 2\n            else:\n                return max(LPS(m + 1, n), \\\n                           LPS(m, n - 1))\n\n        return LPS(0, n - 1)\n\nRecursion + Memoization\nclass Solution:\n    def longestPalindromeSubseq(self, s: str) -> int:\n        n = len(s)\n        memo = dict()\n\n        def LPS(m, n):\n            if m > n:\n                return 0\n\n            if (m, n) in memo:\n                return memo[(m, n)]\n\n            if m == n:\n                memo[(m, n)] = 1\n                return memo[(m, n)]\n\n            if s[m] == s[n]:\n                memo[(m, n)] = LPS(m + 1, n - 1) + 2\n            else:\n                memo[(m, n)] = max(LPS(m + 1, n), \\\n                                   LPS(m, n - 1))\n\n            return memo[(m, n)]\n\n        return LPS(0, n - 1)\n\n"},"Algorithms/DynamicProgramming-III.html":{"url":"Algorithms/DynamicProgramming-III.html","title":"Dynamic Programming III","keywords":"","body":"Combination sum and coin-change problems\nMultiple combinations possible: \nAll the possible ways to reach at the sum/amount: \n    Unique sets: https://leetcode.com/problems/combination-sum/ \n    Unique combinations: https://leetcode.com/problems/combination-sum-iv/ \n    Unique combinations (including unique values at indices as well): https://leetcode.com/problems/combination-sum-ii/ \nFind min steps to reach at the sum/amount: https://leetcode.com/problems/coin-change/ \nFind total number of ways to reach at the sum/amount https://leetcode.com/problems/coin-change-2/\nDifferent constraints: https://leetcode.com/problems/combination-sum-iii/ \nThere is no other way than backtracking for finding the actual sets\n\nRecursive solution:\nRule of thumb: \n\nIf you want to check the min number of steps necessary, recursive call should read: \nmin_steps = float('inf')\nfor j in range(i, len(coins)):\n    min_steps = min(min_steps, 1 + backtrack(j, current + coins[j]))\n\nSuccess cases should return 0 \nFailure cases (out of bounds): (i == n or current > amount) should return float('inf')  \nIf you want to know the total number of ways to reach at the amount/sum: \ntotal_steps = 0\nfor j in range(i, len(coins)):\n    total_steps += backtrack(j, current + coins[j])\n\nSuccess cases should return 1 \nFailure cases (out of bounds): (i == n or current > amount) should return 0  \nNotice how j runs from i to len(coins). This is if we don't want (1, 6, 1) again if (1, 1, 6) is already included\nTop-down recursion/ memoization\nThis is an intuitive step \nDeclare memo dict and store results\nDP\nThink from the perspective of constant amount \nfor all the coins, we want to take min or add \n\n        for i in range(1, amount + 1):\n            for coin in coins:\n                if i \nFor coin change 2, we need to run these loops in the reverse order as we have to eliminate duplicate combinations and we don't necessarily need to find a \"complete\" answer for a previous target.\nSimilar idea: \nhttps://leetcode.com/problems/word-break-ii/ \nclass Solution:\n    def wordBreak(self, s: str, wordDict: List[str]) -> List[str]:\n        dp = [[] for i in range(0, len(s) + 1)]\n\n        # check of there's any character in the \n        # string that's just \n        # not present in wordDict\n        s_set = set(s)\n        for word in wordDict:\n            s_set -= set(word)\n\n        if s_set:\n            return []\n\n        for i in range(0, len(dp)):\n            for word in wordDict:\n                if not s[:i].endswith(word):\n                    continue\n\n                if len(word) == i:\n                    dp[i].append(word)\n                    continue\n\n                for match in dp[i - len(word)]:\n                    dp[i].append(match + \" \" + word)\n\n        return dp[-1]\n\nhttps://leetcode.com/problems/knight-dialer/ \nWe need to store current dp; which represents the state after given hop. \nFor a given hop, we jump to the possible destinations; this value needs to be preserved as the updated one will change destination's calculations. So, we save that state and compute.\nclass Solution:\n    def knightDialer(self, N: int) -> int:\n        dp = [1 for i in range(0, 10)]\n        hops = [(4, 6), (6, 8), (7, 9), (4, 8), \\\n                (0, 3, 9), [], (0, 1, 7), (2, 6), (1, 3), (2, 4)]\n\n        mod = 10 ** 9 + 7\n\n        for hop in range(0, (N - 1)):\n            dp1 = [0] * 10\n\n            for pos in range(0, 10):\n                for n in hops[pos]:\n                    dp1[n] += (dp[pos] % mod)\n            dp = dp1\n\n        return sum(dp) % mod\n\nhttps://leetcode.com/problems/sqrtx/\nBinary Search will take us to the closest point of the answer\nclass Solution:\n    def mySqrt(self, x: int) -> int:\n        start = 0\n        end = x\n\n        while start  x:\n                end = mid - 1\n            else:\n                start = mid + 1\n\n        return start if start * start \n"},"Algorithms/DynamicProgramming-IV.html":{"url":"Algorithms/DynamicProgramming-IV.html","title":"Dynamic Programming IV","keywords":"","body":"Dynamic Programming IV\nTwo properties of DP problems: \n\nOptimal substructure \nOverlapping subproblems\n\nThis about how can we reach to the current positions from different other places. \nNeed to use and auxillary array sometimes (knight dialer) \nOtherwise, if it depends only on the past results, just the current one if enough. \nhttps://leetcode.com/explore/challenge/card/june-leetcoding-challenge/543/week-5-june-29th-june-30th/3375/\nclass Solution:\n    def uniquePaths(self, m: int, n: int) -> int:\n        X = n\n        Y = m\n\n        dp = [[0 for y in range(Y)] for x in range(X)]\n        dp[0][0] = 1\n\n\n        for x in range(X):\n            for y in range(Y):\n                if x == 0 and y == 0:\n                    continue\n\n                if x == 0:\n                    dp[x][y] = dp[x][y - 1]\n                    continue\n\n                if y == 0:\n                    dp[x][y] = dp[x - 1][y]\n                    continue\n\n                dp[x][y] = dp[x - 1][y] + dp[x][y - 1]\n\n        return dp[-1][-1]\n\n"},"Miscellaneous/":{"url":"Miscellaneous/","title":"Miscellaneous","keywords":"","body":"Miscellaneous\n"},"Miscellaneous/Stocks.html":{"url":"Miscellaneous/Stocks.html","title":"Stocks","keywords":"","body":"Stocks\n1 transaction\nhttps://www.geeksforgeeks.org/maximum-difference-between-two-elements/ \nKeep track of the minimum element found so far, calculate the difference between the current and minimum found so far. \nUpdate the maximum difference if necessary.\nAt most 2 transactions\nhttps://www.geeksforgeeks.org/maximum-profit-by-buying-and-selling-a-share-at-most-twice/ \nA similar approach to one transaction limit, maintain the minimum till that element and similar for i + 1 and till the end of the List.\nAny number of transactions\nhttps://www.geeksforgeeks.org/stock-buy-sell/ \nLocal minima List[i] = List[i + 1]\nBuy at local minima and sell at local maxima\nAny number of transactions with transaction fee\n\nCan use this for any number of transactions with fee == 0 \nhttps://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/ \nAt the end of the i-th day, we maintain cash, the maximum profit we could have if we did not have a share of stock, and hold, the maximum profit we could have if we owned a share of stock.\n\nTo transition from the i-th day to the i+1-th day, we either sell our stock \ncash = max(cash, hold + prices[i] - fee) or \nbuy a stock \nhold = max(hold, cash - prices[i]) \nAt the end, we want to return cash. We can transform cash first without using temporary variables because selling and buying on the same day can't be better than just continuing to hold the stock.\nclass Solution(object):\n    def maxProfit(self, prices, fee):\n        cash, hold = 0, -prices[0]\n        for i in range(1, len(prices)):\n            cash = max(cash, hold + prices[i] - fee)\n            hold = max(hold, cash - prices[i])\n        return cash\n\nK number of transactions\nhttps://leetcode.com/problems/best-time-to-buy-and-sell-stock-iv/discuss/54117/Clean-Java-DP-solution-with-comment \nDynamic programming\n"},"Miscellaneous/Intervals.html":{"url":"Miscellaneous/Intervals.html","title":"Intervals","keywords":"","body":"Interval problems\nTemplate for simple questions like: \n\n435 Non-overlapping Intervals \n56 Merge Intervals \n252 Meeting Rooms\n253 Meeting Rooms II \nhttps://leetcode.com/problems/interval-list-intersections/solution/ \n\nFor trivial questions, we sort based on the starting time. \nhttps://leetcode.com/problems/non-overlapping-intervals/\nclass Solution:\n    def eraseOverlapIntervals(self, intervals: List[List[int]]) -> int:\n        intervals = sorted(intervals, key = lambda x: x[0])\n        min_end = float('-inf')\n        removed = 0\n\n        for start, end in intervals:\n            if start >= min_end:\n                min_end = end \n            else:\n                removed += 1\n                min_end = min(min_end, end)\n\n        return removed\n\nhttps://leetcode.com/problems/minimum-number-of-arrows-to-burst-balloons/\nclass Solution:\n    def findMinArrowShots(self, points: List[List[int]]) -> int:\n        intervals = sorted(points, key = lambda x: x[0])\n        min_end = float('-inf')\n        arrows = 0\n\n        for start, end in intervals:\n            if start \nhttps://leetcode.com/problems/merge-intervals/ \nIn case of overlap, stretch the previous one (last one in the intervals list); do not push\nclass Solution:\n    def merge(self, intervals: List[List[int]]) -> List[List[int]]:\n        if not intervals:\n            return intervals\n\n        intervals = sorted(intervals, key = lambda x: x[0])\n        result = []\n\n        for start, end in intervals:\n            if not result or (start > result[-1][1]):\n                result.append([start, end])\n            else:\n                result[-1][1] = max(result[-1][1], end)\n\n        return result\n\nhttps://leetcode.com/problems/insert-interval/ \nVery similar to merge intervals. In case of overlap, do not push to the result; stretch the newInterval\nclass Solution:\n    def insert(self, intervals: List[List[int]], newInterval: List[int]) -> List[List[int]]:\n        result = []\n        n_s, n_e = newInterval\n        pushed = False\n\n        for s, e in intervals:\n            if e \nhttps://leetcode.com/problems/course-schedule-iii/ \nSorting + max_heap \nSort based on ending times, accept courses if possible \nIf we can't check if we can remove something from the accepted set and select the one which makes our time compact\n"},"Miscellaneous/Parenthesis.html":{"url":"Miscellaneous/Parenthesis.html","title":"Parenthesis","keywords":"","body":"Parenthesis questions\n\nhttps://leetcode.com/problems/valid-parentheses/\nhttps://leetcode.com/problems/generate-parentheses/\nhttps://leetcode.com/problems/valid-parenthesis-string/\nhttps://leetcode.com/problems/minimum-remove-to-make-valid-parentheses/\n\nValid parenthesis \nSimple idea. Push to the stack if it's an open one; pop if it's a matching closing one. \nIf the stack is empty and we encounter a closed one, that's an instant False\nGenerate parentheses\nKeep a count of open and closed ones. \nSuccess cases: string length 2  n and stack == 0 \nFailure cases: string length 2  n and stack != 0 OR stack  n \nWe just backtrack:\n            backtrack(current + '(', stack + 1)\n            backtrack(current + ')', stack - 1)\n\nValid parenthesis string\nBacktrack different possibilities \n'*' comes in every backtrack call based on character \nTop-down backtrack is very intuitive\n\n            memo[(i, stack)] = False\n\n            if s[i] in ['(', '*']:\n                memo[(i, stack)] = memo[(i, stack)] or \\\n                                   backtrack(i + 1, stack + 1)\n\n            if s[i] == '*':\n                memo[(i, stack)] = memo[(i, stack)] or \\\n                                   backtrack(i + 1, stack)\n\n            if s[i] in [')', '*']:\n                if not stack:\n                    return memo[(i, stack)]\n\n                memo[(i, stack)] = memo[(i, stack)] or \\\n                                   backtrack(i + 1, stack - 1)\n\nTricky: https://leetcode.com/problems/minimum-remove-to-make-valid-parentheses/ \nIf it's a normal character, extend current string \nIf it's a (, push the whole thing on stack and make current an empty string \nIf it's a ), pop one from the stack + ( + current + )\nReturn return ''.join(stack) + current\nclass Solution:\n    def minRemoveToMakeValid(self, s: str) -> str:\n        stack = []\n        current = ''\n\n        for c in s:\n            if c == '(':\n                stack.append(current)\n                current = ''\n            elif c == ')':\n                if stack:\n                    current = stack.pop() + '(' + current + ')'\n            else:\n                current += c\n\n        return ''.join(stack) + current\n\n"},"Miscellaneous/InterestingMiscellaneous.html":{"url":"Miscellaneous/InterestingMiscellaneous.html","title":"Interesting Miscellaneous","keywords":"","body":"Need to find nth smallest or largest\nUse max or min-heap or partial sort: quicksort variation \nA better way to achieve this is to create a heap of size k (target) first. For finding max k, use min-heap and vice-versa. \nhttps://leetcode.com/explore/challenge/card/july-leetcoding-challenge/546/week-3-july-15th-july-21st/3393/\nLRU cache:   https://leetcode.com/problems/lru-cache/ \nSimple dict py-3\nPriority queues\n1383: https://leetcode.com/contest/weekly-contest-180/problems/maximum-performance-of-a-team/ \nSolution: https://leetcode.com/problems/maximum-performance-of-a-team/discuss/539797/C%2B%2BPython-Priority-Queue\n857: https://leetcode.com/problems/minimum-cost-to-hire-k-workers/\n621: https://leetcode.com/problems/task-scheduler/ \nA really good question. Used 3 different data structures. \nFirst of all, we need an always sorted list of tasks and their remaining frequency. \ndict + max-heap is the best combo here \nThen, the general algo for each cycle of steps (n + 1) is as follows: \n\nPop from the heap and schedule it.\nPush this to queue if it's remaining freq is > 1 (careful with the negative sign as it's a max-heap)\nIncrease the count by 1\nIf there's nothing in the heap AND the queue, return the result count\n\nimport heapq\n\nclass Solution:\n    def leastInterval(self, tasks: List[str], n: int) -> int:\n        freq = dict()\n        heap = []\n        queue = []\n        count = 0\n        result = []\n\n        for T in tasks:\n            if freq.get(T, 0):\n                freq[T] += 1\n            else:\n                freq[T] = 1\n\n        for t, c in freq.items():\n            heapq.heappush(heap, (-c, t))\n\n        while heap:\n            for i in range(0, n + 1):\n                if heap:\n                    c, t = heapq.heappop(heap)\n                    result.append(t)\n\n                    if c != -1:    \n                        queue.append((c + 1, t))\n                    count += 1\n\n                    if not heap and not queue:\n                        print(\">> loop exit\")\n                        return count\n                else:\n                    count += 1\n                    result.append('-')\n\n            while queue:\n                heapq.heappush(heap, queue.pop())\n\n        return count\n\nSort colors\nhttps://leetcode.com/explore/challenge/card/june-leetcoding-challenge/540/week-2-june-8th-june-14th/3357/ \nThe trick is to maintain all-red pointer on its left, all-blue on its right and an iterator to just swap with red one if it's red and same for blue. Stop if you encounter the blue one.\nSimilar \nhttps://leetcode.com/problems/move-zeroes/submissions/\nclass Solution:\n    def moveZeroes(self, nums: List[int]) -> None:\n        \"\"\"\n        Do not return anything, modify nums in-place instead.\n        \"\"\"\n        n = len(nums)\n        i = 0\n        non = 0\n\n        while i \nhttps://leetcode.com/problems/find-all-duplicates-in-an-array/ \nOne of those questions where you'd have to read question description properly.\nclass Solution:\n    def findDuplicates(self, nums: List[int]) -> List[int]:\n        result = []\n\n        for i, n in enumerate(nums):\n            if nums[abs(n) - 1] \n"},"PythonicTricks/":{"url":"PythonicTricks/","title":"Pythonic Tricks","keywords":"","body":"Pythonic Tricks\nINT_MAX:\nINT_MAX = float('inf')\n\nINT_MIN:\nINT_MIN = float('-inf')\n\nConvert list into a dictionary\n{item[0]: item[1:] for item in list}\n\nSort dictionary by value\n{k: v fo r k, v in sorted(x.items(), key=lambda item: item[1])}\n\nMost frequent in an array or a string\nfrom collections import Counter\nC = Counter(list/string)\nC.most_common(n) #returns a list of top n\n\nOr we can just keep track of the most frequent element while going throught the list\nheapq insert with priority\nimport heapq\nheap = []\nheapq.heappush(heap, (priority, item))\nEfficient looping:\ns can be a list or a string\nfor i, c in enumerate(s):\n    # i is index\n    # c is s[i]\n\nMemoization\nWe can use LRU cache to store function results \nhttps://dbader.org/blog/python-memoization \nUse functools.lru_cache \nimport functools\n\n@functools.lru_cache(maxsize=None)\ndef fib_lru_cache(n):\n\nlist.insert(index, elem)\nThe last one gets the priority\n"},"BehavioralQuestions.html":{"url":"BehavioralQuestions.html","title":"Behavioral Questions","keywords":"","body":"Behavioral Questions\n\nWhat was a challenge or problem that you faced?\nTell me about a time when you were not able to deliver on time and what did you do?\nIs it better to have direct interaction with the customer?\nAnd some follow up questions based on my answers \n\n\nAll my answers were drawn from experience, I made sure I mentioned specifics, not just a vague answer. One answer from my recent graduate college project, two from my previous work experience.\n\n"}}}