{"index":{"version":"0.5.12","fields":[{"name":"title","boost":10},{"name":"keywords","boost":15},{"name":"body","boost":1}],"ref":"url","documentStore":{"store":{"./":["code","competit","introduct","note"],"GeneralInstructions.html":["abstract","approach","avoid","bracket","brute","built","class","class,","code","decor","docstr","first","forc","function","further","gener","getter","helper","improv","instruct","keep","level","librari","maintain","methods,","mistak","oop:","optim","possibl","possible:","problem","property,","python","readabl","rememb","runtim","setter","solv","stupid","us","variabl","write"],"DataStructures/":["&","data","question","standard","structur"],"DataStructures/Arrays/":["'quirky'","(1)","+","3",":","array","binari","check","element","element/","find","gener","greater","hash","help","https://leetcode.com/problems/next","https://www.geeksforgeeks.org/maximum","https://www.geeksforgeeks.org/next","increas","instructions:","length","on","permutation/solution/","posit","post","power","pre","prioriti","problem","question","remov","search","similar","sort","stack","strictli","sub","valu","weapon"],"DataStructures/Arrays/TwoPointers.html":["(n","(not","0","1)):","1/3286/","2","=","==",">",">=","array.","break","challenge/528/week","class","day","decid","def","easi","effect","end","faster","gener","https://leetcode.com/explore/challenge/card/30","https://leetcode.com/problems/3sum/","https://leetcode.com/problems/contain","https://leetcode.com/problems/two","k’","leetcod","len(nums)","list[int])","maintain","move","movezeroes(self,","n","n:","none:","num","nums:","nums[p]","nums[p],","nums[z]","nums[z],","on","p","pair","pointer","pointers:","prop","realli","return","search","size","slower","solut","solution:","structure:","subarray","sum/","techniqu","two","typic","us","water/","z"],"DataStructures/Arrays/Subarrays.html":["(d","(end_index","(i","(n","(sorted)","(start_index","*","+","1)","1))","1)/2","2","3/","=","absolut","addit","answer","array","basic","befor","binari","catch:","checks:","comparison","constraint","current","d","data","deal","desir","differ","domain","don’t","dp","dure","each","element","element/","element:","end","everytim","exclud","final_answ","find","frequenc","https://leetcode.com/problems/maximum","https://www.geeksforgeeks.org/maximum","https://www.geeksforgeeks.org/numb","https://www.geeksforgeeks.org/xor","i)","impli","includ","increas","instead","iteration.","ith","k/","k:","keep","left","length","less","look","matched:","max/min.","max/min:","maximum","maxval","minval","modulo","more","move:","multi,","negative,","new","odd","older","on","oper","optim","pointer","post","pre","prefix","prefix_arr[0]","prefix_arr[1]","previou","produc","product","quantiti","question","refer","relat","remov","requir","right","run","satisfi","search","set","similar","size","slide","start","step","store","strictli","sub","subarray","subarray/","subarrays,","subarrays:","subsequ","subsequences.","sum","sum,","sum/","swap","thing","till","travers","two","unless","valu","whole","window","xors/"],"DataStructures/Arrays/Subsets.html":["(check","/","1,","18/","1])","2","2)","=","archives:","array","checks:","choices:","dp","each","element,","geek","https://www.geeksforgeeks.org/partit","https://www.geeksforgeeks.org/tag/subset/","implement","issubsetsum(list,","leav","list[n","miscellan","n","n,","optim","prioriti","problem","question","queue","recurs","section)","sort","standard","subset","sum","take","this:","two","way","whole"],"DataStructures/Strings/":["string"],"DataStructures/Strings/StandardQuestions.html":[">","brute","characters/","https://leetcode.com/problems/longest","question","repeat","set","slide","standard","substr","window","without"],"DataStructures/Trees/":["(collections.deque)","(levelwis","(recurs","+","439df7e5ea1f","answer.","append","befor","cases.","check","combo","curat","data","decent","don't","down","encount","find","global","hashing)","https://medium.com/@codingfreak/binari","inord","interview","iterative)","keep","left","left/","level","levelwis","levelwise,","list:","make","node","node.","node/","order","pass","popleft","postord","practic","preorder","present","problem","push","question","queue.","record","recurs","return","right","see","situations,","solut","solution,","solution.","sure","travers","tree","tree,","up","updat","value.","vertic","want"],"DataStructures/Trees/Inorder.html":["\"","\"\")","+","+=","0","=",">",">\")","[]","base","binarytreepaths(self,","bst","case","class","criteria,","current","current.left","current.right","current.right:","current.v","current:","def","don't","fals","find","flag","for,","give","https://leetcode.com/problems/binari","https://leetcode.com/problems/sum","inord","int:","iter","leaves/","left","list","list[str]:","look","make","node.left","node.right:","node:","particularli","path","path):","paths.","paths/","recur","recurs","result","result.append(path","return","root","root:","satisfi","set","solution:","sort","stack","stack.append(current)","stack.pop()","str(node.val)","str(node.val))","sumofleftleaves(self,","sure","total_sum","travers","traverse(node,","traverse(node.left,","traverse(node.right,","traverse(root,","tree","tree,","treenode)","true","unnecessari","until","up","us","want"],"DataStructures/Trees/Preorder.html":["(current","(not","(sum","*","+","+=","0","0)","0,","1","1)","10","=","==",">","[]","[],","[node.val],","addnums(node,","addnums(node.left,","addnums(node.right,","addnums(root,","always,","class","course)","current","current):","current_sum","current_sum):","def","direct","direction,","down","elif","else:","gener","https://leetcode.com/problems/binari","https://leetcode.com/problems/path","https://leetcode.com/problems/sum","ii/","int)","int:","leaf","left","left,","left:","length","length)","length):","level","levelwis","list[list[int]]:","longestzigzag(self,","max(self.max_length,","node","node.left","node.left:","node.right:","node.val)","node.val):","node:","numbers/","order","pass","path","path,","path.append(node.val)","pathsum(self,","perfect","preorder","process","replac","result","result.append(path)","return","right","right,","right:","root","root:","self.max_length","self.tot","solution:","sometim","sum","sum:","sumnumbers(self,","travers","traversal/","traverse(node,","traverse(node.left,","traverse(node.right,","traverse(root,","tree","tree.","treenode)","treenode,","valu","zigzag"],"DataStructures/Trees/Postorder.html":["'treenode')","'treenode',","'treenode':","(float('","(l","(left_max","(node.v","(right_min","+","+=","0","1","2:","=","==",">",">=","[]","[p.val,","afterwards.","ancestor","attribut","back","base","binari","bool:","bottom,","check","class","collect","common","def","defaultdict","defaultdict(int)","deque,","e.g.","easier","exist","fals","find","findfrequenttreesum(self,","float('inf'))","frequent","gener","globals/","https://leetcode.com/problems/lowest","https://leetcode.com/problems/most","https://leetcode.com/problems/valid","import","inf'),","insert","int:","isvalidbst(self,","key,","l","left","left,","left_max,","left_min","list[int]:","lowestcommonancestor(self,","max","max(self.max_count,","max_count","need","node","node'","node.val)","node.val]","node.val])","node:","none","note:","p:","pass","posit","postord","properties,","properties;","q.val])","q.val]))","q:","r","record","record/upd","recurse(node.left)","recurse(node.right)","recurse(node:","result","result.append(key)","return","return(l","right","right_max,","right_min","root.left","root.right:","root:","search","self.lca","self.max_count","self.valid","solution:","sometim","subtre","subtree.","sum","sum/","sums.items():","sums[l","travers","traverse(node):","traverse(node.left)","traverse(node.right)","traverse(root)","tree.","tree/","treenode)","true","up","us","valu","value.","value:"],"DataStructures/Trees/LevelWise.html":["!=","(x_found","(y_found","+=","0","1","1)","1))","1):","=","==",">","append","binari","bool:","class","collect","current","current,","current.left:","current.right:","current.v","current.val))","deepestleavessum(self,","def","dequ","deque()","fals","gener","https://leetcode.com/problems/cousin","https://leetcode.com/problems/deepest","import","int)","int,","int:","iscousins(self,","leav","len(queue)","level","level_sum","levelwis","more","node","parent","queue","queue.append((current.left,","queue.append((current.right,","queue.append((root,","queue.append(current.left)","queue.append(current.right)","queue.append(root)","queue.popleft()","queue:","return","root","root:","size","size:","solution:","sum/","travers","tree/","treenode)","treenode,","true","valu","wise","x:","x_found","y:","y_found","y_found)","y_found):"],"DataStructures/Trees/ConstructTree.html":["+","//","1:","2","3","=",">","])","balanc","binari","class","construct","constructtree(arr:","def","easi","https://leetcode.com/problems/bal","len(arr)","len(list):","list)","mid","node","node.left","node.right","none","question","return","search","self.constructtree(arr[:mid])","self.constructtree(arr[mid","solution:","tree","tree/discuss/540038/python","treenode(arr[mid])","treenode:","understand"],"Algorithms/":["(end","+","//","1)","180/problems/lucki","2","=","==",">",">=","algorithm","arr[mid]","array","bf","binari","binarysearch(start,","contest","def","do:","end","end):","greater,","greatest","heapq","https://leetcode.com/contest/weekli","implement","k:","matrix","mid","next","number","prioriti","python","question","queue","return","rightmost","rightmost,","search","smaller,","smallest","start","start)","start:","travers","tree"],"Algorithms/DFSandBFS.html":["#","(you'll","0,","1","1,","=","==",">",">=","[[[","[[fals","apend","array","avoid","b","base","bf","board:","bool:","case","class","collect","collections.dequ","condit","continu","creat","def","dequ","deque([[0,","df","dfs(letter,","eg.","elimination/","empti","end","error","everywhere,","exceed","exhaust","exist(self,","extrem","few","find","first","float('inf')]","forget","game","gener","go","grid","grid:","grid[x][y]:","https://leetcode.com/problems/shortest","https://leetcode.com/problems/word","import","int)","int:","j","jump","k","k:","k]])","k_left","left","len(board)","len(board[0])","len(grid)","len(grid[0])","len(word):","letter","limit","list[list[int]],","list[list[str]],","long","minimum","need","notes:","obstacl","oper","optim","optimally.","otherwise)","part","path","popleft","question","questions,","queue","queue.popleft()","queue:","range(0,","range(x)]","reach","repetit","requir","return","run","search","shortestpath(self,","solut","solution:","solutions:","somewher","stack","step","steps,","str)","there'","true","type","up","us","useful:","visit","visited[x][y][1]","word","word:","x","x)]","x,","y","y)","y))]","y)]","y,","y:"],"Algorithms/Combinatorics.html":["(==r)","(k","(ncr)","(with","*","+","0","0)","0:","1)","1,","2):",":","=","==",">","[]","[false]","\\","_helper(self,","_helper_generator(self,","accept,","add","addit","allow","arr:","array","backtracker([],","backtracker(bucket,","backtracker(bucket:","base","book","bucket","bucket.append('(')","bucket.append(')')","bucket.append(arr[k])","bucket.pop()","call","case","cc","chang","cheat","choices:","choos","class","combin","combinations:","combinator","continu","de","deep","def","depth","df","domain)","domain:","don't","each","element","element:","fals","far;","filter","finit","generateparenthesis(self,","go","helper","helperncr(","helperncr(0,","helperncr(s,","helperncr(s:","https://leetcode.com/problems/combin","https://leetcode.com/problems/gener","if(","if((len(bucket)","if(k","if(len(bucket)","if(opencount","if(self.accepted[i]):","index","instanti","int)","int,","int:","item","k","k:","len(arr)","len(domain)","level","limit","list)","list,","list:","loop","made","make","n","n):","n:","ncr","ncr.append(bucket[:])","need","next","node","none:","normal","normalsubset(self,","note","number","on","opencount","opencount)","opencount:","option","out","over","param","parentheses/","perm_recur(self,","permut","permutation:","pop","process","questions:","r","r):","r:","range(0,","recurs","recursion:","reference:","repetition)","repetition,","return","revert","right","s:","same","scenario","select","select.","self.accept","self.accepted[i]","self.bucket","self.bucket.append(domain[i])","self.bucket.pop()","self.n","self.n):","self.perm_recur(0,","self.perm_recur(k","self.permut","self.permutations.append(''.join(bucket))","self.permutations.append(self.bucket[:])","self.powerset","self.powerset.append(self.subset[:])","self.recurse(k,","self.solution_search(0,","self.solution_search(k","self.subset","self.subset.append(domain[k])","self.subset.pop()","set","sheet","similar","solution.","solution:","solution_search(self,","solutiongenerator:","step","subset","sum/discuss/16510/python","t:","track","true","two","us","valu","‘reject’"],"Algorithms/Backtracking.html":["#","'visited'","((i,","(i","(i,","(int","(posit","(use","(veri","+","+=",",","0","0,","1","1)","1),","1):","1);","1,","1;","3000",":","=","==",">","_helpercopypaste(self,","accept","actual","add","answer:","backtrack","base","boolean","bucket","canjumpfromposition(int","care","check","class","complet","condit","constraint","copied))","copied,","copied:","current","current),","current,","current:","def","df","dfs(self,","direct","each","empti","exhaust","exists:","furthestjump","game","getmaximumgold(self,","gold/","grid","grid:","grid[i][j]","https://leetcode.com/problems/2","https://leetcode.com/problems/jump","https://leetcode.com/problems/path","i:","if(curr","if(i","if(n","int","int)","int,","int:","int[]","intmax","intmin","j","j)","j))","j)):","j),","j,","j:","key","keyboard/submissions/","len(grid),","len(grid[0])","limit","list[list[int]])","m","m,","math.min(posit","max","max(self.dfs(i,","max(self.dfs(x,","maximum","maximumsum","maximumsum)","min","min(2","minsteps(self,","move","n","n):","n:","necessari","nextposit","nums)","nums.length","nums[position],","of.","on","option","permut","posit","position,","possibl","problems)","public","range(m))","range(n)","recurs","recursion)","recursion,","remov","requir","return","search","see","seen),","seen):","seen.add((i,","seen.discard((i,","seen:","self._helpercopypaste(n,","set","set())","set)","similar","solut","solution:","step","sum","sum,","sum:","taken","target","true;","type","updat","x,","y","y,","{","}"],"Algorithms/DynamicProgramming.html":["!=","#(climb","'pivot'","(bag_weight","(bottom","(int","(leetcod","(len(values)","(memo[position]","(n","(top","(total_sum","(x","(y",")","*","+","/","0","0)","0):","0/1","0:","0;","1","1)","1),","1):","1);","1)]","1,","1.","1035","1:","1;","1]","1],","1][i","1][y]","1d","2","2)","2.","2]","3.","4","70),",":","=","==",">",">=","?","[0]","[[0","[[0]","[[fals","\\","_","achiev","again.","algorithms.","alway","anoth","answer","appli","approach.","array","backtrack","backtracking.","bad,","bag_weight","bag_weight):","basic","benefit","better","boolean","bottom","brute","caching.","calcul","canjump(int[]","canjumpfromposition(int","case","case)","caus","cell","cell.","cell_column)","cells,","certain","change.","check","choices,","class","climb","column","combin","complet","complex","complexity:","continu","convers","correct","count","current","def","determin","dfs(0,","dfs(x","dfs(x,","dfs(x:","differ","difference,","divid","done","down","dp","dp:","dp[0]","dp[1]","dp[2]","dp[i","dp[i]","dp[n","dp[n]","dynam","each","effici","eg.","elif(weight","elimin","enum","equat","even","exact","exclude)","fals","false,","false;","figur","final","find","forc","fulli","furthestjump","futur","game","gener","go:","goe","good,","greedi","half","here,","https://leetcode.com/problems/hous","https://leetcode.com/problems/jump","https://leetcode.com/problems/uniqu","i:","if(failure_base_case):","if(i","if(success_base_case):","ii","importantly,","improv","independently.","index","index.good","index.unknown)","index[]","index[nums.length];","instead","insur","int","int)","int,","int:","int[]","interview","intuit","j","knapsack","knapsack(self,","knapsack,","known,","larg","leetcod","leetcode:","len(nums)","len(values)+","list[int])","longer","loop","lot","m","m:","maintain","math.min(i","math.min(posit","max(","max(include,","max(memo[i","max(nums[0],","memo","memo;","memo[0]","memo[1]","memo[i","memo[i]","memo[n","memo[position]","memo[x","memo[x][i","memo[x][y]","memoiz","memori","method","minimum","more","multipl","n","n)","n):","n:","need","never","new","nextposit","number","nums)","nums.length","nums:","nums[0]","nums[1])","nums[i])","nums[i],","nums[position],","o(2^n)","observ","obstruction.","on","onc","open","optim","optimization.","order","out","over","overhead","overlap","particular","partitions:","path","paths/submissions/","perform","posit","position,","possibl","possible.","practice,","problem","process:","program","program:","programming)","programming:","properti","public","question","range(0,","range(2,","range(3,","recurs","recurse(0,","recurse(curr","recurse(current,","recurse(current:","recursion.","reduc","refer","reli","remov","requir","rest","result","return","revers","rob(self,","robber/","row","row[i","row[i]","runtim","satisfi","search","self.solution_function(case_one,","self.solution_function(case_two,","set","similar","size","small","solut","solution,","solution:","solution_function(self,","solutions.","solutions:","solv","someth","squar","stack","stair","stairs:","start","step","step,","subarray.","subproblem","subset","subsets:","substructur","sum","sum,","tabl","table[i][weight]","techniqu","this:","thought","time","top","total","tree","tri","trick","true","two","understand","uniqu","uniquepaths(self,","unknown","up","us","usual","usually,","values,","visit","visited[x][y]","visited[x][y]:","want","weight","weights,","x","x):","x)]","y","y)","y):","y)]","y:","{","}"],"Miscellaneous/":["miscellan"],"Miscellaneous/Stocks.html":["+","0","0,","1","1]","2","=","==","approach","better","between","buy","calcul","can't","cash","cash,","cash.","class","comment","continu","current","day","day,","def","differ","dp","dynam","element","elements/","end","end,","far,","far.","fee","fee)","fee):","fee/","first","found","hold","hold,","https://leetcode.com/problems/best","https://www.geeksforgeeks.org/maximum","https://www.geeksforgeeks.org/stock","i+1","iv/discuss/54117/clean","java","k","keep","len(prices)):","limit,","list.","list[i","list[i]","local","maintain","max(cash,","max(hold,","maxima","maximum","maxprofit(self,","minima","minimum","necessary.","number","on","own","prices,","prices[0]","prices[i]","prices[i])","profit","program","range(1,","return","same","sell","sell/","share","similar","solut","solution(object):","stock","stock,","stock.","temporari","th","till","time","track","transact","transform","transit","twice/","two","updat","us","variabl","want","without"],"Miscellaneous/Intervals.html":["analysislet","attended/discuss/510262/detail","base","count","event","https://leetcode.com/discuss/interview","https://leetcode.com/problems/maximum","https://www.geeksforgeeks.org/merg","interv","intervals/","keep","lead","merg","number","on","overlap","problem","question/356520","run","solut","sort","start","step","time"],"Miscellaneous/InterestingMiscellaneous.html":["1383:","180/problems/maximum","857:","contest","cost","find","heap","hire","https://leetcode.com/contest/weekli","https://leetcode.com/problems/maximum","https://leetcode.com/problems/minimum","interest","k","largest","max","min","miscellan","need","nth","partial","perform","prioriti","queue","quicksort","smallest","solution:","sort:","team/","team/discuss/539797/c%2b%2bpython","us","variat","workers/"],"PythonicTricks/":["#return","=","array","c","c.most_common(n)","collect","convert","counter","counter(list/string)","dictionari","float('","float('inf')","frequent","import","inf')","int_max","int_max:","int_min","int_min:","item","item:","item[1:]","item[1])}","k,","key=lambda","list","list}","n","python","sort","sorted(x.items(),","string","top","trick","v","valu","{item[0]:","{k:"],"BehavioralQuestions.html":["answer","answer.","base","behavior","better","challeng","colleg","customer?","deliv","direct","do?","drawn","experience,","experience.","faced?","follow","graduat","interact","made","mention","on","previou","problem","project,","question","recent","specifics,","sure","tell","time","two","up","vagu","work"]},"length":26},"tokenStore":{"root":{"0":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.02564102564102564},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.015625},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0213903743315508},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.009345794392523364},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.020689655172413793},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.012096774193548387},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.016774193548387096},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}},")":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.016042780748663103},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.005988023952095809},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0025806451612903226}},":":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}}},",":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0053475935828877},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.010471204188481676},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}},":":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0064516129032258064}}},"/":{"1":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}},"docs":{}},";":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0025806451612903226}}}},"1":{"0":{"3":{"5":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}},"docs":{}},"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.016042780748663103}}},"3":{"8":{"3":{"docs":{},":":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.030303030303030304}}}},"docs":{}},"docs":{}},"8":{"0":{"docs":{},"/":{"docs":{},"p":{"docs":{},"r":{"docs":{},"o":{"docs":{},"b":{"docs":{},"l":{"docs":{},"e":{"docs":{},"m":{"docs":{},"s":{"docs":{},"/":{"docs":{},"l":{"docs":{},"u":{"docs":{},"c":{"docs":{},"k":{"docs":{},"i":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.017241379310344827}}}}}}},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"i":{"docs":{},"m":{"docs":{},"u":{"docs":{},"m":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.030303030303030304}}}}}}}}}}}}}}}}}}}},"docs":{},"/":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.018518518518518517}}}},"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0106951871657754},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.027586206896551724},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.005235602094240838},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.008064516129032258},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.011612903225806452},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.01098901098901099}},")":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.03208556149732621},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.013793103448275862},"Algorithms/":{"ref":"Algorithms/","tf":0.017241379310344827},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.008982035928143712},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.008064516129032258},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.003870967741935484}},")":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.006896551724137931}},":":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282}}}},"/":{"2":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653}}},"docs":{}},":":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.006896551724137931},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.003870967741935484}}},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.008064516129032258},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}},";":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0025806451612903226}}},"]":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0025806451612903226}}}},"/":{"3":{"2":{"8":{"6":{"docs":{},"/":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},",":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.037037037037037035},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.005235602094240838},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.011976047904191617},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.012096774193548387},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}},"]":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.007741935483870968},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}},")":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.018518518518518517}}},",":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}},"[":{"docs":{},"i":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}},"y":{"docs":{},"]":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}}}}},":":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.023809523809523808},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0064516129032258064}}},";":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0025806451612903226}}},".":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}},"d":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0025806451612903226}}}},"2":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.037037037037037035},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.023809523809523808},"Algorithms/":{"ref":"Algorithms/","tf":0.017241379310344827},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0025806451612903226},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}},")":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.037037037037037035},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}},":":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}}}},":":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682}}},".":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.003870967741935484}}},"]":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.003870967741935484}}}},"3":{"0":{"0":{"0":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}},"docs":{}},"docs":{}},"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.023809523809523808}},"/":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653}}},".":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}}},"4":{"3":{"9":{"docs":{},"d":{"docs":{},"f":{"7":{"docs":{},"e":{"5":{"docs":{},"e":{"docs":{},"a":{"1":{"docs":{},"f":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011235955056179775}}}},"docs":{}}}},"docs":{}}},"docs":{}}}},"docs":{}},"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}},"7":{"0":{"docs":{},")":{"docs":{},",":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}}}},"docs":{}},"8":{"5":{"7":{"docs":{},":":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.030303030303030304}}}},"docs":{}},"docs":{}},"docs":{},"c":{"docs":{"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.023255813953488372}},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{"./":{"ref":"./","tf":0.25},"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.08333333333333333}}}},"m":{"docs":{},"p":{"docs":{},"e":{"docs":{},"t":{"docs":{},"i":{"docs":{},"t":{"docs":{"./":{"ref":"./","tf":0.25}}}}}},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{},"s":{"docs":{},"o":{"docs":{},"n":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653}}}}}}}},"l":{"docs":{},"e":{"docs":{},"t":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":3.337365591397849},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}},"x":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}},"i":{"docs":{},"t":{"docs":{},"y":{"docs":{},":":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}}}}}}}}},"b":{"docs":{},"o":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011235955056179775}}},"i":{"docs":{},"n":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},":":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}}}}}}},"o":{"docs":{},"r":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":10.002994011976048}}}}}}}}},"m":{"docs":{},"o":{"docs":{},"n":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682}}}},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}}}}},"n":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.025510204081632654},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}}}}},"u":{"docs":{},"c":{"docs":{},"t":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":5.0476190476190474}},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"(":{"docs":{},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},":":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.023809523809523808}}}}}}}}}}}}}}}}},"t":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.017241379310344827},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.030303030303030304}}}}},"i":{"docs":{},"n":{"docs":{},"u":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.005235602094240838},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0025806451612903226},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}}}},"d":{"docs":{},"i":{"docs":{},"t":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.005235602094240838},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.008064516129032258}}}}},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}},"t":{"docs":{"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.023255813953488372}}}}}}},"u":{"docs":{},"r":{"docs":{},"s":{"docs":{},"e":{"docs":{},")":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0053475935828877}}}}}},"n":{"docs":{},"t":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0025806451612903226},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.03571428571428571}},"e":{"docs":{},"r":{"docs":{"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.023255813953488372}},"(":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"/":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},")":{"docs":{"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.023255813953488372}}}}}}}}}}}}}}}}}}}},"l":{"docs":{},"l":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.013793103448275862},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.005235602094240838},"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.023255813953488372}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},".":{"docs":{},"d":{"docs":{},"e":{"docs":{},"q":{"docs":{},"u":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.005235602094240838}}}}}}}}}}}}},"g":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.02631578947368421}}}}},"u":{"docs":{},"m":{"docs":{},"n":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0025806451612903226}}}}}},"p":{"docs":{},"i":{"docs":{},"e":{"docs":{},"d":{"docs":{},")":{"docs":{},")":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}}},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}},":":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}}}}}},"r":{"docs":{},"r":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}}}}}},"s":{"docs":{},"t":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.030303030303030304}}}}},"l":{"docs":{},"a":{"docs":{},"s":{"docs":{},"s":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.020833333333333332},"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.015625},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.016042780748663103},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.018691588785046728},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.013793103448275862},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.023809523809523808},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.010471204188481676},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.011976047904191617},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.008064516129032258},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.01032258064516129},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}},",":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.020833333333333332}}}}}},"i":{"docs":{},"m":{"docs":{},"b":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0025806451612903226}}}}}},"h":{"docs":{},"e":{"docs":{},"c":{"docs":{},"k":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.02247191011235955},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}},"s":{"docs":{},":":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.018518518518518517}}}}}},"a":{"docs":{},"t":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}}}}},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.02631578947368421}},"e":{"docs":{},"/":{"5":{"2":{"8":{"docs":{},"/":{"docs":{},"w":{"docs":{},"e":{"docs":{},"e":{"docs":{},"k":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282}}}}}}}},"docs":{}},"docs":{}},"docs":{}}}}}}}},"r":{"docs":{},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"/":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.07692307692307693}}}}}}}}}},"n":{"docs":{},"g":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.005988023952095809}},"e":{"docs":{},".":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}}}}}},"o":{"docs":{},"i":{"docs":{},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},":":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.018518518518518517},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}}},",":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}}}}}},"o":{"docs":{},"s":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.005988023952095809}}}}}},"a":{"docs":{},"t":{"docs":{},"c":{"docs":{},"h":{"docs":{},":":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.015306122448979591}}}}}},"s":{"docs":{},"e":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.03125},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.005235602094240838},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}},"s":{"docs":{},".":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011235955056179775}}}},")":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}}},"h":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.03296703296703297}},",":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.01098901098901099}}},".":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}}},"l":{"docs":{},"l":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.011976047904191617}}},"c":{"docs":{},"u":{"docs":{},"l":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}}}},"n":{"docs":{},"j":{"docs":{},"u":{"docs":{},"m":{"docs":{},"p":{"docs":{},"f":{"docs":{},"r":{"docs":{},"o":{"docs":{},"m":{"docs":{},"p":{"docs":{},"o":{"docs":{},"s":{"docs":{},"i":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}}}}}}}}}}}}}}}}},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}}}}}}}}}}},"'":{"docs":{},"t":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}}},"r":{"docs":{},"e":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}}},"c":{"docs":{},"h":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},".":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}}}}}}},"u":{"docs":{},"s":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}}}},"u":{"docs":{},"r":{"docs":{},"r":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.01020408163265306},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0390625},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0106951871657754},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.020689655172413793},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.012096774193548387},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.015625}},":":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.013793103448275862}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125}},":":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.013793103448275862}}}}}}}},"v":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.020689655172413793}},"a":{"docs":{},"l":{"docs":{},")":{"docs":{},")":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.013793103448275862}}}}}}}},":":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.015625},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}},")":{"docs":{},":":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0053475935828877}}},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}}},"_":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.016042780748663103}},")":{"docs":{},":":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0053475935828877}}}}}}}},",":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.006896551724137931},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}}}}}},"a":{"docs":{},"t":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011235955056179775}}}}},"s":{"docs":{},"t":{"docs":{},"o":{"docs":{},"m":{"docs":{},"e":{"docs":{},"r":{"docs":{},"?":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.02631578947368421}}}}}}}}}},"r":{"docs":{},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"i":{"docs":{},"a":{"docs":{},",":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125}}}}}}}}},"e":{"docs":{},"a":{"docs":{},"t":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.005235602094240838}}}}}},"c":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}}},"e":{"docs":{},"l":{"docs":{},"l":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}},".":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}},"_":{"docs":{},"c":{"docs":{},"o":{"docs":{},"l":{"docs":{},"u":{"docs":{},"m":{"docs":{},"n":{"docs":{},")":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}}}}}}}}},"s":{"docs":{},",":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}}}}},"r":{"docs":{},"t":{"docs":{},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}}}}}}},".":{"docs":{},"m":{"docs":{},"o":{"docs":{},"s":{"docs":{},"t":{"docs":{},"_":{"docs":{},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"m":{"docs":{},"o":{"docs":{},"n":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.023255813953488372}}}}}}}}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0025806451612903226}},"r":{"docs":{},"o":{"docs":{},"d":{"docs":{},"u":{"docs":{},"c":{"docs":{},"t":{"docs":{"./":{"ref":"./","tf":10.25}}}}}}}},"e":{"docs":{},"r":{"docs":{},"v":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":10.071428571428571}},"i":{"docs":{},"e":{"docs":{},"w":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011235955056179775},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}}}},"a":{"docs":{},"l":{"docs":{},"s":{"docs":{},"/":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.03571428571428571}}}}}}},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":5}}}}},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.02631578947368421}}}}}}},":":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0106951871657754},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.006896551724137931},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.005235602094240838},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.016129032258064516},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.007741935483870968}}},")":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0053475935828877},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.006896551724137931},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.005235602094240838},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.011976047904191617},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.008064516129032258},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.005161290322580645}}},",":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.006896551724137931},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.008982035928143712},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.020161290322580645},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.005161290322580645}}},"[":{"docs":{},"]":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}}},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}}},"i":{"docs":{},"n":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}}}},"u":{"docs":{},"i":{"docs":{},"t":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}}}},"_":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.023255813953488372}},":":{"docs":{"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.023255813953488372}}}}},"i":{"docs":{},"n":{"docs":{"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.023255813953488372}},":":{"docs":{"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.023255813953488372}}}}}}}},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"u":{"docs":{},"c":{"docs":{},"t":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":5.020833333333333}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},":":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02}}}}}}}}}}},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}}}},"a":{"docs":{},"n":{"docs":{},"t":{"docs":{},"i":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}}}}}}},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682}}}}},"u":{"docs":{},"r":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}}}},"c":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"s":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653}}}}}},"l":{"docs":{},"u":{"docs":{},"d":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653}}}}}},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011235955056179775},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":5.015625}}}}},"f":{"docs":{},"'":{"docs":{},")":{"docs":{"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.023255813953488372}},",":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682}}}}}},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0025806451612903226}},".":{"docs":{},"g":{"docs":{},"o":{"docs":{},"o":{"docs":{},"d":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}}}}},"u":{"docs":{},"n":{"docs":{},"k":{"docs":{},"n":{"docs":{},"o":{"docs":{},"w":{"docs":{},"n":{"docs":{},")":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}}}}}}}}}},"[":{"docs":{},"]":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0025806451612903226}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},"]":{"docs":{},";":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}}}}}}}}}}}}}}}},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"l":{"docs":{},"y":{"docs":{},".":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}}}}}}}}}}}}}},"m":{"docs":{},"p":{"docs":{},"r":{"docs":{},"o":{"docs":{},"v":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.020833333333333332},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}}}},"l":{"docs":{},"i":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653}}},"e":{"docs":{},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.018518518518518517},"Algorithms/":{"ref":"Algorithms/","tf":0.017241379310344827}}}}}}}},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.013793103448275862},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.010471204188481676},"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.023255813953488372}},"a":{"docs":{},"n":{"docs":{},"t":{"docs":{},"l":{"docs":{},"y":{"docs":{},",":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}}}}}}}}}}}},")":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653}}},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.015625}},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},".":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653}}}}},"v":{"docs":{},"e":{"docs":{},")":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.033707865168539325}}}}}}}}},"m":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044},"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.023255813953488372}},":":{"docs":{"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.023255813953488372}}},"[":{"1":{"docs":{},":":{"docs":{},"]":{"docs":{"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.023255813953488372}}}},"]":{"docs":{},")":{"docs":{},"}":{"docs":{"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.023255813953488372}}}}}},"docs":{}}}},"h":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653}}}},"s":{"docs":{},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},"(":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},",":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.05555555555555555}}}}}}}}}}}}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"i":{"docs":{},"d":{"docs":{},"b":{"docs":{},"s":{"docs":{},"t":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682}}}}}}}}}}}}}}}},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"s":{"docs":{},"i":{"docs":{},"n":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.006896551724137931}}}}}}}}}}}}}}}},"i":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}},"/":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0053475935828877}}}},"f":{"docs":{},"(":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.005988023952095809}},"(":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"(":{"docs":{},"b":{"docs":{},"u":{"docs":{},"c":{"docs":{},"k":{"docs":{},"e":{"docs":{},"t":{"docs":{},")":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}}}}}}}}}}}}}},"k":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}}},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"(":{"docs":{},"b":{"docs":{},"u":{"docs":{},"c":{"docs":{},"k":{"docs":{},"e":{"docs":{},"t":{"docs":{},")":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}}}}}}}}}}}}},"o":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}}}}}}}}}}},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},".":{"docs":{},"a":{"docs":{},"c":{"docs":{},"c":{"docs":{},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{},"e":{"docs":{},"d":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},")":{"docs":{},":":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}}}}}}}}}}}}}}}}}}},"u":{"docs":{},"c":{"docs":{},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{},"_":{"docs":{},"b":{"docs":{},"a":{"docs":{},"s":{"docs":{},"e":{"docs":{},"_":{"docs":{},"c":{"docs":{},"a":{"docs":{},"s":{"docs":{},"e":{"docs":{},")":{"docs":{},":":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}}}}}}}}}}}}}}}}}}}},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{},"r":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.008064516129032258}}}}}},"i":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}},"n":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}},"f":{"docs":{},"a":{"docs":{},"i":{"docs":{},"l":{"docs":{},"u":{"docs":{},"r":{"docs":{},"e":{"docs":{},"_":{"docs":{},"b":{"docs":{},"a":{"docs":{},"s":{"docs":{},"e":{"docs":{},"_":{"docs":{},"c":{"docs":{},"a":{"docs":{},"s":{"docs":{},"e":{"docs":{},")":{"docs":{},":":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}}}}}}}}}}}}}}}}}}}}}},":":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}},"+":{"1":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}},"docs":{}},"v":{"docs":{},"/":{"docs":{},"d":{"docs":{},"i":{"docs":{},"s":{"docs":{},"c":{"docs":{},"u":{"docs":{},"s":{"docs":{},"s":{"docs":{},"/":{"5":{"4":{"1":{"1":{"7":{"docs":{},"/":{"docs":{},"c":{"docs":{},"l":{"docs":{},"e":{"docs":{},"a":{"docs":{},"n":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}}}}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}}}},"n":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.02564102564102564},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.037037037037037035},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.011976047904191617},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.008064516129032258},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.011612903225806452},"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.023255813953488372}},"o":{"docs":{},"t":{"docs":{},"e":{"docs":{"./":{"ref":"./","tf":0.25},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}},":":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682}}},"s":{"docs":{},":":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.005235602094240838}}}}}},"n":{"docs":{},"e":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.023809523809523808}},":":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.011976047904191617}}}}},"d":{"docs":{},"e":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.033707865168539325},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0053475935828877},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.009345794392523364},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.006896551724137931},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.047619047619047616},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}},".":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011235955056179775}},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0106951871657754},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.023809523809523808}},":":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0053475935828877}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.023809523809523808}},":":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.016042780748663103}}}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},")":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.026737967914438502},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.009345794392523364}},":":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0053475935828877}}}},"]":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682}},")":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682}}}}}}}},"/":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011235955056179775}}},":":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0106951871657754},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.014018691588785047}}},"'":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682}}}}},"r":{"docs":{},"m":{"docs":{},"a":{"docs":{},"l":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}}}}}}}}}}}}}}}}}}},":":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.008064516129032258},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.003870967741935484}}},"u":{"docs":{},"m":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282}},"s":{"docs":{},":":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0025806451612903226}}},"[":{"0":{"docs":{},"]":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.003870967741935484}}}},"1":{"docs":{},"]":{"docs":{},")":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}}}},"docs":{},"p":{"docs":{},"]":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282}},",":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282}}}},"o":{"docs":{},"s":{"docs":{},"i":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"]":{"docs":{},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}}}}}}}}}}},"z":{"docs":{},"]":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282}},",":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282}}}}},"i":{"docs":{},"]":{"docs":{},")":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}},",":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0025806451612903226}}}}}},")":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0025806451612903226}}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.008064516129032258},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0025806451612903226}}}}}}}}}},"b":{"docs":{},"e":{"docs":{},"r":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.017241379310344827},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.008982035928143712},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0064516129032258064},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.02197802197802198},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.07142857142857142}},"s":{"docs":{},"/":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0053475935828877}}}}}}}}},"e":{"docs":{},"g":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"v":{"docs":{},"e":{"docs":{},",":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653}}}}}}}}},"w":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}},"e":{"docs":{},"d":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.009345794392523364},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.005235602094240838},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0025806451612903226},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.030303030303030304}}}},"x":{"docs":{},"t":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.034482758620689655},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}},"p":{"docs":{},"o":{"docs":{},"s":{"docs":{},"i":{"docs":{},"t":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.008064516129032258},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0025806451612903226}}}}}}}}},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}},"y":{"docs":{},".":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}}}}}}}},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}}}}},",":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.018518518518518517}}},")":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0025806451612903226}},":":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.008064516129032258},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.003870967741935484}}}},"c":{"docs":{},"r":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.005988023952095809}},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"b":{"docs":{},"u":{"docs":{},"c":{"docs":{},"k":{"docs":{},"e":{"docs":{},"t":{"docs":{},"[":{"docs":{},":":{"docs":{},"]":{"docs":{},")":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}}}}}}}}}}}}}}}}}}}}}},"t":{"docs":{},"h":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.030303030303030304}}}}},"a":{"docs":{},"b":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.020833333333333332}}}}}}},"o":{"docs":{},"l":{"docs":{},"u":{"docs":{},"t":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653}}}}}}}},"p":{"docs":{},"p":{"docs":{},"r":{"docs":{},"o":{"docs":{},"a":{"docs":{},"c":{"docs":{},"h":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.020833333333333332},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}},".":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}}}}}}},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011235955056179775},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.006896551724137931}}}}},"l":{"docs":{},"i":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0025806451612903226}}}}},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.005235602094240838}}}}}},"v":{"docs":{},"o":{"docs":{},"i":{"docs":{},"d":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.020833333333333332},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.005235602094240838}}}}}},"r":{"docs":{},"r":{"docs":{},"a":{"docs":{},"y":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":10.08},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.025510204081632654},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.018518518518518517},"Algorithms/":{"ref":"Algorithms/","tf":0.017241379310344827},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.010471204188481676},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.005988023952095809},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0025806451612903226},"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.023255813953488372}},".":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282}}}}},"[":{"docs":{},"m":{"docs":{},"i":{"docs":{},"d":{"docs":{},"]":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.05172413793103448}}}}}}},":":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}}}},"c":{"docs":{},"h":{"docs":{},"i":{"docs":{},"v":{"docs":{},"e":{"docs":{},"s":{"docs":{},":":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.018518518518518517}}}}}}}}}},"d":{"docs":{},"d":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}},"i":{"docs":{},"t":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"(":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},",":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0053475935828877}}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},",":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0053475935828877}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},",":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0053475935828877}}}}}}}}}}}}},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},",":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0053475935828877}}}}}}}}}}}}}},"n":{"docs":{},"s":{"docs":{},"w":{"docs":{},"e":{"docs":{},"r":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.07894736842105263}},".":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011235955056179775},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.02631578947368421}}},":":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}}}}}},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682}}}}}}}},"o":{"docs":{},"t":{"docs":{},"h":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}}}},"a":{"docs":{},"l":{"docs":{},"y":{"docs":{},"s":{"docs":{},"i":{"docs":{},"s":{"docs":{},"l":{"docs":{},"e":{"docs":{},"t":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.03571428571428571}}}}}}}}}}}},"l":{"docs":{},"w":{"docs":{},"a":{"docs":{},"y":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}},"s":{"docs":{},",":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0053475935828877}}}}}}},"g":{"docs":{},"o":{"docs":{},"r":{"docs":{},"i":{"docs":{},"t":{"docs":{},"h":{"docs":{},"m":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":10.017241379310345}},"s":{"docs":{},".":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}}}}}}}}}},"l":{"docs":{},"o":{"docs":{},"w":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}}}}}},"f":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"w":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{},"s":{"docs":{},".":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682}}}}}}}}}}}},"t":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"b":{"docs":{},"u":{"docs":{},"t":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682}}}}}}},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"d":{"docs":{},"/":{"docs":{},"d":{"docs":{},"i":{"docs":{},"s":{"docs":{},"c":{"docs":{},"u":{"docs":{},"s":{"docs":{},"s":{"docs":{},"/":{"5":{"1":{"0":{"2":{"6":{"2":{"docs":{},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"t":{"docs":{},"a":{"docs":{},"i":{"docs":{},"l":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.03571428571428571}}}}}}}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}}}}}}}}},"c":{"docs":{},"c":{"docs":{},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}},",":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}}}}}}},"t":{"docs":{},"u":{"docs":{},"a":{"docs":{},"l":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.008064516129032258}}}}}},"h":{"docs":{},"i":{"docs":{},"e":{"docs":{},"v":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}}}}}},"g":{"docs":{},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{},".":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}}}}}}},"b":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.005235602094240838}},"r":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"e":{"docs":{},"t":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.020833333333333332}}}}}}},"u":{"docs":{},"t":{"docs":{},"e":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.020833333333333332},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.07692307692307693},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}}}},"e":{"docs":{},"a":{"docs":{},"k":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282}}}}}},"u":{"docs":{},"i":{"docs":{},"l":{"docs":{},"t":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.020833333333333332}}}}},"c":{"docs":{},"k":{"docs":{},"e":{"docs":{},"t":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.005988023952095809},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"'":{"docs":{},"(":{"docs":{},"'":{"docs":{},")":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}}}}},")":{"docs":{},"'":{"docs":{},")":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}}}}}},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},"[":{"docs":{},"k":{"docs":{},"]":{"docs":{},")":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}}}}}}}}}}}}}}}},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.008982035928143712}}}}}}}}}}}},"y":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.038461538461538464}}}},"i":{"docs":{},"n":{"docs":{},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.009345794392523364},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.006896551724137931},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.023809523809523808},"Algorithms/":{"ref":"Algorithms/","tf":0.017241379310344827}}},"y":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"p":{"docs":{},"a":{"docs":{},"t":{"docs":{},"h":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125}}}}}}}}}}}}}}}}},"s":{"docs":{},"e":{"docs":{},"a":{"docs":{},"r":{"docs":{},"c":{"docs":{},"h":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},",":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.034482758620689655}}}}}}}}}}}}}}}}}}}},"a":{"docs":{},"s":{"docs":{},"i":{"docs":{},"c":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}}},"e":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.005235602094240838},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.005988023952095809},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.03571428571428571},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.02631578947368421}}}},"c":{"docs":{},"k":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682}},"t":{"docs":{},"r":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":3.337365591397849},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.003870967741935484}},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"[":{"docs":{},"]":{"docs":{},",":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}}}}},"b":{"docs":{},"u":{"docs":{},"c":{"docs":{},"k":{"docs":{},"e":{"docs":{},"t":{"docs":{},",":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.005988023952095809}}},":":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},".":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}}}}}}}}}}}},"l":{"docs":{},"a":{"docs":{},"n":{"docs":{},"c":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.023809523809523808}}}}}},"d":{"docs":{},",":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0025806451612903226}}}},"g":{"docs":{},"_":{"docs":{},"w":{"docs":{},"e":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}},")":{"docs":{},":":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}}}}}}}}}}}},"e":{"docs":{},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.02247191011235955}}}}},"n":{"docs":{},"e":{"docs":{},"f":{"docs":{},"i":{"docs":{},"t":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}}}}}},"t":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.02631578947368421}}}}},"w":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.01098901098901099}}}}}}},"h":{"docs":{},"a":{"docs":{},"v":{"docs":{},"i":{"docs":{},"o":{"docs":{},"r":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":5.026315789473684}}}}}}}}},"s":{"docs":{},"t":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125}}}},"o":{"docs":{},"o":{"docs":{},"l":{"docs":{},":":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.006896551724137931},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.010471204188481676}}},"e":{"docs":{},"a":{"docs":{},"n":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0025806451612903226}}}}}},"k":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}}}},"t":{"docs":{},"t":{"docs":{},"o":{"docs":{},"m":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0025806451612903226}},",":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682}}}}}}},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{},":":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.005235602094240838}}}}}}},"f":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.017241379310344827},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":5.015706806282722}}}},"d":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.01020408163265306}},"e":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}},"c":{"docs":{},"o":{"docs":{},"r":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.020833333333333332}}}},"i":{"docs":{},"d":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282}}}},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011235955056179775}}}}}},"f":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0234375},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.03208556149732621},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.028037383177570093},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.013793103448275862},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.023809523809523808},"Algorithms/":{"ref":"Algorithms/","tf":0.017241379310344827},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.015706806282722512},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.023952095808383235},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.016129032258064516},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.01032258064516129},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}},"a":{"docs":{},"u":{"docs":{},"l":{"docs":{},"t":{"docs":{},"d":{"docs":{},"i":{"docs":{},"c":{"docs":{},"t":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682}},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},")":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682}}}}}}}}}}}}}}}},"a":{"docs":{},"l":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653}}}},"s":{"docs":{},"i":{"docs":{},"r":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653}}}}},"q":{"docs":{},"u":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.013793103448275862},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.005235602094240838}},"e":{"docs":{},",":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682}}},"(":{"docs":{},")":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.013793103448275862}}},"[":{"docs":{},"[":{"0":{"docs":{},",":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.005235602094240838}}}},"docs":{}}}}}}},"e":{"docs":{},"p":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"l":{"docs":{},"e":{"docs":{},"a":{"docs":{},"v":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.006896551724137931}}}}}}}}}}}}}}}}}}}}}},"p":{"docs":{},"t":{"docs":{},"h":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}}}}},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}}}}}}},"l":{"docs":{},"i":{"docs":{},"v":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.02631578947368421}}}}}},"o":{"docs":{},"c":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.020833333333333332}}}}}},"m":{"docs":{},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653}},")":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.017964071856287425}}},":":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.011976047904191617}}}}}}},"n":{"docs":{},"’":{"docs":{},"t":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653}}}},"'":{"docs":{},"t":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011235955056179775},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.005988023952095809}}}},"e":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}}},"w":{"docs":{},"n":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.033707865168539325},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0053475935828877},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0064516129032258064}}}},":":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.017241379310344827}}},"?":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.02631578947368421}}}},"a":{"docs":{},"t":{"docs":{},"a":{"docs":{"DataStructures/":{"ref":"DataStructures/","tf":5.2},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011235955056179775}}}},"y":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.01098901098901099}},",":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.01098901098901099}}}}},"i":{"docs":{},"f":{"docs":{},"f":{"docs":{},"e":{"docs":{},"r":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0025806451612903226},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.016483516483516484}},"e":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},",":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0025806451612903226}}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0106951871657754},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.02631578947368421}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},",":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0053475935828877}}}}}}}}}},"v":{"docs":{},"i":{"docs":{},"d":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}}}},"c":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.046511627906976744}}}}}}}}}}},"p":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.037037037037037035},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.005161290322580645},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}},":":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}},"[":{"0":{"docs":{},"]":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}}},"1":{"docs":{},"]":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}}},"2":{"docs":{},"]":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}}},"docs":{},"i":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0025806451612903226}},"]":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}}},"n":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0025806451612903226}},"]":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0025806451612903226}}}}}},"u":{"docs":{},"r":{"docs":{},"e":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653}}}}},"f":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":5.015706806282722},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}},"s":{"docs":{},"(":{"0":{"docs":{},",":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}}},"docs":{},"l":{"docs":{},"e":{"docs":{},"t":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},",":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.005235602094240838}}}}}}}}},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}}}}}},"x":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}},",":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}},":":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}}}}}},"y":{"docs":{},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":5.014193548387097},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}}}},"r":{"docs":{},"a":{"docs":{},"w":{"docs":{},"n":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.02631578947368421}}}}}}},"f":{"docs":{},"i":{"docs":{},"r":{"docs":{},"s":{"docs":{},"t":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.020833333333333332},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.005235602094240838},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}}},"n":{"docs":{},"d":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.015306122448979591},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011235955056179775},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.009345794392523364},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.005235602094240838},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0064516129032258064},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.030303030303030304}},"f":{"docs":{},"r":{"docs":{},"e":{"docs":{},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682}}}}}}}}}}}}}}}}}}}}}}}},"a":{"docs":{},"l":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}},"_":{"docs":{},"a":{"docs":{},"n":{"docs":{},"s":{"docs":{},"w":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653}}}}}}}}},"i":{"docs":{},"t":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}}}}},"l":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}}}}}},"g":{"docs":{},"u":{"docs":{},"r":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}}}}},"o":{"docs":{},"r":{"docs":{},"c":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.020833333333333332},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}},",":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125}}},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.010471204188481676}}}}}},"u":{"docs":{},"n":{"docs":{},"d":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.01098901098901099}}}}},"l":{"docs":{},"l":{"docs":{},"o":{"docs":{},"w":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.02631578947368421}}}}}}},"u":{"docs":{},"n":{"docs":{},"c":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.041666666666666664}}}}}}}},"r":{"docs":{},"t":{"docs":{},"h":{"docs":{},"e":{"docs":{},"r":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.020833333333333332}}},"s":{"docs":{},"t":{"docs":{},"j":{"docs":{},"u":{"docs":{},"m":{"docs":{},"p":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0025806451612903226}}}}}}}}}}}},"l":{"docs":{},"l":{"docs":{},"i":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}}}},"t":{"docs":{},"u":{"docs":{},"r":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}}}}},"a":{"docs":{},"s":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282}}}}}},"l":{"docs":{},"s":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.020689655172413793},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0025806451612903226}},"e":{"docs":{},",":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}},";":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}}}}},"r":{"docs":{},";":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}}},",":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}},".":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}},"c":{"docs":{},"e":{"docs":{},"d":{"docs":{},"?":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.02631578947368421}}}}}}},"r":{"docs":{},"e":{"docs":{},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"n":{"docs":{},"c":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653}}},"t":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682},"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.023255813953488372}}}}}}}}},"l":{"docs":{},"a":{"docs":{},"g":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125}}}},"o":{"docs":{},"a":{"docs":{},"t":{"docs":{},"(":{"docs":{},"'":{"docs":{"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.023255813953488372}},"i":{"docs":{},"n":{"docs":{},"f":{"docs":{},"'":{"docs":{},")":{"docs":{"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.023255813953488372}},")":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682}}},"]":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.005235602094240838}}}}}}}}}}}}}},"e":{"docs":{},"w":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.005235602094240838}}},"e":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.01098901098901099}},")":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.01098901098901099}},":":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}},"/":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}}}},"g":{"docs":{},"e":{"docs":{},"n":{"docs":{},"e":{"docs":{},"r":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":5.020833333333333},"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.04},"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0053475935828877},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.006896551724137931},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.005235602094240838},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"h":{"docs":{},"e":{"docs":{},"s":{"docs":{},"i":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}}}}}}}}}}}}}}}}}}}}}}}}},"t":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.020833333333333332}}}}},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"i":{"docs":{},"m":{"docs":{},"u":{"docs":{},"m":{"docs":{},"g":{"docs":{},"o":{"docs":{},"l":{"docs":{},"d":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}}}}}}}}}}}}}}}}}}},"e":{"docs":{},"k":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.037037037037037035}}}}},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02}},",":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.017241379310344827}}}},"s":{"docs":{},"t":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.017241379310344827}}}}}}},"e":{"docs":{},"d":{"docs":{},"i":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}}}}},"i":{"docs":{},"d":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.020942408376963352},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}},":":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.005235602094240838},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}},"[":{"docs":{},"x":{"docs":{},"]":{"docs":{},"[":{"docs":{},"y":{"docs":{},"]":{"docs":{},":":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.005235602094240838}}}}}}}},"i":{"docs":{},"]":{"docs":{},"[":{"docs":{},"j":{"docs":{},"]":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.008064516129032258}}}}}}}}}},"a":{"docs":{},"d":{"docs":{},"u":{"docs":{},"a":{"docs":{},"t":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.02631578947368421}}}}}}}},"l":{"docs":{},"o":{"docs":{},"b":{"docs":{},"a":{"docs":{},"l":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011235955056179775}},"s":{"docs":{},"/":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682}}}}}}}}},"i":{"docs":{},"v":{"docs":{},"e":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125}}}}},"a":{"docs":{},"m":{"docs":{},"e":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.005235602094240838},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}}}},"o":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.005235602094240838},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.008982035928143712}},"l":{"docs":{},"d":{"docs":{},"/":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}}}},":":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}},"e":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}},"o":{"docs":{},"d":{"docs":{},",":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0025806451612903226}}}}}}},"h":{"docs":{},"e":{"docs":{},"l":{"docs":{},"p":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02}},"e":{"docs":{},"r":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.020833333333333332},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}},"n":{"docs":{},"c":{"docs":{},"r":{"docs":{},"(":{"0":{"docs":{},",":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}}}},"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}},"s":{"docs":{},",":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}}},":":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}}}}}}}}}}}},"a":{"docs":{},"p":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.030303030303030304}},"q":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.017241379310344827}}}}},"r":{"docs":{},"e":{"docs":{},",":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}}}}},"a":{"docs":{},"s":{"docs":{},"h":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},")":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011235955056179775}}}}}}}},"l":{"docs":{},"f":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}}}},"t":{"docs":{},"t":{"docs":{},"p":{"docs":{},"s":{"docs":{},":":{"docs":{},"/":{"docs":{},"/":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},".":{"docs":{},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"/":{"docs":{},"p":{"docs":{},"r":{"docs":{},"o":{"docs":{},"b":{"docs":{},"l":{"docs":{},"e":{"docs":{},"m":{"docs":{},"s":{"docs":{},"/":{"2":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}},"3":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},"/":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282}}}}}}},"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02}}}}}},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"t":{"docs":{},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282}}}}}}},"u":{"docs":{},"s":{"docs":{},"i":{"docs":{},"n":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.006896551724137931}}}}}},"m":{"docs":{},"b":{"docs":{},"i":{"docs":{},"n":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}}}}}}}},"t":{"docs":{},"w":{"docs":{},"o":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282}}}}},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"i":{"docs":{},"m":{"docs":{},"u":{"docs":{},"m":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.03571428571428571},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.030303030303030304}}}}}}}},"o":{"docs":{},"s":{"docs":{},"t":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682}}}}},"i":{"docs":{},"n":{"docs":{},"i":{"docs":{},"m":{"docs":{},"u":{"docs":{},"m":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.030303030303030304}}}}}}}}},"l":{"docs":{},"o":{"docs":{},"n":{"docs":{},"g":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.07692307692307693}}}}}}},"w":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682}}}}}}}},"b":{"docs":{},"i":{"docs":{},"n":{"docs":{},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0053475935828877}}}}}}},"a":{"docs":{},"l":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.023809523809523808}}}},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.01098901098901099}}}}}},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0053475935828877}}}},"h":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.005235602094240838}}}}}}}}}},"p":{"docs":{},"a":{"docs":{},"t":{"docs":{},"h":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0053475935828877},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"i":{"docs":{},"d":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682}}}}}}},"d":{"docs":{},"e":{"docs":{},"e":{"docs":{},"p":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.006896551724137931}}}}}}}}},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.005235602094240838}}}}}},"g":{"docs":{},"e":{"docs":{},"n":{"docs":{},"e":{"docs":{},"r":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}}}}}}},"j":{"docs":{},"u":{"docs":{},"m":{"docs":{},"p":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}}}}},"h":{"docs":{},"o":{"docs":{},"u":{"docs":{},"s":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}}}}},"u":{"docs":{},"n":{"docs":{},"i":{"docs":{},"q":{"docs":{},"u":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}}}}}}}}}}}}}}},"e":{"docs":{},"x":{"docs":{},"p":{"docs":{},"l":{"docs":{},"o":{"docs":{},"r":{"docs":{},"e":{"docs":{},"/":{"docs":{},"c":{"docs":{},"h":{"docs":{},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"e":{"docs":{},"/":{"docs":{},"c":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{},"/":{"3":{"0":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282}}},"docs":{}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"/":{"docs":{},"w":{"docs":{},"e":{"docs":{},"e":{"docs":{},"k":{"docs":{},"l":{"docs":{},"i":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.017241379310344827},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.030303030303030304}}}}}}}}}}}}}}}},"d":{"docs":{},"i":{"docs":{},"s":{"docs":{},"c":{"docs":{},"u":{"docs":{},"s":{"docs":{},"s":{"docs":{},"/":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"v":{"docs":{},"i":{"docs":{},"e":{"docs":{},"w":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.03571428571428571}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"w":{"docs":{},"w":{"docs":{},"w":{"docs":{},".":{"docs":{},"g":{"docs":{},"e":{"docs":{},"e":{"docs":{},"k":{"docs":{},"s":{"docs":{},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"e":{"docs":{},"k":{"docs":{},"s":{"docs":{},".":{"docs":{},"o":{"docs":{},"r":{"docs":{},"g":{"docs":{},"/":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"i":{"docs":{},"m":{"docs":{},"u":{"docs":{},"m":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.015306122448979591},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.01098901098901099}}}}}}}},"e":{"docs":{},"r":{"docs":{},"g":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.03571428571428571}}}}}},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02}}}}},"u":{"docs":{},"m":{"docs":{},"b":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.01020408163265306}}}}}},"x":{"docs":{},"o":{"docs":{},"r":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653}}}}},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},"i":{"docs":{},"t":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.018518518518518517}}}}}}}},"t":{"docs":{},"a":{"docs":{},"g":{"docs":{},"/":{"docs":{},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{},"/":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.018518518518518517}}}}}}}}}}}}},"s":{"docs":{},"t":{"docs":{},"o":{"docs":{},"c":{"docs":{},"k":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"m":{"docs":{},"e":{"docs":{},"d":{"docs":{},"i":{"docs":{},"u":{"docs":{},"m":{"docs":{},".":{"docs":{},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"/":{"docs":{},"@":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"f":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"k":{"docs":{},"/":{"docs":{},"b":{"docs":{},"i":{"docs":{},"n":{"docs":{},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011235955056179775}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"o":{"docs":{},"l":{"docs":{},"d":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.03296703296703297}},",":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}}}},"i":{"docs":{},"r":{"docs":{},"e":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.030303030303030304}}}}}},"k":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.005235602094240838},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.014970059880239521},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.030303030303030304}},"e":{"docs":{},"e":{"docs":{},"p":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.020833333333333332},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011235955056179775},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.03571428571428571}}}},"y":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}},",":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682}}},"b":{"docs":{},"o":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{},"/":{"docs":{},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"m":{"docs":{},"i":{"docs":{},"s":{"docs":{},"s":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"/":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}}}}}}}}}}}}}}}}}}},"=":{"docs":{},"l":{"docs":{},"a":{"docs":{},"m":{"docs":{},"b":{"docs":{},"d":{"docs":{},"a":{"docs":{"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.023255813953488372}}}}}}}}}}},"’":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282}}},"/":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.01020408163265306}}},":":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653},"Algorithms/":{"ref":"Algorithms/","tf":0.034482758620689655},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.005235602094240838},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.005988023952095809}}},"]":{"docs":{},"]":{"docs":{},")":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.005235602094240838}}}}},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.020942408376963352}}}}}}},"n":{"docs":{},"a":{"docs":{},"p":{"docs":{},"s":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}}}}}}},",":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}}}}}}}},"o":{"docs":{},"w":{"docs":{},"n":{"docs":{},",":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}}}}}},",":{"docs":{"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.023255813953488372}}}},"l":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.014018691588785047}},"e":{"docs":{},"v":{"docs":{},"e":{"docs":{},"l":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.020833333333333332},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.02247191011235955},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0053475935828877},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":3.333333333333333},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}},"w":{"docs":{},"i":{"docs":{},"s":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011235955056179775},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0053475935828877},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.006896551724137931}},"e":{"docs":{},",":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011235955056179775}}}}}}},"_":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.027586206896551724}}}}}}}}},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0106951871657754}},")":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0053475935828877}},":":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0053475935828877}}}}}}},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},")":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0025806451612903226}}}}}}},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"u":{"docs":{},"e":{"docs":{},")":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.013793103448275862}}}}}}}},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},")":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.023809523809523808},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}}}}}},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},")":{"docs":{},":":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.023809523809523808}}}}}}}},"b":{"docs":{},"o":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{},")":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.005235602094240838}}},"[":{"0":{"docs":{},"]":{"docs":{},")":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.005235602094240838}}}}},"docs":{}}}}}}},"g":{"docs":{},"r":{"docs":{},"i":{"docs":{},"d":{"docs":{},")":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.005235602094240838}},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}}},"[":{"0":{"docs":{},"]":{"docs":{},")":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.005235602094240838},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}}}},"docs":{}}}}}},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},")":{"docs":{},":":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.005235602094240838}}}}}}}},"d":{"docs":{},"o":{"docs":{},"m":{"docs":{},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{},")":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.005988023952095809}}}}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{},"e":{"docs":{},"s":{"docs":{},")":{"docs":{},"+":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}}}}}}}}},"p":{"docs":{},"r":{"docs":{},"i":{"docs":{},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},")":{"docs":{},")":{"docs":{},":":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}}}}}}}}}}},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0025806451612903226}},"e":{"docs":{},":":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}}}}}}}},"f":{"docs":{},"t":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.02247191011235955},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0053475935828877},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.009345794392523364},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.005235602094240838}},"/":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011235955056179775}}},",":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.016042780748663103},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682}}},":":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0053475935828877}}},"_":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},",":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682}}}}},"i":{"docs":{},"n":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682}}}}}}}},"s":{"docs":{},"s":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.01020408163265306}}}},"a":{"docs":{},"v":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.018518518518518517},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.006896551724137931}},"e":{"docs":{},"s":{"docs":{},"/":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125}}}}}},"f":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0053475935828877}}},"d":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.03571428571428571}}}},"t":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.005235602094240838}}}}}}},"i":{"docs":{},"b":{"docs":{},"r":{"docs":{},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.020833333333333332}}}}}}},"s":{"docs":{},"t":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125},"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.046511627906976744}},"[":{"docs":{},"i":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}},"n":{"docs":{},"t":{"docs":{},"]":{"docs":{},")":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0025806451612903226}}},":":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682}}}}}},"]":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}},"n":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.018518518518518517}}},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"]":{"docs":{},":":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125}}}}}}},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"[":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"]":{"docs":{},"]":{"docs":{},":":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0053475935828877}}},",":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.005235602094240838}}},")":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}}}}}}},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"]":{"docs":{},"]":{"docs":{},",":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.005235602094240838}}}}}}}}}}}}}},":":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011235955056179775},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.008982035928143712}}},")":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.023809523809523808},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.011976047904191617}}},",":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.005988023952095809}}},".":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}},"}":{"docs":{"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.023255813953488372}}}}},"m":{"docs":{},"i":{"docs":{},"t":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.005235602094240838},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}},",":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}}}}},"o":{"docs":{},"o":{"docs":{},"k":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125}}},"p":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.005988023952095809},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}}},"n":{"docs":{},"g":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.005235602094240838}},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"z":{"docs":{},"i":{"docs":{},"g":{"docs":{},"z":{"docs":{},"a":{"docs":{},"g":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0053475935828877}}}}}}}}}}}}}}}},"r":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}}}}},"w":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"m":{"docs":{},"o":{"docs":{},"n":{"docs":{},"a":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682}}}}}}}}}}}}}}}}}}}}}}}}}},"t":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}},"c":{"docs":{},"a":{"docs":{},"l":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.016483516483516484}}}}}},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.030303030303030304}}}}}}}}},"m":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0025806451612903226}},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.020833333333333332},"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.01098901098901099}}}}}}}},"t":{"docs":{},"c":{"docs":{},"h":{"docs":{},"e":{"docs":{},"d":{"docs":{},":":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653}}}}}}},"r":{"docs":{},"i":{"docs":{},"x":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.034482758620689655}}}}},"h":{"docs":{},".":{"docs":{},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},"p":{"docs":{},"o":{"docs":{},"s":{"docs":{},"i":{"docs":{},"t":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}}}}}},"i":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}}}}}}}}},"x":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.009345794392523364},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.030303030303030304}},"/":{"docs":{},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{},".":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653}}},":":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653}}}}}}},"i":{"docs":{},"m":{"docs":{},"u":{"docs":{},"m":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.008064516129032258},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.016483516483516484}},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.012096774193548387}},")":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}}}}}}},"a":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653}}}}},"(":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},".":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},",":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0053475935828877}}}}}}}}},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{},",":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682}}}}}}}}}}}},"d":{"docs":{},"f":{"docs":{},"s":{"docs":{},"(":{"docs":{},"i":{"docs":{},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}}},"x":{"docs":{},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"c":{"docs":{},"l":{"docs":{},"u":{"docs":{},"d":{"docs":{},"e":{"docs":{},",":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}}}}}}}}},"m":{"docs":{},"e":{"docs":{},"m":{"docs":{},"o":{"docs":{},"[":{"docs":{},"i":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}}}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{},",":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}}}},"docs":{}}}}}},"c":{"docs":{},"a":{"docs":{},"s":{"docs":{},"h":{"docs":{},",":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.01098901098901099}}}}}}},"h":{"docs":{},"o":{"docs":{},"l":{"docs":{},"d":{"docs":{},",":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.01098901098901099}}}}}}}},"_":{"docs":{},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682}}}}}}}},"p":{"docs":{},"r":{"docs":{},"o":{"docs":{},"f":{"docs":{},"i":{"docs":{},"t":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}}}}}}}}}}}}},"k":{"docs":{},"e":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011235955056179775},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.005988023952095809}}}},"d":{"docs":{},"e":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.02631578947368421}}}}},"e":{"docs":{},"t":{"docs":{},"h":{"docs":{},"o":{"docs":{},"d":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}},"s":{"docs":{},",":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.020833333333333332}}}}}}}},"m":{"docs":{},"o":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.003870967741935484}},";":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}},"[":{"0":{"docs":{},"]":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}}},"1":{"docs":{},"]":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}}},"docs":{},"i":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}},"]":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}}},"n":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}},"p":{"docs":{},"o":{"docs":{},"s":{"docs":{},"i":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"]":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}}}}}}}}}},"x":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0025806451612903226}},"]":{"docs":{},"[":{"docs":{},"i":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}},"y":{"docs":{},"]":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.003870967741935484}}}}}}}},"i":{"docs":{},"z":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.005161290322580645}}}},"r":{"docs":{},"i":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}}}}},"r":{"docs":{},"g":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.03571428571428571}}}},"n":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.02631578947368421}}}}}}}},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"k":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.020833333333333332}}}}},"c":{"docs":{},"e":{"docs":{},"l":{"docs":{},"l":{"docs":{},"a":{"docs":{},"n":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.018518518518518517},"Miscellaneous/":{"ref":"Miscellaneous/","tf":11},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":5}}}}}}}}},"n":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.030303030303030304}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653}}}}},"i":{"docs":{},"m":{"docs":{},"u":{"docs":{},"m":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.005235602094240838},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.005161290322580645},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.016483516483516484}}}},"a":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.01098901098901099}}}}},"(":{"2":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}},"docs":{}},"s":{"docs":{},"t":{"docs":{},"e":{"docs":{},"p":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}}}}}}}}}}}}},"d":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.023809523809523808},"Algorithms/":{"ref":"Algorithms/","tf":0.05172413793103448}}}},"o":{"docs":{},"v":{"docs":{},"e":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}},"z":{"docs":{},"e":{"docs":{},"r":{"docs":{},"o":{"docs":{},"e":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282}}}}}}}}}}}}}},":":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.01020408163265306}}}}},"d":{"docs":{},"u":{"docs":{},"l":{"docs":{},"o":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653}}}}}},"r":{"docs":{},"e":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.015306122448979591},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.006896551724137931},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}}}},"u":{"docs":{},"l":{"docs":{},"t":{"docs":{},"i":{"docs":{},",":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653}}},"p":{"docs":{},"l":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}}}}}}},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}},":":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0025806451612903226}}}},"o":{"docs":{},"o":{"docs":{},"p":{"docs":{},":":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.020833333333333332}}}}},"p":{"docs":{},"t":{"docs":{},"i":{"docs":{},"m":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.020833333333333332},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.018518518518518517},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.005235602094240838},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0064516129032258064}},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{},"y":{"docs":{},".":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.005235602094240838}}}}}}},"i":{"docs":{},"z":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},".":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}}}}}}}}}},"o":{"docs":{},"n":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.008982035928143712},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.008064516129032258}}}}}},"e":{"docs":{},"r":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.010471204188481676}}},"n":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.008982035928143712}},")":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.005988023952095809}}},":":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}}}}}}}}}}},"n":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02},"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.038461538461538464},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.07142857142857142},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.02631578947368421}},"c":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.003870967741935484}}}},"d":{"docs":{},"d":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653}}}},"l":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653}}}}}},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011235955056179775},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0053475935828877},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}}}}},"b":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"c":{"docs":{},"l":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.005235602094240838}}}}},"r":{"docs":{},"u":{"docs":{},"c":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},".":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}}}}}}}}}},"e":{"docs":{},"r":{"docs":{},"v":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}}}}}},"t":{"docs":{},"h":{"docs":{},"e":{"docs":{},"r":{"docs":{},"w":{"docs":{},"i":{"docs":{},"s":{"docs":{},"e":{"docs":{},")":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.005235602094240838}}}}}}}}}}},"u":{"docs":{},"t":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.005988023952095809},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}}},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}}}}},"l":{"docs":{},"a":{"docs":{},"p":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.03571428571428571}}}}}}}},"f":{"docs":{},".":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}}},"(":{"2":{"docs":{},"^":{"docs":{},"n":{"docs":{},")":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}}}}},"docs":{}},"w":{"docs":{},"n":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}}},"p":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.02564102564102564}},"o":{"docs":{},"s":{"docs":{},"s":{"docs":{},"i":{"docs":{},"b":{"docs":{},"l":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.020833333333333332},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.003870967741935484}},"e":{"docs":{},":":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.020833333333333332}}},".":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}}}}}}},"i":{"docs":{},"t":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.04},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}}}}}}},"t":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.01020408163265306}},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.02247191011235955},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":5.0046728971962615}}}}}}},"w":{"docs":{},"e":{"docs":{},"r":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02}}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":5.0256410256410255},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.015306122448979591}},"s":{"docs":{},":":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282}}}}}}}}},"p":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011235955056179775},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.005235602094240838}}}}}}}},"r":{"docs":{},"o":{"docs":{},"b":{"docs":{},"l":{"docs":{},"e":{"docs":{},"m":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.020833333333333332},"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.04},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.037037037037037035},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011235955056179775},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.01032258064516129},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.03571428571428571},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.02631578947368421}},"s":{"docs":{},")":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}}}}}}},"p":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282}},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{},"y":{"docs":{},",":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.020833333333333332}}}},"i":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}},"e":{"docs":{},"s":{"docs":{},",":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682}}},";":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682}}}}}}}}}},"d":{"docs":{},"u":{"docs":{},"c":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.01020408163265306}},"t":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.02040816326530612}}}}}},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0053475935828877},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}},":":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}}}}}},"g":{"docs":{},"r":{"docs":{},"a":{"docs":{},"m":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":5.010322580645162},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}},":":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},")":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0025806451612903226}}},":":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}}}}}}}}}},"f":{"docs":{},"i":{"docs":{},"t":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.016483516483516484}}}}},"j":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},",":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.02631578947368421}}}}}}}},"e":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.01020408163265306}},"f":{"docs":{},"i":{"docs":{},"x":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.01020408163265306}},"_":{"docs":{},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653}}}},"1":{"docs":{},"]":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653}}}},"docs":{}}}}}}}}},"v":{"docs":{},"i":{"docs":{},"o":{"docs":{},"u":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.02631578947368421}}}}}},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.02247191011235955},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":5.005347593582887}}}}}}},"s":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011235955056179775}}}}}}},"i":{"docs":{},"o":{"docs":{},"r":{"docs":{},"i":{"docs":{},"t":{"docs":{},"i":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.04},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.018518518518518517},"Algorithms/":{"ref":"Algorithms/","tf":0.017241379310344827},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.06060606060606061}}}}}}},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},",":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}},"[":{"0":{"docs":{},"]":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}},"docs":{},"i":{"docs":{},"]":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.01098901098901099}},")":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.01098901098901099}}}}}}}}}},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{},"i":{"docs":{},"c":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011235955056179775}},"e":{"docs":{},",":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}}}}}}}}},"y":{"docs":{},"t":{"docs":{},"h":{"docs":{},"o":{"docs":{},"n":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.020833333333333332},"Algorithms/":{"ref":"Algorithms/","tf":0.017241379310344827},"PythonicTricks/":{"ref":"PythonicTricks/","tf":5.023255813953488}}}}}}},"e":{"docs":{},"r":{"docs":{},"m":{"docs":{},"u":{"docs":{},"t":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.005988023952095809},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"/":{"docs":{},"s":{"docs":{},"o":{"docs":{},"l":{"docs":{},"u":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"/":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02}}}}}}}}}}}},":":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}}}}}}}}}},"_":{"docs":{},"r":{"docs":{},"e":{"docs":{},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}}}}}}}}}}}}}}},"f":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0053475935828877}}}}},"o":{"docs":{},"r":{"docs":{},"m":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0025806451612903226},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.06060606060606061}}}}}}}},"a":{"docs":{},"i":{"docs":{},"r":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282}}}},"s":{"docs":{},"s":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.02247191011235955},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0053475935828877},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682}}}},"r":{"docs":{},"t":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.005235602094240838}},"i":{"docs":{},"c":{"docs":{},"u":{"docs":{},"l":{"docs":{},"a":{"docs":{},"r":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}},"l":{"docs":{},"i":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125}}}}}}}}},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},":":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}}}}}}},"a":{"docs":{},"l":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.030303030303030304}}}}}},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.020689655172413793}},"h":{"docs":{},"e":{"docs":{},"s":{"docs":{},"e":{"docs":{},"s":{"docs":{},"/":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}}}}}}}}}}},"a":{"docs":{},"m":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}}}}},"t":{"docs":{},"h":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.015625},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0106951871657754},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.005235602094240838},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0025806451612903226}},")":{"docs":{},":":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125}}}},"s":{"docs":{},".":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125}}},"/":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125}},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"m":{"docs":{},"i":{"docs":{},"s":{"docs":{},"s":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"/":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}}}}}}}}}}}}}},"u":{"docs":{},"m":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0053475935828877}}}}}}}}}}},",":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0053475935828877}}},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},".":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},")":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0053475935828877}}}}}}}}}}}}}}}}}}}}}},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011235955056179775}}}},"b":{"docs":{},"l":{"docs":{},"i":{"docs":{},"c":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.008064516129032258},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.005161290322580645}}}}}}},":":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682}}}},"r":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.03271028037383177},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.005988023952095809}},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},"a":{"docs":{},"b":{"docs":{},"l":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.020833333333333332}}}}}},"l":{"docs":{},"l":{"docs":{},"i":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282}}}}},"c":{"docs":{},"h":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.005235602094240838}}}}},"m":{"docs":{},"e":{"docs":{},"m":{"docs":{},"b":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.020833333333333332}}}}},"o":{"docs":{},"v":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}}}},"t":{"docs":{},"u":{"docs":{},"r":{"docs":{},"n":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011235955056179775},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0625},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0481283422459893},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.04205607476635514},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.041379310344827586},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.047619047619047616},"Algorithms/":{"ref":"Algorithms/","tf":0.034482758620689655},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.005235602094240838},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.03293413173652695},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.04032258064516129},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.02967741935483871},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.01098901098901099}},"(":{"docs":{},"l":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682}}}}}}}},"f":{"docs":{},"e":{"docs":{},"r":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}},"e":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},":":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}}}}}}}}}},"l":{"docs":{},"a":{"docs":{},"t":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653}}}},"i":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}}},"q":{"docs":{},"u":{"docs":{},"i":{"docs":{},"r":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.005235602094240838},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0025806451612903226}}}}}},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125}},"s":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.018518518518518517},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.02247191011235955},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.014970059880239521},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.012096774193548387},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.007741935483870968}},"e":{"docs":{},"(":{"0":{"docs":{},",":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}}},"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},")":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},")":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682}}}}}}}}},":":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682}}}}}}},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{},"r":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},",":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}},":":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}}}}}}}}}}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},":":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}}},")":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}},".":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}}}}}}}},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011235955056179775},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682}},"/":{"docs":{},"u":{"docs":{},"p":{"docs":{},"d":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682}}}}}}}}},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.02631578947368421}}}}}},"p":{"docs":{},"e":{"docs":{},"a":{"docs":{},"t":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.07692307692307693}}}},"t":{"docs":{},"i":{"docs":{},"t":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.005235602094240838}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},")":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}}},",":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}}}}}}}}}},"l":{"docs":{},"a":{"docs":{},"c":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0053475935828877}}}}}},"s":{"docs":{},"u":{"docs":{},"l":{"docs":{},"t":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.015625},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0106951871657754},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.009345794392523364},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"p":{"docs":{},"a":{"docs":{},"t":{"docs":{},"h":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125}},")":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0053475935828877}}}}}}},"k":{"docs":{},"e":{"docs":{},"y":{"docs":{},")":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682}}}}}}}}}}}}}}}}},"t":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}}},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}}},"s":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}}}}},"d":{"docs":{},"u":{"docs":{},"c":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}}}}},"u":{"docs":{},"n":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.01020408163265306},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.005235602094240838},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.03571428571428571}},"t":{"docs":{},"i":{"docs":{},"m":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.020833333333333332},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}}}}}},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.033707865168539325},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0053475935828877},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.014018691588785047},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}},",":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.016042780748663103}}},":":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0053475935828877}}},"_":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},",":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682}}}}},"i":{"docs":{},"n":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682}}}}}},"m":{"docs":{},"o":{"docs":{},"s":{"docs":{},"t":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.017241379310344827}},",":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.017241379310344827}}}}}}}}}}},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0053475935828877},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.013793103448275862}},":":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0234375},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.026737967914438502},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.02336448598130841},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.027586206896551724}}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},":":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682}}}}}}}}}}},"b":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0025806451612903226}}}}}}}},"b":{"docs":{},"e":{"docs":{},"r":{"docs":{},"/":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}}}}}},"w":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}},"[":{"docs":{},"i":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}},"]":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}}}}}},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{},"e":{"docs":{},"(":{"0":{"docs":{},",":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.015706806282722512},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.01032258064516129}}}},"1":{"docs":{},",":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}},"2":{"docs":{},",":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}}},"3":{"docs":{},",":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}}},"docs":{},"x":{"docs":{},")":{"docs":{},"]":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.005235602094240838}}}}},"m":{"docs":{},")":{"docs":{},")":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}}}},"n":{"docs":{},")":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}}}}}}}},")":{"docs":{},":":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}}}},":":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}}}},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.07692307692307693},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.012096774193548387},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.020833333333333332}}}}},"(":{"docs":{},")":{"docs":{},")":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}}}},")":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}}},"a":{"docs":{},"r":{"docs":{},"c":{"docs":{},"h":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02},"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.023809523809523808},"Algorithms/":{"ref":"Algorithms/","tf":0.017241379310344827},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.015706806282722512},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":3.3413978494623655},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}}}}},"c":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},")":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.018518518518518517}}}}}}}},"e":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011235955056179775},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}},"n":{"docs":{},")":{"docs":{},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}},":":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}}},".":{"docs":{},"a":{"docs":{},"d":{"docs":{},"d":{"docs":{},"(":{"docs":{},"(":{"docs":{},"i":{"docs":{},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}}}}}}}},"d":{"docs":{},"i":{"docs":{},"s":{"docs":{},"c":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{},"(":{"docs":{},"(":{"docs":{},"i":{"docs":{},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}}}}}}}}}}}}},":":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}}}},"l":{"docs":{},"f":{"docs":{},".":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.016042780748663103}}}}}}}},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.014018691588785047}}}}}}}}}}},"t":{"docs":{},"o":{"docs":{},"t":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.016042780748663103}}}}},"l":{"docs":{},"c":{"docs":{},"a":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.014018691588785047}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"i":{"docs":{},"d":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.014018691588785047}}}}}}},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"u":{"docs":{},"c":{"docs":{},"t":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"(":{"docs":{},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},"[":{"docs":{},":":{"docs":{},"m":{"docs":{},"i":{"docs":{},"d":{"docs":{},"]":{"docs":{},")":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.023809523809523808}}}}}}}},"m":{"docs":{},"i":{"docs":{},"d":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.023809523809523808}}}}}}}}}}}}}}}}}}}}}}},"a":{"docs":{},"c":{"docs":{},"c":{"docs":{},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}},"e":{"docs":{},"d":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.005988023952095809}}}}}}}}}}}}},"b":{"docs":{},"u":{"docs":{},"c":{"docs":{},"k":{"docs":{},"e":{"docs":{},"t":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"d":{"docs":{},"o":{"docs":{},"m":{"docs":{},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},")":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}}}}}}}}}}}}}}}}}}},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}}}}}}}}}}}}}},"n":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.014970059880239521}},")":{"docs":{},":":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.014970059880239521}}}}},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{},"m":{"docs":{},"_":{"docs":{},"r":{"docs":{},"e":{"docs":{},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{},"(":{"0":{"docs":{},",":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}}}},"docs":{},"k":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}}}}}}}}}},"u":{"docs":{},"t":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.011976047904191617}},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"'":{"docs":{},"'":{"docs":{},".":{"docs":{},"j":{"docs":{},"o":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},"b":{"docs":{},"u":{"docs":{},"c":{"docs":{},"k":{"docs":{},"e":{"docs":{},"t":{"docs":{},")":{"docs":{},")":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}}}}}}}}}}}}}}}}}},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},".":{"docs":{},"b":{"docs":{},"u":{"docs":{},"c":{"docs":{},"k":{"docs":{},"e":{"docs":{},"t":{"docs":{},"[":{"docs":{},":":{"docs":{},"]":{"docs":{},")":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"o":{"docs":{},"w":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.005988023952095809}},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},".":{"docs":{},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{},"[":{"docs":{},":":{"docs":{},"]":{"docs":{},")":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{},"s":{"docs":{},"e":{"docs":{},"(":{"docs":{},"k":{"docs":{},",":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}}}}}}}}}}}},"s":{"docs":{},"o":{"docs":{},"l":{"docs":{},"u":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"_":{"docs":{},"s":{"docs":{},"e":{"docs":{},"a":{"docs":{},"r":{"docs":{},"c":{"docs":{},"h":{"docs":{},"(":{"0":{"docs":{},",":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}}}},"docs":{},"k":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.005988023952095809}}}}}}}}}},"f":{"docs":{},"u":{"docs":{},"n":{"docs":{},"c":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"(":{"docs":{},"c":{"docs":{},"a":{"docs":{},"s":{"docs":{},"e":{"docs":{},"_":{"docs":{},"o":{"docs":{},"n":{"docs":{},"e":{"docs":{},",":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}}}}},"t":{"docs":{},"w":{"docs":{},"o":{"docs":{},",":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}}}}}}}}}}}}}}}}}}}}}}}}}}},"u":{"docs":{},"b":{"docs":{},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"d":{"docs":{},"o":{"docs":{},"m":{"docs":{},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{},"[":{"docs":{},"k":{"docs":{},"]":{"docs":{},")":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}}}}}}}}}}}}}}}}}}},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}}}}}}}}}}}}}},"_":{"docs":{},"h":{"docs":{},"e":{"docs":{},"l":{"docs":{},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{},"c":{"docs":{},"o":{"docs":{},"p":{"docs":{},"y":{"docs":{},"p":{"docs":{},"a":{"docs":{},"s":{"docs":{},"t":{"docs":{},"e":{"docs":{},"(":{"docs":{},"n":{"docs":{},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.012096774193548387}}}}}}}}}}}}}}}}}}}}}}},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.017964071856287425}},".":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}}}}}},"l":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.03296703296703297}},"/":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}}}},"o":{"docs":{},"l":{"docs":{},"v":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.020833333333333332},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0064516129032258064}}},"u":{"docs":{},"t":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011235955056179775},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.005235602094240838},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.012096774193548387},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.015483870967741935},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.03571428571428571}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},":":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.015625},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0213903743315508},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.018691588785046728},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.020689655172413793},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.023809523809523808},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.010471204188481676},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.011612903225806452},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.030303030303030304}}},",":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011235955056179775},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}},".":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011235955056179775},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}}},"s":{"docs":{},":":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.005235602094240838},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}},".":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}}},"_":{"docs":{},"s":{"docs":{},"e":{"docs":{},"a":{"docs":{},"r":{"docs":{},"c":{"docs":{},"h":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}}}}}}}}}}}}}},"f":{"docs":{},"u":{"docs":{},"n":{"docs":{},"c":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}}}}}}}}}}}}}}}},"g":{"docs":{},"e":{"docs":{},"n":{"docs":{},"e":{"docs":{},"r":{"docs":{},"a":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},":":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}}}}}}}}}}}},"(":{"docs":{},"o":{"docs":{},"b":{"docs":{},"j":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},")":{"docs":{},":":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}}}}}}}}}}}}}}},"r":{"docs":{},"t":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.04},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.018518518518518517},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.03571428571428571},"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.023255813953488372}},":":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.030303030303030304}}},"e":{"docs":{},"d":{"docs":{},"(":{"docs":{},"x":{"docs":{},".":{"docs":{},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{},"m":{"docs":{},"s":{"docs":{},"(":{"docs":{},")":{"docs":{},",":{"docs":{"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.023255813953488372}}}}}}}}}}}}}}}}},"m":{"docs":{},"e":{"docs":{},"t":{"docs":{},"i":{"docs":{},"m":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0053475935828877},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682}}}},"h":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}}},"w":{"docs":{},"h":{"docs":{},"e":{"docs":{},"r":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.005235602094240838}}}}}}}}},"t":{"docs":{},"u":{"docs":{},"p":{"docs":{},"i":{"docs":{},"d":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.020833333333333332}}}}}},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{"DataStructures/":{"ref":"DataStructures/","tf":0.2},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.018518518518518517},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":5.076923076923077}}}}}}},"c":{"docs":{},"k":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.04},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.015625},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.005235602094240838},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{},"r":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},")":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125}}}}}}}}}}}}}}}}},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125}}}}}}}}}},"r":{"docs":{},"t":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653},"Algorithms/":{"ref":"Algorithms/","tf":0.017241379310344827},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.03571428571428571}},")":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.017241379310344827}}},":":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.017241379310344827}}}}},"i":{"docs":{},"r":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0025806451612903226}},"s":{"docs":{},":":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}}}}}},"r":{"docs":{},"u":{"docs":{},"c":{"docs":{},"t":{"docs":{},"u":{"docs":{},"r":{"docs":{"DataStructures/":{"ref":"DataStructures/","tf":5.2}},"e":{"docs":{},":":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282}}}}}}}}},"i":{"docs":{},"c":{"docs":{},"t":{"docs":{},"l":{"docs":{},"i":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653}}}}}},"n":{"docs":{},"g":{"docs":{"DataStructures/Strings/":{"ref":"DataStructures/Strings/","tf":11},"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.023255813953488372}}}}},"(":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},".":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},")":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.015625}},")":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125}}}}}}}}}}}}},")":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.005235602094240838}}}},"e":{"docs":{},"p":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.005235602094240838},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.005988023952095809},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.008064516129032258},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.003870967741935484},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.07142857142857142}},"s":{"docs":{},",":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.010471204188481676}}}},",":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}}}},"o":{"docs":{},"r":{"docs":{},"e":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.015306122448979591}}}},"c":{"docs":{},"k":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":10.027472527472527}},",":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}},".":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.01098901098901099}}}}}}},"i":{"docs":{},"m":{"docs":{},"i":{"docs":{},"l":{"docs":{},"a":{"docs":{},"r":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.005988023952095809},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.007741935483870968},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.01098901098901099}}}}}}},"z":{"docs":{},"e":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.030612244897959183},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.027586206896551724},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}},":":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.013793103448275862}}}}},"t":{"docs":{},"u":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},",":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011235955056179775}}}}}}}}}}}},"u":{"docs":{},"b":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653}},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},"a":{"docs":{},"y":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":10.071428571428571}},"/":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653}}},"s":{"docs":{},",":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653}}},":":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.01020408163265306}}}},".":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}}}}}}},"s":{"docs":{},"e":{"docs":{},"q":{"docs":{},"u":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653}},"e":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},".":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653}}}}}}}}}},"t":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":10.018518518518519},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}},"s":{"docs":{},":":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}}}}},"t":{"docs":{},"r":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.07692307692307693}},"u":{"docs":{},"c":{"docs":{},"t":{"docs":{},"u":{"docs":{},"r":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}}}}}}}}},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.014018691588785047}},"e":{"docs":{},".":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682}}}}}}},"p":{"docs":{},"r":{"docs":{},"o":{"docs":{},"b":{"docs":{},"l":{"docs":{},"e":{"docs":{},"m":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.003870967741935484}}}}}}}}}},"m":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.015306122448979591},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.05555555555555555},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0053475935828877},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.009345794392523364},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.008064516129032258},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.005161290322580645}},"/":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.006896551724137931}},"d":{"docs":{},"i":{"docs":{},"s":{"docs":{},"c":{"docs":{},"u":{"docs":{},"s":{"docs":{},"s":{"docs":{},"/":{"1":{"6":{"5":{"1":{"0":{"docs":{},"/":{"docs":{},"p":{"docs":{},"y":{"docs":{},"t":{"docs":{},"h":{"docs":{},"o":{"docs":{},"n":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}}}}}}}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}},",":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0025806451612903226}}},"o":{"docs":{},"f":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},"l":{"docs":{},"e":{"docs":{},"a":{"docs":{},"v":{"docs":{},"e":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125}}}}}}}}}}}}}}}}}}}},":":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0053475935828877},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"b":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0053475935828877}}}}}}}}}}}}}}},"s":{"docs":{},".":{"docs":{},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{},"m":{"docs":{},"s":{"docs":{},"(":{"docs":{},")":{"docs":{},":":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682}}}}}}}}}}},"[":{"docs":{},"l":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.009345794392523364}}}}}},"r":{"docs":{},"e":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011235955056179775},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.02631578947368421}}}}},"l":{"docs":{},"o":{"docs":{},"w":{"docs":{},"e":{"docs":{},"r":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282}}}}}},"i":{"docs":{},"d":{"docs":{},"e":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.01020408163265306},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.07692307692307693}}}}}},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"s":{"docs":{},"f":{"docs":{},"i":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}}}}}},"m":{"docs":{},"e":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}}},"w":{"docs":{},"a":{"docs":{},"p":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653}}}}},"m":{"docs":{},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}},"e":{"docs":{},"r":{"docs":{},",":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.017241379310344827}}}},"s":{"docs":{},"t":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.017241379310344827},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.030303030303030304}}}}}}}}},"h":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"p":{"docs":{},"a":{"docs":{},"t":{"docs":{},"h":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.005235602094240838}}}}}}}}}}}}}}}}}},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}}}}},"a":{"docs":{},"r":{"docs":{},"e":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.016483516483516484}}}}}},":":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}}},"c":{"docs":{},"e":{"docs":{},"n":{"docs":{},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{},"o":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}}}}}}}}},"q":{"docs":{},"u":{"docs":{},"a":{"docs":{},"r":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0025806451612903226}}}}}},"p":{"docs":{},"e":{"docs":{},"c":{"docs":{},"i":{"docs":{},"f":{"docs":{},"i":{"docs":{},"c":{"docs":{},"s":{"docs":{},",":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.02631578947368421}}}}}}}}}}}},"u":{"docs":{},"s":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.0625},"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.015625},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.015706806282722512},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.005988023952095809},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.005161290322580645},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.01098901098901099},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.030303030303030304}},"e":{"docs":{},"f":{"docs":{},"u":{"docs":{},"l":{"docs":{},":":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.005235602094240838}}}}}}},"u":{"docs":{},"a":{"docs":{},"l":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}},"l":{"docs":{},"y":{"docs":{},",":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}}}}}}}},"n":{"docs":{},"l":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653}}}}}},"n":{"docs":{},"e":{"docs":{},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125}}}}}}}}}}},"t":{"docs":{},"i":{"docs":{},"l":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125}}}}},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.023809523809523808},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}}}}}}}}},"i":{"docs":{},"q":{"docs":{},"u":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0025806451612903226}},"e":{"docs":{},"p":{"docs":{},"a":{"docs":{},"t":{"docs":{},"h":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0025806451612903226}}}}}}}}}}}}}}}}},"k":{"docs":{},"n":{"docs":{},"o":{"docs":{},"w":{"docs":{},"n":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0025806451612903226}}}}}}}},"p":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.02247191011235955},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.005235602094240838},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.005161290322580645},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.02631578947368421}},"d":{"docs":{},"a":{"docs":{},"t":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011235955056179775},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}}}}},"v":{"docs":{"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.046511627906976744}},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{},"a":{"docs":{},"b":{"docs":{},"l":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.020833333333333332},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}},"t":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.030303030303030304}}}}}},"l":{"docs":{},"u":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.02040816326530612},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0053475935828877},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.014018691588785047},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.006896551724137931},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044},"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.023255813953488372}},"e":{"docs":{},".":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011235955056179775},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682}}},":":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682}}},"s":{"docs":{},",":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}}}}}},"g":{"docs":{},"u":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.02631578947368421}}}}},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{},"i":{"docs":{},"c":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011235955056179775}}}}}}},"i":{"docs":{},"s":{"docs":{},"i":{"docs":{},"t":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.02617801047120419},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}},"e":{"docs":{},"d":{"docs":{},"[":{"docs":{},"x":{"docs":{},"]":{"docs":{},"[":{"docs":{},"y":{"docs":{},"]":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0025806451612903226}},"[":{"1":{"docs":{},"]":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.005235602094240838}}}},"docs":{}},":":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}}}}}}}}}}}}}}},"w":{"docs":{},"r":{"docs":{},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.020833333333333332}}}}}},"e":{"docs":{},"a":{"docs":{},"p":{"docs":{},"o":{"docs":{},"n":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02}}}}}},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0025806451612903226}},"s":{"docs":{},",":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}}}}}}}},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"/":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282}}}}}},"y":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.018518518518518517}}},"n":{"docs":{},"t":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.02247191011235955},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0025806451612903226},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}}},"h":{"docs":{},"o":{"docs":{},"l":{"docs":{},"e":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.018518518518518517}}}}}},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"o":{"docs":{},"w":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.01020408163265306},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.07692307692307693}}}}}},"t":{"docs":{},"h":{"docs":{},"o":{"docs":{},"u":{"docs":{},"t":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.07692307692307693},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}}}}},"s":{"docs":{},"e":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":3.333333333333333}}}}},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.005235602094240838}},":":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.005235602094240838}}}},"k":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.02631578947368421}},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"/":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.030303030303030304}}}}}}}}}},"&":{"docs":{"DataStructures/":{"ref":"DataStructures/","tf":0.2}}},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{"DataStructures/":{"ref":"DataStructures/","tf":0.2},"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.018518518518518517},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":5.076923076923077},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011235955056179775},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.023809523809523808},"Algorithms/":{"ref":"Algorithms/","tf":0.05172413793103448},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.005235602094240838},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":5.052631578947368}},"s":{"docs":{},",":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.005235602094240838}}},":":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}}}},"/":{"3":{"5":{"6":{"5":{"2":{"0":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.03571428571428571}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}}}}}},"u":{"docs":{},"e":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.018518518518518517},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.020689655172413793},"Algorithms/":{"ref":"Algorithms/","tf":0.017241379310344827},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.015706806282722512},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.06060606060606061}},".":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011235955056179775}},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"(":{"docs":{},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{},"r":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},",":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.006896551724137931}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},",":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.006896551724137931}}}}}}}}}}}}}}}},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},",":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.006896551724137931}}}}}}}},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{},"r":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},")":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.006896551724137931}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},")":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.006896551724137931}}}}}}}}}}}}}}}},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},")":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.006896551724137931}}}}}}}}}}}}}},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.013793103448275862},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.005235602094240838}}}}}}}}}}}},":":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.013793103448275862},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.005235602094240838}}}}}},"a":{"docs":{},"n":{"docs":{},"t":{"docs":{},"i":{"docs":{},"t":{"docs":{},"i":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653}}}}}}}},"i":{"docs":{},"c":{"docs":{},"k":{"docs":{},"s":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.030303030303030304}}}}}}}}}},".":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"]":{"docs":{},")":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682}},")":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682}}}}}}}}},":":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682}}}},"'":{"docs":{},"q":{"docs":{},"u":{"docs":{},"i":{"docs":{},"r":{"docs":{},"k":{"docs":{},"y":{"docs":{},"'":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02}}}}}}}}},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"'":{"docs":{},")":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682}}},",":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.009345794392523364}}},":":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682}}}}}}}}}}}},"v":{"docs":{},"i":{"docs":{},"s":{"docs":{},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{},"d":{"docs":{},"'":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.008064516129032258}}}}}}}}}},"p":{"docs":{},"i":{"docs":{},"v":{"docs":{},"o":{"docs":{},"t":{"docs":{},"'":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}}}}}}}},"(":{"1":{"docs":{},")":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02}}}},"docs":{},"n":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}},"o":{"docs":{},"t":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0053475935828877}}},"d":{"docs":{},"e":{"docs":{},".":{"docs":{},"v":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.009345794392523364}}}}}}},"c":{"docs":{},"r":{"docs":{},")":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}}}}}},"d":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653}}},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.017241379310344827}},"_":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653}}}}}}}}}}},"i":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.012096774193548387}},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}},"n":{"docs":{},"t":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.003870967741935484}}}}},"s":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{},"e":{"docs":{},"d":{"docs":{},")":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653}}}}}}}},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},"_":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653}}}}}}}}}}}},"u":{"docs":{},"m":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0053475935828877}}}}},"c":{"docs":{},"h":{"docs":{},"e":{"docs":{},"c":{"docs":{},"k":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.018518518518518517}}}}}},"o":{"docs":{},"l":{"docs":{},"l":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},".":{"docs":{},"d":{"docs":{},"e":{"docs":{},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},")":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011235955056179775}}}}}}}}}}}}}}}}}}},"u":{"docs":{},"r":{"docs":{},"r":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0053475935828877}}}}}}}}},"l":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682}},"e":{"docs":{},"v":{"docs":{},"e":{"docs":{},"l":{"docs":{},"w":{"docs":{},"i":{"docs":{},"s":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011235955056179775}}}}}}}},"f":{"docs":{},"t":{"docs":{},"_":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682}}}}}}}},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}}}}}},"n":{"docs":{},"(":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{},"e":{"docs":{},"s":{"docs":{},")":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}}}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{},"s":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.033707865168539325}}}}}}},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},"_":{"docs":{},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682}}}}}}}}}}},"f":{"docs":{},"l":{"docs":{},"o":{"docs":{},"a":{"docs":{},"t":{"docs":{},"(":{"docs":{},"'":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682}}}}}}}}},"x":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}},"_":{"docs":{},"f":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"d":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.027586206896551724}}}}}}}}},"y":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}},"_":{"docs":{},"f":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"d":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.006896551724137931}}}}}}}},"o":{"docs":{},"u":{"docs":{},"'":{"docs":{},"l":{"docs":{},"l":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.005235602094240838}}}}}}}},"=":{"docs":{},"=":{"docs":{},"r":{"docs":{},")":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}}}}}},"k":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}}},"w":{"docs":{},"i":{"docs":{},"t":{"docs":{},"h":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}}}}}},"(":{"docs":{},"i":{"docs":{},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}}}},"p":{"docs":{},"o":{"docs":{},"s":{"docs":{},"i":{"docs":{},"t":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}}}}}},"u":{"docs":{},"s":{"docs":{},"e":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}}}},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"i":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}}}}},"b":{"docs":{},"a":{"docs":{},"g":{"docs":{},"_":{"docs":{},"w":{"docs":{},"e":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}}}}}}}}}},"o":{"docs":{},"t":{"docs":{},"t":{"docs":{},"o":{"docs":{},"m":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}}}}}}},"m":{"docs":{},"e":{"docs":{},"m":{"docs":{},"o":{"docs":{},"[":{"docs":{},"p":{"docs":{},"o":{"docs":{},"s":{"docs":{},"i":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"]":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}}}}}}}}}}}}}}},"t":{"docs":{},"o":{"docs":{},"p":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}},"t":{"docs":{},"a":{"docs":{},"l":{"docs":{},"_":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}}}}}}}}}}},"+":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.04},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.015306122448979591},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011235955056179775},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0390625},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0481283422459893},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.037383177570093455},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.023809523809523808},"Algorithms/":{"ref":"Algorithms/","tf":0.017241379310344827},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.020958083832335328},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.036290322580645164},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.024516129032258065},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.02197802197802198}},"=":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0053475935828877},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.006896551724137931},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}}},":":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.005988023952095809},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}},"e":{"docs":{},"l":{"docs":{},"e":{"docs":{},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.015306122448979591},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.005988023952095809},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.01098901098901099}},"/":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.04},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653}}},":":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}}},",":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.018518518518518517}}},"s":{"docs":{},"/":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}}}}}}},"i":{"docs":{},"f":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0053475935828877}},"(":{"docs":{},"w":{"docs":{},"e":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}}}}}}}}},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0025806451612903226}},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"/":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.005235602094240838}}}}}}}}}}}},"s":{"docs":{},"e":{"docs":{},":":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0053475935828877}}}}}},"a":{"docs":{},"s":{"docs":{},"i":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.023809523809523808}},"e":{"docs":{},"r":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682}}}}}},"c":{"docs":{},"h":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.01020408163265306},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.018518518518518517},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0025806451612903226}}}}},"f":{"docs":{},"f":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282}}}}},"i":{"docs":{},"c":{"docs":{},"i":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}}}}}},"n":{"docs":{},"d":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653},"Algorithms/":{"ref":"Algorithms/","tf":0.017241379310344827},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.005235602094240838},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.01098901098901099}},")":{"docs":{},":":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.017241379310344827}}}},",":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011235955056179775}}}}}}},"u":{"docs":{},"m":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0025806451612903226}}}}},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"y":{"docs":{},"t":{"docs":{},"i":{"docs":{},"m":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653}}}}},"w":{"docs":{},"h":{"docs":{},"e":{"docs":{},"r":{"docs":{},"e":{"docs":{},",":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.005235602094240838}}}}}}}}}},"n":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}},"t":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.03571428571428571}}}}}},"x":{"docs":{},"c":{"docs":{},"l":{"docs":{},"u":{"docs":{},"d":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653}},"e":{"docs":{},")":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}}}}}},"e":{"docs":{},"e":{"docs":{},"d":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.005235602094240838}}}}}},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682}},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.005235602094240838}}}}}}}},"s":{"docs":{},":":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}}}}}},"h":{"docs":{},"a":{"docs":{},"u":{"docs":{},"s":{"docs":{},"t":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.005235602094240838},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}}}}}},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"m":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.005235602094240838}}}}}},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.003870967741935484}}}}},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{},"i":{"docs":{},"e":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},",":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.02631578947368421}}},".":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.02631578947368421}}}}}}}}}}}},".":{"docs":{},"g":{"docs":{},".":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682}}}}},"g":{"docs":{},".":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.010471204188481676},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.003870967741935484}}}},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{},"i":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.005235602094240838},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}}}}},"r":{"docs":{},"r":{"docs":{},"o":{"docs":{},"r":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.005235602094240838}}}}}},"q":{"docs":{},"u":{"docs":{},"a":{"docs":{},"t":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}}}}}},"=":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.0641025641025641},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.018518518518518517},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0546875},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.03208556149732621},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.06074766355140187},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.1103448275862069},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.09523809523809523},"Algorithms/":{"ref":"Algorithms/","tf":0.017241379310344827},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.06806282722513089},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.041916167664670656},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.028225806451612902},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.04645161290322581},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.03296703296703297},"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.06976744186046512}},"=":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.016042780748663103},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.009345794392523364},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.020689655172413793},"Algorithms/":{"ref":"Algorithms/","tf":0.017241379310344827},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.005235602094240838},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.020958083832335328},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.012096774193548387},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.024516129032258065},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}},">":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.15384615384615385},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.015625},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.016042780748663103},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.018691588785046728},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.013793103448275862},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.023809523809523808},"Algorithms/":{"ref":"Algorithms/","tf":0.017241379310344827},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.015706806282722512},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.03293413173652695},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.020161290322580645},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.012903225806451613}},"=":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682},"Algorithms/":{"ref":"Algorithms/","tf":0.017241379310344827},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.005235602094240838},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}},"\"":{"docs":{},")":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.015625}}}}},"t":{"docs":{},"e":{"docs":{},"c":{"docs":{},"h":{"docs":{},"n":{"docs":{},"i":{"docs":{},"q":{"docs":{},"u":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.02564102564102564},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}}}}}}},"m":{"docs":{},"p":{"docs":{},"o":{"docs":{},"r":{"docs":{},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}}}}}}},"a":{"docs":{},"m":{"docs":{},"/":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.030303030303030304}},"d":{"docs":{},"i":{"docs":{},"s":{"docs":{},"c":{"docs":{},"u":{"docs":{},"s":{"docs":{},"s":{"docs":{},"/":{"5":{"3":{"9":{"7":{"9":{"7":{"docs":{},"/":{"docs":{},"c":{"docs":{},"%":{"2":{"docs":{},"b":{"docs":{},"%":{"2":{"docs":{},"b":{"docs":{},"p":{"docs":{},"y":{"docs":{},"t":{"docs":{},"h":{"docs":{},"o":{"docs":{},"n":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.030303030303030304}}}}}}}}}},"docs":{}}}},"docs":{}}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}}}},"l":{"docs":{},"l":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.02631578947368421}}}}},"w":{"docs":{},"o":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":5.0256410256410255},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.015306122448979591},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.018518518518518517},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.02631578947368421}}},"i":{"docs":{},"c":{"docs":{},"e":{"docs":{},"/":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}}}}},"y":{"docs":{},"p":{"docs":{},"i":{"docs":{},"c":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282}}}},"e":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.005235602094240838},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}}}},"h":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.016483516483516484}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653}}}},"s":{"docs":{},":":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.018518518518518517},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}}}},"e":{"docs":{},"r":{"docs":{},"e":{"docs":{},"'":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.005235602094240838}}}}}},"o":{"docs":{},"u":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}}}}}}},"i":{"docs":{},"l":{"docs":{},"l":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.01098901098901099}}}},"m":{"docs":{},"e":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0025806451612903226},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.01098901098901099},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.03571428571428571},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.05263157894736842}}}}},"r":{"docs":{},"a":{"docs":{},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011235955056179775},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":5.015625},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":5.005347593582887},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":5.0046728971962615},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":3.3402298850574708},"Algorithms/":{"ref":"Algorithms/","tf":0.034482758620689655}},"e":{"docs":{},"(":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},",":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0106951871657754}}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},",":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0213903743315508}}},")":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.009345794392523364}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},",":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0213903743315508}}},")":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.009345794392523364}}}}}}}}},")":{"docs":{},":":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.009345794392523364}}}}}}}},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},",":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0106951871657754}}},")":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.009345794392523364}}}}}}}}},"a":{"docs":{},"l":{"docs":{},"/":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0053475935828877}}}}}}}}},"c":{"docs":{},"k":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}},"n":{"docs":{},"s":{"docs":{},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.04945054945054945}}}}},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"m":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}}}},"i":{"docs":{},"t":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}}}}},"e":{"docs":{},"e":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":10.0561797752809},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0053475935828877},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":5.0476190476190474},"Algorithms/":{"ref":"Algorithms/","tf":0.017241379310344827},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}},",":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.02247191011235955},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125}}},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},")":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.015625},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0106951871657754},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.014018691588785047},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.006896551724137931}}},",":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0053475935828877},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.006896551724137931}}},"(":{"docs":{},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},"[":{"docs":{},"m":{"docs":{},"i":{"docs":{},"d":{"docs":{},"]":{"docs":{},")":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.023809523809523808}}}}}}}}}}}},":":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.023809523809523808}}}}}}},".":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0053475935828877},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682}}},"/":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.009345794392523364},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.006896551724137931}},"d":{"docs":{},"i":{"docs":{},"s":{"docs":{},"c":{"docs":{},"u":{"docs":{},"s":{"docs":{},"s":{"docs":{},"/":{"5":{"4":{"0":{"0":{"3":{"8":{"docs":{},"/":{"docs":{},"p":{"docs":{},"y":{"docs":{},"t":{"docs":{},"h":{"docs":{},"o":{"docs":{},"n":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.023809523809523808}}}}}}}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}}}},"u":{"docs":{},"e":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.006896551724137931},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.005235602094240838},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0064516129032258064}},";":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}}}},"i":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}},"c":{"docs":{},"k":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613},"PythonicTricks/":{"ref":"PythonicTricks/","tf":5.023255813953488}}}}}},"a":{"docs":{},"k":{"docs":{},"e":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.018518518518518517}},"n":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}}}},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.008064516129032258}}}}}},"b":{"docs":{},"l":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.003870967741935484}},"e":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"[":{"docs":{},"w":{"docs":{},"e":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},"]":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}}}}}}}}}}}}}}}},"o":{"docs":{},"t":{"docs":{},"a":{"docs":{},"l":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.003870967741935484}},"_":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0234375}}}}}}}}},"p":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0064516129032258064},"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.023255813953488372}}}},":":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}}}},"z":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.038461538461538464}},"i":{"docs":{},"g":{"docs":{},"z":{"docs":{},"a":{"docs":{},"g":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0053475935828877}}}}}}}},"*":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.015306122448979591},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.016042780748663103},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.005988023952095809},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.005161290322580645}}},"x":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.04712041884816754},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.015483870967741935}},"o":{"docs":{},"r":{"docs":{},"s":{"docs":{},"/":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653}}}}}},":":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.013793103448275862}}},"_":{"docs":{},"f":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"d":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.013793103448275862}}}}}}}},")":{"docs":{},"]":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.005235602094240838},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0025806451612903226}}},":":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}}},",":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.015706806282722512},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}}},"/":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.05555555555555555},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}},"/":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.023809523809523808},"Algorithms/":{"ref":"Algorithms/","tf":0.017241379310344827}}}},"\"":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.015625}},"\"":{"docs":{},")":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125}}}}},"[":{"0":{"docs":{},"]":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0025806451612903226}}}},"docs":{},"]":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.015625},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0053475935828877},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.009345794392523364},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.020958083832335328}},",":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0053475935828877}}}},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},".":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"]":{"docs":{},",":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0106951871657754}}}}}}}}}}}},"p":{"docs":{},".":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},",":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.009345794392523364}}}}}}}},"[":{"0":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}},"]":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}}},"docs":{},"[":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.005235602094240838}}},"f":{"docs":{},"a":{"docs":{},"l":{"docs":{},"s":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.005235602094240838},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}}}}}},"f":{"docs":{},"a":{"docs":{},"l":{"docs":{},"s":{"docs":{},"e":{"docs":{},"]":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}}}}}}}}},"!":{"docs":{},"=":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.027586206896551724},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}}},"y":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.031413612565445025},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.015483870967741935}},":":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.013793103448275862},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.005235602094240838},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0025806451612903226}}},"_":{"docs":{},"f":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"d":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.013793103448275862}},")":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.006896551724137931}},":":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.006896551724137931}}}}}}}}}},")":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.005235602094240838},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}},")":{"docs":{},"]":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.005235602094240838}}}},"]":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.005235602094240838},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0025806451612903226}}},":":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}}},",":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.010471204188481676},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}}},"]":{"docs":{},")":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.023809523809523808}}}},"#":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.010471204188481676},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.028225806451612902}},"(":{"docs":{},"c":{"docs":{},"l":{"docs":{},"i":{"docs":{},"m":{"docs":{},"b":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}}}}}}},"r":{"docs":{},"e":{"docs":{},"t":{"docs":{},"u":{"docs":{},"r":{"docs":{},"n":{"docs":{"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.023255813953488372}}}}}}}}},"j":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.005235602094240838},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.016129032258064516},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.003870967741935484}},"u":{"docs":{},"m":{"docs":{},"p":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.005235602094240838}}}}},")":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}},")":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.008064516129032258}},":":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}}},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}}},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}},":":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}},"a":{"docs":{},"v":{"docs":{},"a":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}}}},"\\":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}},"_":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}},"h":{"docs":{},"e":{"docs":{},"l":{"docs":{},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}}}}}}}},"_":{"docs":{},"g":{"docs":{},"e":{"docs":{},"n":{"docs":{},"e":{"docs":{},"r":{"docs":{},"a":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}}}}}}}}}}}}}}}}}},"c":{"docs":{},"o":{"docs":{},"p":{"docs":{},"y":{"docs":{},"p":{"docs":{},"a":{"docs":{},"s":{"docs":{},"t":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}}}}}}}}}}}}}}}}}}}}}}},"‘":{"docs":{},"r":{"docs":{},"e":{"docs":{},"j":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"’":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}}}}}}}}}},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}},"{":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.012096774193548387},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.01032258064516129}},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{},"m":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{},":":{"docs":{"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.023255813953488372}}}}},"docs":{}}}}}},"k":{"docs":{},":":{"docs":{"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.023255813953488372}}}}},"}":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.003870967741935484}}},")":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0025806451612903226}}},"?":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0012903225806451613}}}},"length":1908},"corpusTokens":["!=","\"","\"\")","#","#(climb","#return","&","'pivot'","'quirky'","'treenode')","'treenode',","'treenode':","'visited'","((i,","(1)","(==r)","(bag_weight","(bottom","(check","(collections.deque)","(current","(d","(end","(end_index","(float('","(i","(i,","(int","(k","(l","(leetcod","(left_max","(len(values)","(levelwis","(memo[position]","(n","(ncr)","(node.v","(not","(posit","(recurs","(right_min","(sorted)","(start_index","(sum","(top","(total_sum","(use","(veri","(with","(x","(x_found","(y","(y_found","(you'll",")","*","+","+=",",","/","//","0","0)","0):","0,","0/1","0:","0;","1","1)","1))","1)):","1),","1)/2","1):","1);","1)]","1,","1.","1/3286/","10","1035","1383:","18/","180/problems/lucki","180/problems/maximum","1:","1;","1]","1])","1],","1][i","1][y]","1d","2","2)","2):","2.","2:","2]","3","3.","3/","3000","4","439df7e5ea1f","70),","857:",":","=","==",">",">\")",">=","?","[0]","[[0","[[0]","[[[","[[fals","[]","[],","[false]","[node.val],","[p.val,","\\","])","_","_helper(self,","_helper_generator(self,","_helpercopypaste(self,","absolut","abstract","accept","accept,","achiev","actual","add","addit","addnums(node,","addnums(node.left,","addnums(node.right,","addnums(root,","afterwards.","again.","algorithm","algorithms.","allow","alway","always,","analysislet","ancestor","anoth","answer","answer.","answer:","apend","append","appli","approach","approach.","archives:","arr:","arr[mid]","array","array.","attended/discuss/510262/detail","attribut","avoid","b","back","backtrack","backtracker([],","backtracker(bucket,","backtracker(bucket:","backtracking.","bad,","bag_weight","bag_weight):","balanc","base","basic","befor","behavior","benefit","better","between","bf","binari","binarysearch(start,","binarytreepaths(self,","board:","book","bool:","boolean","bottom","bottom,","bracket","break","brute","bst","bucket","bucket.append('(')","bucket.append(')')","bucket.append(arr[k])","bucket.pop()","built","buy","c","c.most_common(n)","caching.","calcul","call","can't","canjump(int[]","canjumpfromposition(int","care","case","case)","cases.","cash","cash,","cash.","catch:","caus","cc","cell","cell.","cell_column)","cells,","certain","challeng","challenge/528/week","chang","change.","characters/","cheat","check","checks:","choices,","choices:","choos","class","class,","climb","code","collect","collections.dequ","colleg","column","combin","combinations:","combinator","combo","comment","common","comparison","competit","complet","complex","complexity:","condit","constraint","construct","constructtree(arr:","contest","continu","convers","convert","copied))","copied,","copied:","correct","cost","count","counter","counter(list/string)","course)","creat","criteria,","curat","current","current),","current):","current,","current.left","current.left:","current.right","current.right:","current.v","current.val))","current:","current_sum","current_sum):","customer?","d","data","day","day,","de","deal","decent","decid","decor","deep","deepestleavessum(self,","def","defaultdict","defaultdict(int)","deliv","depth","dequ","deque()","deque([[0,","deque,","desir","determin","df","dfs(0,","dfs(letter,","dfs(self,","dfs(x","dfs(x,","dfs(x:","dictionari","differ","difference,","direct","direction,","divid","do:","do?","docstr","domain","domain)","domain:","don't","done","don’t","down","dp","dp:","dp[0]","dp[1]","dp[2]","dp[i","dp[i]","dp[n","dp[n]","drawn","dure","dynam","e.g.","each","easi","easier","effect","effici","eg.","element","element,","element/","element:","elements/","elif","elif(weight","elimin","elimination/","else:","empti","encount","end","end):","end,","enum","equat","error","even","event","everytim","everywhere,","exact","exceed","exclud","exclude)","exhaust","exist","exist(self,","exists:","experience,","experience.","extrem","faced?","fals","false,","false;","far,","far.","far;","faster","fee","fee)","fee):","fee/","few","figur","filter","final","final_answ","find","findfrequenttreesum(self,","finit","first","flag","float('","float('inf')","float('inf'))","float('inf')]","follow","for,","forc","forget","found","frequenc","frequent","fulli","function","further","furthestjump","futur","game","geek","gener","generateparenthesis(self,","getmaximumgold(self,","getter","give","global","globals/","go","go:","goe","gold/","good,","graduat","greater","greater,","greatest","greedi","grid","grid:","grid[i][j]","grid[x][y]:","half","hash","hashing)","heap","heapq","help","helper","helperncr(","helperncr(0,","helperncr(s,","helperncr(s:","here,","hire","hold","hold,","https://leetcode.com/contest/weekli","https://leetcode.com/discuss/interview","https://leetcode.com/explore/challenge/card/30","https://leetcode.com/problems/2","https://leetcode.com/problems/3sum/","https://leetcode.com/problems/bal","https://leetcode.com/problems/best","https://leetcode.com/problems/binari","https://leetcode.com/problems/combin","https://leetcode.com/problems/contain","https://leetcode.com/problems/cousin","https://leetcode.com/problems/deepest","https://leetcode.com/problems/gener","https://leetcode.com/problems/hous","https://leetcode.com/problems/jump","https://leetcode.com/problems/longest","https://leetcode.com/problems/lowest","https://leetcode.com/problems/maximum","https://leetcode.com/problems/minimum","https://leetcode.com/problems/most","https://leetcode.com/problems/next","https://leetcode.com/problems/path","https://leetcode.com/problems/shortest","https://leetcode.com/problems/sum","https://leetcode.com/problems/two","https://leetcode.com/problems/uniqu","https://leetcode.com/problems/valid","https://leetcode.com/problems/word","https://medium.com/@codingfreak/binari","https://www.geeksforgeeks.org/maximum","https://www.geeksforgeeks.org/merg","https://www.geeksforgeeks.org/next","https://www.geeksforgeeks.org/numb","https://www.geeksforgeeks.org/partit","https://www.geeksforgeeks.org/stock","https://www.geeksforgeeks.org/tag/subset/","https://www.geeksforgeeks.org/xor","i)","i+1","i:","if(","if((len(bucket)","if(curr","if(failure_base_case):","if(i","if(k","if(len(bucket)","if(n","if(opencount","if(self.accepted[i]):","if(success_base_case):","ii","ii/","implement","impli","import","importantly,","improv","includ","increas","independently.","index","index.good","index.unknown)","index[]","index[nums.length];","inf')","inf'),","inord","insert","instanti","instead","instruct","instructions:","insur","int","int)","int,","int:","int[]","int_max","int_max:","int_min","int_min:","interact","interest","interv","intervals/","interview","intmax","intmin","introduct","intuit","iscousins(self,","issubsetsum(list,","isvalidbst(self,","item","item:","item[1:]","item[1])}","iter","iteration.","iterative)","ith","iv/discuss/54117/clean","j","j)","j))","j)):","j),","j,","j:","java","jump","k","k,","k/","k:","k]])","k_left","keep","key","key,","key=lambda","keyboard/submissions/","knapsack","knapsack(self,","knapsack,","known,","k’","l","larg","largest","lead","leaf","leav","leaves/","leetcod","leetcode:","left","left,","left/","left:","left_max,","left_min","len(arr)","len(board)","len(board[0])","len(domain)","len(grid)","len(grid),","len(grid[0])","len(list):","len(nums)","len(prices)):","len(queue)","len(values)+","len(word):","length","length)","length):","less","letter","level","level_sum","levelwis","levelwise,","librari","limit","limit,","list","list)","list,","list.","list:","list[i","list[i]","list[int])","list[int]:","list[list[int]])","list[list[int]],","list[list[int]]:","list[list[str]],","list[n","list[str]:","list}","local","long","longer","longestzigzag(self,","look","loop","lot","lowestcommonancestor(self,","m","m,","m:","made","maintain","make","matched:","math.min(i","math.min(posit","matrix","max","max(","max(cash,","max(hold,","max(include,","max(memo[i","max(nums[0],","max(self.dfs(i,","max(self.dfs(x,","max(self.max_count,","max(self.max_length,","max/min.","max/min:","max_count","maxima","maximum","maximumsum","maximumsum)","maxprofit(self,","maxval","memo","memo;","memo[0]","memo[1]","memo[i","memo[i]","memo[n","memo[position]","memo[x","memo[x][i","memo[x][y]","memoiz","memori","mention","merg","method","methods,","mid","min","min(2","minima","minimum","minsteps(self,","minval","miscellan","mistak","modulo","more","move","move:","movezeroes(self,","multi,","multipl","n","n)","n):","n,","n:","ncr","ncr.append(bucket[:])","necessari","necessary.","need","negative,","never","new","next","nextposit","node","node'","node.","node.left","node.left:","node.right","node.right:","node.val)","node.val):","node.val]","node.val])","node/","node:","none","none:","normal","normalsubset(self,","note","note:","notes:","nth","num","number","numbers/","nums)","nums.length","nums:","nums[0]","nums[1])","nums[i])","nums[i],","nums[p]","nums[p],","nums[position],","nums[z]","nums[z],","o(2^n)","observ","obstacl","obstruction.","odd","of.","older","on","onc","oop:","open","opencount","opencount)","opencount:","oper","optim","optimally.","optimization.","option","order","otherwise)","out","over","overhead","overlap","own","p","p:","pair","param","parent","parentheses/","part","partial","particular","particularli","partitions:","pass","path","path):","path,","path.append(node.val)","paths.","paths/","paths/submissions/","pathsum(self,","perfect","perform","perm_recur(self,","permut","permutation/solution/","permutation:","pointer","pointers:","pop","popleft","posit","position,","possibl","possible.","possible:","post","postord","power","practic","practice,","pre","prefix","prefix_arr[0]","prefix_arr[1]","preorder","present","previou","prices,","prices[0]","prices[i]","prices[i])","prioriti","problem","problems)","process","process:","produc","product","profit","program","program:","programming)","programming:","project,","prop","properti","properties,","properties;","property,","public","push","python","q.val])","q.val]))","q:","quantiti","question","question/356520","questions,","questions:","queue","queue.","queue.append((current.left,","queue.append((current.right,","queue.append((root,","queue.append(current.left)","queue.append(current.right)","queue.append(root)","queue.popleft()","queue:","quicksort","r","r):","r:","range(0,","range(1,","range(2,","range(3,","range(m))","range(n)","range(x)]","reach","readabl","realli","recent","record","record/upd","recur","recurs","recurse(0,","recurse(curr","recurse(current,","recurse(current:","recurse(node.left)","recurse(node.right)","recurse(node:","recursion)","recursion,","recursion.","recursion:","reduc","refer","reference:","relat","reli","rememb","remov","repeat","repetit","repetition)","repetition,","replac","requir","rest","result","result.append(key)","result.append(path","result.append(path)","return","return(l","revers","revert","right","right,","right:","right_max,","right_min","rightmost","rightmost,","rob(self,","robber/","root","root.left","root.right:","root:","row","row[i","row[i]","run","runtim","s:","same","satisfi","scenario","search","section)","see","seen),","seen):","seen.add((i,","seen.discard((i,","seen:","select","select.","self._helpercopypaste(n,","self.accept","self.accepted[i]","self.bucket","self.bucket.append(domain[i])","self.bucket.pop()","self.constructtree(arr[:mid])","self.constructtree(arr[mid","self.lca","self.max_count","self.max_length","self.n","self.n):","self.perm_recur(0,","self.perm_recur(k","self.permut","self.permutations.append(''.join(bucket))","self.permutations.append(self.bucket[:])","self.powerset","self.powerset.append(self.subset[:])","self.recurse(k,","self.solution_function(case_one,","self.solution_function(case_two,","self.solution_search(0,","self.solution_search(k","self.subset","self.subset.append(domain[k])","self.subset.pop()","self.tot","self.valid","sell","sell/","set","set())","set)","setter","share","sheet","shortestpath(self,","similar","situations,","size","size:","slide","slower","small","smaller,","smallest","solut","solution(object):","solution,","solution.","solution:","solution_function(self,","solution_search(self,","solutiongenerator:","solutions.","solutions:","solv","someth","sometim","somewher","sort","sort:","sorted(x.items(),","specifics,","squar","stack","stack.append(current)","stack.pop()","stair","stairs:","standard","start","start)","start:","step","step,","steps,","stock","stock,","stock.","store","str(node.val)","str(node.val))","str)","strictli","string","structur","structure:","stupid","sub","subarray","subarray.","subarray/","subarrays,","subarrays:","subproblem","subsequ","subsequences.","subset","subsets:","substr","substructur","subtre","subtree.","sum","sum,","sum/","sum/discuss/16510/python","sum:","sumnumbers(self,","sumofleftleaves(self,","sums.items():","sums[l","sure","swap","t:","tabl","table[i][weight]","take","taken","target","team/","team/discuss/539797/c%2b%2bpython","techniqu","tell","temporari","th","there'","thing","this:","thought","till","time","top","total","total_sum","track","transact","transform","transit","travers","traversal/","traverse(node):","traverse(node,","traverse(node.left)","traverse(node.left,","traverse(node.right)","traverse(node.right,","traverse(root)","traverse(root,","tree","tree,","tree.","tree/","tree/discuss/540038/python","treenode(arr[mid])","treenode)","treenode,","treenode:","tri","trick","true","true;","twice/","two","type","typic","understand","uniqu","uniquepaths(self,","unknown","unless","unnecessari","until","up","updat","us","useful:","usual","usually,","v","vagu","valu","value.","value:","values,","variabl","variat","vertic","visit","visited[x][y]","visited[x][y]:","visited[x][y][1]","want","water/","way","weapon","weight","weights,","whole","window","wise","without","word","word:","work","workers/","write","x","x):","x)]","x,","x:","x_found","xors/","y","y)","y))]","y):","y)]","y,","y:","y_found","y_found)","y_found):","z","zigzag","{","{item[0]:","{k:","}","‘reject’"],"pipeline":["stopWordFilter","stemmer"]},"store":{"./":{"url":"./","title":"Introduction","keywords":"","body":"Introduction\nCompetitive coding notes\n"},"GeneralInstructions.html":{"url":"GeneralInstructions.html","title":"General Instructions","keywords":"","body":"General instructions\nProblem solving\n\nBrute-force approach first\nKeep on optimizing code\nRemember runtimes of python built-in functions and libraries\n\nCode writing\n\nOOP: use class, methods, and class variables\nUse docstrings if possible\nHelper functions to maintain some level of abstraction\nProperty, getters-setters to decorate code further\nUse brackets where ever possible: avoids stupid mistakes and improves code readability\n\n"},"DataStructures/":{"url":"DataStructures/","title":"Data Structures","keywords":"","body":"Data Structures & standard questions\n"},"DataStructures/Arrays/":{"url":"DataStructures/Arrays/","title":"Arrays","keywords":"","body":"Arrays\nGeneral instructions:\n\nFind 3 elements in array questions \nGenerally sort + hash or sort + Binary Search is a powerful weapon\n\nCheck if pre and post array can help \nhttps://www.geeksforgeeks.org/maximum-length-of-strictly-increasing-sub-array-after-removing-at-most-one-element/\n\n'Quirky' stack problems \nhttps://www.geeksforgeeks.org/next-greater-element/ : Position priority\n\nSimilar to stack problems (1) but value priority and then position \nhttps://leetcode.com/problems/next-permutation/solution/\n\n\n"},"DataStructures/Arrays/TwoPointers.html":{"url":"DataStructures/Arrays/TwoPointers.html","title":"Two Pointers","keywords":"","body":"2 Pointers technique\nhttps://leetcode.com/problems/container-with-most-water/  \nhttps://leetcode.com/problems/two-sum/\nhttps://leetcode.com/problems/3sum/\nTwo pointers is really an easy and effective technique which is typically used for searching pairs in an array.\n Two pointers:\nAt either ends and decide which one to move\nOne faster and one slower\nMaintain subarray size of K’s props\nGeneral solution structure: \nhttps://leetcode.com/explore/challenge/card/30-day-leetcoding-challenge/528/week-1/3286/\nclass Solution:\n    def moveZeroes(self, nums: List[int]) -> None:\n        n = len(nums)\n        z = 0\n        p = 0\n\n        while (not p == (n - 1)):\n            while z = n or z >= n:\n                break\n\n            nums[z], nums[p] = nums[p], nums[z]\n\n        return nums\n\n"},"DataStructures/Arrays/Subarrays.html":{"url":"DataStructures/Arrays/Subarrays.html","title":"Subarrays","keywords":"","body":"Subarrays\nOptimization checks: \n\nTwo pointers \nSliding window with running values \nPre and Post arrays\n\nFind subarray size K:\nRequires all subarrays of all sizes and find all where a constraint is matched: \nhttps://www.geeksforgeeks.org/number-subarrays-product-less-k/\nSliding window with two pointers \nLeft move: if product is more than the constraint \nRight move: everytime unless the product is more than the constraint \nCatch: Each addition of the element produces (end_index - (start_index - 1)) more subarrays \nCatch: Which implies -- subarray of size d produces d * (d + 1)/2 different subarrays\nhttps://www.geeksforgeeks.org/maximum-subarray-size-subarrays-size-sum-less-k/\nPrefix array to store constraint related data (sorted) \nBinary search + two pointers to find ALL subarrays of that size satisfying the constraint\nhttps://www.geeksforgeeks.org/number-of-subarrays-with-odd-sum/\nPrefix array but instead of sum, store sum modulo 2 \nfinal_answer = prefix_arr[0] * prefix_arr[1]\nOperation on all of subarrays:\nhttps://www.geeksforgeeks.org/xor-subarray-xors/\nCatch: ith element frequency in all subarrays: (i + 1) * (n - i) \nDesired quantity at the end of the whole domain traversal \nhttps://leetcode.com/problems/maximum-subarray/\nKeep current value running and max/min: \n\nIncluding the element \nExcluding the element: basically new subsequence start \n\nLooks like DP question but we don’t have to refer older values as we are dealing subarrays, not subsequences. Answer till  previous is stored in the comparison step of current and absolute max/min.\nhttps://www.geeksforgeeks.org/maximum-product-subarray-set-3/\nmaxVal and minVal at each value during iteration. If negative, swap them before multi, other things similar to maximum subarray sum\nPre and post array\nhttps://www.geeksforgeeks.org/maximum-length-of-strictly-increasing-sub-array-after-removing-at-most-one-element/\n"},"DataStructures/Arrays/Subsets.html":{"url":"DataStructures/Arrays/Subsets.html","title":"Subsets","keywords":"","body":"Subsets\nGeeks for Geeks archives: https://www.geeksforgeeks.org/tag/subset/ \nOptimization checks:\n\nSorting the whole array\nPriority queues (check Miscellaneous Problems section)\n\nFor each element, there are 2 choices: Take or leave \nTwo ways to implement this: \n\nRecursion\nDP\n\nStandard questions\nhttps://www.geeksforgeeks.org/partition-problem-dp-18/\n\nisSubsetSum(list, n, sum / 2) = isSubsetSum(list, n - 1, sum / 2) or isSubsetSum(list, n - 1, sum / 2 - list[n - 1])\n\n \n\n\n\n"},"DataStructures/Strings/":{"url":"DataStructures/Strings/","title":"Strings","keywords":"","body":"Strings\n"},"DataStructures/Strings/StandardQuestions.html":{"url":"DataStructures/Strings/StandardQuestions.html","title":"Standard Questions","keywords":"","body":"Standard Questions\nBrute -> Sliding Window -> Set\nhttps://leetcode.com/problems/longest-substring-without-repeating-characters/\n"},"DataStructures/Trees/":{"url":"DataStructures/Trees/","title":"Trees","keywords":"","body":"Trees\nDecent curated list: https://medium.com/@codingfreak/binary-tree-interview-questions-and-practice-problems-439df7e5ea1f\nTraversals\n\nInorder (Recursive and Iterative)\nPreorder (Recursive and Iterative)\nPostorder (Recursive and Iterative)\nLevelwise\nVertical order (Levelwise + Hashing)\n\nFinding a solution\n\nSee if you want to pass data down the tree or up the tree\n\nIf up the tree, postorder for recursive solution.\nIf down the tree, preorder for recursive solution, keep globals to record and update answer.  return for no node/ no left/ no right tree cases. If you don't want to encounter no left or no right situations, check before passing down the value.\n\n\nFor levelwise, make sure you check if the left node or right node is present before pushing to the queue. Do it level by level not node by node. popleft and append combo (collections.deque)\n\n\n"},"DataStructures/Trees/Inorder.html":{"url":"DataStructures/Trees/Inorder.html","title":"Inorder Traversal","keywords":"","body":"Inorder Traversal\nIt is useful when you just want to traverse the tree, if you find what you are looking for, set up a flag to make sure you don't recur unnecessary paths. Just return in the case of iterative \nParticularly useful in the case of BST as inorder will give you a sorted list\nIterative\nhttps://leetcode.com/problems/sum-of-left-leaves/\nclass Solution:\n    def sumOfLeftLeaves(self, root: TreeNode) -> int:\n        if not root:\n            return 0\n\n        stack = []\n        current = root\n        total_sum = 0\n\n        while stack or current:\n            while current:\n                stack.append(current)\n                current = current.left\n                if current and not current.left and not current.right:\n                    total_sum += current.val\n\n            current = stack.pop()\n            current = current.right\n\n        return total_sum\n\nRecursive\nhttps://leetcode.com/problems/binary-tree-paths/ \nReturn False only in the case of not satisfying the criteria, do not return True until the base case\nclass Solution:\n    def binaryTreePaths(self, root: TreeNode) -> List[str]:\n        result = []\n\n        def traverse(node, path):\n            if not node:\n                return\n\n            if not node.left and not node.right:\n                result.append(path + str(node.val))\n                return            \n\n            traverse(node.left, path + str(node.val) + \"->\")\n            traverse(node.right, path + str(node.val) + \"->\")\n\n        traverse(root, \"\")\n        return result\n\n"},"DataStructures/Trees/Preorder.html":{"url":"DataStructures/Trees/Preorder.html","title":"Preorder Traversal","keywords":"","body":"Preorder traversal\nPerfect for process node and pass value down the tree. \nSometimes replacement for levelwise (NOT ALWAYS, OF COURSE) \nGeneral solution:\nhttps://leetcode.com/problems/sum-root-to-leaf-numbers/\nclass Solution:\n    def sumNumbers(self, root: TreeNode) -> int:\n        self.total = 0\n\n        if not root:\n            return 0\n\n        def addNums(node, current):\n            if not node.left and not node.right:\n                self.total += (current * 10 + node.val)\n                return\n\n            if node.left:\n                addNums(node.left, current * 10 + node.val)\n\n            if node.right:\n                addNums(node.right, current * 10 + node.val)\n\n        addNums(root, 0)\n        return self.total\n\nhttps://leetcode.com/problems/binary-tree-zigzag-level-order-traversal/\nclass Solution:\n    def longestZigZag(self, root: TreeNode) -> int:\n        if not root:\n            return 0\n\n        self.max_length = 0\n        left = -1\n        right = 1\n\n        def traverse(node, direction, length):\n            if not node:\n                return\n\n            self.max_length  = max(self.max_length, length)\n\n            if direction == left:\n                traverse(node.left, left, 1)\n                traverse(node.right, right, length + 1)\n\n            elif direction == right:\n                traverse(node.left, left, length + 1)\n                traverse(node.right, right, 1)\n\n            else:\n                traverse(node.left, left, 1)\n                traverse(node.right, right, 1)\n\n        traverse(root, 0, 0)\n        return self.max_length\n\nhttps://leetcode.com/problems/path-sum-ii/\nclass Solution:\n    def pathSum(self, root: TreeNode, sum: int) -> List[List[int]]:\n        result = []\n\n        def traverse(node, path, current_sum):\n            if not node:\n                return\n\n            if not node.left and not node.right:\n                if current_sum == (sum - node.val):\n                    path.append(node.val)\n                    result.append(path)\n                return\n\n            traverse(node.left, path + [node.val], current_sum + node.val)\n            traverse(node.right, path + [node.val], current_sum + node.val)\n\n        traverse(root, [], 0)\n        return result\n\n"},"DataStructures/Trees/Postorder.html":{"url":"DataStructures/Trees/Postorder.html","title":"Postorder Traversal","keywords":"","body":"Postorder traversal\nSometimes we need to pass some values back up the tree. \ne.g. node's position from the bottom, max from right and left, check if the node exists in the left or right subtree. sum of the left subtree and right subtree \nBased on these properties, we need to find values of some other properties; use globals/ class attributes to record/update their value.\nGeneral solution:\nhttps://leetcode.com/problems/lowest-common-ancestor-of-a-binary-tree/\nclass Solution:\n    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':\n        self.lca = None\n\n        def traverse(node):\n            if not node:\n                return False\n\n            L = traverse(node.left)\n            R = traverse(node.right)\n\n            if (L + R + (node.val in [p.val, q.val])) == 2:\n                self.lca = node\n\n            return L or R or (node.val in [p.val, q.val])\n\n        traverse(root)\n        return self.lca\n\nhttps://leetcode.com/problems/most-frequent-subtree-sum/ \nNote: Recording max_count while inserting so that finding max will be easier afterwards.\nfrom collections import deque, defaultdict\n\nclass Solution:\n    def findFrequentTreeSum(self, root: TreeNode) -> List[int]:\n        if not root:\n            return []\n\n        sums = defaultdict(int)\n        self.max_count = 0\n\n        def traverse(node):\n            if not node:\n                return 0\n\n            L = traverse(node.left)\n            R = traverse(node.right)\n\n            sums[L + R + node.val] += 1\n            self.max_count = max(self.max_count, sums[L + R + node.val])\n\n            return(L + R + node.val)\n\n        traverse(root)\n        result = []\n\n        for key, value in sums.items():\n            if self.max_count == value:\n                result.append(key)\n\n        return result\n\nhttps://leetcode.com/problems/validate-binary-search-tree/\nclass Solution:\n    def isValidBST(self, root: TreeNode) -> bool:\n        self.valid = True\n\n        if not root:\n            return self.valid\n\n        if not root.left and not root.right:\n            return self.valid\n\n        def recurse(node: TreeNode) -> int:\n            if not node:\n                return (float('-inf'), float('inf'))\n\n            left_max, left_min = recurse(node.left)\n            right_max, right_min = recurse(node.right)\n\n            if (left_max >= node.val) or (right_min \n"},"DataStructures/Trees/LevelWise.html":{"url":"DataStructures/Trees/LevelWise.html","title":"Level-wise Traversal","keywords":"","body":"Levelwise traversals\nGeneral solution: \nhttps://leetcode.com/problems/deepest-leaves-sum/\nfrom collections import deque\n\nclass Solution:\n    def deepestLeavesSum(self, root: TreeNode) -> int:\n        if not root:\n            return 0\n\n        queue = deque()\n        queue.append(root)\n        current = root\n        level_sum = 0\n\n        while queue:\n            size = len(queue)\n            level_sum = 0\n\n            while size:\n                current = queue.popleft()\n                level_sum += current.val\n\n                if current.left:\n                    queue.append(current.left)\n\n                if current.right:\n                    queue.append(current.right)\n\n                size -= 1\n\n        return level_sum\n\nAppend more values into the queue node \nhttps://leetcode.com/problems/cousins-in-binary-tree/\nfrom collections import deque\n\n\nclass Solution:\n    def isCousins(self, root: TreeNode, x: int, y: int) -> bool:\n        if not root:\n            return False\n\n        queue = deque()\n        queue.append((root, -1))\n        current = root\n\n\n        while queue:\n            size = len(queue)\n\n            x_found = -1\n            y_found = -1\n\n            while size:\n\n                current, parent = queue.popleft()\n\n                if current.val == x:\n                    x_found = parent\n\n                if current.val == y:\n                    y_found = parent\n\n                if (x_found != -1) and (y_found != -1) and (x_found != y_found):\n                    return True\n\n                if (x_found == y_found) and (x_found != -1):\n                    return False\n\n                if current.left:\n                    queue.append((current.left, current.val))\n\n                if current.right:\n                    queue.append((current.right, current.val))\n\n                size -= 1\n\n        return False\n\n"},"DataStructures/Trees/ConstructTree.html":{"url":"DataStructures/Trees/ConstructTree.html","title":"Construct Trees","keywords":"","body":"Tree construction questions\nBalanced tree construction\nhttps://leetcode.com/problems/balance-a-binary-search-tree/discuss/540038/python-3-easy-to-understand\nclass Solution:\n    def constructTree(arr: list) -> TreeNode:\n        if not len(list):\n            return None\n\n        mid = len(arr) // 2\n\n        node = TreeNode(arr[mid])\n        node.left = self.constructTree(arr[:mid])\n        node.right = self.constructTree(arr[mid + 1: ])\n\n        return node\n\n"},"Algorithms/":{"url":"Algorithms/","title":"Algorithms","keywords":"","body":"Algorithms\nTo Do:\n\nMatrix traversal questions\nhttps://leetcode.com/contest/weekly-contest-180/problems/lucky-numbers-in-a-matrix\n\nTree traversal questions\n\nPriority queues and heapq python implementation\n\nNext greater, next smaller, greatest rightmost, smallest rightmost in an array\n\nBFS questions\n\n\nBinary search\ndef binarySearch(start, end):\n    if end >= start:\n        mid = start + (end - start) // 2\n        if arr[mid] == k:\n            return mid\n        if arr[mid] > k:\n            return binarySearch(start, mid - 1)\n        if arr[mid] \n"},"Algorithms/DFSandBFS.html":{"url":"Algorithms/DFSandBFS.html","title":"DFS and BFS","keywords":"","body":"DFS and BFS\nFew notes:\n\nUse BFS if there's a need to go somewhere optimally. \neg. Minimum steps required to reach from A to B type questions, jump game questions\n\n\nUse DFS for exhaustive search in the grid where you have search everywhere, not optimal condition \neg. Find if you can create word X from the grid \n\n\nDo not forget the visited grid\n\nGeneral solutions:\nBFS\n\ncollections.deque is extremely useful: use apend and popleft for queue operations\nRun operations as long as the queue is not empty\nvisited array is an important part of the solution to avoid repetition\n\nhttps://leetcode.com/problems/shortest-path-in-a-grid-with-obstacles-elimination/\nfrom collections import deque\n\nclass Solution:\n    def shortestPath(self, grid: List[List[int]], k: int) -> int:\n        X = len(grid)\n        Y = len(grid[0])\n\n        visited = [[[-1, float('inf')] for i in range(0, Y)] for j in range(0, X)]\n        # x, y, steps, k-left\n        queue = deque([[0, 0, 0, k]])\n\n        while queue:\n            x, y, steps, k_left = queue.popleft()\n\n            if x = X or y = Y:\n                continue\n\n            if grid[x][y]:\n                k_left -= 1\n\n            if k_left = k_left and visited[x][y][1] \nDFS\n\nDo not forget the visited array (you'll end up with stack limit exceeded error otherwise)\n\nhttps://leetcode.com/problems/word-search\nclass Solution:\n    def exist(self, board: List[List[str]], word: str) -> bool:\n        X = len(board)\n        Y = len(board[0])\n\n        visited = [[False for y in range(0, Y))] for x in range(X)]\n\n        def dfs(letter, x, y) -> bool:\n        # base case should be first\n            if letter == len(word):\n                return True\n\n            if x >= X or x = Y or y \n"},"Algorithms/Combinatorics.html":{"url":"Algorithms/Combinatorics.html","title":"Combinatorics","keywords":"","body":"Combinatorics\nSubsets\nReference: CC Cheat sheet book \nNote the number of recursive calls made\nTwo choices:\n\nDon't choose the element: Just make a recursive call \nChoose the element\nSelect step\nGo to the next depth\nPop out so that we don't have to instantiate the bucket\n\n\n\nclass SolutionGenerator:\n    def solution_search(self, k : int, domain: list) -> None:\n        if (k == self.n):\n            self.powerset.append(self.subset[:])\n            return\n        self.solution_search(k + 1, domain)\n        self.subset.append(domain[k])\n        self.solution_search(k + 1, domain)\n        self.subset.pop()\n\n    def _helper_generator(self, domain: list) -> list:\n        self.powerset = []\n        self.subset = []\n        self.n = len(domain)\n        self.solution_search(0, domain)\n        return self.powerset\n\nCombinations: select r out of n (nCr)\n\nRecursion base case change (==r)\nParams of recursion: s: number of selected so far; k: array item index to be processed in that call\nSimilar to normal combinations\n\nclass T:\n    def normalSubset(self, arr: list, r: int) -> list:\n        nCr = []\n        bucket = []\n        n = len(arr)\n\n        def helperNCR(s: int, k: int) -> None:\n            if(s == r):\n                nCr.append(bucket[:])\n                return\n\n            if(s > r or k == n):\n                return\n\n            helperNCR(s, k + 1)\n            bucket.append(arr[k])\n            helperNCR(s + 1, k + 1)\n            bucket.pop()\n\n        helperNCR(0, 0)\n        return nCr\n\nPermutations\nRecursive calls for every element in the loop \nNo need to add a ‘reject’ scenario \nAccept, make changes and revert after going a level deep \nFilter right after the loop using a helper array used for tracking \nclass Permutation:\n    def perm_recur(self, k : int, domain: list) -> None:\n        if(k == self.n):\n            self.permutations.append(self.bucket[:])\n            return\n        for i in range(0, self.n):\n            if(self.accepted[i]):\n                continue\n            self.accepted[i] = True\n            self.bucket.append(domain[i])\n            self.perm_recur(k + 1, domain)\n            self.accepted[i] = False\n            self.bucket.pop()\n\n    def _helper(self, domain: list) -> list:\n        self.n = len(domain)\n        self.accepted = [False] * self.n\n        self.permutations = []\n        self.bucket = []\n        self.perm_recur(0, domain)\n        return self.permutations\n\nAdditional questions:\nhttps://leetcode.com/problems/combination-sum/discuss/16510/Python-dfs-solution.\nTo allow repetition, go to the same node after select. \nself.recurse(k, domain)\nPermutation over a limited set of values (with repetition)\n\nSelect one option and de-select it\nSimilar for other options \nThere are finite number of options at each step\nRecurse based on your selection\n\nhttps://leetcode.com/problems/generate-parentheses/\nclass Solution:\n    def generateParenthesis(self, n: int) -> int:\n        def backtracker(bucket: list, openCount: int) -> None:\n            if((len(bucket) - openCount) > openCount or \\\n               openCount > self.n):\n                return\n\n            if(len(bucket) == self.n * 2):\n                if(openCount == self.n):\n                    self.permutations.append(''.join(bucket))\n                return\n\n            bucket.append('(')\n            backtracker(bucket, openCount + 1)\n            bucket.pop()\n            bucket.append(')')\n            backtracker(bucket, openCount)\n            bucket.pop()\n\n        self.permutations = []\n        self.n = n\n        if n == 0:\n            return 0\n\n        backtracker([], 0)\n        return self.permutations\n\n"},"Algorithms/Backtracking.html":{"url":"Algorithms/Backtracking.html","title":"Backtracking and Complete Search","keywords":"","body":"Backtracking and Complete Search\nExhaustive search for an answer:\nCheck every possible option and see if a solution exists: (very similar to permutation problems) \nhttps://leetcode.com/problems/jump-game \nAccept one of the options at each step \nEmptying the bucket is not necessary \npublic class Solution {\n    public boolean canJumpFromPosition(int position, int[] nums) {\n        if (position == nums.length - 1) {\n            return true;\n        }\n\n        int furthestJump = Math.min(position + nums[position], nums.length - 1);\n        for (int nextPosition = position + 1; nextPosition \nGrid DFS\nSolution of https://leetcode.com/problems/path-with-maximum-gold/ :\ndef dfs(self, i: int, j: int, sum: int, seen: set) -> int:\n    # constraints\n    if(i = m or j = n or not grid[i][j] or (i, j) in seen):\n        return sum\n    # add to the 'visited' set\n    seen.add((i, j))\n    # update current target\n    sum += grid[i][j]\n    # set maximum target\n    maximumSum = 0\n\n    # directions to move in\n    for x, y in ((i, j + 1), (i , j - 1), (i + 1, j), (i - 1, j)):\n    # The actual recursion step\n        maximumSum = max(self.dfs(x, y, sum, seen), maximumSum)\n    # remove from the 'visited' set after recursion \n    seen.discard((i, j))\n    return maximumSum\n\ndef getMaximumGold(self, grid: List[List[int]]) -> int:\n    m, n = len(grid), len(grid[0])\n    return max(self.dfs(i, j, 0, set()) for j in range(n) for i in range(m))\n\nhttps://leetcode.com/problems/2-keys-keyboard/submissions/ \nReturn types should be taken care of. \n\nBase condition\nLimiting condition if required (Use INTMAX for min recursion, INTMIN for max recursion)\nActual recursion\n\nclass Solution:\n    def _helperCopyPaste(self, n: int, current: int, copied: int) -> int:\n        if(current == n):\n            return 0\n        if(current > n):\n            return 3000\n        return min(2 + self._helperCopyPaste(n, current + current, current),\n                   1 + self._helperCopyPaste(n, current + copied, copied))\n\n    def minSteps(self, n: int) -> int:\n        if(n == 1):\n            return 0\n        return 1 + self._helperCopyPaste(n, 1, 1)\n\n"},"Algorithms/DynamicProgramming.html":{"url":"Algorithms/DynamicProgramming.html","title":"Dynamic Programming","keywords":"","body":"Dynamic Programming\nDynamic programming is a technique that combines the correctness of complete search and the efficiency of greedy algorithms. Dynamic programming can be applied if the problem can be divided into overlapping subproblems that can be solved independently.\nWe should always go: recursive solution -> memoization -> Dynamic Programming \nThere are a lot of memoization solved problems in leetcode -> Top interview questions -> DP \nMemoization basically insures that we solve a particular subproblem only once to improve runtime\nHalf the problem is solved once you figure out that the problem is a DP one\nThere are two uses for dynamic programming:\n\nFinding an optimal solution: We want to find a solution that is as large as possible or as small as possible.\nCounting the number of solutions: We want to calculate the total number of possible solutions.\n\n1. Optimal Solution\neg. 0/1 Knapsack, partitions: exact sum, minimum sum difference, leetcode 1035\nKnapsack program:\nclass Solution:\n    def knapsack(self, weights, values, bag_weight):\n        table = [[0] * (bag_weight + 1)] for _ in (len(values) + 1)]\n\n        for i in range(0, len(values)+ 1):\n            for weight in range(0, bag_weight + 1):\n                if(i == 0 or weight == 0):\n                    table[i][weight] = 0\n                elif(weight \nSimilar problem for a 1D array\nhttps://leetcode.com/problems/house-robber/ \nRecursive solution is intuitive\nclass Solution:\n    def rob(self, nums: List[int]) -> int:\n        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return nums[0]\n\n        def recurse(current: int, i: int) -> int:\n            if i >= n:\n                return current\n\n            return max(\n                recurse(current, i + 1),\n                recurse(current + nums[i], i + 2)\n            )\n\n        return recurse(0, 0)\n\nSolution using DP:\nclass Solution:\n    def rob(self, nums: List[int]) -> int:\n        n = len(nums)\n\n        if n == 0:\n            return 0\n        if n == 1:\n            return nums[0]\n\n        memo = [0] * n\n        memo[0] = nums[0]\n        memo[1] = max(nums[0], nums[1])\n\n        for i in range(2, n):\n            memo[i] = max(memo[i - 1], memo[i - 2] + nums[i])\n\n        return memo[n - 1]\n\nFor exact sum subsets and minimum difference subsets: \nTrue or False for each cell. Use or instead of max(include, exclude)\nNeed to have another loop over the table to find the 'pivot'\nFor minimum difference, find a True cell and that causes the least difference \n(total_sum - 2 * cell_column)\nFor the minimum number of squares required to get the sum, similar to the exact sum subarray. Rather than True or False, maintain the number of squares required for the sum\n2. Number of solutions\neg. Climbing stairs (LeetCode 70), unique-paths \nhttps://leetcode.com/problems/unique-paths/submissions/ \nRecursive solution: \nclass Solution:\n    def uniquePaths(self, m: int, n: int) -> int:\n        X = n\n        Y = m\n        visited = [[False for i in range(0, Y)] for j in range(0, X)]\n\n        def dfs(x: int, y: int) -> int:\n            if x = X or y = Y:\n                return 0\n\n            if visited[x][y]:\n                return 0\n\n            if x == (X - 1) and y == (Y - 1):\n                return 1\n\n            visited[x][y] = True\n\n            total = dfs(x + 1, y) + \\\n                    dfs(x, y + 1) \n\n            visited[x][y] = False\n\n            return total\n\n        return dfs(0, 0)\n\nDP Solution: \nclass Solution:\n    def uniquePaths(self, m: int, n: int) -> int:\n        X = n\n        Y = m\n\n        if X == 0 and Y == 0:\n            return 0\n\n        if X == 1 and Y == 1:\n            return 1\n\n        if X == 1:\n            return 1\n\n        if Y == 1:\n            return 1\n\n        memo = [[0 for y in range(0, Y)] for x in range(0, X)]\n\n        for x in range(0, X):\n            for y in range(0, Y):\n                if x == 0 and y == 0:\n                    memo[x][y] = 1\n                    continue\n\n                if x == 0 or y == 0:\n                    memo[x][y] = 1\n                    continue\n\n                memo[x][y] = memo[x - 1][y] + memo[x][y - 1]\n\n        return memo[X - 1][Y - 1]\n\nUnique paths II is similar but we set count to 0 in case there is an obstruction. \nFor row and column cells, row[i] = row[i - 1] and similar to columns \nRest is similar\nSimilar problem for a 1D array\nClimbing stairs: \nFor each step, there are multiple choices, generally 2. \nBrute force solution goes something like this:\nclass Solution:\n    def solution_function(self, n):\n        if(success_base_case):\n           return 1\n        if(failure_base_case):\n           return 0\n\n    return self.solution_function(case_one, n) + self.solution_function(case_two, n)\n\nTime Complexity: O(2^n) - tree size\nCheck if the problem satisfies Optimal Substructure Property \nFind an equation for the answer \nHere,\ndp[n] = dp[n  -  1] + dp[n - 2] #(climb stairs case)\n\ndp = [0] * (n + 1)\ndp[0] = 0\ndp[1] = 1\ndp[2] = 2\n\nfor i in range(3, n):\n            dp[i] = dp[i - 1] + dp[i - 2]\nreturn dp[n]\n\nFrom Leetcode:\n\nUsually, solving and fully understanding a dynamic programming problem is a 4 step process: \n\nStart with the recursive backtracking solution\nOptimize by using a memoization table (top-down dynamic programming)\nRemove the need for recursion (bottom-up dynamic programming)\nApply final tricks to reduce the time / memory complexity\n\n\neg. https://leetcode.com/problems/jump-game \n\nRefer backtracking solution\n\n2. Top-down Dynamic Programming\nTop-down Dynamic Programming can be thought of as optimized backtracking. It relies on the observation that once we determine that a certain subproblem solution, this result will never change. \nIf the solution is not known, perform backtracking again.\nenum Index {\n    GOOD, BAD, UNKNOWN\n}\n\npublic class Solution {\n    Index[] memo;\n\n    public boolean canJumpFromPosition(int position, int[] nums) {\n        if (memo[position] != Index.UNKNOWN) {\n            return memo[position] == Index.GOOD ? true : false;\n        }\n\n        int furthestJump = Math.min(position + nums[position], nums.length - 1);\n        for (int nextPosition = position + 1; nextPosition \n3. Bottom-up Dynamic Programming\nTop-down to bottom-up conversion is done by eliminating recursion. In practice, this achieves better performance as we no longer have the method stack overhead and might even benefit from some caching. More importantly, this step opens up possibilities for future optimization. The recursion is usually eliminated by trying to reverse the order of the steps from the top-down approach.\nenum Index {\n    GOOD, BAD, UNKNOWN\n}\n\npublic class Solution {\n    public boolean canJump(int[] nums) {\n        Index[] memo = new Index[nums.length];\n        for (int i = 0; i = 0; i--) {\n            int furthestJump = Math.min(i + nums[i], nums.length - 1);\n            for (int j = i + 1; j \n"},"Miscellaneous/":{"url":"Miscellaneous/","title":"Miscellaneous","keywords":"","body":"Miscellaneous\n"},"Miscellaneous/Stocks.html":{"url":"Miscellaneous/Stocks.html","title":"Stocks","keywords":"","body":"Stocks\n1 transaction\nhttps://www.geeksforgeeks.org/maximum-difference-between-two-elements/ \nKeep track of the minimum element found so far, calculate the difference between the current and minimum found so far. \nUpdate the maximum difference if necessary.\nAt most 2 transactions\nhttps://www.geeksforgeeks.org/maximum-profit-by-buying-and-selling-a-share-at-most-twice/ \nA similar approach to one transaction limit, maintain the minimum till that element and similar for i + 1 and till the end of the List.\nAny number of transactions\nhttps://www.geeksforgeeks.org/stock-buy-sell/ \nLocal minima List[i] = List[i + 1]\nBuy at local minima and sell at local maxima\nAny number of transactions with transaction fee\n\nCan use this for any number of transactions with fee == 0 \nhttps://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/ \nAt the end of the i-th day, we maintain cash, the maximum profit we could have if we did not have a share of stock, and hold, the maximum profit we could have if we owned a share of stock.\n\nTo transition from the i-th day to the i+1-th day, we either sell our stock \ncash = max(cash, hold + prices[i] - fee) or \nbuy a stock \nhold = max(hold, cash - prices[i]) \nAt the end, we want to return cash. We can transform cash first without using temporary variables because selling and buying on the same day can't be better than just continuing to hold the stock.\nclass Solution(object):\n    def maxProfit(self, prices, fee):\n        cash, hold = 0, -prices[0]\n        for i in range(1, len(prices)):\n            cash = max(cash, hold + prices[i] - fee)\n            hold = max(hold, cash - prices[i])\n        return cash\n\nK number of transactions\nhttps://leetcode.com/problems/best-time-to-buy-and-sell-stock-iv/discuss/54117/Clean-Java-DP-solution-with-comment \nDynamic programming\n"},"Miscellaneous/Intervals.html":{"url":"Miscellaneous/Intervals.html","title":"Intervals","keywords":"","body":"Interval problems\nhttps://www.geeksforgeeks.org/merging-intervals/ \nMerge one by one after sorting based on starting time\nhttps://leetcode.com/discuss/interview-question/356520 \nKeep a running count of the number of overlapping intervals\nhttps://leetcode.com/problems/maximum-number-of-events-that-can-be-attended/discuss/510262/Detailed-analysisLet-me-lead-you-to-the-solution-step-by-step\n"},"Miscellaneous/InterestingMiscellaneous.html":{"url":"Miscellaneous/InterestingMiscellaneous.html","title":"Interesting Miscellaneous","keywords":"","body":"Need to find nth smallest or largest\nUse max or min-heap or partial sort: quicksort variation\nPriority queues\n1383: https://leetcode.com/contest/weekly-contest-180/problems/maximum-performance-of-a-team/ \nSolution: https://leetcode.com/problems/maximum-performance-of-a-team/discuss/539797/C%2B%2BPython-Priority-Queue\n857: https://leetcode.com/problems/minimum-cost-to-hire-k-workers/\n"},"PythonicTricks/":{"url":"PythonicTricks/","title":"Pythonic Tricks","keywords":"","body":"Pythonic Tricks\nINT_MAX:\nINT_MAX = float('inf')\n\nINT_MIN:\nINT_MIN = float('-inf')\n\nConvert list into a dictionary\n{item[0]: item[1:] for item in list}\n\nSort dictionary by value\n{k: v for k, v in sorted(x.items(), key=lambda item: item[1])}\n\nMost frequent in an array or a string\nfrom collections import Counter\nC = Counter(list/string)\nC.most_common(n) #returns a list of top n\n\n"},"BehavioralQuestions.html":{"url":"BehavioralQuestions.html","title":"Behavioral Questions","keywords":"","body":"Behavioral Questions\n\nWhat was a challenge or problem that you faced?\nTell me about a time when you were not able to deliver on time and what did you do?\nIs it better to have direct interaction with the customer?\nAnd some follow up questions based on my answers \n\n\nAll my answers were drawn from experience, I made sure I mentioned specifics, not just a vague answer. One answer from my recent graduate college project, two from my previous work experience.\n\n"}}}