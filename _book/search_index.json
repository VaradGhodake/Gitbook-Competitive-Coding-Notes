{"index":{"version":"0.5.12","fields":[{"name":"title","boost":10},{"name":"keywords","boost":15},{"name":"body","boost":1}],"ref":"url","documentStore":{"store":{"./":["#","###","$","4000","browser","clone","code","competit","g","git","gitbook","global","https://github.com/varadghodake/gitbook","instal","instructions:","introduct","localhost:4000","note","notes.git","npm","point","port","repo","serv","server","start","url"],"GeneralInstructions.html":["(https://leetcode.com/contest/weekli","(kinda!)","+","190/problems/pseudo","=>","[new]","abstract","approach","avoid","basically,","binari","bracket","brute","built","class","class,","code","contest","copi","creat","decor","docstr","end","everyth","first","forc","function","further","gener","getter","helper","implement","improv","instruct","keep","languag","level","librari","list","lists.","maintain","methods,","mistak","object","oblivi","oop:","optim","palindrom","paramet","pass","path","possibl","possible:","problem","property,","python","question!","readabl","refer","rememb","runtim","set","set([something]","sets,","setter","solv","somehow.","stuff","stupid","tree/)","us","user","valu","variabl","way","well","work","write"],"DataStructures/":["&","data","question","standard","structur"],"DataStructures/StacksAndQueues/":["''.join(stack)","0","1","=","==",">","[]","adjac","again.","anyth","away","base","becom","bool:","can't","case","class","def","distinct.","doesn't","don't","duplic","element","else:","end","enumerate(s):","fals","hasn't","hint:","https://leetcode.com/problems/remov","i,","j","k","last","len(pushed)","list[int])","list[int],","match","n","noth","pop","popped:","popped[k]","popped[k],","push","pushed.","pushed:","queue","reach","removeduplicates(self,","return","right","s","s:","solution:","something,","stack","stack.append(s)","stack.pop()","stack[last]","stacks:","str)","str:","string/","subtl","there'","top","trick","used:","validatestacksequences(self,","way","why?"],"DataStructures/Arrays/":["'quirky'","(1)","+","3",":","array","binari","check","element","element/","find","gener","greater","hash","help","https://leetcode.com/problems/next","https://www.geeksforgeeks.org/maximum","https://www.geeksforgeeks.org/next","increas","instructions:","length","on","permutation/solution/","posit","post","power","pre","prioriti","problem","question","remov","search","similar","sort","stack","strictli","sub","valu","weapon"],"DataStructures/Arrays/SlidingWindow.html":["''","(end","(start","+","+=","0)","0,","1","1)","1):","=","==",">","c","charact","character(not","class","come","contract","count","criteria,","current","current:","current[s[start]]","def","default),","dict.","easili","end","end+1]","end,","enough","float('inf')","found","found,","greater,","hit","https://leetcode.com/problems/minimum","know","len(target)","maintain","mani","min_len","minwindow(self,","need","now","possibl","quantity.","requir","result","return","s","s:","s[start:","s[start]","satisfi","slide","solution.","solution:","start","start,","str)","str,","str:","substring/","t:","target","target,","target.get(c,","target[c]","until","window","window.","{}","{},"],"DataStructures/Arrays/TwoPointers.html":["(n","(not","0","0,","1","1)):","1/3286/","2","=","==",">",">=","array.","break","challenge/528/week","class","contain","day","decid","def","easi","effect","end","faster","forward","gener","height","height:","https://leetcode.com/explore/challenge/card/30","https://leetcode.com/problems/3sum/","https://leetcode.com/problems/boat","https://leetcode.com/problems/contain","https://leetcode.com/problems/two","int:","k’","l","l,","leetcod","len(height)","len(nums)","limit","list[int])","maintain","maxarea(self,","move","movezeroes(self,","n","n:","none:","num","nums:","nums[p]","nums[p],","nums[z]","nums[z],","on","one,","p","pair","people/","pointer","pointers:","prop","r","realli","return","save","search","size","slower","smaller","solut","solution:","structure:","subarray","sum/","techniqu","two","typic","us","water","water/","z"],"DataStructures/Arrays/Subarrays.html":["!=","(current","(d","(end_index","(i","(len(nums)","(n","(sorted)","(start_index","*","+","+=","0","0,","0:","0}","1","1)","1))","1)/2","1]","1}","2","3/","=","==",">","[0]","absolut","add","addit","answer","array","basic","befor","binari","case","catch:","characters/discuss/87768/4","checks:","class","comparison","complex","constraint","continu","corner","current","current,","d","data","deal","def","desir","diff","differ","domain","don’t","dp","dure","each","element","element/","element:","else:","end","ends,","enumerate(nums):","enumerate(prefix):","equal","everytim","exclud","final_answ","find","float('","freq","freq:","freq[(curr","freq[current]","frequenc","great","https://leetcode.com/problems/longest","https://leetcode.com/problems/maximum","https://leetcode.com/problems/minimum","https://leetcode.com/problems/subarray","https://www.geeksforgeeks.org/maximum","https://www.geeksforgeeks.org/numb","https://www.geeksforgeeks.org/xor","i)","i,","impli","includ","increas","inf')","instead","int)","int:","interv","iteration.","ith","k","k)","k)]","k/","k:","keep","left","len(nums)","length","length)","less","limit/","line","list[int],","look","matched:","max","max(length,","max/min.","max/min:","maximum","maxnonoverlapping(self,","maxval","minoperations(self,","minval","modulo","more","move:","multi,","n","n)","negative,","new","non","number","nums:","odd","older","on","oper","optim","outsid","overlap","p","pointer","post","pre","prefix","prefix.append(prefix[","prefix_arr[0]","prefix_arr[1]","prev","prev;","previou","problem","produc","product","python","quantiti","question","question,","reduc","refer","relat","remov","repeat","requir","return","right","run","satisfi","search","set","similar","size","slide","solution:","start","step","store","strictli","sub","subarray","subarray/","subarrays,","subarrays:","subarraysum(self,","subsequ","subsequences.","substr","sum","sum(nums)","sum,","sum/","sum_po","sum_pos:","sum_pos[p]","sums:","sums[curr","sums[current]","swap","target","target)","target/","target:","target])","thing","till","total","travers","two","unless","us","valu","well","whole","window","x","x.","x:","xors/","zero/","{0:","{0:1}","{}"],"DataStructures/Arrays/Subsets.html":["!=","%","(1","(check","*","+","/","0","0:","1","1,","18/","1:","1]","1])","2","2)","=","==",">","[","[1]","[]","archives:","array","base","checks:","choices:","class","def","divis","don't","dp","drop","e","each","element","element,","enumerate(nums):","freq(x)","freq(x+1)","geek","gotcha","harmoni","here","https://leetcode.com/problems/largest","https://leetcode.com/problems/longest","https://www.geeksforgeeks.org/partit","https://www.geeksforgeeks.org/tag/subset/","i):","i,","implement","implementation:","index","issubsetsum(list,","it'","j","largestdivisiblesubset(self,","leav","len(nums)","length","li","like.","like:","lis.","list[int])","list[int]:","list[n","max","max_len","max_len:","meaning,","method","miscellan","n","n,","num","nums:","nums[j]","o(n2)","optim","pre","pre[i]","pre[index]","prioriti","problem","question","queue","range(0,","recurs","result","result.append(nums[index])","return","section)","set_len","set_len[i]","set_len[i]:","set_len[j]","set_len[j])","similar","smart","solut","solution:","sort","sorted(nums)","standard","subsequ","subsequence,","subsequence/","subset","subset/","subset/discuss/84006/class","subsets/subsqu","sum","take","target","this:","two","way","whole","x","|"],"DataStructures/Arrays/Triplets.html":["#","(i","(n","(nums[i]","+","+=","0","0,","0:","1","1)","1):","1,","1]","1]:","2","2):","=","==",">","[0","[]","\\","approach","avoid","better","binari","check","class","collect","continu","def","defaultdict","defaultdict(list)","dictionary.","elem,","element","element,","enumerate(nums):","find","fix","found","g","greater","https://leetcode.com/problems/3sum/","https://leetcode.com/problems/count","i):","i,","import","int:","j","j,","j:","k","kind","last","len(nums)","len(rating)):","len(rating))]","list[int])","list[list[int]]:","modifi","n","need","num","number","nums:","nums[i","nums[i]","nums[j])]","nums[j])])))","nums[j],","numteams(self,","one.","one:","optim","posit","positions[","positions[num].append(i)","possibl","prune","range(0,","range(1,","range(i","rating:","rating[i]","rating[j]:","repetition.","result","result.append([x,","result_","result_s.add(tuple(sorted([nums[i],","result_s.pop()","result_s:","return","s","s[i]","s[j]","save","search","second","set","set()","solution:","sort","sorted(nums)","step","sum.","sum_po","sum_pos:","sum_pos[","teams/","that'","third","threesum(self,","total","tri_sum","triplet","us","veri","way","x,","y,","z","z])"],"DataStructures/Arrays/StackTricks.html":["(132","(eg.","(k","/","0","0:","1","1))","1):","1,","15th","1]","1][0]","21st/3330/","3","=",">","[[i,","[]","__init__(self):","```pi","add","add.","addit","ahead","alway","another.","anything.","append","augment","base","bigger","calls/","challenge/536/week","class","collect","come","compar","competit","concept","current","def","defaultdict","defaultdict(int)","dequ","deque()","didn't","direction(intenum):","displac","displacements.","don't","dry:","each","elem","element","element:","end","enum","enumerate(heights):","enumerate(nums):","equal:","first","game","gener","go","great","greater","h","heights:","here.","here:","histogram/","https://leetcode.com/explore/challenge/card/may","https://leetcode.com/problems/132","https://leetcode.com/problems/find","https://leetcode.com/problems/largest","https://leetcode.com/problems/next","https://leetcode.com/problems/numb","https://leetcode.com/problems/onlin","https://leetcode.com/problems/slid","i,","i/","i]","idea","import","incom","info","int)","int:","intenum","interpret","it'","it.","k","k:","keep","key","knuth","l","largestrectanglearea(self,","last","leetcod","left","len(heights)","len(nums)","list[int])","list[int],","list[int]:","location)","main","maitain","maximum/","maxslidingwindow(self,","monoqueu","more","mostcompetitive(self,","n","n)]","need","next","next(self,","next:","nextgreaterelement(self,","now","num","nums1:","nums2:","nums:","on","origin","out","pattern)","pattern/dequ","ping(self,","pop","price:","question","question:","queue","queue.append((","r","range(0,","range(len(nums2)","recent","recentcounter:","rectangl","remember:","repeat","requir","result","result.append(stack[0][0])","return","scenarios:","select","self.stack","self.stack[","self.window","self.window[0]","similar","simpl","slide","smaller","smaller:","smallest","solution:","some;","sort","span/","stack","stack.append(n)","stack.pop()","stack/queu","stack[","stack[:k]","stock","stockspanner:","store","store[nums2[i]]","structure:","subsequence/","t:","take","target","techniqu","trick","veri","want","window","yourself"],"DataStructures/Arrays/MultipleArrays.html":["'i':","'j':","'k':","+=","0,","0}","1","3.","=","==",">",">=","[]","\\","arr1:","arr1[index['i']]","arr1[index[x]]","arr2:","arr2[index['j']]","arr2[index[x]]","arr3:","arr3[index['k']]:","arr3[index[x]]","array","array;","arrays/","arraysintersection(self,","break","class","comparison","creat","def","each","else:","equal,","forward","function","function.","get_smallest(x))]","get_smallest(x):","https://leetcode.com/problems/intersect","index","index:","index['i']","index['j']","index['k']","index[i]","index[min(index,","key","key=lambda","lambda","lambda.","len(arr1)","len(arr2)","len(arr3):","list[int])","list[int],","list[int]:","maintain","make","min","min/max/sort","minimum","multipl","note:","otherwis","point","pointer","push","required.","result","result.append(arr1[index['i']])","return","solution:","sort","state","three","tri","true:","us","x","x:","{'i':"],"DataStructures/Arrays/LeftAndRight.html":["!=","(n","*","1","1]","1],","2,","2:float('","2:float('inf'),","3:float('","3:float('inf')}","3]:","=","==",">","[1,","[[float('inf'),","[dm[i][q","[float('inf')]","_","accept","answer","both","c:","c_l","c_r","character/","check","class","col","color","color/","colors:","colors[i]","colors[n","combin","comput","conquer","def","devid","distanc","dm","dm=distanc","dm[i]","dm[i][col","dm[i][q","dm[n","earlier","enumerate(s):","esqu","float('","float('inf')","float('inf'),","float('inf')]","good","here:","https://leetcode.com/problems/shortest","i'v","i))","i,","i]","i],","i][col","index","inf'),","inf')}","last","left","len(colors)","len(s)","list[int],","list[int]:","list[list[int]])","lo=last","lol","lol)","lol,","lol[c_l]","lol[col])","loop","lor","lor[c_r]","lor[col]","matrix","min(dm[i],","min(dm[i][col","min(dm[n","n","n):","observ","occur","occurrence,","q","queries:","queries]","question.","range(0,","range(len(colors))]","return","right","right.","s:","s[i]","s[n","same","sc","shortestdistancecolor(self,","shortesttochar(self,","solution.","solution:","str)","str,","target","thing;","{1:float('","{1:float('inf'),"],"DataStructures/Strings/":["string"],"DataStructures/Strings/StandardQuestions.html":["%","''","'*'","(","(ord(string[i","(we","*","+","+=","0","0)","1","1])","26","26)","=","==",">","[])","[i]","[string]","along","answer.","backward","backwards,","base","binari","bool:","break","brute","build","c","certain","chain","chain/","charact","character/","characters/","check","circular","class","compar","countbinarysubstrings(self,","criteria","current","current:","current_count","d:","def","deleting/","dict.","dict:","dictionari","dictionary)","diff","differ","differbyone(self,","each","easier.","elem","else:","enumerate(s):","enumerate(string[1:],","exist","fals","final","findlongestword(self,","fingerprint","fingerprints.get(fingerprint,","fingerprints.values()","fingerprints[fingerprint]","function","gener","go","good","groupstrings(self,","handl","https://leetcode.com/problems/count","https://leetcode.com/problems/group","https://leetcode.com/problems/longest","https://leetcode.com/problems/str","i,","int:","keep","key=","key=lambda","lambda","last","last:","len(store[c])):","len(store[c]):","len(word):","len(x),","length","letter","list[list[str]]:","list[str])","longeststrchain(self,","loop","match","max(chain,","max(words_store[new_word],","min","min(result,","model","new_word","now,","number","occur","offset","offsets.get(c,","offsets[c]","on","ord(c))","peep","possibl","prev","prev_count","problem.","question","question.","range(len(word)):","range(offset,","remove/add","repeat","replac","result","result.","return","reverse=true)","rotat","run","s","s:","s[0]","s[1:]:","same","second","set","set()","shift","simple.","slide","solution:","sort","sorted(words,","standard","start=1):","store","store,","store.add(fingerprint)","store.get(c,","store:","store[c]","store[c][i]","str(diff","str)","str,","str:","string","strings/","strings:","subsequ","substr","substrings/","through","total","travers","true","updat","visual","window","without","word","word,","word:","word[:i]","word[i+1:]","words:","words_sort","words_sort:","words_stor","words_store:","words_store[new_word]","words_store[new_word])","words_store[word]+1)","words}","x))","x:","{word:","{}"],"DataStructures/LinkedLists/":["\"\"\"","#","%","'next'","(_list.val,","(heada","(id","(l1_val","(lists[list_idx].val,","(n+1)th","(the","(tree/readme.md)","+","//","0","1","10","2","=","==","=>",">","[]","_","_,","__init__(self,","_list","_next","_sum","```","```pi","a,","address","addtwonumbers(self,","adjust","also,","ask","avoid","b","be","befor","bool:","both","care","carri","carry)","carry:","case","case.","check","class","comapar","conenct","connect","corner","count","crucial","current","current,","current.next","current:","cycl","cycle/","def","definit","deletion.","different.","digit","don't","dummi","dummy.next","edg","elem","element","else:","end","enumerate(lists):","existance.","fals","fast","fast.next","fast.next.","fast.next:","fingerprint","first","function)","getintersectionnode(self,","graph","great","guarate","hascycle(self,","head","head.next","head:","heada","heada,","heada.next","heada.next:","heada:","headb","headb):","headb:","heap","heap:","heapq","heapq.heappop(heap)","heapq.heappush(heap,","here","https://leetcode.com/problems/add","https://leetcode.com/problems/delet","https://leetcode.com/problems/intersect","https://leetcode.com/problems/link","https://leetcode.com/problems/merg","https://leetcode.com/problems/middl","https://leetcode.com/problems/remov","https://leetcode.com/problems/revers","i))","i,","id(head)","id(node)","ie.","ii","import","index","init(self,","instanti","int)","int,","iter","iterative:","k","keyword,","l1","l1.next","l1.val","l1:","l1_val","l2","l2.next","l2.val","l2:","l2_val","last","last.","last_node.next","link","list","list,","list.","list/","list[listnode])","list_idx","list_idx))","listnode()","listnode(digit)","listnode)","listnode,","listnode:","lists/","lists:","lists[list_idx]","lists[list_idx].next","local","loop","m","m:","m_refer","mergeklists(self,","mergetwolists(self,","move","n","n:","need","next","next.","next=none):","node","node.","node.next:","node_before_revers","none","none,","none.","none:","nth","numbers/","on","ones:","overflow.","perform","phase","place","point","pointer","post","practic","prep","prepar","prev","prev,","probabl","problem","push","question","question.","range(n):","reach","recurs","recursive:","remove).","removenthfromend(self,","reserv","reset","return","revers","reversebetween(self,","reverselist(self,","run","runner","runner.next","self.next","self.val","sequence:","set","set()","shouldn't","similar","singli","situat","slow","slow.next","slow.next.next","so,","solution:","sort","step","swap","target","that,","there'","thing","till","tough","traverse()","traverse(node.next)","traverse(node=head):","treat","tree:lca","true","two","until","us","val","val=0,","valu","variabl","visit","visited.add(fingerprint)","visited.add(id(node))","visited:","we'v","x","x):"],"DataStructures/LinkedLists/Instructions.html":["(check","(merg","also,","avoid","check","common,","conditions,","cycl","declar","difference.","dummi","end","graph:","helps.","import","instruct","is,","link","list","lists)","long","loop","make","mani","multipl","node","node.","none","on","point","pointer","prev","question)","reference.","revers","run.","sort","sure","thing","treat","understand","until","us"],"DataStructures/Trees/":["!=","'node')","'node',","'node':","(check","(collections.deque)","(levelwis","(no","(recurs","(step","+","2","439df7e5ea1f","=",">","again,","ancestor","answer.","append","base","befor","binari","care","cases.","check","class","combo","common","converg","curat","data","decent","def","discrep","discrepancy.","distanc","don't","down","elimin","encount","equidist","find","global","go","gotcha","hashing)","hit","https://leetcode.com/problems/lowest","https://medium.com/@codingfreak/binari","iii/","inord","interview","iterative)","keep","lca","left","left/","level","levelwis","levelwise,","link","list","list:","lowestcommonancestor(self,","make","merg","node","node.","node/","not)","not),","on","order","p","p,","p1","p1,","p1.parent","p:","parent","parent),","pass","pointer","popleft","postord","practic","preorder","present","problem","push","q","q1","q1.parent","q1:","q:","question","queue.","record","recurs","remov","reset","return","right","root","same","see","similar","situations,","solut","solution,","solution.","solution:","sure","take","they'll","thing","through","travers","tree","tree,","trick","up","updat","value.","vertic","want"],"DataStructures/Trees/Inorder.html":["\"","\"\"\"","\"\")","(root.left","+","+=","0","=","==",">",">\")","[]","\\","_inorder(node):","_inorder(node.left)","_inorder(node.right)","_inorder(root)","_inorder.sum","add","anoth","attr","augment","base","binarytreepaths(self,","bool:","bst","case","class","convertbst(self,","criteria,","cumul","current","current.left","current.right","current.right:","current.v","current:","def","discrep","don't","elem","else:","even","exit","fals","false:=","find","first.","flag","for,","give","greater","here.","https://leetcode.com/problems/binari","https://leetcode.com/problems/convert","https://leetcode.com/problems/leaf","https://leetcode.com/problems/sum","inord","int:","iter","iterative(root,","iterative(root1)","iterative(root2,","iterative.leav","iterative.leaves.append(current.val)","iterative.leaves.pop(0)","iterative.leaves[0]:","iterative.similar","iterative:","keep","leafsimilar(self,","leav","leaves/","left","len(iterative.leaves)","list","list[str]:","look","loop","make","match","node","node.left","node.right:","node.v","node:","none","particularli","path","path):","paths.","paths/","postord","recur","recurs","remov","result","result.append(path","return","right","root","root.right):","root1:","root2:","root:","satisfi","search;","set","similar","solution:","sort","stack","stack.append(current)","stack.pop()","static","str(node.val)","str(node.val))","sum","sumofleftleaves(self,","sure","think","total_sum","track","travers","traverse(node,","traverse(node.left,","traverse(node.right,","traverse(root,","tree","tree,","tree/","treenode)","treenode,","treenode:","trees/","true","true:=","unnecessari","until","up","us","valid","validation:","validation=false):","validation=true)","variabl","want"],"DataStructures/Trees/Preorder.html":["#","(current","(d","(node.v","(not","(sum","*","+","+=","0","0)","0,","1","1)","1):","10","1:","=","==",">","[]","[])","[],","[node.val])","[node.val],","__init__(self,","addnums(node,","addnums(node.left,","addnums(node.right,","addnums(root,","addonerow(self,","adjust","always,","base","binari","check","class","concern","consecut","course)","cover","current","current):","current_sum","current_sum):","d","d:","decent","def","default","definit","depth","depth):","direct","direction,","down","elif","else:","exist","float('","gener","global","go","https://leetcode.com/problems/add","https://leetcode.com/problems/binari","https://leetcode.com/problems/path","https://leetcode.com/problems/sum","ii/","iii/","inf'),","int)","int,","int:","leaf","left","left,","left:","length","length)","length):","level","levelwis","link","list","list[list[int]]:","longest","longestconsecutive(self,","longestzigzag(self,","max","max(preorder.longest,","max(self.max_length,","new","new.left","new.right","new_path_sum","new_path_sum.append(new_sum)","new_sum","node","node.","node.left","node.left:","node.right","node.right:","node.v","node.val)","node.val):","node.val,","node:","none","numbers/","on","order","pass","path","path,","path.append(node.val)","path_sum):","path_sum:","pathsum(self,","perfect","preorder","preorder(node,","preorder(node.left,","preorder(node.right,","preorder(root,","preorder.longest","prev)","prev,","process","question","question,","replac","requir","result","result.append(path)","return","right","right,","right:","root","root.left","root.right,","root:","row","s","satisfi","self.left","self.max_length","self.result","self.right","self.tot","self.val","sequence/","singl","solution:","sometim","start","state","sum","sum:","sumnumbers(self,","think","travers","traversal/","traverse(node,","traverse(node.left,","traverse(node.right,","traverse(root,","tree","tree.","tree/","treenode(v)","treenode)","treenode,","treenode:","v:","valu","want","x","x):","zigzag"],"DataStructures/Trees/Postorder.html":["#","'list[treenode]')","'treenode')","'treenode',","'treenode':","(eg.","(float('","(l","(left_max","(node.v","(right_min",")","+","+=","0","0,","0:","0}","0},","1","1,","199/problems/numb","1}","2","2:",":","=","==",">",">=","[]","[p.val,","_,","__init__(self,","`0`","adjust","afterwards.","ancestor","appl","apple_in_path","attribut","back","base","befor","binari","bool:","bottom,","bst:","call","check","child","class","collect","come","common","complex","consolid","contest","countpairs(self,","current","current)","current,","d1","d1,","d2","d2,","data","deepest","def","defaultdict","defaultdict(int)","defaultdict(list)","definit","deque,","distance:","doesn't","don't","down","e","e.g.","easier","edges:","even","exist","fals","find","findfrequenttreesum(self,","float('","float('inf'))","forget","found","frequent","gener","globals/","go","good","greater","handl","hasapple:","hasapple[node]","hasapple[node]:","height","height,","height.","here","https://leetcode.com/contest/weekli","https://leetcode.com/problems/binari","https://leetcode.com/problems/lowest","https://leetcode.com/problems/minimum","https://leetcode.com/problems/most","https://leetcode.com/problems/valid","import","includ","inf')","inf'),","initi","insert","int)","int,","int:","isvalidbst(self,","it'","itself","iv/","key,","kinda","l","l,","l.items():","l_h","l_h,","l_h:","l_lca","lc","lca","lcadeepestleaves(self,","leaf","leav","leaves.","leaves/","leaves/)","left","left,","left.","left=none,","left_max,","left_min","len(target)","list[bool])","list[int]:","list[list[int]],","look","lower","lowestcommonancestor(self,","max","max(","max(postorder.max_sum,","max(self.max_count,","max_count","maximum","maxpathsum(self,","mintime(self,","n:","need","neg","node","node'","node.","node.left","node.left:","node.right:","node.v","node.val)","node.val,","node.val]","node.val])","node:","nodes.","nodes:","nodes])","none","note:","obvious","one.","optim","otherwis","p:","pairs/","pass","path","posit","postord","postorder(node):","postorder(node.left)","postorder(node.right)","postorder(root)","postorder.","postorder.max_sum","problem:","properties,","properties;","q.val])","q.val]))","q:","r","r.items():","r_h","r_h,","r_h:","r_lca","rc","realli","record","record/upd","recurse(node.left)","recurse(node.right)","recurse(node:","relat","result","result.append(key)","return","right","right;","right=none):","right_max,","right_min","root.left","root.right:","root:","s,","same","search","self.lca","self.lca:","self.left","self.max_count","self.right","self.tot","self.val","self.valid","self.walk","send","set()","set([i.v","similar","slightli","solut","solution:","sometim","sometimes,","static","store","subtre","subtree.","sum","sum/","sums.items():","sums[l","target","target)","time","travers","traverse(0)","traverse(node):","traverse(node.left)","traverse(node.right)","traverse(root)","traverse(v)","treat","tree","tree.","tree/","tree;","tree[e].append(s)","tree[node]:","tree[s].append(e)","treenode)","treenode,","treenode:","tricki","true","up","us","v","val","val,","val=0,","valu","value.","value:","variabl","versa.","vice","visit","visited.add(node)","visited:","want","we'd","won't","work","x","x):","you'd","{0","{0:","{1:"],"DataStructures/Trees/LevelWise.html":["!=","#","(think","(x_found","(y_found","+","+=","0","1","1)","1))","1):","1,","=","==",">","[]","[])","[node.val]","[x[x]","_","__init__(self,","anoth","append","atleast","befor","binari","bool:","brilliant","care","class","collect","complic","creat","current","current,","current.left:","current.right:","current.v","current.val))","current_row","current_row.get(x,","current_row:","current_row[x]","deepestleavessum(self,","def","definit","dequ","deque()","each","extend","fals","float('","float('inf'),","gener","guarante","horizontally.","https://leetcode.com/problems/binari","https://leetcode.com/problems/cousin","https://leetcode.com/problems/deepest","https://leetcode.com/problems/vert","idea","import","inf')","int)","int,","int:","iscousins(self,","it)","leav","left","left=none,","len(queue)","level","level.","level_sum","levelwis","list[list[int]]:","max(x_max,","max_x+1)].","max_x.","min(x_min,","min_x","more","need","node","node.","node.left))","node.left:","node.right))","node.right:","on","order","origin","parent","posit","queue","queue.append((0,","queue.append((current.left,","queue.append((current.right,","queue.append((root,","queue.append((x","queue.append((x+1,","queue.append(current.left)","queue.append(current.right)","queue.append(root)","queue.popleft()","queue:","rang","range(min_x,","range(size):","range(x_min,","return","right","right.","right=none):","root","root))","root:","same","self.left","self.right","self.val","similar","size","size:","slightli","solution:","sort","sorted(current_row[x])","sorted(x)]","sorting,","store","sum/","travers","traversal/","tree","tree/","treenode)","treenode,","treenode:","true","us","val","val=0,","valu","value.","vertic","verticalorder(self,","verticaltraversal(self,","wise","work","x","x)","x,","x.get(x,","x:","x[x]","x_found","x_max","x_max+1)]","x_min","x_min,","y:","y_found","y_found)","y_found):","{}"],"Datastructures/Trees/TreeToGraph.html":["!=","#","(add","0:","1","1)","1:","=","==",">","[]","[node.parent,","[target.val]","__init__(self,","addit","alter","approaches:","arbitari","attribut","binari","class","collect","construct","convert","data:","def","defaultdict(list)","defaultdict,","definit","dequ","deque()","distanc","distancek(self,","effici","especially,","filter","graph","graph.","graph:","graph[node.val].append(parent)","graph[parent].append(node.val)","graph[v]:","handling.","https://leetcode.com/problems/al","import","input","int)","iteration.","k","k:","keep","len(queue)","level","list[int]:","loop","make","mark","memori","mind","need","nei","neightbor","new","node","node.","node.left,","node.right]","node.val)","node:","none","note","o(n)","object","out","parent)","parent):","perform","proper","queue","queue.append(nei)","queue.append(target.val)","queue.popleft()","queue:","range(size):","requir","result","result.append(nei)","return","root:","self.left","self.right","self.val","set()","size","solution:","sometimes,","space","start","step;","store","sure","target","target:","there'","thing","travers","traverse(node,","traverse(node.left,","traverse(node.right,","traverse(root,","tree","tree/","treenod","treenode,","treenode:","two","v","valu","visit","visited.add(v)","want","whole","wise","x","x):"],"DataStructures/Trees/TwoTrees.html":["#","+=","=",">","[]","[],","__init__(self,","algorithm","binari","c","c.left)","c.right)","c:","care","class","clean","clone","clone;","cloned)","cloned:","compar","correspond","def","definit","directli","element","equality:","explaination:","followup","generators:","getallelements(self,","gettargetcopy(self,","heapq","https://leetcode.com/problems/al","https://leetcode.com/problems/find","https://leetcode.com/problems/merg","import","inorder(node,","inorder(node.left,","inorder(node.right,","inorder(o.left,","inorder(o.right,","inorder(o:","inorder(original,","inorder(root1,","inorder(root2,","interest","it(node):","it(node.left)","it(node.right)","iter","iterator(generator)","keep","l)","l):","l.append(node.val)","l1)","l1,","l2","l2)","list[int]:","merg","merge(l1,","mergetrees(self,","node","node.","node1","node1.left","node1.right","node1.v","node1:","node2","node2):","node2.left)","node2.right)","node2.v","node2:","node:","none","now","o","o:","on","origin","original:","over","preorder(node1,","preorder(node1.left,","preorder(node1.right,","preorder(t1,","python","refer","result","return","root1:","root2:","search","self.left","self.result","self.right","self.val","simple:","solution:","solv","t1:","t2)","t2:","take","target:","thing","too/475462","tree","tree/","tree/discuss/537686/python","treenode)","treenode):","treenode,","treenode:","trees/","two","us","way","x","x):","yield"],"DataStructures/Trees/ConstructTree.html":["!=","\"\"\"","\"\"\"decod","\"\"\"encod","#","'#'","'#,'","''","','","',')","(end","(str(node.val)","+","+=","//","0","1","1)","1):","1,","1]","2",":rtype:",":type","=","==",">",">=","[]","[treenode(int(val))","_","__init__(self,","alway","array","array.","balanc","balancebst(self,","befor","binari","break","bstfrompreorder(self,","buildtree(self,","child","child,","class","codec:","collect","construct","construct(0,","construct(i_s,","construct(l,","construct(max_index","construct(pivot","construct.postorder_index","construct_tree()","construct_tree(0,","construct_tree(middl","construct_tree(root_idx+1,","construct_tree(start,","construct_tree(start=0,","construct_tree.index","constructmaximumbinarytree(self,","constructtree(start,","continu","current","current.left","current.right","data","data):","data.split(',')]","data:","def","definit","dequ","deque()","deseri","deserialize(self,","divid","e","element","else:","encod","end","end)","end):","end,","end:","end=len(inorder)","enumerate(inorder):","enumerate(inorder)}","fg","find_first_greater(start","find_first_greater(start,","function.","greater","https://leetcode.com/problems/bal","https://leetcode.com/problems/construct","https://leetcode.com/problems/maximum","https://leetcode.com/problems/seri","i,","i_","i_e)","i_e):","i_e:","import","index","inord","inorder:","input","keep","l","last","leetcod","left","left=none,","len(inorder)","len(node_vals)","len(nums))","len(postorder)","len(preorder)","len(queue)","list[int])","list[int],","make","map","max_index","max_index)","mid","mid+1","middl","node","node.","node.left","node.right","node.v","node:","node_po","node_pos[root.val]","node_v","node_vals.append(node.val)","none","notic","nums:","nums[i]","nums[max_index]","nums[max_index]:","one!!","parent","parts.","pivot","postord","postorder:","preorder","preorder:","preorder[fg]","preorder[start])","present","question","questions:","queue","queue.append(node.left)","queue.append(node.right)","queue.append(root)","queue.popleft()","queue:","r)","r):","r:","range(l,","range(size):","result","result[:len(result)","return","right","right=none):","root","root):","root.left","root.right","root.val:","root:","root_idx","search","self.left","self.right","self.val","serialize(self,","singl","size","solution:","start","start)","static","str","string.","style","subtre","sure","target):","target:","traversal/","traverse(node):","traverse(node.left)","traverse(node.right)","traverse(root)","tree","tree.","tree/","treenod","treenode()","treenode(node_vals[middle])","treenode(object):","treenode(postorder[construct.postorder_index])","treenode(preorder[construct_tree.index])","treenode(preorder[start])","treenode)","treenode:","unus","us","v","val","val=0,","variabl","we'r","x","x):","{v:"],"DataStructures/Trees/NumTrees.html":["%","(10**9","(trees[left_index]","*","+","+=","//","0:","1)","1:","2","7)","=","==",">","[1]","amount","answer","arr:","base","beforehand","care","class","classic","comput","construct","continu","def","diff","dp","enumerate(s_arr)}","factor","factors/","find","go","https://leetcode.com/problems/binari","i):","i,","increas","index","index.get(s_arr[i]","int:","issues.","j","left_index","len(s_arr)","len(s_arr)):","list[int])","lot","means,","mod","node","num","number","numfactoredbinarytrees(self,","order.","origin","possibl","previou","problem.","range(0,","range(1,","return","right_index","s_arr","s_arr[i]","s_arr[j]","s_arr[j],","smaller","solution:","solv","sort","sorted(arr)","squar","take","total","tree","trees[i]","trees[right_index])","tress","{num:"],"DataStructures/Graphs/":["#","#3","(easier","+","0:","1","2","=","==",">","[]","[])","[]):","[pid[i]]","_","append","automat","beginn","call","children","children)","children:","class","collect","construct","cours","crucial","d","decent","def","dequ","deque()","dict.get(node,","discussion/655708/graph","enumerate(ppid):","everyon","false))","found,","good","graph","graph.get(p,","graph.get(parent,","graph[parent]","https://leetcode.com/discuss/gener","https://leetcode.com/problems/array","https://leetcode.com/problems/kil","i,","import","inherit","int)","iv","kill:","killprocess(self,","len(queue)","list[int],","list[int]:","multipl","nesting/","node","node:","note:","p","p,","parent","pid","pid:","pid[i]","point","ppid:","practic","problem","problemset:","process/","question:","queue","queue.append((d,","queue.append((pid[i],","queue.popleft()","queue:","range(size):","return","sampl","schedul","set","size","solut","solution:","step","step.","subtre","tag","tag))","tagging/mark","target","to_be_kil","to_be_killed.append(p)","tree","true","true,","true:","us","vs","{}"],"DataStructures/Graphs/Coloring.html":["!=","\"meaningful\"","(c","(node,","(use","(valid","+","0))","1","1))","1):","1:","1]","1])","1]:","2","2,","2])","3,","4])","=","==",">","[","[0","a):","a,","adjacent/","allow","altern","b","basically,","bfs(i):","bfs(s):","bfs)","bifurc","bipartite/","bipartition/","blue","blue,","blue])","blue_edges:","bool:","c","chang","class","code","collect","color","color)","color))","color,","color:","color_left","color_left))","colors.pop()","colors.remove(color)","colors/","continu","cycl","d","def","defaultdict","defaultdict(list)","defaultdict,","dequ","deque()","dfs(d,","dfs(i,","dfs(index,","differ","disconnect","don't","edg","end","exists,","exists:","expect","expected):","expected,","extrem","fals","fill","find","first","flower","flowers.pop()","flowers.remove(planted[n","flowers:","gardennoadj(self,","graph","graph:","graph[end].append(start)","graph[i]","graph[index]:","graph[node]:","graph[s].append([d,","graph[start].append(end)","https://leetcode.com/problems/flow","https://leetcode.com/problems/i","https://leetcode.com/problems/poss","https://leetcode.com/problems/shortest","import","index","int,","isbipartite(self,","keep","key","len(graph)):","len(graph))]","length","list[int]:","list[list[int]])","list[list[int]],","loop","make","mind","miss","n","n)]","n:","neigh","neigh:","node","node,","on","one:","over","pair","path","paths:","plant","planted[i","planted[n","problem","proper","queue","queue.append((0,","queue.append((i,","queue.append((v,","queue.popleft()","queue:","range(0,","range(1,","range(len(graph)):","red","red,","red])","red_edges:","represent","result","result[node]","return","run","s","s))","s):","s,","sections.","see","seen","seen.add((node,","seen:","set","set()","set([1,","set([red,","shortestalternatingpaths(self,","similar","solut","solution:","solv","start,","store","sure","these,","tips:","travers","true","true,","up","v","v,","valid","vertic","visit","visited:","visited[index]","visited[node]","visited[node]:","visited[s]:","want","{}"],"DataStructures/Graphs/GraphBFS.html":["(0,","(d","(djikstra","(k","(time","+","0","0))","1","1))","1):","=","==",">",">=","[]","[float('inf')","amaz","arsenal.","bf","bool:","c","c,","canvisitallrooms(self,","class","collect","continu","cost","d","d,","def","defaultdict","defaultdict(list)","delay","dequ","deque()","deque,","dst:","even","extrem","fals","findcheapestprice(self,","flight","flights:","function","graph","graph[c]:","graph[node]:","graph[u].append((v,","grid","heap","heap.append((0,","heap:","heapq","heapq.heappop(heap)","heapq.heappush(heap,","here.","https://leetcode.com/problems/cheapest","https://leetcode.com/problems/key","https://leetcode.com/problems/network","import","int)","int,","int:","k","k))","k:","len(rooms)","len(visited)","list[list[int]])","list[list[int]],","max(max_time,","max_tim","method:","myriad","n","n)]","n,","n:","n_d","n_d,","networkdelaytime(self,","node","optim","play","power","prioriti","problems.","question","queue","queue)","queue.append(0)","queue.append(v)","queue.popleft()","queue:","quickest","range(0,","reach","return","room","rooms/","rooms:","rooms[room]:","set()","similar","solution:","src,","src:","stops/","substitut","there'","time","time)","time,","time/","times:","tool","true","two","u,","us","v","v))","v,","variabl","visit","visited.add(room)","visited:","visited[c]","visited[node]","w","w))","w,","way","well.","within","x;","{}"],"DataStructures/Graphs/GraphDFS.html":["#","(len(tickets)","(postorder).","*","+","+=","0","1","1):","1}","=","==",">","['jfk'])","[1]","[]","[])","[]):","[c]","[e]","[n])","[s]","add","again","alreadi","approach","array","augment","befor","bidirectional.","boil","bool:","c","c,","cach","cache:","cache[course]","calcul","canfinish(self,","check","children","class","collect","come","compar","compon","connect","consolid","countcomponents(self,","countsubtrees(self,","cours","course_depth","course_depth)","courses/","current","cycl","cycle,","d","d)]","data","deepest","def","defaultdict","defaultdict(int)","defaultdict(list)","depth","df","dfs(c))","dfs(course)","dfs(course):","dfs(i)","dfs(i):","dfs(index):","dfs(j):","dfs(n)","dfs.","dfs.visit","dfs.visited.add(index)","dfs.visited.remove(index)","dfs.visited:","didn't","down","e","edg","edges:","edges[(current,","edges[(s,","effici","eg.","exit","f","fals","fetch","find","finditinerary(self,","first","follow","g_visit","g_visited.add(i)","g_visited:","global","globally,","gotcha","gotcha:","graph","graph.get(e,","graph.get(index,","graph.get(s,","graph/","graph:","graph[c].append(p)","graph[current]:","graph[d].append(s)","graph[e]","graph[i]:","graph[node]:","graph[s]","graph[s].append(d)","great","https://leetcode.com/problems/cours","https://leetcode.com/problems/numb","https://leetcode.com/problems/parallel","https://leetcode.com/problems/reconstruct","import","includ","incom","index","info","info[l]","info[labels[node]]","init","instead","int,","int:","it'","itinerary/","j","l,","label/","labels:","leav","len(path)","lexograph","list[int]:","list[list[int]])","list[list[int]],","list[list[str]])","list[str]:","local","longest","look","loop","make","max","max(max_depth,","max(max_next,","max_depth","max_next","method","minimumsemesters(self,","minu","n","n)]","n)]:","n:","need","node","nodes.","normal","not!","note:","numcourses):","numcourses:","on","p","p,","path","path):","path.","path[:]","posibl","possibl","prereq","prereq.get(course,","prereq.get(p,","prereq[p]","prerequisites:","process","question","question:","range(0,","range(1,","range(n):","realiz","relations:","repeat","requir","result","result[node]","return","revisit","s","s,","same","save","schedul","schedule/","self.itinerari","self.itinerary:","self.valid","self.valid:","sem","set","set()","similar","simplifi","solution:","sort","sorted(graph[s])","static","store","str)","sub","sure","there'","thing","thought","tickets:","time","track","traverse('jfk',","traverse(0)","traverse(current,","traverse(n,","traverse(node):","traverse(v).items():","tree","tri","true","type","understand","undirect","unvisit","up:","v","variable.","visit","visited.add(course)","visited.add(i)","visited.add(index)","visited.add(node)","visited.remove(course)","visited.remove(i)","visited:","{labels[node]:","{}"],"DataStructures/Graphs/TopologySort.html":["1]","=","==",">","[]","[c","c","c,","checkifprerequisite(self,","class","collect","def","defaultdict","defaultdict(list)","defaultdict(set)","defaultdict,","dequ","deque()","deque,","findorder(self,","graph","graph[c].add(p)","graph[c].append(p)","graph[c]:","graph[node]:","https://leetcode.com/problems/cours","ii/","import","incom","incoming[n].remove(c)","incoming[n]:","incoming[nei].remove(node)","incoming[nei]:","incoming[p].add(c)","int,","iv/","len(topo)","list[bool]:","list[int]:","list[list[int]])","list[list[int]],","n","n))","n:","nei","node","numcours","numcourses))","numcourses:","p","p,","pre","pre[n]","pre[n].union(pre[c].union(set([c])))","pre[p]","prerequisites:","queries:","queries]","queue","queue.append(n)","queue.append(nei)","queue.append(node)","queue.append(s)","queue.popleft()","queue:","return","s","schedul","set(range(0,","solution:","sort","start","starts.remove(p)","starts:","topo","topo.append(node)","topo[::","topolog","u_set","u_set.remove(p)","u_set:"],"DataStructures/Heap.html":["#","(","((","(0","(0,","(_d","(h","(heap","(k+1):","(l.val,","(need","(pay","(price","(processing,","(sort","(the","(x","(x*x","(x,","(x[1],","(y","*","+","+=","0","0)]","0,","0:","1","1)","1):","1)]:","1,","1,y),(x,y+1),(x,i","1:","1])","=","==",">",">=","[","[(0,","[(e,","[(x+1,y),(x","[]","[])","[]):","[],","_,","_d","_x,","_y","`visited`","abs(node.v","aim","alloc","altern","alway","amaz","array","arrival,","assign","attent","b/w","base","binari","break","brick","bricks:","bricks_left","build","call)","care","case","check","citi","class","closest","closestkvalues(self,","come","compact","compar","constaint","continu","cost","cost,","cours","courses:","cpu/","current_dist","d","d))","d)]","d,","def","diff","displac","distanc","djikstra","djikstra.","don't","dst:","durat","duration)","duration,","duration:","e,","effort/","element","elems:","elif","else:","empti","end","enumerate(heights[1:],","enumerate(lists):","enumerate(mat):","enumerate(tasks)])","excel","exist","find","findcheapestprice(self,","flight","flights:","float,","furthestbuilding(self,","getorder(self,","gotcha","great","greater","h","head","head.next","heap","heap,","heap.","heap:","heap[0][0]","heap[0][0]:","heap[0][distance])","heappush","heapq","heapq.heappop(heap)","heapq.heappush(heap,","height","heights:","heights[i","here","here)","heurist","hop","hops,","https://leetcode.com/problems/cheapest","https://leetcode.com/problems/closest","https://leetcode.com/problems/cours","https://leetcode.com/problems/furthest","https://leetcode.com/problems/k","https://leetcode.com/problems/merg","https://leetcode.com/problems/path","https://leetcode.com/problems/singl","https://leetcode.com/problems/th","i,","i]","ii/","iii/","import","incom","index","index))","index,","index]","indic","inject","inorder(node):","inorder(node.left)","int)","int,","int:","iter","iterator,","k","k,","k:","kclosest(self,","key","key=lambda","kweakestrows(self,","l","l))","l.next","l.next:","l:","ladders,","ladders:","last_day","len(heap)","len(heights),","len(heights[0])","len(lists)","len(result)","length","list[int],","list[int]:","list[list[int]])","list[list[int]],","list[list[int]]:","list[listnode])","listnode(min_val)","listnode:","lists/","lists:","loop","maintain","make","mat:","matrix/","max","max_heap","max_heap,","mergeklists(self,","metric","min","min/max","min_heap","min_val,","minimum","minimumeffortpath(self,","n:","need","new","next","node:","none","none:","not,","note","number","obviously!","on","origin","origin/","otherwis","overflowing.","overflows,","p","path","pictur","point","points:","pop","pop.","possible;","prepar","price","price,","process","processing,","push","pushed.","qualifi","question!","question.","questions:","reach/","requir","respect","result","result.append(index)","return","root:","row","row:","runner),","s,","s_cours","s_courses:","schedul","schedulecourse(self,","search","select","set()","set.","sign","size","smaller","soldier","soldiers,","solution:","sort","sorted([[task[0],","sorted(courses,","src))","src:","start","start=1):","stops/","store","store.get(city,","store.get(s,","store[s]","substract","t","t,","target):","target:","task","task[1],","task_idx","tasks.","tasks:","tasks_sort","tasks_sorted[0][0]","tasks_sorted[task_idx]","tasks_sorted[task_idx][0]:","that).","thread","times)","top","total","travers","tree","treenode,","trivial","updat","us","valu","visit","visited.add((x,","visited:","want","we'll","we'r","weakest","well,","within","x","x,","x:","x[0]))","y","y)","y))","y*y)","{}"],"DataStructures/Grid.html":["\"0\"","#","(0","(0,","(ie","(steps,","(x","(x+1,y),","(x,i","(x,y+1),","(x,y+1)]","+","+=","0","0)","0)?","0,","0:","1","1),","1)]","1,y),","2","2:","=","==",">","[(x","[(x+1,y),","\\","_","_x,","_y","_y))","_y,","a:","a[x][y]","abov","always,","answer.","area","befor","bf","bfs:","binari","boundari","bridge/","build_bridge():","cach","cache:","cache[(x,","calm","care","certain","check","checkout","children","class","collect","construction:","continu","convert","criteria","current","def","default","depend","dequ","deque()","df","dfs:","direct","directions:","directli","down","dp","e.g.","each","eg.","element","elimination/","faster","find","first","follow","following:","g_queue","g_queue.popleft()","g_queue:","gener","gold/","grid","grid:","grid[0][0]","grid[_x][_y]))","grid[x][y]","https://leetcode.com/problems/longest","https://leetcode.com/problems/max","https://leetcode.com/problems/numb","https://leetcode.com/problems/path","https://leetcode.com/problems/shortest","imaginari","implementation:","impli","import","includ","increas","indic","ing","input","int)","int:","integ","island","island/","islands/","k","k:","k_left","k_left)","k_left))","k_left:","keep","len(a)","len(a[0])","len(grid),","len(grid[0])","len(queue)","list[list[int]])","list[list[int]],","list[list[str]])","logic","longest","loop","loops:","matrix","matrix/","maximum","modif","modification?","need","neg","node","numislands(self,","obstacl","of:","on","onto","optim","orang","over","overlap","paint","paint_island(x,","path","perform","popleft","posit","problem","problems,","push","question","queue","queue.append((0,","queue.append((_x,","queue.append((x,","queue.popleft()","queue:","range(size):","reflect","return","right","rotten","run","satisfi","self.result","sequenc","set","shortestbridge(self,","shortestpath(self,","size","solut","solution:","sometim","start","step","step?","substructur","such","taken","thing","think","thoroughly.","through","tip:","track","traverse(x,","trivial","us","valu","visit","what'","x","x,","x_dir,","y","y))","y),","y):","y)]","y,","y_dir","{}"],"Algorithms/":["(arrays,","(trees,","14th/3328/","180/problems/lucki","2","8th",">","addit","algorithm","alien","bitwis","challenge/535/week","class","contest","data","default)","design","dict.get(key,","dictionari","do:","dp","especially)","etc)","factors/divisor","faulti","function","graphs,","habit","heap","https://leetcode.com/contest/weekli","https://leetcode.com/discuss/interview","https://leetcode.com/explore/challenge/card/may","https://www.geeksforgeeks.org/tag/array","input","jump","k","kadan","keyboard","leetcod","link","list","lists,","ll","matrix","maximum","memoiz","number","o(n)?","order","palindrom","phone","question","question/281470/","question/643158/googl","questions*","questions,","questions:","repetit","runtimes:","spiral","stock","stream","stream/","string","strings,","sum","think","travers","trie:","understand","weekli","zip"],"Algorithms/TrickySorting.html":["1","=",">","class","come","compar","comparator.","custom","def","fed","function","functool","functools.cmp_to_key(comparator)","https://leetcode.com/problems/largest","import","key","lambda","largestnumber(self,","list[int])","make","number/","nums:","part.","python","solution:","sort","str:","tricki","up","us","work.","x+i","x,","y+x","y:"],"Algorithms/DFSandBFS.html":["#","%","'0000',","(_x,","(x","(x,","(you'll","*","+","0","0))","0)])","1","1))","1)]","1,","1.","10)","10.","1]:","2.","3.","=","==",">",">=","[(x+1,","[1,","[[fals","[[x,","_dir","_dir:","_x,","_y","_y)","_y))","```pi","`deadends_set`","`o(n^2","a^n","apend","array","atlant","atlantic]","atlantic_queu","atlantic_queue.append((x","atlantic_queue.append((x,","avoid","b","base","be","bf","bit","board:","bool:","canmeasurewater(self,","care","case","class","collect","collections.dequ","combin","combination,","condit","continu","creat","creation","d)`","deadends:","deadends_set","deadends_set:","def","dequ","deque()","deque([(0,","df","dfs(letter,","direct","direction)","done","each","eg.","elif","empti","end","error","everywhere,","exceed","excel","exhaust","exist(self,","extrem","few","find","first","flow/","forget","function:","game","game/","gener","get","go","greedi","grid","heights:","heights[x][y]:","here,","https://leetcode.com/problems/jump","https://leetcode.com/problems/open","https://leetcode.com/problems/pacif","https://leetcode.com/problems/wat","https://leetcode.com/problems/word","ii/","import","init","init_st","init_state,","int(state[i])","int)","int,","int:","inwards.","job","jug","jump","len(board)","len(board[0])","len(heights)","len(heights[0])","len(state)):","len(word):","length","letter","limit","list[list[int]])","list[list[int]]:","list[list[str]],","list[str],","littl","lock","lock/","long","messi","minimum","move","moves+1))","n","need","next_stat","nice","notes:","openlock(self,","oper","optim","optimally.","otherwise)","pacif","pacific_queu","pacific_queue.append((0,","pacific_queue.append((x,","pacificatlantic(self,","part","popleft","possibl","problem","proceed.","question","question,","questions,","questions:","queue","queue.append((_x,","queue.append((init_state,","queue.append((next_state,","queue.popleft()","queue:","range(0,","range(x):","range(x)]","range(y):","reach","repetit","requir","return","reverse;","run","runtime:","search","seen","send","set()","set(deadends)","slower","solut","solution:","solutions:","somewher","stack","start","state,","state[:i]","state[i+1:]","step","str((wheel","str)","string","substr","take.","target:","there'","travers","traverse(atlantic_queue)","traverse(pacific_queue)","traverse(queue):","true","type","up","us","useful:","valu","visit","visited.add((x,","visited.add(next_state)","visited:","water","well","wheel","wheen","word","word:","work","x","x,","x:","y","y)","y))","y))]","y),","y+1),","y:","y]","z:"],"Algorithms/Combinatorics.html":["\"\"","':'","(==r)","(ncr)","*","+","+=","0)","1","1)","1,","2","23:","2:","2]","3","4","4):","4:","4]","4])","59:","5:","=","==",">","[]","[fals","[false]","[num],","[nums[j]])","a:","accept,","add","addit","allow","arr:","array","backtrack([])","backtrack([],","backtrack(bucket","backtrack(bucket):","backtrack(bucket,","base","book","bucket","bucket.append(arr[k])","bucket.pop()","bucket[0:","bucket[2:","call","case","cc","chang","cheat","class","collect","combin","combinations:","combinator","continu","counter","counter(nums)","counter)","counter):","counter:","counter[num]","counter[num]:","d","deep","def","df","digits/","domain)","element","fals","far;","filter","given","go","helper","helperncr(","helperncr(0,","helperncr(s,","helperncr(s:","https://leetcode.com/problems/combin","https://leetcode.com/problems/largest","https://leetcode.com/problems/permut","https://leetcode.com/problems/permutations/","if(","ii/","import","includ","included[i]","included[i]:","index","int(bucket)","int(bucket[2:","int(bucket[2])","int)","int,","item","j","k","k:","largesttimefromdigits(self,","len(arr)","len(bucket)","len(nums)):","len(nums))]","len(nums):","level","list,","list:","list[int])","list[list[int]]:","loop","made","make","n","n):","ncr","ncr.append(bucket[:])","need","node","none:","normal","normalsubset(self,","note","num","number","nums:","out","param","permut","permute(bucket","permute(bucket)","permute(bucket):","permute(self,","permuteunique(self,","process","questions:","r","r):","r:","range(0,","recurs","recursion:","reference:","repetition,","result","result.append(bucket[:])","return","reverse=true)","revert","right","s:","same","scenario","select","select.","self.recurse(k,","self.t","self.t:","sheet","similar","solution.","solution:","sorted(a,","str(d[i]))","str:","subset","sum/discuss/16510/python","t:","time","track","true","uniqu","us","visit","visited[j]","visited[j]:","‘reject’"],"Algorithms/Backtracking.html":["!=","#","'(',","')',","'visited'","((i,","(i","(i,","(int","(posit","(use","(veri","+","+=",",","0","0)","0,","1","1)","1),","1):","1);","1,","1;","2","3000",":","=","==",">","[]","[],","[candidates[i]],","_helpercopypaste(self,","accept","actual","add","ahead.","allow","answer:","array,","backtrack","backtrack(0,","backtrack(curr","backtrack(i","backtrack(i,","backtrack:","base","basic","bits.","boolean","bucket","bucket,","call","candidates:","candidates[i])","canjumpfromposition(int","care","cases:","check","choices:","choos","class","close","combinationsum(self,","complet","condit","constraint","copied))","copied,","copied:","count","current","current)","current),","current):","current,","current:","def","df","dfs(self,","differ","direct","don't","each","element","element:","empti","exhaust","exists:","failur","functools.lru_cach","furthestjump","game","gener","getmaximumgold(self,","go","gold/","grid","grid:","grid[i][j]","hat","https://leetcode.com/problems/2","https://leetcode.com/problems/combin","https://leetcode.com/problems/jump","https://leetcode.com/problems/numb","https://leetcode.com/problems/path","i:","if(curr","if(i","if(n","int","int)","int,","int:","int[]","intmax","intmin","j","j)","j))","j)):","j),","j,","j:","keep","key","keyboard/submissions/","len(candidates):","len(grid),","len(grid[0])","length","limit","list[int],","list[list[int]])","list[list[int]]:","m","m,","make","math.min(posit","max","max(self.dfs(i,","max(self.dfs(x,","maximum","maximumsum","maximumsum)","memo","min","min(2","minsteps(self,","move","n","n):","n:","necessari","next","nextposit","nums)","nums.length","nums[position],","of.","on","ones.","open","option","other/","otherwise,","param,","parenthes","permut","posit","position,","possibl","problems)","public","questions:","range(m))","range(n)","recurs","recursion)","recursion,","remov","repeatit","requir","result","result.append(bucket[:])","return","same","search","see","seen),","seen):","seen.add((i,","seen.discard((i,","seen:","select","self._helpercopypaste(n,","set","set())","set)","similar","solut","solution:","stack","stay","step","string","success","sum","sum,","sum/","sum:","taken","target","target:","true;","two","type","updat","us","way","wear","x,","y","y,","{","}"],"Algorithms/BinarySearch.html":["!=","\"insert\"","#","(i)","(start","*","+","+=","0","0:","1","1,","1.","154","1:","1]","=","==",">",">=","[","[look","[lower,","__init__(self,","```pi","answer","appropri","arr:","arr[0]","array","array/","article:","b_target:","beginn","below","between","binari","binary_start_search(b_target):","binary_start_search(target)","binary_start_search(target+1)","bloomday:","bloomday[0]","boat","bouquet","bs","bstfrompreorder(self,","calc_sum(mid):","can_ship","can_ship(w):","capac","case","cases:","change.","check","class","closest","constructtree(start,","crucial","current","d","d:","day","day)","day:","days/","days_left","decid","decrement","def","default","definit","diff","direct","discussion/691825/binari","discussion/786126/python","done:","edg","eg:","element","else:","end","end):","end,","end:","enumerate(bloomday):","equal","equality,","equality.","etc","fg","find","find_first_greater(start","find_first_greater(start,","findbestvalue(self,","findmin(self,","first","float('","float('inf')","function","go","good","greater","https://leetcode.com/discuss/gener","https://leetcode.com/problems/capac","https://leetcode.com/problems/construct","https://leetcode.com/problems/find","https://leetcode.com/problems/minimum","https://leetcode.com/problems/sqrtx/","https://leetcode.com/problems/sum","i,","i.e.","ii/","import","includ","inf')","insert","int)","int,","int:","interesting.","it'","iter","iteration.","k","k:","last","leetcod","left","left=none,","len(bloomday)","len(nums)","len(nums),","len(preorder)","len(weights):","list[int])","list[int],","list[int]:","loop)","lot","lower","lower==len(nums)","m","m:","make","mani","max","max(end,","max(max_w,","max,","max_w","maximum,","mid","mid+1","mid;","min","min(start,","mindays(self,","minimum","monoton","mutat","mysqrt(self,","n","n:","necessari","need","never","next","node.","none","num","num)","number","nums:","nums[0]","nums[end]:","nums[lower]","nums[start]","on","ones.","optim","packag","pattern","pivot.","place","point","posit","power","preorder","preorder:","preorder[fg]","preorder[start])","problem","problem,","question","questions.","quicker","recurs","reduc","remember:","req","result","return","right","right=none):","rotat","same","sampl","search","searchrange(self,","self.left","self.right","self.val","set:","ship","shipwithindays(self,","solut","solution:","solv","somehow","sort","sorted;","start","start.","start:","step","streak","such","sum","sum(i","sum_w","take","target","target):","target+1","target,","target/","target:","templat","terminates.","thing","traversal/","traversal/]","tree","treenode(preorder[start])","treenode:","tri","ultim","understand","unlik","us","val","val=0,","valu","variabl","verify(mid):","w","w)","want","weights:","weights[0]","weights[1:]:","wg","within","x","x:"],"Algorithms/BucketTrick.html":["#","'can'","(t","+","//","1","1)","1)]","1]","=",">",">=","abs(state[b","b","bool:","bucket","bucket,","buckets,","class","code","comparison","containsnearbyalmostduplicate(self,","def","del","duplic","enumerate(nums):","equal","facilit","found","good","hash","here.","https://leetcode.com/problems/contain","i,","iii/","illustr","inspir","int)","int,","k","k:","linear","list[int],","maintain","n","n)","neightbor","number","nums:","operations,","perfectly:","possibl","problem","rang","return","run","same","search","slide","solution.","solution:","sort.","state","state:","state[nums[i","t","t:","this.","time.","trick","true","two","unless","us","w","w:","w]","want","window","{}"],"Algorithms/Games.html":["%","(n","0","0)","4","==",">","above.","bool:","bring","calcul","canwinnim(self,","case","class","current","def","divis","doubl","dp","fals","find","friend","game","game/","game/submissions/","https://leetcode.com/problems/divisor","https://leetcode.com/problems/nim","https://leetcode.com/problems/ston","i.e.","idea","inner","int)","iter","loop","lose","n:","need","number","on","one.","opponent.","over","posit","positions.","return","same","search","situat","solution:","start","that.","tri","us","valu","win"],"Algorithms/Bitwise.html":["&","&=","''","'0'","'0',","'1'","'1',","'1':","'e',","'i',","'o',","'u'])","(1","(bits[i","(n","(num","(see","*","*=","+","+=","0","0,","0:","1","1)","1):","1:","1}","2","2,","22nd","28th/3343/","2:","3:","4","=","==",">","[0]","[]","[_a,","^=","_a","_b","_b,","_c):","_c]:","a,","a:","a[len(a)","add(_a,","addbinary(self,","alway","and","b","b,","b:","b[len(b)","binary/","bit","bit:","bits/","bits[0]","bits[i]","bitwis","challenge/537/week","check","class","contain","continu","countbits(self,","counts/","def","dict","else:","even","extra","extra)","extra,","findthelongestsubstring(self,","flip","function.","https://leetcode.com/explore/challenge/card/may","https://leetcode.com/problems/add","https://leetcode.com/problems/find","https://leetcode.com/problems/numb","https://leetcode.com/problems/pow","i:","i]","imperfect","int)","int:","j","keep","last_pow","last_power]","leetcod","len(a)","len(a):","len(b):","len(s):","list[int]:","longest","loop.","lsb","main","max_len","n","not:","num","num:","number","on","p","power","power_v","power_val:","question)","range(1,","result","return","rule","s:","same.","set","set(['a',","signific","small","smaller","solution:","store","str)","str,","str:","substr","swap.","th","toggl","trick","trick:","two","two/","us","vowel","vowel_set","write","{64:"],"Algorithms/DP/":["#","(1","(1)","(1,","(2,","(a[p+1]","(e","(i","(int","(math.max(i","(math.max(j,","(n+1)","(n+1)st","(num","(p[x]","(some","(subarray)","(tricks/ds)","(x","*","+","+=",",",".","...","...,","/","//","0)","0),","0,1,...,i","0/1","1","1)","1):","1,","1.","1/0","10.classic","11.dp","12.insert","13.graph","14.memoiz","15.binari","16.math","1]","1])","1][0],","1][1])","1][1],","1][2])","1d","2","2.","2.knapsack","2/","21","2;","2]","2d","3","3.multi","3n","4)","4.interv","5","5)","5.bit","6.digit","7)","7.dp","8.string","9.probabl","=","==","[0]","[average(0,","a.kadane'","a[0]","a[1],","a[i]","a[i])","a[i].","a[p+1]","a[p+2]","a]","a],","achiev","add","ag","algorithm","allowed:","alpha","ancestor","append","approach","arithmet","around","array","array.","array/","ascii","assign","attend","automat","aux_dp","aux_dp[0]","aux_dp[1]","aux_dp[2]","averag","average(i+1,","average(x,","average.","averages/","b","b.lc","b]","b],","backward","backwards.","ball","balloons/","base","be","becomes:","before.","best","bf","billboard/","binari","bit","bits/","bits[i","bits[i]","bitwis","block","bookcas","border","bottom","boundari","box","boxes/","break","break/","bst","bst/","build","buy","c","c.li","cameras/","cap","car/","cards/","care","chain","chain/","chang","change/","change:","charact","check","chessboard/","chose","chunk","climb","code.","coin","column","comment","common","compar","comparisons/","complic","compress","computation,","computations,","concaten","concept","conflicts/","connect","consecut","consid","consist","constraint","constraints,","convert","cooldown/","cost","costs[i][0]","costs[i][1]","costs[i][2]","cuboids/","current","cut","d.2d","day","decomposition/","def","delet","deletion/","deliveri","depend","desirable.","df","di","dialer/","dice","dict","dict.","dictionary/","diff","differ","difference,","difference/","difference:","difficulti","digit","digits/","dimension","dishes/","distanc","distance/","divid","divis","divisor","doll","dominoes/","don't","dot","down","dp","dp'","dp,","dp.get(n","dp;","dp[","dp[0]","dp[1]","dp[1])","dp[2])","dp[2],","dp[:]","dp[first_one]","dp[i","dp[i]","dp[i])","dp[i][0]","dp[i][1]","dp[i][2]","dp[i][diff]","dp[j","dp[j]","dp[j])","dp[j]))","dp[j],","dp[j].get(diff,","dp[n]","dp[n])","dp[small_amount]","drop/","dynam","e","e.cumul","each","earn/","easili","easy!","eat","egg","either:","element","elements,","encount","end","enough","enumerate(costs[1:],","enumerate(dp[1:],","envelopes/","equal","equation:","even","everyth","exactli","exam/","exampl","example:","exhaust","explan","explanation:","express","extrem","f(dp[1],","f(dp[i","f(dp[small_amount","f(g(j,","f.hashmap","f[i][j]","f[i][j]b","f[p][j","fair","fall","fall/","fee/","fewest","fibonacci","figur","find","fingers/","finish","first","first:","flight","flip","forget","form","forward;","g(i","game","game/","game/:","garden/","gener","give","given","go","good","great","grid","grid/","grid:","group","group'","group,","groups'","hand.","happi","happiness/","hard","hat","height","here","here,","higher","home/","hous","house/","https://leetcode.com/problems/2","https://leetcode.com/problems/airplan","https://leetcode.com/problems/alloc","https://leetcode.com/problems/arithmet","https://leetcode.com/problems/best","https://leetcode.com/problems/binari","https://leetcode.com/problems/bitwis","https://leetcode.com/problems/build","https://leetcode.com/problems/burst","https://leetcode.com/problems/can","https://leetcode.com/problems/champagn","https://leetcode.com/problems/cheapest","https://leetcode.com/problems/cherri","https://leetcode.com/problems/climb","https://leetcode.com/problems/coin","https://leetcode.com/problems/combin","https://leetcode.com/problems/concaten","https://leetcode.com/problems/constrain","https://leetcode.com/problems/continu","https://leetcode.com/problems/count","https://leetcode.com/problems/cr","https://leetcode.com/problems/decod","https://leetcode.com/problems/delet","https://leetcode.com/problems/deliv","https://leetcode.com/problems/dic","https://leetcode.com/problems/distinct","https://leetcode.com/problems/distribut","https://leetcode.com/problems/divisor","https://leetcode.com/problems/domino","https://leetcode.com/problems/dungeon","https://leetcode.com/problems/edit","https://leetcode.com/problems/fil","https://leetcode.com/problems/find","https://leetcode.com/problems/form","https://leetcode.com/problems/freedom","https://leetcode.com/problems/frog","https://leetcode.com/problems/get","https://leetcode.com/problems/greatest","https://leetcode.com/problems/guess","https://leetcode.com/problems/hous","https://leetcode.com/problems/i","https://leetcode.com/problems/integ","https://leetcode.com/problems/interleav","https://leetcode.com/problems/jump","https://leetcode.com/problems/k","https://leetcode.com/problems/knight","https://leetcode.com/problems/kth","https://leetcode.com/problems/largest","https://leetcode.com/problems/last","https://leetcode.com/problems/least","https://leetcode.com/problems/length","https://leetcode.com/problems/link","https://leetcode.com/problems/longest","https://leetcode.com/problems/mak","https://leetcode.com/problems/matrix","https://leetcode.com/problems/max","https://leetcode.com/problems/maxim","https://leetcode.com/problems/maximum","https://leetcode.com/problems/min","https://leetcode.com/problems/minimum","https://leetcode.com/problems/new","https://leetcode.com/problems/non","https://leetcode.com/problems/numb","https://leetcode.com/problems/odd","https://leetcode.com/problems/on","https://leetcode.com/problems/out","https://leetcode.com/problems/paint","https://leetcode.com/problems/palindrom","https://leetcode.com/problems/partit","https://leetcode.com/problems/perfect","https://leetcode.com/problems/pizza","https://leetcode.com/problems/predict","https://leetcode.com/problems/profit","https://leetcode.com/problems/push","https://leetcode.com/problems/rac","https://leetcode.com/problems/rang","https://leetcode.com/problems/reduc","https://leetcode.com/problems/regular","https://leetcode.com/problems/remov","https://leetcode.com/problems/restor","https://leetcode.com/problems/russian","https://leetcode.com/problems/scrambl","https://leetcode.com/problems/shop","https://leetcode.com/problems/shortest","https://leetcode.com/problems/smallest","https://leetcode.com/problems/soup","https://leetcode.com/problems/split","https://leetcode.com/problems/stick","https://leetcode.com/problems/ston","https://leetcode.com/problems/str","https://leetcode.com/problems/strang","https://leetcode.com/problems/stud","https://leetcode.com/problems/sup","https://leetcode.com/problems/tallest","https://leetcode.com/problems/target","https://leetcode.com/problems/til","https://leetcode.com/problems/triangle/","https://leetcode.com/problems/tripl","https://leetcode.com/problems/ugli","https://leetcode.com/problems/uniqu","https://leetcode.com/problems/valid","https://leetcode.com/problems/video","https://leetcode.com/problems/way","https://leetcode.com/problems/wher","https://leetcode.com/problems/wiggl","https://leetcode.com/problems/wildcard","https://leetcode.com/problems/word","i+1)","i,","idea.","ie","ie.","ii","ii/","iii/","immutable/","import","includ","include/exclud","increas","increasing/","influenc","initialization:","inner","insert","instead","instructions/","integ","integers/","invers","is,","isn't","it'","it,","item","item:","item])","iv/","j","j'","j)","j+1))","j,","j.","j]","j]))","j])))","job","jobs/","jump","jump/","k","k/","kadane'","keep","kept","key","keyboard/","knapsack","knapsack.","larger","largest","last","last/last","leaf","left","len(dp)","len(dp)):","len(nums))]","length","less","li","lift","line","list","longest","loop","lower","machines/","mailboxes/","make","matching/","math.max(dp[i],","matrix/","max","max(dp[i],","max(dp[i].get(diff,","max(max_seq,","max(nums[0:2])","max_seq","maximum","memoiz","merg","min(dp[","min(dp[0],","min(dp[1],","min(dp[i","minimum","mountain","multipl","music","n","need","neg","next","node","node/","nodes.","nodes/","non","note","note:","now","now,","num","num)","number","number/","numbers(a[0],","nums:","nums[0]","nums[1:]","nums[:","nums[i","nums[i]","nums[j]","obtain","obv)","obvious","offers/","on","ones,","ones/","open","oper","optimization:","options/","or","oranges/","other/","out.","over","overflow;","overlap","p","p)},","p.append(p[","p[y])","paint","pair","palindrom","palindrome/","parameter,","parentheses/","partit","partitioning/","parts:","path","paths/","paths/discuss/102993/python","permut","permutation/","pickup","pickup/","piece,","pizza/","place","place.","playlists/","plu","plug","point","points/","polygon/","ports/","posit","possibilti","possibl","possible_target","power","power.","previou","previous,","printer/","probability/","probabl","product","product,","profit","program","python","queri","question","question,","question.","questions.","range(0,","range(1,","range(i):","range(k","range(len(dp)","range(len(dp)):","range(len(dp),","reach","realli","record","rectangl","rectangle/","refuel","rememeb","remov","reorder","repeat","repetit","repetitions.","repetitions/","requests/","rest","return","revers","right","robber","robber/","roll","root","routes/","s","same","satisfi","say,","schedule/","scheduling/","schemes/","score","score/","search","seat","second","secondari","section","segments/","sell","sequenc","sequence/","servings/","set","set/","shelves/","shortest","showcas","sign/","similar","simulation/","singl","situat","situation,","slice","slices/","slow","small_amount","small_target","smaller","smallest","solut","solv","sort","space","spell","split","squar","square/","squares/","stack","stair","stair.","stairs/","start","start=1):","stay","step","steps/","stick/","stitching/","stock","stock/","stone","stones/","stops/","storag","store","straight","straightforward","strictli","string","string/","strings/","student","sub","subarray","subarray/","subarrays/","submatric","subsequ","subsequence/","subsequences/","subset","subset/","subsets/","substr","substring/","substrings/","subtract","suffici","sum","sum/","sum/discuss/299049/dp","sum/discuss/455024/dp","supersequence/","superstring/","suppos","sure","swap","take","tap","target","target/","team","team/","that,","that.","thing","things:","think","three/","through","tickets/","tiling/","time","tojgroups.","top","tower/","trail/","transact","transfer","travers","tree","tree/","trees/","triangul","trick","tricki","tromino","turbul","twist.","twist;","two","type","unbound","understand","up","updat","us","usual.","v/","valid","valu","values/","variabl","vii/","visit","visual","vowel","want","wash","water","way","ways/","we'd","wear","weight","well","well.","where,","whether","whole","win/","winner/","within","without","word","word/","words/","wraparound","write","wrt","y)","y):","z]","z])","zero/","zeroes/","zigzag","{f[p][j"],"Algorithms/DP/Knapsack.html":["(if","(one","(word","(x+1)","(x,","(xi)]","(y+1)","(yi)]","*","+","0","0:","1):","1,","1.","2.","=",">=","[0][0])","[[0","[x","[x][y]","[y","_","_x","_y","accept","again)","again.","against.","ahead","alway","amount","answer","array","array.","attribut","base","bottom","boundari","break","break)","break).","break/","case","case,","certain","change/","check","coin","coins:","comput","criteria","determin","disguis","don't","down","down:","dp","dp[_x][_y],","dp[x][y]","dp[x][y])","dure","eg.","element","element,","especti","example:","fals","filling:","first","fit","freq[string]['0']","freq[string]['1']","gener","given","go","here:","https://leetcode.com/problems/coin","https://leetcode.com/problems/on","https://leetcode.com/problems/word","i.e.","includ","include/exclud","insid","interesting.","it'","it,","items,","knapsack","list","loop","lot","main","make","max(1","max/min","memoiz","move","non","none","not;","note:","now,","number","on","optim","order;","otherwise,","over","overcounting.","param","perfect","place","prefer","previou","problems:","range(1,","range(x):","range(x+1):","range(x+1)]","range(x,","range(y+1)]","range(y,","recurs","repeat","repeat,","repetit","repres","result","revers","same","second","select","sense.","set","shoudn't","simplifi","smart:","sometimes,","string","strs:","sum(xi","sum(yi","sure","tabl","target","thing","things)","things,","think","time","top","traversal,","tri","true","under","up","up:","want","we'd","we'v","when?","within","word","x","xi","y","y).","yi","zeroes/"],"Algorithms/DP/NumSol.html":["+","+=","0","0:","1","1:","1]","1][","1][y]","=","==",">","[[0","_","add","class","comput","continu","def","do","dp","dp[","dp[0][0]","dp[prev2])","dp[x","dp[x][i","dp[x][y]","here","https://leetcode.com/problems/uniqu","ii/","instead","int:","key","len(obstaclegrid)","len(obstaclegrid[0])","list[list[int]])","min(dp[prev1],","number","obstaclegrid:","obstaclegrid[x][y]","ones.","path","previou","range(x):","range(x)]","range(y):","range(y)]","return","solut","solution:","uniquepathswithobstacles(self,","valu","x","y"],"Algorithms/DynamicProgramming-I.html":["#(climb","'pivot'","(bag_weight","(bottom","(leetcod","(len(values)","(n","(top","(total_sum","(x","(y",")","*","+","/","0","0)","0):","0/1","0:","1","1)","1),","1):","1)]","1,","1.","1035","1:","1]","1],","1][i","1][y]","1d","2","2)","2.","2]","4","70),","=","==",">",">=","[0]","[[0","[[0]","[[fals","\\","_","algorithms.","alway","anoth","answer","appli","array","backtrack","bag_weight","bag_weight):","basic","break,","brute","calcul","case","case)","caus","cell","cell.","cell_column)","cells,","change,","check","choices,","class","climb","coin","column","combin","complet","complex","complexity:","conditionally:","continu","correct","count","current","def","depend","dfs(0,","dfs(x","dfs(x,","dfs(x:","differ","difference,","discussion/651719/how","divid","down","dp","dp:","dp[0]","dp[1]","dp[2]","dp[i","dp[i]","dp[n","dp[n]","dynam","each","effici","eg.","elif(weight","equat","etc","exact","except","exclude)","fals","false,","figur","final","find","follow","forc","fulli","gener","go:","goe","greedi","half","here,","https://leetcode.com/discuss/gener","https://leetcode.com/problems/hous","https://leetcode.com/problems/uniqu","i:","if(failure_base_case):","if(i","if(success_base_case):","ii","improv","includ","independently.","instead","insur","int)","int,","int:","interview","intuit","j","knapsack","knapsack(self,","knapsack,","larg","leave,","leetcod","leetcode:","len(nums)","len(values)+","lis,","list[int])","loop","lot","m","m:","maintain","make","max","max(","max(include,","max(memo[i","max(nums[0],","memo","memo[0]","memo[1]","memo[i","memo[i]","memo[n","memo[x","memo[x][i","memo[x][y]","memoiz","memori","min.","minimum","multipl","n","n)","n):","n:","need","number","nums:","nums[0]","nums[1])","nums[i])","nums[i],","o(2^n)","obstruction.","on","onc","optim","out","over","overlap","particular","partitions:","path","paths/submissions/","perfect","possibl","possible.","previou","problem","process:","program","program:","programming)","programming:","properti","question","range(0,","range(2,","range(3,","recurs","recurse(0,","recurse(curr","recurse(current,","recurse(current:","reduc","remov","requir","rest","return","rob(self,","robber/","row","row[i","row[i]","runtim","satisfi","search","self.solution_function(case_one,","self.solution_function(case_two,","set","similar","size","small","solut","solution:","solution_function(self,","solutions.","solutions:","solv","someth","squar","squares,","stair","stairs:","start","step","step,","string","structur","subarray.","subproblem","subset","subsets:","substructur","sum","sum,","tabl","table[i][weight]","take","techniqu","templat","template:","this:","time","top","total","tree","trick","true","two","understand","uniqu","uniquepaths(self,","up","us","usually,","valu","values,","visit","visited[x][y]","visited[x][y]:","want","weight","weights,","word","x","x):","x)]","y","y)","y):","y)]","y:"],"Algorithms/DynamicProgramming-II.html":["\"solut","(m,","+","0","1","1)","1))","1):","1)]","1,","1]","1])","1]:","1][i","1][y],","2","4208fed71aa3","50","=","==",">","[[0","\\","break","chang","class","coin","common","decent","decod","def","diagram","dict()","dp","dp[x","dp[x][i","dp[x][y]","dynam","else:","essenti","explaination\"","explaination:","given","https://blog.usejournal.com/top","https://leetcode.com/problems/longest","https://www.techiedelight.com/longest","ii","int:","lc","lcs(len(text1),","lcs(m","lcs(m,","leetcod","len(s)","len(text1)","len(text2)","len(text2))","li","longest","longestcommonsubsequence(self,","longestpalindromesubseq(self,","lps(0,","lps(m","lps(m,","m","max(dp[x","max(lcs(m","max(lps(m","memo","memo:","memo[(m,","memoiz","n","n)","n),","n):","n)]","n:","overlap","pages.","palindrom","perfect","practic","practice:","problem","problemset:","program","programming/","question","range(0,","range(1,","recurs","recursion:","return","s:","s[m]","s[n]:","solut","solution:","solv","squar","step","str)","str,","subsequ","subsequence/","text1:","text1[i","text1[m","text2:","text2[n","text2[x","tree","us","visual","way","word","x","y"],"Algorithms/DynamicProgramming-III.html":["\"","\"complete\"","#","%","(0,","(1,","(2,","(4,","(6,","(7,","(check","(dp[pos]","(i","(includ","(n","(out","*","**","+","+=","0","1","1)","1)):","1):","1)]","1,","10","10):","10)]","1]","2,","2/","3),","3,","4)]","6)","6),","6,","7","7),","8),","9","9),","=","==",">","[(4,","[0]","[1","[[]","[]","[],","\\","actual","add","again","alreadi","amount","amount)","amount/sum:","answer","backtrack","backtrack(j,","bounds):","break","calculations.","call","case","chang","change/","charact","check","class","coin","coins,","coins:","coins[j])","coins[j]))","combin","combinations:","combinator","compute.","constant","constraints:","continu","current","declar","def","destination'","destinations;","dialer/","dict","differ","don't","down","dp","dp1","dp1[n]","dp;","dp[","dp[i","dp[i].append(match","dp[i].append(word)","duplic","dynam","elimin","failur","find","float('inf')","given","hop","hop,","hop.","hops[pos]:","https://leetcode.com/problems/coin","https://leetcode.com/problems/combin","https://leetcode.com/problems/knight","https://leetcode.com/problems/word","i:","idea:","ii/","iii","iii/","includ","indic","int)","int:","intuit","iv/","j","jump","knightdialer(self,","know","len(coins)):","len(coins).","len(dp)):","len(s)","len(word)","len(word)]:","list[str])","list[str]:","loop","match","memo","memoiz","min","min(min_steps,","min_step","mod","mod)","multipl","n","n:","necessarili","necessary,","need","notic","number","on","order","perspect","po","possibl","possible:","present","preserv","previou","problem","program","range(0,","range(1,","range(i,","reach","read:","recurs","recursion/","repres","result","return","revers","rule","run","s:","s[:i].endswith(word):","s_set","s_set:","save","section)","set","set(s)","set(word)","sets:","similar","so,","solution:","state","step","store","str,","string","success","sum","sum(dp)","sum/","sum/amount","sum/amount:","take","target.","that'","there'","think","thumb:","top","total","total_step","uniqu","updat","valu","want","way","well):","word","word)","wordbreak(self,","worddict","worddict:"],"Algorithms/DynamicProgramming-IV.html":["(knight","+","0","0:","1","1]","1][","1][y]","29th","30th/3375/","5","=","==",">","[[0","array","auxillari","challenge/543/week","class","continu","current","def","depend","dialer)","differ","dp","dp[","dp[0][0]","dp[x","dp[x][i","dp[x][y]","dynam","enough.","https://leetcode.com/explore/challenge/card/jun","int)","int,","int:","iv","june","leetcod","m","m:","n","n:","need","on","optim","otherwise,","overlap","past","places.","posit","problems:","program","properti","range(x):","range(x)]","range(y):","range(y)]","reach","results,","return","solution:","sometim","subproblem","substructur","two","uniquepaths(self,","us","x","y"],"Miscellaneous/":["miscellan"],"Miscellaneous/Palindrome.html":["\"\"","(even","(odd","0","0,","1","2","=",">",">=","adjust","be","bool:","center","center.","charact","check","class","def","direct","end","expand","find_len(l,","function","https://leetcode.com/problems/longest","https://leetcode.com/problems/valid","ii/","index,","key","l","left","len(s)","length)","long","longestpalindrome(self,","match.","max","mismatch,","now,","on","one,","palindrom","possible:","r","r):","result","s:","same,","slice","solution:","sort","start","start,","str)","str:","string","substring/","support","until","util","validpalindrome(self,","write"],"Miscellaneous/Stocks.html":["+","0","0,","1","1]","2","=","==","approach","better","between","buy","calcul","can't","cash","cash,","cash.","class","comment","continu","current","day","day,","def","differ","dp","dynam","element","elements/","end","end,","far,","far.","fee","fee)","fee):","fee/","first","found","hold","hold,","https://leetcode.com/problems/best","https://www.geeksforgeeks.org/maximum","https://www.geeksforgeeks.org/stock","i+1","iv/discuss/54117/clean","java","k","keep","len(prices)):","limit,","list.","list[i","list[i]","local","maintain","max(cash,","max(hold,","maxima","maximum","maxprofit(self,","minima","minimum","necessary.","number","on","own","prices,","prices[0]","prices[i]","prices[i])","profit","program","range(1,","return","same","sell","sell/","share","similar","solut","solution(object):","stock","stock,","stock.","temporari","th","till","time","track","transact","transform","transit","twice/","two","updat","us","variabl","want","without"],"Miscellaneous/Intervals.html":["\"","#","'","(abs(x),","(last","(secretli","(start","(x[0],","*","+","+=","0","0,","0:","1","1)**i)","1,","1:current","1]","1][1]","1][1]):","1][1],","252","253","435","56","=","==",">",">\"",">=","[((","[]","[i,","[max_start,","[prev","[s,","[str(lower)","[str(lower)]","```","```pi","a,","absolut","accept","actually.","addtoresult(start,","anoth","anyon","array","arrow","automat","b):","balloons/","base","burst","can't","care","case","chang","check","class","close","comes,","compact","compar","continu","convert","cours","cover","creat","current","current[0]","decrease.","def","durat","duration:","duration]","e","e:","e]","edg","elem,","elif","else:","empti","end","end)","end):","end:","end])","enough","enumerate(nums):","enumerate(s):","eraseoverlapintervals(self,","event","events,","fals","find","findminarrowshots(self,","findmissingranges(self,","first","flat","float('","float('inf')","given","heap","https://leetcode.com/problems/cours","https://leetcode.com/problems/insert","https://leetcode.com/problems/interv","https://leetcode.com/problems/meet","https://leetcode.com/problems/merg","https://leetcode.com/problems/minimum","https://leetcode.com/problems/miss","https://leetcode.com/problems/non","https://leetcode.com/problems/partit","https://leetcode.com/problems/remov","i,","i]","ii","ii/","iii/","imp:","inf')","inf'),","input","insert(self,","int)","int,","int:","interest","intersect","intersections/","interv","interval/","interval[i]","intervalintersection(self,","intervals.","intervals.values()","intervals/","intervals:","intervals[0]","intervals[1:]:","intervals[s]","intervals[s][end]","iter","j","j,","key","key=lambda","labels/","lambda","last_interval,","leaves,","leetcod","len(intervals)","like:","list","list);","list,","list[int])","list[int],","list[int]:","list[list[int]])","list[list[int]],","list[list[int]]:","list[str]:","longer","lower","lower:","make","max(max_rooms,","max(result[","max_heap","max_room","max_start","max_start,","meet","merg","merge(self,","min(min_end,","min_end","min_end:","minavailableduration(self,","minmeetingrooms(self,","miss","n","n_e","n_s,","need","neg","negative.","newinterv","newinterval:","nice.","non","number","nums:","nums[","nums[0]","nums[i","on","onc","over","overlap","overlap,","partitionlabels(self,","points:","possibl","preference.","prev","previou","priorit","problem","problem:","problem;","push","question","question.","questions,","range(2)]","range.","ranges/","remov","removecoveredintervals(self,","requir","result","result.append([start,","result.append(str(start))","result;","result[","result[last_interval][end]","return","room","rooms)","rooms,","s","s,","s:","schedul","scheduler/","select","set","sign.","similar","simpl","slots1","slots1:","slots1[i][1]:","slots2","slots2:","solut","solution:","someth","sort","sorted(intervals,","sorted(points,","sorted(slots1)","sorted(slots2)","start","start,","str(end))","str(upper)]","str)","stretch","templat","them)","tiebreak","time","time.","times,","trivial","upper","upper:","val","variat","veri","way","width","x))","x:","x[0])","x[1]))","{}"],"Miscellaneous/Parenthesis.html":["!=","\"\"","#","''","'',","''.join(s_list)","'('","'(',","'(':","')'","')',","')':","')']:","'*'","'*':","'*']:","(2","(string,",")","),","*","+","+=","0","0,","0:","1","1)","1,","1:","1]","1])","2","2)","=","==",">","[","['(',","[')',","[.(c1","[..(]","[..1]","[.2*(c1+c2+c3)]","[]","[c","\\","add","adding,","afterwards,","alway","are:","backtrack","backtrack(curr","backtrack(i","backtrack:","balanc","balanced.","base","basic","befor","boundari","bracket","braket","c","c2","c3]","call","care","cases:","charact","class","close","closed_bracket","combin","come","construct(0,","construct(index","construct(index,","continu","correspond","count","current","def","differ","don't","down","elif","else:","empti","encount","enumerate(s):","exclud","failur","fals","find","first","found","gener","given","here","https://leetcode.com/problems/gener","https://leetcode.com/problems/longest","https://leetcode.com/problems/minimum","https://leetcode.com/problems/remov","https://leetcode.com/problems/scor","https://leetcode.com/problems/valid","i,","i]","idea.","identifi","immediately.","includ","index","instant","int:","interchang","intuit","invalid","irrespect","it'","it,","it.","keep","len(s):","length","list","list[str]:","longestvalidparentheses(self,","made","make","match","matter","max(max_len,","max_len","memo[(i,","minaddtomakevalid(self,","minimum","minremovetomakevalid(self,","n","need","net","net,","never","normal","number","on","one,","one.","one;","ones)","ones.","open","open_bracket","open_brackets.append(i)","open_brackets:","optim","outermost","parenthes","parentheses/","parenthesi","pop","possibl","problems:","prune","push","question","remov","removal)","removals)","removals))","removals):","removeinvalidparentheses(self,","removeouterparentheses(self,","replac","requir","result","result.add(string)","return","s","s:","s[i]","s[index]","s[index],","s[start","s]","s_list","s_list[i]","s_list[open_brackets.pop()]","scoreofparentheses(self,","set","set()","simpl","so,","solut","solution:","stack","stack)","stack)]","stack,","stack.append('(')","stack.append(1)","stack.append(c)","stack.append(curr","stack.append(i)","stack.pop()","stack:","stack[","start","state","state:","str)","str:","string","string,","string.","string/","substitut","success","sum","sum(stack)","that'","that.","top","tree","tri","two","unbalanc","until","val","valid","valid/","veri","visit","visited.add((string,","visited:","we'd","with;","without","zero."],"Miscellaneous/AlienDictionary.html":["0","1]):","=",">","alien","bool:","c","case","class","def","dictionari","dictionary/","elif","end,","enumerate(order)}","enumerate(words[:len(words)","fals","https://leetcode.com/problems/verifi","i,","isaliensorted(self,","j","len(words[i+1]):","list[str],","look","order","order:","out","return","seq","seq[word[j]]","seq[words[i+1][j]]:","solution:","str)","true","word","words:","{c:"],"Miscellaneous/InterestingMiscellaneous.html":["!=","\"\"\"","\"non","#","%","')","(","(care","(dist_t","(i","(make","(max_freq","(max_freq_count","(max_height","(n","(target)","(x","*","+","+=",",","//","//=","0","0)","0):","0,","0:","1","1)","1))","1):","1,","10**9","1383:","1390:","14th/3357/","180/problems/maximum","1:","1]","1])","1]:","2","2)","2,","2021/582/week","22nd","28th/3612/","2:","3","31:","4","621:","7","857:","8th","=","==",">",">=","[0,","[[0]","[]","abs(len(s)","abs(squirrel[0]","abs(squirrel[1]","abs(tree[0]","abs(tree[1]","absolut","absolve.","achiev","action.","actual","algo","algorithm","all,","also,","alway","anything,","area","array","array/","b/w","backward","base","begin","best","better","blue","blue.","bool:","boundari","brokencalc(self,","c","c,","cache/","cache:","cake","calcul","calculator/","calculator/discuss/236565/detail","can.","canjump(self,","case","cases,","cases:","challeng","challenge/540/week","chanc","chang","change.","character.","check","checkpossibility(self,","class","closest","color","combo","come","compact","compact,","compact.","complet","condit","consid","contest","correct","cost","count","cours","creat","critic","cut","cuts/","cycl","cycle,","data","decreas","decreasing\")","def","descript","dict","dict()","diff","differ","dist_","dist_diff","dist_s)","dist_s[m_idx]","dist_t","dist_t[m_idx]","distanc","divis","divisor","divisors.add(i)","divisors.add(num","divisors/","divisors:","domino","dominoes:","dominoes[::","duplic","each","easier.","edg","efficiency.","elem","element","element,","elif","else:","encount","end","end+1):","end:","enumerate(h_sorted[1:],","enumerate(nums):","enumerate(nums[1:],","enumerate(nuts):","enumerate(tasks):","enumerate(v_sorted[1:],","equal","equil","equival","exit\")","f","f),","f,","f==s,","fals","farthest","find","findduplicates(self,","first","first.","float('","float,","float:","floor(sqrt(num))","follows:","freq","freq.get(t,","freq.items():","freq:","freq[t]","freq[task]","freq[task]:","frequenc","frequency.","game","game/","gener","go","good","great","greater","greedi","h","h:","h_sort","h_sorted[","h_sorted[0],","h_sorted[i","half","handl","happen.","heap","heap)","heap:","heapq","heapq.heappop(heap)","heapq.heappush(heap,","height","height:","here","hire","horizont","horizontalcuts:","https://leetcode.com/contest/weekli","https://leetcode.com/explore/challenge/card/januari","https://leetcode.com/explore/challenge/card/jun","https://leetcode.com/problems/broken","https://leetcode.com/problems/find","https://leetcode.com/problems/four","https://leetcode.com/problems/jump","https://leetcode.com/problems/kth","https://leetcode.com/problems/lru","https://leetcode.com/problems/maximum","https://leetcode.com/problems/minimum","https://leetcode.com/problems/mov","https://leetcode.com/problems/next","https://leetcode.com/problems/non","https://leetcode.com/problems/numb","https://leetcode.com/problems/powx","https://leetcode.com/problems/squirrel","https://leetcode.com/problems/task","i)","i,","idea","idl","ii,","ii/","imp:","import","increas","inf'),","instead","instead.","int)","int,","int:","interest","isoneeditdistance(self,","it'","it.","iter","j","januari","jump","jump(self,","june","k","k,","l","largest","last","leastinterval(self,","leetcod","left,","len(nums)","len(nuts)]","len(t))","len(tasks)","length","life","list","list[int])","list[int],","list[int]:","list[list[int]])","list[str],","look","loop","lot","lru","m","m,","m_idx","maintain","make","max","max(max_end,","max(max_height,","max(max_width,","max(t[x]","max_end","max_freq","max_freq,","max_freq_count","max_height","max_width","max_width)","maxarea(self,","min","mindistance(self,","minim","miscellan","miss","mod","modifi","movezeroes(self,","mypow(self,","n","n/","n:","n[0]","n[1]","need","neg","never","next","nextpermutation(self,","node","non","none:","noth","now","nth","num","number","numequivdominopairs(self,","nums.reverse()","nums:","nums[abs(n)","nums[i","nums[i+1]:","nums[i]","nums[i])","nums[i],","nums[i]:","nums[j]","nums[j],","nuts:","on","one.","ones.","open","order:","pair","pairs/","part","partial","perform","permutation/","picture!","piec","place","pointer","pop","possible.","possiblities.","power","power'","print(\">>","prioriti","proof","proof:","properli","properly.","push","py","question","question.","queue","queue,","queue.append((c","queue.pop())","queue:","quicksort","r","range(0,","range(1,","range(start,","read","realli","recurs","red","remain","result","result.append('","result.append(t)","return","revers","right","run","s","s),","s)]","s,","s:","s[x])","same","schedul","scheduler/","set()","sign","similar","simpl","simple.","simulation/solution/","singl","size","slots_avail","smallest","snippet","solution:","something,","sort","sort:","sorted(horizontalcuts)","sorted(verticalcuts)","spread","squirrel","squirrel:","start","start=1):","step","step.","stop","store","store.get((f,","store.get((s,","store[(f,","store_object_idx","str)","str,","structures.","such","sure","swap","t","t))","t,","t:","take","task","tasks:","tasks_remain","team/","team/discuss/539797/c%2b%2bpython","that'll","them?","then,","there'","those","total","travers","tree","tree:","tri","trick","true","true:","two","up","us","v_sort","v_sorted[","v_sorted[0],","v_sorted[i","variat","versa.","vertic","verticalcuts:","vice","visit","visual","w","w:","way","whole","width","width:","workers/","x","x)","x:","xth","y","y)","y:","you'd","zeroes/submissions/","{}"],"Tricks/":["#","####","#return","(check","(j","(left_idx","(p[j]","(priority,","(right","(x[0],","+","1)","1]","1`,","=","[0]","[]","_imp:_","_left,","_right","_right):","`//","```pi","`math`","a:","add","algorithm","array","breaker","breaker.","c","c.most_common(n)","calcul","collect","compar","comparison","complic","convert","correct","counter","counter(list/string)","cover","creat","def","dictionari","do","effici","elem","elem)","element","elems)","enumerate(s):","example:","first","fo","frequent","function","function.","get","go","heap","heapq","heapq.heappush(heap,","https://leetcode.com/problems/remov","i)","i,","import","index","insert","intervals/","item","item))","item:","item[1:]","item[1])}","k,","keep","key","key=lambda","lambda","lambda.","last","left","left_idx","left_idx,","left_idxto","list","list.insert(index,","list2)","list}","look","loop","looping:","make","math","math.ceil","math.floor","merg","merge(list1,","min/max/sort","multipl","n","nums[left_idx]","nums[left_idx],","nums[pivot_idx]","nums[pivot_idx],","nums[runner]","on","p","p.append(p[","p[i]),","partit","partition(_left,","pivot","pivot_idx","places.","point","prefix","prioriti","r","range(_left,","references,","required.","return","runner","s","s[i]","same","second","section","section)","select","slice+1;","smaller","sort","sorted(list,","sorted(x.items(),","start","string","stuff","sum","sum_and_number_of_elements(x,","swap","throught","tie","top","track","trick","tricki","us","v","valu","x","x)","x:","x[1]))","y","y):","{item[0]:","{k:"],"BehavioralQuestions.html":["answer","answer.","base","behavior","better","challeng","colleg","customer?","deliv","direct","do?","drawn","experience,","experience.","faced?","follow","graduat","interact","made","mention","on","previou","problem","project,","question","recent","specifics,","sure","tell","time","two","up","vagu","work"]},"length":58},"tokenStore":{"root":{"0":{"docs":{"DataStructures/StacksAndQueues/":{"ref":"DataStructures/StacksAndQueues/","tf":0.01020408163265306},"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.02830188679245283},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.004842615012106538},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.01},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.008771929824561403},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0048},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.014814814814814815},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.01650943396226415},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.006765899864682003},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00819672131147541},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.006224066390041493},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.008403361344537815},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.006060606060606061},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.009375},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.011363636363636364},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.007407407407407408},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.013513513513513514},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.012006861063464836},"Algorithms/Games.html":{"ref":"Algorithms/Games.html","tf":0.013333333333333334},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.027491408934707903},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062},"Algorithms/DP/NumSol.html":{"ref":"Algorithms/DP/NumSol.html","tf":0.013888888888888888},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.020061728395061727},"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.016666666666666666},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.008264462809917356},"Algorithms/DynamicProgramming-IV.html":{"ref":"Algorithms/DynamicProgramming-IV.html","tf":0.00980392156862745},"Miscellaneous/Palindrome.html":{"ref":"Miscellaneous/Palindrome.html","tf":0.011235955056179775},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.006644518272425249},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.015527950310559006},"Miscellaneous/AlienDictionary.html":{"ref":"Miscellaneous/AlienDictionary.html","tf":0.021739130434782608},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.017341040462427744}},")":{"docs":{"DataStructures/Arrays/SlidingWindow.html":{"ref":"DataStructures/Arrays/SlidingWindow.html","tf":0.009174311926605505},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.009433962264150943},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002840909090909091},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.003205128205128205},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703},"Algorithms/Games.html":{"ref":"Algorithms/Games.html","tf":0.013333333333333334},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0030864197530864196},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.002890173410404624}},")":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.005952380952380952},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0049382716049382715}}},"]":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625}},")":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358}}}},"?":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002840909090909091}}},",":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}},":":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}},",":{"1":{"docs":{},",":{"docs":{},".":{"docs":{},".":{"docs":{},".":{"docs":{},",":{"docs":{},"i":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}}},"docs":{"DataStructures/Arrays/SlidingWindow.html":{"ref":"DataStructures/Arrays/SlidingWindow.html","tf":0.027522935779816515},"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.009433962264150943},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.004842615012106538},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005},"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.018691588785046728},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0023584905660377358},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.003125},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002840909090909091},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.006872852233676976},"Miscellaneous/Palindrome.html":{"ref":"Miscellaneous/Palindrome.html","tf":0.011235955056179775},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.006644518272425249},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.003105590062111801},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}},":":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.004842615012106538},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0027063599458728013},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0213903743315508},"DataStructures/Trees/NumTrees.html":{"ref":"DataStructures/Trees/NumTrees.html","tf":0.008849557522123894},"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.008522727272727272},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062},"Algorithms/DP/NumSol.html":{"ref":"Algorithms/DP/NumSol.html","tf":0.027777777777777776},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.007716049382716049},"Algorithms/DynamicProgramming-IV.html":{"ref":"Algorithms/DynamicProgramming-IV.html","tf":0.029411764705882353},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0033222591362126247},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.004658385093167702},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}}},"}":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002421307506053269},"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.009345794392523364},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006}},",":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006}}}},"/":{"1":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}},"docs":{}}},"1":{"0":{"3":{"5":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}},"docs":{}},"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0032},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.007075471698113208},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.005509641873278237}},")":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358}},":":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.0027548209366391185}}},"]":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.0027548209366391185}}}},".":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358}},"c":{"docs":{},"l":{"docs":{},"a":{"docs":{},"s":{"docs":{},"s":{"docs":{},"i":{"docs":{},"c":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}}}},"*":{"docs":{},"*":{"9":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}},"docs":{}}}},"1":{"docs":{},".":{"docs":{},"d":{"docs":{},"p":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}},"2":{"docs":{},".":{"docs":{},"i":{"docs":{},"n":{"docs":{},"s":{"docs":{},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}}}},"3":{"8":{"3":{"docs":{},":":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}},"docs":{}},"9":{"0":{"docs":{},":":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}},"docs":{}},"docs":{},".":{"docs":{},"g":{"docs":{},"r":{"docs":{},"a":{"docs":{},"p":{"docs":{},"h":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}}},"4":{"docs":{},"t":{"docs":{},"h":{"docs":{},"/":{"3":{"3":{"2":{"8":{"docs":{},"/":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678}}}},"docs":{}},"5":{"7":{"docs":{},"/":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}}},".":{"docs":{},"m":{"docs":{},"e":{"docs":{},"m":{"docs":{},"o":{"docs":{},"i":{"docs":{},"z":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}}}},"5":{"4":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}}},"docs":{},"t":{"docs":{},"h":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717}}}},".":{"docs":{},"b":{"docs":{},"i":{"docs":{},"n":{"docs":{},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}}}},"6":{"docs":{},".":{"docs":{},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"h":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}},"8":{"0":{"docs":{},"/":{"docs":{},"p":{"docs":{},"r":{"docs":{},"o":{"docs":{},"b":{"docs":{},"l":{"docs":{},"e":{"docs":{},"m":{"docs":{},"s":{"docs":{},"/":{"docs":{},"l":{"docs":{},"u":{"docs":{},"c":{"docs":{},"k":{"docs":{},"i":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678}}}}}}},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"i":{"docs":{},"m":{"docs":{},"u":{"docs":{},"m":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}}}}}}}}}}}}}}},"docs":{},"/":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609}}}},"9":{"0":{"docs":{},"/":{"docs":{},"p":{"docs":{},"r":{"docs":{},"o":{"docs":{},"b":{"docs":{},"l":{"docs":{},"e":{"docs":{},"m":{"docs":{},"s":{"docs":{},"/":{"docs":{},"p":{"docs":{},"s":{"docs":{},"e":{"docs":{},"u":{"docs":{},"d":{"docs":{},"o":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.010752688172043012}}}}}}}}}}}}}}}}}}},"9":{"docs":{},"/":{"docs":{},"p":{"docs":{},"r":{"docs":{},"o":{"docs":{},"b":{"docs":{},"l":{"docs":{},"e":{"docs":{},"m":{"docs":{},"s":{"docs":{},"/":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"b":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006}}}}}}}}}}}}}}}}},"docs":{}},"docs":{"DataStructures/StacksAndQueues/":{"ref":"DataStructures/StacksAndQueues/","tf":0.01020408163265306},"DataStructures/Arrays/SlidingWindow.html":{"ref":"DataStructures/Arrays/SlidingWindow.html","tf":0.01834862385321101},"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.009433962264150943},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.009685230024213076},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.011834319526627219},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.015},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.011940298507462687},"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.018691588785046728},"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.05945945945945946},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.023391812865497075},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0032},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.01650943396226415},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.01092896174863388},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.016042780748663103},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.006224066390041493},"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.005952380952380952},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.012605042016806723},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.01818181818181818},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0078125},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.008522727272727272},"Algorithms/TrickySorting.html":{"ref":"Algorithms/TrickySorting.html","tf":0.04878048780487805},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.007407407407407408},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.009615384615384616},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.005405405405405406},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.024013722126929673},"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.020202020202020204},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.048109965635738834},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.005232177894048398},"Algorithms/DP/NumSol.html":{"ref":"Algorithms/DP/NumSol.html","tf":0.027777777777777776},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.013888888888888888},"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.016666666666666666},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.005509641873278237},"Algorithms/DynamicProgramming-IV.html":{"ref":"Algorithms/DynamicProgramming-IV.html","tf":0.00980392156862745},"Miscellaneous/Palindrome.html":{"ref":"Miscellaneous/Palindrome.html","tf":0.011235955056179775},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.01098901098901099},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.02159468438538206},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.010869565217391304},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.022157996146435453}},")":{"docs":{"DataStructures/Arrays/SlidingWindow.html":{"ref":"DataStructures/Arrays/SlidingWindow.html","tf":0.01834862385321101},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002421307506053269},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.01},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.02122641509433962},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00546448087431694},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.01037344398340249},"DataStructures/Trees/NumTrees.html":{"ref":"DataStructures/Trees/NumTrees.html","tf":0.008849557522123894},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.003125},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.00641025641025641},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.010810810810810811},"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.010101010101010102},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.013745704467353952},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.004629629629629629},"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.016666666666666666},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.0027548209366391185},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.007763975155279503},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828},"Tricks/":{"ref":"Tricks/","tf":0.004608294930875576}},":":{"docs":{"DataStructures/Arrays/SlidingWindow.html":{"ref":"DataStructures/Arrays/SlidingWindow.html","tf":0.009174311926605505},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.005970149253731343},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0023584905660377358},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00404040404040404},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.001962066710268149},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.023255813953488372},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.004629629629629629},"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.005555555555555556},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.0027548209366391185},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.002890173410404624}}},")":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002421307506053269},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.005952380952380952},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358},"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.011111111111111112},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},":":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.009433962264150943},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.0027548209366391185}}}},"/":{"2":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002421307506053269}}},"docs":{}},"]":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.005681818181818182},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358},"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.010101010101010102},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0030864197530864196},"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.005555555555555556},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.0027548209366391185}},":":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625}}}},",":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002840909090909091},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.005405405405405406},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}},";":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703}}},"*":{"docs":{},"*":{"docs":{},"i":{"docs":{},")":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}}}}},"/":{"0":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}},"3":{"2":{"8":{"6":{"docs":{},"/":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.009433962264150943}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"]":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002421307506053269},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.005970149253731343},"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.021621621621621623},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.005952380952380952},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.007874015748031496},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.00686106346483705},"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.010101010101010102},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.004578155657292348},"Algorithms/DP/NumSol.html":{"ref":"Algorithms/DP/NumSol.html","tf":0.027777777777777776},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.009259259259259259},"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.011111111111111112},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.0027548209366391185},"Algorithms/DynamicProgramming-IV.html":{"ref":"Algorithms/DynamicProgramming-IV.html","tf":0.029411764705882353},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0049833887043189366},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.004658385093167702},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828},"Tricks/":{"ref":"Tricks/","tf":0.004608294930875576}},")":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.002777777777777778},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0015527950310559005},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0038535645472061657}},":":{"docs":{"Miscellaneous/AlienDictionary.html":{"ref":"Miscellaneous/AlienDictionary.html","tf":0.021739130434782608}}}},":":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358},"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.008333333333333333},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}}},"[":{"0":{"docs":{},"]":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717}},",":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995}}}}},"1":{"docs":{},"]":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}},")":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}},":":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}},",":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}}},"2":{"docs":{},"]":{"docs":{},")":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995}}}}},"docs":{"Algorithms/DP/NumSol.html":{"ref":"Algorithms/DP/NumSol.html","tf":0.013888888888888888},"Algorithms/DynamicProgramming-IV.html":{"ref":"Algorithms/DynamicProgramming-IV.html","tf":0.00980392156862745}},"y":{"docs":{},"]":{"docs":{"Algorithms/DP/NumSol.html":{"ref":"Algorithms/DP/NumSol.html","tf":0.013888888888888888},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098},"Algorithms/DynamicProgramming-IV.html":{"ref":"Algorithms/DynamicProgramming-IV.html","tf":0.0196078431372549}},",":{"docs":{"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.002777777777777778}}}}},"i":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098},"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.002777777777777778}}}},",":{"docs":{"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.010810810810810811},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}},"}":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002421307506053269},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488}}},",":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.011834319526627219},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.01},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.008955223880597015},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.005412719891745603},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00546448087431694},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.01037344398340249},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0049382716049382715},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.003205128205128205},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.010810810810810811},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.00686106346483705},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.001962066710268149},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.015503875968992248},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098},"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.022222222222222223},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.005509641873278237},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.013975155279503106},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}},"y":{"docs":{},")":{"docs":{},",":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.008522727272727272}},"(":{"docs":{},"x":{"docs":{},",":{"docs":{},"y":{"docs":{},"+":{"1":{"docs":{},")":{"docs":{},",":{"docs":{},"(":{"docs":{},"x":{"docs":{},",":{"docs":{},"i":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625}}}}}}}}},"docs":{}}}}}}}}}},":":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0047169811320754715},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Trees/NumTrees.html":{"ref":"DataStructures/Trees/NumTrees.html","tf":0.008849557522123894},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488},"Algorithms/DP/NumSol.html":{"ref":"Algorithms/DP/NumSol.html","tf":0.013888888888888888},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.007716049382716049},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.004658385093167702},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0038535645472061657}},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{},"r":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}}}}}}}},".":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}},";":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703}}},"d":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0030864197530864196}}},"`":{"docs":{},",":{"docs":{"Tricks/":{"ref":"Tricks/","tf":0.004608294930875576}}}}},"2":{"0":{"2":{"1":{"docs":{},"/":{"5":{"8":{"2":{"docs":{},"/":{"docs":{},"w":{"docs":{},"e":{"docs":{},"e":{"docs":{},"k":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}}},"docs":{}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}},"1":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}},"s":{"docs":{},"t":{"docs":{},"/":{"3":{"3":{"3":{"0":{"docs":{},"/":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}}}},"2":{"docs":{},"n":{"docs":{},"d":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}},"3":{"docs":{},":":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.003205128205128205}}}},"5":{"2":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}},"3":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}},"docs":{}},"6":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343}},")":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343}}}},"8":{"docs":{},"t":{"docs":{},"h":{"docs":{},"/":{"3":{"3":{"4":{"3":{"docs":{},"/":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488}}}},"docs":{}},"docs":{}},"6":{"1":{"2":{"docs":{},"/":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}}}},"9":{"docs":{},"t":{"docs":{},"h":{"docs":{"Algorithms/DynamicProgramming-IV.html":{"ref":"Algorithms/DynamicProgramming-IV.html","tf":0.00980392156862745}}}}},"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.009433962264150943},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002421307506053269},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.011834319526627219},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.01},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0027063599458728013},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004149377593360996},"DataStructures/Trees/NumTrees.html":{"ref":"DataStructures/Trees/NumTrees.html","tf":0.008849557522123894},"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.005681818181818182},"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.003205128205128205},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.005405405405405406},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.001962066710268149},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0030864197530864196},"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.005555555555555556},"Miscellaneous/Palindrome.html":{"ref":"Miscellaneous/Palindrome.html","tf":0.011235955056179775},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.003105590062111801},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.004816955684007707}},")":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.011834319526627219},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0015527950310559005},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}},":":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.01}}}},",":{"docs":{"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.0027548209366391185},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}},":":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002840909090909091},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.003205128205128205},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},"f":{"docs":{},"l":{"docs":{},"o":{"docs":{},"a":{"docs":{},"t":{"docs":{},"(":{"docs":{},"'":{"docs":{"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406}},"i":{"docs":{},"n":{"docs":{},"f":{"docs":{},"'":{"docs":{},")":{"docs":{},",":{"docs":{"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406}}}}}}}}}}}}}}}},"]":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.003205128205128205},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.004629629629629629}},")":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476}}}},".":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.001962066710268149},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0030864197530864196}},"k":{"docs":{},"n":{"docs":{},"a":{"docs":{},"p":{"docs":{},"s":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}}}}},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.0027548209366391185}}},";":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}},"d":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995}}}},"3":{"0":{"0":{"0":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703}}},"docs":{}},"docs":{},"t":{"docs":{},"h":{"docs":{},"/":{"3":{"3":{"7":{"5":{"docs":{},"/":{"docs":{"Algorithms/DynamicProgramming-IV.html":{"ref":"Algorithms/DynamicProgramming-IV.html","tf":0.00980392156862745}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}}}},"1":{"docs":{},":":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}},"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.003205128205128205},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0038535645472061657}},"/":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002421307506053269}}},".":{"docs":{"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.009345794392523364},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358}},"m":{"docs":{},"u":{"docs":{},"l":{"docs":{},"t":{"docs":{},"i":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}},":":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488}},"f":{"docs":{},"l":{"docs":{},"o":{"docs":{},"a":{"docs":{},"t":{"docs":{},"(":{"docs":{},"'":{"docs":{"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406}},"i":{"docs":{},"n":{"docs":{},"f":{"docs":{},"'":{"docs":{},")":{"docs":{},"}":{"docs":{"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406}}}}}}}}}}}}}}}},"]":{"docs":{},":":{"docs":{"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406}}}},",":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.0027548209366391185}}},"n":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}},")":{"docs":{},",":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.0027548209366391185}}}}},"4":{"0":{"0":{"0":{"docs":{"./":{"ref":"./","tf":0.02631578947368421}}},"docs":{}},"docs":{}},"2":{"0":{"8":{"docs":{},"f":{"docs":{},"e":{"docs":{},"d":{"7":{"1":{"docs":{},"a":{"docs":{},"a":{"3":{"docs":{"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.002777777777777778}}},"docs":{}}}},"docs":{}},"docs":{}}}}},"docs":{}},"docs":{}},"3":{"5":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}},"9":{"docs":{},"d":{"docs":{},"f":{"7":{"docs":{},"e":{"5":{"docs":{},"e":{"docs":{},"a":{"1":{"docs":{},"f":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809}}}},"docs":{}}}},"docs":{}}},"docs":{}}}},"docs":{}},"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.00641025641025641},"Algorithms/Games.html":{"ref":"Algorithms/Games.html","tf":0.02666666666666667},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0030864197530864196},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},"]":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.003205128205128205}},")":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.003205128205128205}}}},")":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}},":":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.003205128205128205}}},"]":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.0027548209366391185}}}},":":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.003205128205128205}}},".":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"v":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}}}},"5":{"0":{"docs":{"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.002777777777777778}}},"6":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}},"9":{"docs":{},":":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.003205128205128205}}}},"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Algorithms/DynamicProgramming-IV.html":{"ref":"Algorithms/DynamicProgramming-IV.html","tf":0.00980392156862745}},":":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.003205128205128205}}},")":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}},".":{"docs":{},"b":{"docs":{},"i":{"docs":{},"t":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}},"6":{"2":{"1":{"docs":{},":":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}},"docs":{}},"docs":{},".":{"docs":{},"d":{"docs":{},"i":{"docs":{},"g":{"docs":{},"i":{"docs":{},"t":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}},")":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.0027548209366391185}},",":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.005509641873278237}}}},",":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.0027548209366391185}}}},"7":{"0":{"docs":{},")":{"docs":{},",":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}}},"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.0027548209366391185},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},")":{"docs":{"DataStructures/Trees/NumTrees.html":{"ref":"DataStructures/Trees/NumTrees.html","tf":0.008849557522123894},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}},",":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.0027548209366391185}}}},".":{"docs":{},"d":{"docs":{},"p":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}},"8":{"5":{"7":{"docs":{},":":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}},"docs":{}},"docs":{},"t":{"docs":{},"h":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}},".":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}}},")":{"docs":{},",":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.005509641873278237}}}}},"9":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.0027548209366391185}},".":{"docs":{},"p":{"docs":{},"r":{"docs":{},"o":{"docs":{},"b":{"docs":{},"a":{"docs":{},"b":{"docs":{},"l":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}}}},")":{"docs":{},",":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.005509641873278237}}}}},"docs":{},"#":{"3":{"docs":{"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576}}},"docs":{"./":{"ref":"./","tf":0.05263157894736842},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0512},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.014150943396226415},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.04059539918809202},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.01639344262295082},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.03208556149732621},"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.03317535545023697},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.029045643153526972},"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.015151515151515152},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.003125},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002840909090909091},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.01891891891891892},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0137221269296741},"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.010101010101010102},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.001962066710268149},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.008264462809917356},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0049833887043189366},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.012422360248447204},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.007707129094412331},"Tricks/":{"ref":"Tricks/","tf":0.013824884792626729}},"#":{"docs":{},"#":{"docs":{"./":{"ref":"./","tf":0.02631578947368421}},"#":{"docs":{"Tricks/":{"ref":"Tricks/","tf":0.004608294930875576}}}}},"(":{"docs":{},"c":{"docs":{},"l":{"docs":{},"i":{"docs":{},"m":{"docs":{},"b":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}}}}}},"r":{"docs":{},"e":{"docs":{},"t":{"docs":{},"u":{"docs":{},"r":{"docs":{},"n":{"docs":{"Tricks/":{"ref":"Tricks/","tf":0.004608294930875576}}}}}}}}},"$":{"docs":{"./":{"ref":"./","tf":0.07894736842105263}}},"b":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358},"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.030303030303030304},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995}},"r":{"docs":{},"o":{"docs":{},"w":{"docs":{},"s":{"docs":{},"e":{"docs":{},"r":{"docs":{"./":{"ref":"./","tf":0.02631578947368421}}}}}},"k":{"docs":{},"e":{"docs":{},"n":{"docs":{},"c":{"docs":{},"a":{"docs":{},"l":{"docs":{},"c":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}}}}}}}}}}},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"e":{"docs":{},"t":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.010752688172043012},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.013975155279503106}}}}}},"k":{"docs":{},"e":{"docs":{},"t":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0015527950310559005}}}}}},"u":{"docs":{},"t":{"docs":{},"e":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.010752688172043012},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}}},"e":{"docs":{},"a":{"docs":{},"k":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.009433962264150943},"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.009345794392523364},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.008771929824561403},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.001962066710268149},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062},"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.002777777777777778},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.0027548209366391185}},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.007751937984496124}}},")":{"docs":{"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062}},".":{"docs":{"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062}}}},",":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}},"e":{"docs":{},"r":{"docs":{"Tricks/":{"ref":"Tricks/","tf":0.004608294930875576}},".":{"docs":{"Tricks/":{"ref":"Tricks/","tf":0.004608294930875576}}}}}}}},"i":{"docs":{},"l":{"docs":{},"l":{"docs":{},"i":{"docs":{},"a":{"docs":{},"n":{"docs":{},"t":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847}}}}}}}},"c":{"docs":{},"k":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.003125}},"s":{"docs":{},":":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625}}},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0046875}}}}}}}}}},"d":{"docs":{},"g":{"docs":{},"e":{"docs":{},"/":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002840909090909091}}}}}},"n":{"docs":{},"g":{"docs":{"Algorithms/Games.html":{"ref":"Algorithms/Games.html","tf":0.02666666666666667}}}}}},"a":{"docs":{},"s":{"docs":{},"i":{"docs":{},"c":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002421307506053269},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0015527950310559005}},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{},"y":{"docs":{},",":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.010752688172043012},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476}}}}}}}}},"e":{"docs":{"DataStructures/StacksAndQueues/":{"ref":"DataStructures/StacksAndQueues/","tf":0.01020408163265306},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.003703703703703704},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0023584905660377358},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006},"DataStructures/Trees/NumTrees.html":{"ref":"DataStructures/Trees/NumTrees.html","tf":0.008849557522123894},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.003125},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.003205128205128205},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.006644518272425249},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0015527950310559005},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.02631578947368421}}}},"c":{"docs":{},"k":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0027063599458728013}},"w":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}},"s":{"docs":{},",":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343}}},".":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}},"t":{"docs":{},"r":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":3.336036036036036},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.0027548209366391185},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.006211180124223602}},"(":{"0":{"docs":{},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703}}}},"docs":{},"[":{"docs":{},"]":{"docs":{},")":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.003205128205128205}}},",":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.003205128205128205}}}}},"b":{"docs":{},"u":{"docs":{},"c":{"docs":{},"k":{"docs":{},"e":{"docs":{},"t":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.00641025641025641}},")":{"docs":{},":":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.003205128205128205}}}},",":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.003205128205128205}}}}}}}}},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{},"r":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.005405405405405406},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.003105590062111801}}}}}},"i":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.004658385093167702}},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.005405405405405406}}}},"j":{"docs":{},",":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.005509641873278237}}}}},":":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0015527950310559005}}}}}}}}}},"l":{"docs":{},"a":{"docs":{},"n":{"docs":{},"c":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0015527950310559005}},"e":{"docs":{},"b":{"docs":{},"s":{"docs":{},"t":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}}}}}}}}}}},"d":{"docs":{},".":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0015527950310559005}}}}}}}},"l":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}},"o":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}}}}}}},"g":{"docs":{},"_":{"docs":{},"w":{"docs":{},"e":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}},")":{"docs":{},":":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.010752688172043012},"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002421307506053269},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0023584905660377358},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.009472259810554804},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00819672131147541},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0106951871657754},"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.02843601895734597},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.016597510373443983},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002840909090909091},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":5.0102915951972555},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.003924133420536298}}},"y":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"p":{"docs":{},"a":{"docs":{},"t":{"docs":{},"h":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.003703703703703704}}}}}}}}}}}}}}}}},"_":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},"_":{"docs":{},"s":{"docs":{},"e":{"docs":{},"a":{"docs":{},"r":{"docs":{},"c":{"docs":{},"h":{"docs":{},"(":{"docs":{},"b":{"docs":{},"_":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},")":{"docs":{},":":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}}}}}}}}}}}},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},")":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}}},"+":{"1":{"docs":{},")":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}},"/":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488}}}}}}},"g":{"docs":{},"g":{"docs":{},"e":{"docs":{},"r":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717}}}}}},"f":{"docs":{},"u":{"docs":{},"r":{"docs":{},"c":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476}}}}}},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{},"/":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.005952380952380952}}}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"/":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476}}}}}}}}}}}},"d":{"docs":{},"i":{"docs":{},"r":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"a":{"docs":{},"l":{"docs":{},".":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}}}}}}}}}}}},"t":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.020618556701030927},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995}},"w":{"docs":{},"i":{"docs":{},"s":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":10.003436426116838},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}},"s":{"docs":{},".":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703}}},"/":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}},"[":{"0":{"docs":{},"]":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488}}}},"docs":{},"i":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}},"]":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.006872852233676976},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}},":":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488}}}},"l":{"docs":{},"l":{"docs":{},"b":{"docs":{},"o":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}}}}},"u":{"docs":{},"i":{"docs":{},"l":{"docs":{},"t":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.010752688172043012}}},"d":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004149377593360996}}}}}}}}}}}},"_":{"docs":{},"b":{"docs":{},"r":{"docs":{},"i":{"docs":{},"d":{"docs":{},"g":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},":":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002840909090909091}}}}}}}}}}}}}}},"c":{"docs":{},"k":{"docs":{},"e":{"docs":{},"t":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.00641025641025641},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.005405405405405406},"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":5.040404040404041}},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},"[":{"docs":{},"k":{"docs":{},"]":{"docs":{},")":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.003205128205128205}}}}}}}}}}}}}}}},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.003205128205128205}}}}}}}},"[":{"0":{"docs":{},":":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.003205128205128205}}}},"2":{"docs":{},":":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.003205128205128205}}}},"docs":{}},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.005405405405405406},"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.010101010101010102}}},"s":{"docs":{},",":{"docs":{"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.010101010101010102}}}}}}}},"y":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0032701111837802484},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.038461538461538464}}},"r":{"docs":{},"s":{"docs":{},"t":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}}}},"e":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Miscellaneous/Palindrome.html":{"ref":"Miscellaneous/Palindrome.html","tf":0.02247191011235955}},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{"DataStructures/StacksAndQueues/":{"ref":"DataStructures/StacksAndQueues/","tf":0.01020408163265306}},"e":{"docs":{},"s":{"docs":{},":":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002421307506053269},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0048},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011976047904191617},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.005681818181818182},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0015527950310559005}},"e":{"docs":{},"h":{"docs":{},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{"DataStructures/Trees/NumTrees.html":{"ref":"DataStructures/Trees/NumTrees.html","tf":0.008849557522123894}}}}}},".":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}},"t":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.02631578947368421}}}}},"w":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.01098901098901099}}}}}}},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},"n":{"docs":{"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}}}}}},"l":{"docs":{},"o":{"docs":{},"w":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}}}}},"s":{"docs":{},"t":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}}}},"h":{"docs":{},"a":{"docs":{},"v":{"docs":{},"i":{"docs":{},"o":{"docs":{},"r":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":5.026315789473684}}}}}}}}},"o":{"docs":{},"o":{"docs":{},"l":{"docs":{},":":{"docs":{"DataStructures/StacksAndQueues/":{"ref":"DataStructures/StacksAndQueues/","tf":0.01020408163265306},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0032},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.003703703703703704},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.005952380952380952},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.007407407407407408},"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.010101010101010102},"Algorithms/Games.html":{"ref":"Algorithms/Games.html","tf":0.013333333333333334},"Miscellaneous/Palindrome.html":{"ref":"Miscellaneous/Palindrome.html","tf":0.011235955056179775},"Miscellaneous/AlienDictionary.html":{"ref":"Miscellaneous/AlienDictionary.html","tf":0.021739130434782608},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.002890173410404624}}},"e":{"docs":{},"a":{"docs":{},"n":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703}}}}}},"k":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.003205128205128205}},"c":{"docs":{},"a":{"docs":{},"s":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}},"t":{"docs":{},"h":{"docs":{"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016}}},"t":{"docs":{},"o":{"docs":{},"m":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.011627906976744186}},",":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006}}}}}}},"i":{"docs":{},"l":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}},"u":{"docs":{},"n":{"docs":{},"d":{"docs":{},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002840909090909091},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0015527950310559005},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}}}}},"s":{"docs":{},")":{"docs":{},":":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.005509641873278237}}}}}}},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"t":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.003430531732418525}}}}}}},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{},":":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358}}}}},"t":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}}}},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}},"x":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}},"e":{"docs":{},"s":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}},"s":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}},"t":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.007407407407407408},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}},":":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006}}},"f":{"docs":{},"r":{"docs":{},"o":{"docs":{},"m":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}}}}}}}}}}}}}}}}}}}},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}},"f":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":5.004201680672269},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002840909090909091},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":5.009876543209876},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.001962066710268149}},"s":{"docs":{},"(":{"docs":{},"i":{"docs":{},")":{"docs":{},":":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476}}}}},"s":{"docs":{},")":{"docs":{},":":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476}}}}}},")":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476}}},":":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002840909090909091}}}}},"l":{"docs":{},"u":{"docs":{},"e":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}},",":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476}}},"]":{"docs":{},")":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.005952380952380952}}}},"_":{"docs":{},"e":{"docs":{},"d":{"docs":{},"g":{"docs":{},"e":{"docs":{},"s":{"docs":{},":":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.005952380952380952}}}}}}}}},".":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}},"o":{"docs":{},"o":{"docs":{},"m":{"docs":{},"d":{"docs":{},"a":{"docs":{},"y":{"docs":{},":":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.003430531732418525}}},"[":{"0":{"docs":{},"]":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.003430531732418525}}}},"docs":{}}}}}}},"c":{"docs":{},"k":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}},"/":{"docs":{},"w":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}},"_":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},":":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}}}}}}}}}},",":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488}}},":":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488}}},"[":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"(":{"docs":{},"b":{"docs":{},")":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488}}}}}}}}},".":{"docs":{},"l":{"docs":{},"c":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}},"]":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}},",":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}},")":{"docs":{},":":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}}},"c":{"2":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0015527950310559005}}},"3":{"docs":{},"]":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0015527950310559005}}}},"docs":{"DataStructures/Arrays/SlidingWindow.html":{"ref":"DataStructures/Arrays/SlidingWindow.html","tf":0.009174311926605505},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.02046783625730994},"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00404040404040404},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.023622047244094488},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.020186335403726708},"Miscellaneous/AlienDictionary.html":{"ref":"Miscellaneous/AlienDictionary.html","tf":0.021739130434782608},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828},"Tricks/":{"ref":"Tricks/","tf":0.013824884792626729}},"l":{"docs":{},"o":{"docs":{},"n":{"docs":{},"e":{"docs":{"./":{"ref":"./","tf":0.05263157894736842},"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.014218009478672985}},";":{"docs":{"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996}}},"d":{"docs":{},")":{"docs":{"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996}}},":":{"docs":{"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996}}}}}},"s":{"docs":{},"e":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.013975155279503106}},"s":{"docs":{},"t":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.003430531732418525},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},"k":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{},"e":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625}}}}}}}}}}}}}}}}},"d":{"docs":{},"_":{"docs":{},"b":{"docs":{},"r":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"e":{"docs":{},"t":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.004658385093167702}}}}}}}}}}}}}},"a":{"docs":{},"s":{"docs":{},"s":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.010752688172043012},"DataStructures/StacksAndQueues/":{"ref":"DataStructures/StacksAndQueues/","tf":0.02040816326530612},"DataStructures/Arrays/SlidingWindow.html":{"ref":"DataStructures/Arrays/SlidingWindow.html","tf":0.009174311926605505},"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.018867924528301886},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.007263922518159807},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.015},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.020895522388059702},"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.009345794392523364},"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.010810810810810811},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.014619883040935672},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0224},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.014814814814814815},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.01650943396226415},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.017591339648173207},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.01366120218579235},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0106951871657754},"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.018957345971563982},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.016597510373443983},"DataStructures/Trees/NumTrees.html":{"ref":"DataStructures/Trees/NumTrees.html","tf":0.008849557522123894},"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.011904761904761904},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.012605042016806723},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.010101010101010102},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.015748031496062992},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0140625},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.008522727272727272},"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678},"Algorithms/TrickySorting.html":{"ref":"Algorithms/TrickySorting.html","tf":0.024390243902439025},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.009876543209876543},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.01282051282051282},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.008108108108108109},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.015437392795883362},"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.010101010101010102},"Algorithms/Games.html":{"ref":"Algorithms/Games.html","tf":0.013333333333333334},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.010309278350515464},"Algorithms/DP/NumSol.html":{"ref":"Algorithms/DP/NumSol.html","tf":0.013888888888888888},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.009259259259259259},"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.013888888888888888},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.005509641873278237},"Algorithms/DynamicProgramming-IV.html":{"ref":"Algorithms/DynamicProgramming-IV.html","tf":0.00980392156862745},"Miscellaneous/Palindrome.html":{"ref":"Miscellaneous/Palindrome.html","tf":0.02247191011235955},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.016611295681063124},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.009316770186335404},"Miscellaneous/AlienDictionary.html":{"ref":"Miscellaneous/AlienDictionary.html","tf":0.021739130434782608},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.01348747591522158}},",":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.010752688172043012}}},"i":{"docs":{},"c":{"docs":{"DataStructures/Trees/NumTrees.html":{"ref":"DataStructures/Trees/NumTrees.html","tf":0.008849557522123894}}}}}}},"e":{"docs":{},"a":{"docs":{},"n":{"docs":{"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.009478672985781991}}}}},"i":{"docs":{},"m":{"docs":{},"b":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0030864197530864196}}}}}},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{"./":{"ref":"./","tf":0.05263157894736842},"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.043010752688172046},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476},"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.010101010101010102}},"c":{"docs":{},":":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}}}},".":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}},"m":{"docs":{},"p":{"docs":{},"e":{"docs":{},"t":{"docs":{},"i":{"docs":{},"t":{"docs":{"./":{"ref":"./","tf":0.05263157894736842},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717}}}}}},"a":{"docs":{},"r":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343},"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625},"Algorithms/TrickySorting.html":{"ref":"Algorithms/TrickySorting.html","tf":0.04878048780487805},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123},"Tricks/":{"ref":"Tricks/","tf":0.004608294930875576}},"i":{"docs":{},"s":{"docs":{},"o":{"docs":{},"n":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002421307506053269},"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.009345794392523364},"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.010101010101010102},"Tricks/":{"ref":"Tricks/","tf":0.004608294930875576}},"s":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}},"a":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},".":{"docs":{"Algorithms/TrickySorting.html":{"ref":"Algorithms/TrickySorting.html","tf":0.024390243902439025}}}}}}}},"c":{"docs":{},"t":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}},",":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}},".":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}},"l":{"docs":{},"e":{"docs":{},"x":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.004842615012106538},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}},"i":{"docs":{},"t":{"docs":{},"y":{"docs":{},":":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}}}}},"t":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":3.336036036036036},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}}}},"i":{"docs":{},"c":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Tricks/":{"ref":"Tricks/","tf":0.004608294930875576}}}}},"u":{"docs":{},"t":{"docs":{"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406},"DataStructures/Trees/NumTrees.html":{"ref":"DataStructures/Trees/NumTrees.html","tf":0.008849557522123894},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.007751937984496124},"Algorithms/DP/NumSol.html":{"ref":"Algorithms/DP/NumSol.html","tf":0.013888888888888888}},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},",":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}},"s":{"docs":{},",":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}}},"e":{"docs":{},".":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.0027548209366391185}}}}}},"o":{"docs":{},"n":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}},"e":{"docs":{"DataStructures/Arrays/SlidingWindow.html":{"ref":"DataStructures/Arrays/SlidingWindow.html","tf":0.009174311926605505},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625},"Algorithms/TrickySorting.html":{"ref":"Algorithms/TrickySorting.html","tf":0.024390243902439025},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.004658385093167702},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},"s":{"docs":{},",":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}}},"b":{"docs":{},"i":{"docs":{},"n":{"docs":{"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.003205128205128205},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.011019283746556474},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0015527950310559005}},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},",":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358}}},"s":{"docs":{},":":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.003205128205128205},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.0027548209366391185}}},"u":{"docs":{},"m":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703}}}}}}}}}}}}}},"o":{"docs":{},"r":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":10.003205128205128},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.0027548209366391185}}}}}}}},"o":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}},"a":{"docs":{},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016}}}}}},"m":{"docs":{},"o":{"docs":{},"n":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.005412719891745603},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995},"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.008333333333333333}},",":{"docs":{"DataStructures/LinkedLists/Instructions.html":{"ref":"DataStructures/LinkedLists/Instructions.html","tf":0.019230769230769232}}}}},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}}}}},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.010752688172043012},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006},"Algorithms/":{"ref":"Algorithms/","tf":0.024691358024691357},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}},"r":{"docs":{},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{"DataStructures/Arrays/SlidingWindow.html":{"ref":"DataStructures/Arrays/SlidingWindow.html","tf":0.009174311926605505}}}}}},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.009433962264150943},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488}},"s":{"docs":{},"n":{"docs":{},"e":{"docs":{},"a":{"docs":{},"r":{"docs":{},"b":{"docs":{},"y":{"docs":{},"a":{"docs":{},"l":{"docs":{},"m":{"docs":{},"o":{"docs":{},"s":{"docs":{},"t":{"docs":{},"d":{"docs":{},"u":{"docs":{},"p":{"docs":{},"l":{"docs":{},"i":{"docs":{},"c":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.010101010101010102}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"u":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.004842615012106538},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498},"DataStructures/Trees/NumTrees.html":{"ref":"DataStructures/Trees/NumTrees.html","tf":0.008849557522123894},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.008928571428571428},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.008403361344537815},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0046875},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.005681818181818182},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.009615384615384616},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488},"Algorithms/DP/NumSol.html":{"ref":"Algorithms/DP/NumSol.html","tf":0.013888888888888888},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0030864197530864196},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.005509641873278237},"Algorithms/DynamicProgramming-IV.html":{"ref":"Algorithms/DynamicProgramming-IV.html","tf":0.029411764705882353},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.003105590062111801}}}}}},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.012106537530266344},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}},"s":{"docs":{},",":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}},":":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.0027548209366391185}}}}}}}},"u":{"docs":{},"c":{"docs":{},"t":{"docs":{"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":5.014522821576763},"DataStructures/Trees/NumTrees.html":{"ref":"DataStructures/Trees/NumTrees.html","tf":0.008849557522123894},"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576}},"(":{"0":{"docs":{},",":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004149377593360996},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0015527950310559005}}}},"docs":{},"i":{"docs":{},"_":{"docs":{},"s":{"docs":{},",":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004149377593360996}}}}},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.006211180124223602}},",":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0015527950310559005}}}}}}}},"l":{"docs":{},",":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004149377593360996}}}},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"_":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}}}}}}}}}}},"p":{"docs":{},"i":{"docs":{},"v":{"docs":{},"o":{"docs":{},"t":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}}}}}}}},".":{"docs":{},"p":{"docs":{},"o":{"docs":{},"s":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},"_":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004149377593360996}}}}}}}}}}}}}}}}}},"_":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"(":{"0":{"docs":{},",":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}}}},"docs":{},")":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}}},"m":{"docs":{},"i":{"docs":{},"d":{"docs":{},"d":{"docs":{},"l":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}}}}}}},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},"_":{"docs":{},"i":{"docs":{},"d":{"docs":{},"x":{"docs":{},"+":{"1":{"docs":{},",":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}}}},"docs":{}}}}}}}}}},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},",":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.006224066390041493}}},"=":{"0":{"docs":{},",":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}}}},"docs":{}}}}}}}},".":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004149377593360996}}}}}}}}}}}}},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"i":{"docs":{},"m":{"docs":{},"u":{"docs":{},"m":{"docs":{},"b":{"docs":{},"i":{"docs":{},"n":{"docs":{},"a":{"docs":{},"r":{"docs":{},"y":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}}}}}}}}}}}}}}}}}}}}}}}}},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},",":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}}}}}}}}}}}}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},":":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002840909090909091}}}}}}}}}},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625}}}}},"n":{"docs":{},"t":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.0027548209366391185}}}}}},"e":{"docs":{},"c":{"docs":{},"u":{"docs":{},"t":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0023584905660377358},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}},"o":{"docs":{},"l":{"docs":{},"i":{"docs":{},"d":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}}}},"i":{"docs":{},"d":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}},"s":{"docs":{},"t":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}},"c":{"docs":{},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}},"r":{"docs":{},"n":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0023584905660377358}}}}},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"n":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"r":{"docs":{"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406}}}}}},"e":{"docs":{},"n":{"docs":{},"c":{"docs":{},"t":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016}}}}}},"n":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00808080808080808},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}},"d":{"docs":{},"i":{"docs":{},"t":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.005405405405405406},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},",":{"docs":{"DataStructures/LinkedLists/Instructions.html":{"ref":"DataStructures/LinkedLists/Instructions.html","tf":0.019230769230769232}}}},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{},"y":{"docs":{},":":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}}}}}}}}}}},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"g":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809}}},"t":{"docs":{"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0106951871657754},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002840909090909091},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123},"Tricks/":{"ref":"Tricks/","tf":0.004608294930875576}},"b":{"docs":{},"s":{"docs":{},"t":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.003703703703703704}}}}}}}}}}}}}}},"f":{"docs":{},"l":{"docs":{},"i":{"docs":{},"c":{"docs":{},"t":{"docs":{},"s":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}}}},"p":{"docs":{},"i":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.021505376344086023}},"e":{"docs":{},"d":{"docs":{},")":{"docs":{},")":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703}}}},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703}}},":":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703}}}}}}},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{"DataStructures/Arrays/SlidingWindow.html":{"ref":"DataStructures/Arrays/SlidingWindow.html","tf":0.01834862385321101},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0032},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0030864197530864196},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0015527950310559005},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.007707129094412331}},"b":{"docs":{},"i":{"docs":{},"n":{"docs":{},"a":{"docs":{},"r":{"docs":{},"y":{"docs":{},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343}}}}}}}}}}}}}}}}}}}}}},"t":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488}}}}}}}}}}}},"p":{"docs":{},"a":{"docs":{},"i":{"docs":{},"r":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006}}}}}}}}}}}}},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"p":{"docs":{},"o":{"docs":{},"n":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}}}}}}}}}}}}}}}},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}}}}}}}}}}}}},"/":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488}}}},"e":{"docs":{},"r":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.00641025641025641},"Tricks/":{"ref":"Tricks/","tf":0.004608294930875576}},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},")":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.003205128205128205}}}}}}},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"/":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},")":{"docs":{"Tricks/":{"ref":"Tricks/","tf":0.004608294930875576}}}}}}}}}}}}}}},")":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.00641025641025641}},":":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.003205128205128205}}}},":":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.003205128205128205}}},"[":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"]":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.00641025641025641}},":":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.003205128205128205}}}}}}}}}}}},"r":{"docs":{},"s":{"docs":{"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00808080808080808},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.003125},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},"e":{"docs":{},")":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0023584905660377358}}},"_":{"docs":{},"d":{"docs":{},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{},"h":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}},")":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}}}}}}},"s":{"docs":{},"/":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}},":":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625}}}}}}}},"r":{"docs":{},"n":{"docs":{},"e":{"docs":{},"r":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002421307506053269},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016}}}}},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"p":{"docs":{},"o":{"docs":{},"n":{"docs":{},"d":{"docs":{"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.014218009478672985},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.003105590062111801}}}}}}},"c":{"docs":{},"t":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414},"Tricks/":{"ref":"Tricks/","tf":0.004608294930875576}}}}}}},"l":{"docs":{"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406}},"l":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.011940298507462687},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.005412719891745603},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.01092896174863388},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498},"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.008928571428571428},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.012605042016806723},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.006060606060606061},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.015748031496062992},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.005681818181818182},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.007407407407407408},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.003205128205128205},"Tricks/":{"ref":"Tricks/","tf":0.004608294930875576}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},".":{"docs":{},"d":{"docs":{},"e":{"docs":{},"q":{"docs":{},"u":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358}}}}}}}}}}}}},"g":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.02631578947368421}}}}},"o":{"docs":{},"r":{"docs":{"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":10.026785714285714},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},"/":{"docs":{"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406}}},"s":{"docs":{},":":{"docs":{"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406}}},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406}}}},"n":{"docs":{"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406}}}},".":{"docs":{},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.005952380952380952}}}}}}},"r":{"docs":{},"e":{"docs":{},"m":{"docs":{},"o":{"docs":{},"v":{"docs":{},"e":{"docs":{},"(":{"docs":{},"c":{"docs":{},"o":{"docs":{},"l":{"docs":{},"o":{"docs":{},"r":{"docs":{},")":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.005952380952380952}}}}}}}}}}}}}}}},"/":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476}}}},")":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476}},")":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476}}}},",":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476}}},":":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476}}},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476}},")":{"docs":{},")":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476}}}}}}}}}}},"u":{"docs":{},"m":{"docs":{},"n":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0030864197530864196}}}}}},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0023584905660377358},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.006644518272425249},"Tricks/":{"ref":"Tricks/","tf":0.004608294930875576}}}}},"s":{"docs":{},"t":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.003924133420536298},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},",":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625}}},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995}}}},"1":{"docs":{},"]":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995}}}},"2":{"docs":{},"]":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995}}}},"docs":{}}}}}}}},"i":{"docs":{},"n":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.007751937984496124},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098},"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.002777777777777778},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.008264462809917356}},"s":{"docs":{},":":{"docs":{"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.007751937984496124},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.0027548209366391185}}},",":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.0027548209366391185}}},"[":{"docs":{},"j":{"docs":{},"]":{"docs":{},")":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.0027548209366391185}},")":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.0027548209366391185}}}}}}}}}},"o":{"docs":{},"l":{"docs":{},"d":{"docs":{},"o":{"docs":{},"w":{"docs":{},"n":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"t":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.021505376344086023},"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.009345794392523364},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414},"Tricks/":{"ref":"Tricks/","tf":0.004608294930875576}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358}}}}}}}},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"i":{"docs":{},"a":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002840909090909091},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062}},",":{"docs":{"DataStructures/Arrays/SlidingWindow.html":{"ref":"DataStructures/Arrays/SlidingWindow.html","tf":0.009174311926605505},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.003703703703703704}}}}}}},"i":{"docs":{},"c":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}},"u":{"docs":{},"c":{"docs":{},"i":{"docs":{},"a":{"docs":{},"l":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016},"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}}}}}}}},"a":{"docs":{},"n":{"docs":{},"'":{"docs":{},"t":{"docs":{"DataStructures/StacksAndQueues/":{"ref":"DataStructures/StacksAndQueues/","tf":0.01020408163265306},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}},"v":{"docs":{},"i":{"docs":{},"s":{"docs":{},"i":{"docs":{},"t":{"docs":{},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"m":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907}}}}}}}}}}}}}}}}}}}}},"f":{"docs":{},"i":{"docs":{},"n":{"docs":{},"i":{"docs":{},"s":{"docs":{},"h":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}}}}}}}}}}}},"m":{"docs":{},"e":{"docs":{},"a":{"docs":{},"s":{"docs":{},"u":{"docs":{},"r":{"docs":{},"e":{"docs":{},"w":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358}}}}}}}}}}}}}}}}}}}},"d":{"docs":{},"i":{"docs":{},"d":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"s":{"docs":{},":":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703}}},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},")":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703}}}}}}}}}}}}},"j":{"docs":{},"u":{"docs":{},"m":{"docs":{},"p":{"docs":{},"f":{"docs":{},"r":{"docs":{},"o":{"docs":{},"m":{"docs":{},"p":{"docs":{},"o":{"docs":{},"s":{"docs":{},"i":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703}}}}}}}}}}}}}}}}}},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}}}}}}},"_":{"docs":{},"s":{"docs":{},"h":{"docs":{},"i":{"docs":{},"p":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}},"(":{"docs":{},"w":{"docs":{},")":{"docs":{},":":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}}}}}}}}}}},"w":{"docs":{},"i":{"docs":{},"n":{"docs":{},"n":{"docs":{},"i":{"docs":{},"m":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Algorithms/Games.html":{"ref":"Algorithms/Games.html","tf":0.013333333333333334}}}}}}}}}}}}}},".":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}},"s":{"docs":{},"e":{"docs":{"DataStructures/StacksAndQueues/":{"ref":"DataStructures/StacksAndQueues/","tf":0.01020408163265306},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002421307506053269},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0048},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.014814814814814815},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.003205128205128205},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.005145797598627788},"Algorithms/Games.html":{"ref":"Algorithms/Games.html","tf":0.013333333333333334},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0030864197530864196},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.011019283746556474},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0049833887043189366},"Miscellaneous/AlienDictionary.html":{"ref":"Miscellaneous/AlienDictionary.html","tf":0.021739130434782608},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}},".":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016}}},"s":{"docs":{},".":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809}}},":":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.005405405405405406},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.003105590062111801},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}},",":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}},",":{"docs":{"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.007751937984496124}}},")":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}},"h":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.03296703296703297}},",":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.01098901098901099}}},".":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}}},"t":{"docs":{},"c":{"docs":{},"h":{"docs":{},":":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.007263922518159807}}}}}},"l":{"docs":{},"l":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006},"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.009615384615384616},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.0027548209366391185},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0015527950310559005}},"s":{"docs":{},"/":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717}}}},")":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625}}}},"c":{"docs":{},"u":{"docs":{},"l":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202},"Algorithms/Games.html":{"ref":"Algorithms/Games.html","tf":0.013333333333333334},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414},"Tricks/":{"ref":"Tricks/","tf":0.004608294930875576}},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},".":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.0027548209366391185}}}}}}},"o":{"docs":{},"r":{"docs":{},"/":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},"d":{"docs":{},"i":{"docs":{},"s":{"docs":{},"c":{"docs":{},"u":{"docs":{},"s":{"docs":{},"s":{"docs":{},"/":{"2":{"3":{"6":{"5":{"6":{"5":{"docs":{},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"t":{"docs":{},"a":{"docs":{},"i":{"docs":{},"l":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}}}}}}}},"_":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},"(":{"docs":{},"m":{"docs":{},"i":{"docs":{},"d":{"docs":{},")":{"docs":{},":":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}}}}}}}}}}}}},"m":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002840909090909091}}}},"r":{"docs":{},"e":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847},"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996},"DataStructures/Trees/NumTrees.html":{"ref":"DataStructures/Trees/NumTrees.html","tf":0.008849557522123894},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002840909090909091},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0015527950310559005}}},"r":{"docs":{},"i":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0032}}},"y":{"docs":{},")":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016}}},":":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016}}}}},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}},"d":{"docs":{},"s":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}},"c":{"docs":{},"h":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00404040404040404},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.005681818181818182}},"e":{"docs":{},":":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002840909090909091},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}},"[":{"docs":{},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"r":{"docs":{},"s":{"docs":{},"e":{"docs":{},"]":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.006060606060606061}}}}}}}}},"(":{"docs":{},"x":{"docs":{},",":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002840909090909091}}}}}},"/":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}},"p":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}},"a":{"docs":{},"c":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}}}}},"m":{"docs":{},"e":{"docs":{},"r":{"docs":{},"a":{"docs":{},"s":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}},"u":{"docs":{},"s":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}},"k":{"docs":{},"e":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}},"h":{"docs":{},"e":{"docs":{},"c":{"docs":{},"k":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005},"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016},"DataStructures/LinkedLists/Instructions.html":{"ref":"DataStructures/LinkedLists/Instructions.html","tf":0.019230769230769232},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011976047904191617},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0023584905660377358},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0027063599458728013},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.008522727272727272},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.010309278350515464},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.001962066710268149},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.007751937984496124},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0030864197530864196},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.005509641873278237},"Miscellaneous/Palindrome.html":{"ref":"Miscellaneous/Palindrome.html","tf":0.02247191011235955},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0033222591362126247},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},"s":{"docs":{},":":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002421307506053269},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609}}}},"i":{"docs":{},"f":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"r":{"docs":{},"e":{"docs":{},"q":{"docs":{},"u":{"docs":{},"i":{"docs":{},"s":{"docs":{},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.007874015748031496}}}}}}}}}}}}}}}}}}}}}},"o":{"docs":{},"u":{"docs":{},"t":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002840909090909091}}}}},"p":{"docs":{},"o":{"docs":{},"s":{"docs":{},"s":{"docs":{},"i":{"docs":{},"b":{"docs":{},"i":{"docs":{},"l":{"docs":{},"i":{"docs":{},"t":{"docs":{},"y":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}}}}}}}}}}}}}}}},"a":{"docs":{},"t":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.003205128205128205}}}},"s":{"docs":{},"s":{"docs":{},"b":{"docs":{},"o":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995}}}}}}}}}}},"a":{"docs":{},"r":{"docs":{},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{"DataStructures/Arrays/SlidingWindow.html":{"ref":"DataStructures/Arrays/SlidingWindow.html","tf":0.01834862385321101},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.005847953216374269},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.0027548209366391185},"Miscellaneous/Palindrome.html":{"ref":"Miscellaneous/Palindrome.html","tf":0.0449438202247191},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.003105590062111801}},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"n":{"docs":{},"o":{"docs":{},"t":{"docs":{"DataStructures/Arrays/SlidingWindow.html":{"ref":"DataStructures/Arrays/SlidingWindow.html","tf":0.009174311926605505}}}}}},"s":{"docs":{},"/":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343}},"d":{"docs":{},"i":{"docs":{},"s":{"docs":{},"c":{"docs":{},"u":{"docs":{},"s":{"docs":{},"s":{"docs":{},"/":{"8":{"7":{"7":{"6":{"8":{"docs":{},"/":{"4":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002421307506053269}}},"docs":{}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}}},"/":{"docs":{"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343}}},".":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}}}},"l":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.02631578947368421}},"e":{"docs":{},"/":{"5":{"2":{"8":{"docs":{},"/":{"docs":{},"w":{"docs":{},"e":{"docs":{},"e":{"docs":{},"k":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.009433962264150943}}}}}}}},"docs":{}},"3":{"5":{"docs":{},"/":{"docs":{},"w":{"docs":{},"e":{"docs":{},"e":{"docs":{},"k":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678}}}}}}}},"6":{"docs":{},"/":{"docs":{},"w":{"docs":{},"e":{"docs":{},"e":{"docs":{},"k":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717}}}}}}}},"7":{"docs":{},"/":{"docs":{},"w":{"docs":{},"e":{"docs":{},"e":{"docs":{},"k":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488}}}}}}}},"docs":{}},"4":{"0":{"docs":{},"/":{"docs":{},"w":{"docs":{},"e":{"docs":{},"e":{"docs":{},"k":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}}},"3":{"docs":{},"/":{"docs":{},"w":{"docs":{},"e":{"docs":{},"e":{"docs":{},"k":{"docs":{"Algorithms/DynamicProgramming-IV.html":{"ref":"Algorithms/DynamicProgramming-IV.html","tf":0.00980392156862745}}}}}}}},"docs":{}},"docs":{}},"docs":{}}}}}}}},"i":{"docs":{},"n":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.008771929824561403},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}},"/":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995}}}}},"n":{"docs":{},"g":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.00641025641025641},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.002777777777777778},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.011019283746556474},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}},"e":{"docs":{},".":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.011627906976744186},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.0027548209366391185}}},":":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}},",":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}}},"c":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}},"o":{"docs":{},"i":{"docs":{},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},":":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703}}},",":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}}}}},"o":{"docs":{},"s":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.005405405405405406}}}},"s":{"docs":{},"e":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}},"i":{"docs":{},"l":{"docs":{},"d":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}},",":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}}},"r":{"docs":{},"e":{"docs":{},"n":{"docs":{"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002840909090909091}},")":{"docs":{"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576}}},":":{"docs":{"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576}}}}}}}}},"u":{"docs":{},"n":{"docs":{},"k":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}},"u":{"docs":{},"r":{"docs":{},"r":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"DataStructures/Arrays/SlidingWindow.html":{"ref":"DataStructures/Arrays/SlidingWindow.html","tf":0.027522935779816515},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.01937046004842615},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.008771929824561403},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0064},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.03333333333333333},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.009433962264150943},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.005412719891745603},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00819672131147541},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.006224066390041493},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00404040404040404},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.005681818181818182},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.016216216216216217},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.005145797598627788},"Algorithms/Games.html":{"ref":"Algorithms/Games.html","tf":0.02666666666666667},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.013774104683195593},"Algorithms/DynamicProgramming-IV.html":{"ref":"Algorithms/DynamicProgramming-IV.html","tf":0.0196078431372549},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0033222591362126247},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.004658385093167702}},":":{"docs":{"DataStructures/Arrays/SlidingWindow.html":{"ref":"DataStructures/Arrays/SlidingWindow.html","tf":0.009174311926605505},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.014814814814814815},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703}}},"[":{"0":{"docs":{},"]":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}},"docs":{},"s":{"docs":{},"[":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},"]":{"docs":{},"]":{"docs":{"DataStructures/Arrays/SlidingWindow.html":{"ref":"DataStructures/Arrays/SlidingWindow.html","tf":0.01834862385321101}}}}}}}}}}}},",":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.004842615012106538},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703}}},"_":{"docs":{},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.014619883040935672}}}}}}},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.007075471698113208}},")":{"docs":{},":":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0023584905660377358}}}}}}},"r":{"docs":{},"o":{"docs":{},"w":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847}},".":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"(":{"docs":{},"x":{"docs":{},",":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847}}}}}}}}},":":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847}}},"[":{"docs":{},"x":{"docs":{},"]":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847}}}}}}}},"d":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625}}}}}}},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0048}}}}}},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.014814814814814815},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}},":":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00546448087431694}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.007407407407407408},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}},":":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.007407407407407408},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00546448087431694}}}}}}}},"v":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.007407407407407408},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00819672131147541}},"a":{"docs":{},"l":{"docs":{},")":{"docs":{},")":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00546448087431694}}}}}}}},")":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703}},":":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0023584905660377358},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703}}},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703}}}}}}}},"a":{"docs":{},"t":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809}}}}},"m":{"docs":{},"u":{"docs":{},"l":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.003703703703703704}}}}},"s":{"docs":{},"t":{"docs":{},"o":{"docs":{},"m":{"docs":{"Algorithms/TrickySorting.html":{"ref":"Algorithms/TrickySorting.html","tf":0.024390243902439025}},"e":{"docs":{},"r":{"docs":{},"?":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.02631578947368421}}}}}}}}},"b":{"docs":{},"o":{"docs":{},"i":{"docs":{},"d":{"docs":{},"s":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}},"t":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}},"s":{"docs":{},"/":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}},":":{"docs":{"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.016216216216216217},"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996}}},"_":{"docs":{},"l":{"docs":{"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406}}},"r":{"docs":{"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406}}}},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002840909090909091},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062}}}}}}},"l":{"docs":{},"l":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}},".":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}},"_":{"docs":{},"c":{"docs":{},"o":{"docs":{},"l":{"docs":{},"u":{"docs":{},"m":{"docs":{},"n":{"docs":{},")":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}}}}}}}},"s":{"docs":{},",":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}}}},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"Miscellaneous/Palindrome.html":{"ref":"Miscellaneous/Palindrome.html","tf":0.02247191011235955}},".":{"docs":{"Miscellaneous/Palindrome.html":{"ref":"Miscellaneous/Palindrome.html","tf":0.011235955056179775}}}}}}}},"i":{"docs":{},"r":{"docs":{},"c":{"docs":{},"u":{"docs":{},"l":{"docs":{},"a":{"docs":{},"r":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343}}}}}}}},"t":{"docs":{},"i":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.003125}}}}},"y":{"docs":{},"c":{"docs":{},"l":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016},"DataStructures/LinkedLists/Instructions.html":{"ref":"DataStructures/LinkedLists/Instructions.html","tf":0.019230769230769232},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00404040404040404},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},"e":{"docs":{},"/":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016}}},",":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},")":{"docs":{"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996}}}}}},"i":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},")":{"docs":{"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996}}}}}}}},"m":{"docs":{},"o":{"docs":{},"s":{"docs":{},"t":{"docs":{},"_":{"docs":{},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"m":{"docs":{},"o":{"docs":{},"n":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{"Tricks/":{"ref":"Tricks/","tf":0.004608294930875576}}}}}}}}}}}}}}}}},",":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.007874015748031496},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}}},"p":{"docs":{},"u":{"docs":{},"/":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625}}}}},"c":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.003205128205128205}}}},"g":{"docs":{"./":{"ref":"./","tf":0.02631578947368421},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005}},"i":{"docs":{},"t":{"docs":{"./":{"ref":"./","tf":0.02631578947368421}},"b":{"docs":{},"o":{"docs":{},"o":{"docs":{},"k":{"docs":{"./":{"ref":"./","tf":0.10526315789473684}}}}}}},"v":{"docs":{},"e":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.003703703703703704},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}},"n":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.003205128205128205},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.001962066710268149},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062},"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.002777777777777778},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.005509641873278237},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0015527950310559005}}}}}},"l":{"docs":{},"o":{"docs":{},"b":{"docs":{},"a":{"docs":{},"l":{"docs":{"./":{"ref":"./","tf":0.02631578947368421},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0023584905660377358},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}},"s":{"docs":{},"/":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006}}}},"l":{"docs":{},"y":{"docs":{},",":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}}}}}}}},"e":{"docs":{},"n":{"docs":{},"e":{"docs":{},"r":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":5.010752688172043},"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.04},"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.009433962264150943},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0023584905660377358},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002840909090909091},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.002616088947024199},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.003105590062111801},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},"a":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"s":{"docs":{},":":{"docs":{"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996}}}}}}}}}}},"t":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358},"Tricks/":{"ref":"Tricks/","tf":0.004608294930875576}},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.010752688172043012}}}},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"p":{"docs":{},"y":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996}}}}}}}}}}}}}}}}}},"_":{"docs":{},"s":{"docs":{},"m":{"docs":{},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"(":{"docs":{},"x":{"docs":{},")":{"docs":{},")":{"docs":{},"]":{"docs":{"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.009345794392523364}}}},":":{"docs":{"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.009345794392523364}}}}}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016}}}}}}}}}}}}}}}}}}}}}}}},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{},"e":{"docs":{},"l":{"docs":{},"e":{"docs":{},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996}}}}}}}}}}}}}}}}}}},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625}}}}}}}}}}}}},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"i":{"docs":{},"m":{"docs":{},"u":{"docs":{},"m":{"docs":{},"g":{"docs":{},"o":{"docs":{},"l":{"docs":{},"d":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703}}}}}}}}}}}}}}}}}}}},"e":{"docs":{},"k":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.011834319526627219}}}}},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"t":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002421307506053269},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0032},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.002616088947024199},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},"e":{"docs":{},"r":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.011940298507462687},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.003703703703703704},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},",":{"docs":{"DataStructures/Arrays/SlidingWindow.html":{"ref":"DataStructures/Arrays/SlidingWindow.html","tf":0.009174311926605505}}}}}}},"e":{"docs":{},"d":{"docs":{},"i":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}}}}}},"o":{"docs":{},"u":{"docs":{},"p":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.001962066710268149}},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343}}}}}}}}}}}}}},"'":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995}}}},"'":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}},",":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}},"a":{"docs":{},"p":{"docs":{},"h":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":5.016042780748663},"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":10.022727272727273},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.017857142857142856},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":5.012605042016807},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":5.014141414141414},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.015748031496062992}},":":{"docs":{"DataStructures/LinkedLists/Instructions.html":{"ref":"DataStructures/LinkedLists/Instructions.html","tf":0.019230769230769232},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.005952380952380952},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}},".":{"docs":{"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877}},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"(":{"docs":{},"p":{"docs":{},",":{"docs":{"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576}}},"a":{"docs":{},"r":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},",":{"docs":{"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576}}}}}}}}},"e":{"docs":{},",":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},",":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}}}}}},"s":{"docs":{},",":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}}}}}}},"[":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},".":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"]":{"docs":{},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},")":{"docs":{"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877}}}}}}}}}}}}}}}}}}}}}},"]":{"docs":{},":":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.005952380952380952},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00404040404040404},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.007874015748031496}}}}}}}},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"]":{"docs":{"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576}},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},".":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},")":{"docs":{"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877}}}}}}}}}}}}}}}}}}}}}}}}}},"v":{"docs":{},"]":{"docs":{},":":{"docs":{"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877}}}}},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"]":{"docs":{},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},")":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476}}}}}}}}}}}}}}}}}}},"]":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}},"i":{"docs":{},"]":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476}},":":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},"]":{"docs":{},":":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476}}}}}}}}},"s":{"docs":{},"]":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00404040404040404}},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"[":{"docs":{},"d":{"docs":{},",":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.005952380952380952}}}}},"d":{"docs":{},")":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00404040404040404}}}}}}}}}}}}},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},"]":{"docs":{},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},")":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476}}}}}}}}}}}}}}}}}}}},"c":{"docs":{},"]":{"docs":{},":":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.007874015748031496}}},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"p":{"docs":{},")":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.007874015748031496}}}}}}}}}},"d":{"docs":{},"d":{"docs":{},"(":{"docs":{},"p":{"docs":{},")":{"docs":{"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.007874015748031496}}}}}}}}}},"u":{"docs":{},"r":{"docs":{},"r":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"]":{"docs":{},":":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}}}}}}}}},"u":{"docs":{},"]":{"docs":{},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"(":{"docs":{},"v":{"docs":{},",":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.008403361344537815}}}}}}}}}}}}}}},"d":{"docs":{},"]":{"docs":{},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"s":{"docs":{},")":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}}}}}}}}}}}}},"/":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}},"s":{"docs":{},",":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678}}}}}},"d":{"docs":{},"u":{"docs":{},"a":{"docs":{},"t":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.02631578947368421}}}}}}},"i":{"docs":{},"d":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":10.011363636363637},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.007407407407407408},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995}},":":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.005681818181818182},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}},"[":{"0":{"docs":{},"]":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002840909090909091}}}},"docs":{}}}},"docs":{},"_":{"docs":{},"x":{"docs":{},"]":{"docs":{},"[":{"docs":{},"_":{"docs":{},"y":{"docs":{},"]":{"docs":{},")":{"docs":{},")":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002840909090909091}}}}}}}}}}},"x":{"docs":{},"]":{"docs":{},"[":{"docs":{},"y":{"docs":{},"]":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002840909090909091}}}}}}},"i":{"docs":{},"]":{"docs":{},"[":{"docs":{},"j":{"docs":{},"]":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.005405405405405406}}}}}}}},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}},"o":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.005847953216374269},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0023584905660377358},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0040595399188092015},"DataStructures/Trees/NumTrees.html":{"ref":"DataStructures/Trees/NumTrees.html","tf":0.008849557522123894},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.00641025641025641},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414},"Tricks/":{"ref":"Tricks/","tf":0.004608294930875576}},"t":{"docs":{},"c":{"docs":{},"h":{"docs":{},"a":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625}},":":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}}}}},"o":{"docs":{},"d":{"docs":{"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.005847953216374269},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0027063599458728013},"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.003430531732418525},"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.010101010101010102},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.001962066710268149},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}},"l":{"docs":{},"d":{"docs":{},"/":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002840909090909091},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703}}}}},":":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}},"e":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}},"a":{"docs":{},"m":{"docs":{},"e":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0049382716049382715},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703},"Algorithms/Games.html":{"ref":"Algorithms/Games.html","tf":10.013333333333334},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.004578155657292348},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}},"/":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358},"Algorithms/Games.html":{"ref":"Algorithms/Games.html","tf":0.05333333333333334},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.001962066710268149},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"m":{"docs":{},"i":{"docs":{},"s":{"docs":{},"s":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"/":{"docs":{"Algorithms/Games.html":{"ref":"Algorithms/Games.html","tf":0.013333333333333334}}}}}}}}}}}}}},":":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"n":{"docs":{},"n":{"docs":{},"o":{"docs":{},"a":{"docs":{},"d":{"docs":{},"j":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476}}}}}}}}}}}}},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}},"u":{"docs":{},"a":{"docs":{},"r":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016}}}},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00546448087431694}}}}}}}}},"_":{"docs":{},"v":{"docs":{},"i":{"docs":{},"s":{"docs":{},"i":{"docs":{},"t":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}},"e":{"docs":{},"d":{"docs":{},".":{"docs":{},"a":{"docs":{},"d":{"docs":{},"d":{"docs":{},"(":{"docs":{},"i":{"docs":{},")":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}}}}}}},":":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.006060606060606061}}}}}}}}}},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"u":{"docs":{},"e":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002840909090909091}},".":{"docs":{},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002840909090909091}}}}}}}}}}}},":":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002840909090909091}}}}}}}}},"(":{"docs":{},"i":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}},"h":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.005970149253731343},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},"t":{"docs":{},"t":{"docs":{},"p":{"docs":{},"s":{"docs":{},":":{"docs":{},"/":{"docs":{},"/":{"docs":{},"g":{"docs":{},"i":{"docs":{},"t":{"docs":{},"h":{"docs":{},"u":{"docs":{},"b":{"docs":{},".":{"docs":{},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"/":{"docs":{},"v":{"docs":{},"a":{"docs":{},"r":{"docs":{},"a":{"docs":{},"d":{"docs":{},"g":{"docs":{},"h":{"docs":{},"o":{"docs":{},"d":{"docs":{},"a":{"docs":{},"k":{"docs":{},"e":{"docs":{},"/":{"docs":{},"g":{"docs":{},"i":{"docs":{},"t":{"docs":{},"b":{"docs":{},"o":{"docs":{},"o":{"docs":{},"k":{"docs":{"./":{"ref":"./","tf":0.02631578947368421}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},".":{"docs":{},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"/":{"docs":{},"p":{"docs":{},"r":{"docs":{},"o":{"docs":{},"b":{"docs":{},"l":{"docs":{},"e":{"docs":{},"m":{"docs":{},"s":{"docs":{},"/":{"1":{"3":{"2":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717}}},"docs":{}},"docs":{}},"2":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}},"3":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},"/":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.009433962264150943},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005}}}}}}},"docs":{},"r":{"docs":{},"e":{"docs":{},"m":{"docs":{},"o":{"docs":{},"v":{"docs":{"DataStructures/StacksAndQueues/":{"ref":"DataStructures/StacksAndQueues/","tf":0.01020408163265306},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.004658385093167702},"Tricks/":{"ref":"Tricks/","tf":0.004608294930875576}}}}},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0032}}}}}},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"u":{"docs":{},"c":{"docs":{},"t":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}}}}}}}}},"d":{"docs":{},"u":{"docs":{},"c":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}},"g":{"docs":{},"u":{"docs":{},"l":{"docs":{},"a":{"docs":{},"r":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}},"s":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}},"a":{"docs":{},"c":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}},"n":{"docs":{},"g":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995}}}}},"u":{"docs":{},"s":{"docs":{},"s":{"docs":{},"i":{"docs":{},"a":{"docs":{},"n":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}}},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}},"t":{"docs":{},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"k":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907}}}}}}},"w":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}},"u":{"docs":{},"m":{"docs":{},"b":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00404040404040404},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002840909090909091},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.009156311314584695},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}},"i":{"docs":{},"m":{"docs":{"Algorithms/Games.html":{"ref":"Algorithms/Games.html","tf":0.02666666666666667}}}},"o":{"docs":{},"n":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}},"i":{"docs":{},"m":{"docs":{},"u":{"docs":{},"m":{"docs":{"DataStructures/Arrays/SlidingWindow.html":{"ref":"DataStructures/Arrays/SlidingWindow.html","tf":0.009174311926605505},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002421307506053269},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.013080444735120994},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.006211180124223602},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}},"d":{"docs":{},"d":{"docs":{},"l":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016}}}}},"s":{"docs":{},"s":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}}},"a":{"docs":{},"x":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002840909090909091},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995}},"i":{"docs":{},"m":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.001962066710268149}},"u":{"docs":{},"m":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.004842615012106538},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.009810333551340745},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}}}}}}},"k":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"x":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}},"e":{"docs":{},"r":{"docs":{},"g":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0032},"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}},"e":{"docs":{},"t":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0049833887043189366}}}}},"o":{"docs":{},"s":{"docs":{},"t":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006}}}},"v":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}},"b":{"docs":{},"o":{"docs":{},"a":{"docs":{},"t":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.009433962264150943}}}}},"i":{"docs":{},"n":{"docs":{},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.003703703703703704},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0047169811320754715},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847},"DataStructures/Trees/NumTrees.html":{"ref":"DataStructures/Trees/NumTrees.html","tf":0.008849557522123894},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}},"t":{"docs":{},"w":{"docs":{},"i":{"docs":{},"s":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}},"a":{"docs":{},"l":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}}}},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.003924133420536298},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.01098901098901099}}}}},"u":{"docs":{},"i":{"docs":{},"l":{"docs":{},"d":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}},"r":{"docs":{},"s":{"docs":{},"t":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}},"r":{"docs":{},"o":{"docs":{},"k":{"docs":{},"e":{"docs":{},"n":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}}}}}}}},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"t":{"docs":{},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.009433962264150943},"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.010101010101010102}}}}},"i":{"docs":{},"n":{"docs":{},"u":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.003703703703703704}}}}}},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"u":{"docs":{},"c":{"docs":{},"t":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.006224066390041493},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.003430531732418525}}}}},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}},"c":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"n":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.005886200130804447}}}},"s":{"docs":{},"i":{"docs":{},"n":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847}}}}},"r":{"docs":{},"s":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.015748031496062992},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}}},"m":{"docs":{},"b":{"docs":{},"i":{"docs":{},"n":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.003205128205128205},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.011019283746556474}}}}}},"i":{"docs":{},"n":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.011627906976744186},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.005509641873278237}}}}},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"p":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}},"r":{"docs":{},"r":{"docs":{},"i":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995}}}}}},"a":{"docs":{},"m":{"docs":{},"p":{"docs":{},"a":{"docs":{},"g":{"docs":{},"n":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}}},"l":{"docs":{},"o":{"docs":{},"s":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625}}}}}}},"i":{"docs":{},"m":{"docs":{},"b":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}},"a":{"docs":{},"p":{"docs":{},"a":{"docs":{},"c":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}}}}},"n":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}},"r":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}},"t":{"docs":{},"w":{"docs":{},"o":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.009433962264150943}}}},"h":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625}}},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995}}}}}},"s":{"docs":{},"k":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}},"i":{"docs":{},"l":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}},"r":{"docs":{},"i":{"docs":{},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{},"l":{"docs":{},"e":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}},"p":{"docs":{},"l":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}},"l":{"docs":{},"o":{"docs":{},"n":{"docs":{},"g":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.004842615012106538},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.008771929824561403},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002840909090909091},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.007848266841072597},"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.005555555555555556},"Miscellaneous/Palindrome.html":{"ref":"Miscellaneous/Palindrome.html","tf":0.011235955056179775},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0015527950310559005}}}}}}},"w":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.005412719891745603}}}}}}},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.011834319526627219},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717},"Algorithms/TrickySorting.html":{"ref":"Algorithms/TrickySorting.html","tf":0.024390243902439025},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.003205128205128205},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0032701111837802484}}}}}}},"s":{"docs":{},"t":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}},"i":{"docs":{},"n":{"docs":{},"k":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}},"e":{"docs":{},"a":{"docs":{},"f":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.003703703703703704}}},"s":{"docs":{},"t":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}},"r":{"docs":{},"u":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},"a":{"docs":{},"y":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002421307506053269}}}}}}}},"m":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.003703703703703704},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0023584905660377358},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}}},"p":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995}}}},"l":{"docs":{},"i":{"docs":{},"d":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717}}}}},"h":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.010810810810810811},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.008522727272727272},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995}}}}}}},"p":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}},"t":{"docs":{},"r":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}},"o":{"docs":{},"n":{"docs":{"Algorithms/Games.html":{"ref":"Algorithms/Games.html","tf":0.013333333333333334},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.003924133420536298}}}},"i":{"docs":{},"c":{"docs":{},"k":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}},"u":{"docs":{},"d":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}},"e":{"docs":{},"r":{"docs":{},"i":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}}}}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"l":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625}}}}}},"q":{"docs":{},"r":{"docs":{},"t":{"docs":{},"x":{"docs":{},"/":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}}}}}},"u":{"docs":{},"i":{"docs":{},"r":{"docs":{},"r":{"docs":{},"e":{"docs":{},"l":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}}}},"c":{"docs":{},"r":{"docs":{},"a":{"docs":{},"m":{"docs":{},"b":{"docs":{},"l":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}},"o":{"docs":{},"r":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0015527950310559005}}}}},"m":{"docs":{},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}}},"o":{"docs":{},"u":{"docs":{},"p":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}},"p":{"docs":{},"l":{"docs":{},"i":{"docs":{},"t":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}},"f":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717},"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.014218009478672985},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.005145797598627788},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.002616088947024199},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}},"l":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}},"l":{"docs":{},"o":{"docs":{},"w":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476}}}}},"u":{"docs":{},"r":{"docs":{},"t":{"docs":{},"h":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625}}}}}}}}},"o":{"docs":{},"r":{"docs":{},"m":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}},"u":{"docs":{},"r":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"d":{"docs":{},"o":{"docs":{},"m":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}},"o":{"docs":{},"g":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}},"o":{"docs":{},"n":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.011627906976744186}},"l":{"docs":{},"i":{"docs":{},"n":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717}}}}}},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358}}}}},"d":{"docs":{},"d":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}},"u":{"docs":{},"t":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995}}}}},"i":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.005952380952380952},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.009345794392523364},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016}}}}}},"l":{"docs":{},"e":{"docs":{},"a":{"docs":{},"v":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}},"v":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0033222591362126247}}}},"g":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}},"s":{"docs":{},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}}}}}},"g":{"docs":{},"r":{"docs":{},"o":{"docs":{},"u":{"docs":{},"p":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343}}}}},"e":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}}},"e":{"docs":{},"t":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}},"n":{"docs":{},"e":{"docs":{},"r":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0015527950310559005}}}}}},"u":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}},"a":{"docs":{},"d":{"docs":{},"d":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0023584905660377358},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488}}}},"l":{"docs":{"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996}},"l":{"docs":{},"o":{"docs":{},"c":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}},"r":{"docs":{},"r":{"docs":{},"a":{"docs":{},"y":{"docs":{"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576}}}}},"i":{"docs":{},"t":{"docs":{},"h":{"docs":{},"m":{"docs":{},"e":{"docs":{},"t":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995}}}}}}}}},"i":{"docs":{},"r":{"docs":{},"p":{"docs":{},"l":{"docs":{},"a":{"docs":{},"n":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}}},"d":{"docs":{},"e":{"docs":{},"l":{"docs":{},"e":{"docs":{},"t":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995}}}},"i":{"docs":{},"v":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}},"e":{"docs":{},"p":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847}}}}}}},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995}}}}}},"i":{"docs":{},"v":{"docs":{},"i":{"docs":{},"s":{"docs":{},"o":{"docs":{},"r":{"docs":{"Algorithms/Games.html":{"ref":"Algorithms/Games.html","tf":0.02666666666666667},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}},"c":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}},"s":{"docs":{},"t":{"docs":{},"i":{"docs":{},"n":{"docs":{},"c":{"docs":{},"t":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995}}}}}},"r":{"docs":{},"i":{"docs":{},"b":{"docs":{},"u":{"docs":{},"t":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}}}},"o":{"docs":{},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{},"o":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}},"u":{"docs":{},"n":{"docs":{},"g":{"docs":{},"e":{"docs":{},"o":{"docs":{},"n":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}}},"p":{"docs":{},"a":{"docs":{},"t":{"docs":{},"h":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0047169811320754715},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002840909090909091},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703}}}},"r":{"docs":{},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{},"e":{"docs":{},"l":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}}}}},"t":{"docs":{},"i":{"docs":{},"t":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.002616088947024199},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0033222591362126247}}}}}},"c":{"docs":{},"i":{"docs":{},"f":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358}}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995}}}}},"l":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"r":{"docs":{},"o":{"docs":{},"m":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.002616088947024199}}}}}}}}}},"o":{"docs":{},"s":{"docs":{},"s":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476}}}},"w":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488}},"x":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}},"e":{"docs":{},"r":{"docs":{},"m":{"docs":{},"u":{"docs":{},"t":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.003205128205128205}},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"/":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.003205128205128205}}}}}}}}}}}},"f":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}},"i":{"docs":{},"z":{"docs":{},"z":{"docs":{},"a":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}},"r":{"docs":{},"e":{"docs":{},"d":{"docs":{},"i":{"docs":{},"c":{"docs":{},"t":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}},"o":{"docs":{},"f":{"docs":{},"i":{"docs":{},"t":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"i":{"docs":{},"d":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Miscellaneous/Palindrome.html":{"ref":"Miscellaneous/Palindrome.html","tf":0.011235955056179775},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.003105590062111801}}}}}},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847}}},"i":{"docs":{},"f":{"docs":{},"i":{"docs":{"Miscellaneous/AlienDictionary.html":{"ref":"Miscellaneous/AlienDictionary.html","tf":0.021739130434782608}}}}}}},"i":{"docs":{},"d":{"docs":{},"e":{"docs":{},"o":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}},"k":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995}},"i":{"docs":{},"l":{"docs":{"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576}}}},"e":{"docs":{},"y":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907}}}},"n":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.001962066710268149},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.0027548209366391185}}}}}}},"t":{"docs":{},"h":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}},"j":{"docs":{},"u":{"docs":{},"m":{"docs":{},"p":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0049382716049382715},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}}}}}},"w":{"docs":{},"a":{"docs":{},"t":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358}}},"y":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.007751937984496124},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.0027548209366391185}}}}},"h":{"docs":{},"e":{"docs":{},"r":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}},"i":{"docs":{},"g":{"docs":{},"g":{"docs":{},"l":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}},"l":{"docs":{},"d":{"docs":{},"c":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}}}},"e":{"docs":{},"d":{"docs":{},"i":{"docs":{},"t":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}},"h":{"docs":{},"o":{"docs":{},"u":{"docs":{},"s":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.002616088947024199},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}}}},"u":{"docs":{},"g":{"docs":{},"l":{"docs":{},"i":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}},"n":{"docs":{},"i":{"docs":{},"q":{"docs":{},"u":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0032701111837802484},"Algorithms/DP/NumSol.html":{"ref":"Algorithms/DP/NumSol.html","tf":0.013888888888888888},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}}}}}}}}}}}}}},"e":{"docs":{},"x":{"docs":{},"p":{"docs":{},"l":{"docs":{},"o":{"docs":{},"r":{"docs":{},"e":{"docs":{},"/":{"docs":{},"c":{"docs":{},"h":{"docs":{},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"e":{"docs":{},"/":{"docs":{},"c":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{},"/":{"3":{"0":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.009433962264150943}}},"docs":{}},"docs":{},"m":{"docs":{},"a":{"docs":{},"y":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717},"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488}}}}},"j":{"docs":{},"u":{"docs":{},"n":{"docs":{"Algorithms/DynamicProgramming-IV.html":{"ref":"Algorithms/DynamicProgramming-IV.html","tf":0.00980392156862745},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}},"a":{"docs":{},"n":{"docs":{},"u":{"docs":{},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"/":{"docs":{},"w":{"docs":{},"e":{"docs":{},"e":{"docs":{},"k":{"docs":{},"l":{"docs":{},"i":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006},"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}}}}}}}}}}},"d":{"docs":{},"i":{"docs":{},"s":{"docs":{},"c":{"docs":{},"u":{"docs":{},"s":{"docs":{},"s":{"docs":{},"/":{"docs":{},"g":{"docs":{},"e":{"docs":{},"n":{"docs":{},"e":{"docs":{},"r":{"docs":{"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.003430531732418525},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"v":{"docs":{},"i":{"docs":{},"e":{"docs":{},"w":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.024691358024691357}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"w":{"docs":{},"w":{"docs":{},"w":{"docs":{},".":{"docs":{},"g":{"docs":{},"e":{"docs":{},"e":{"docs":{},"k":{"docs":{},"s":{"docs":{},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"e":{"docs":{},"k":{"docs":{},"s":{"docs":{},".":{"docs":{},"o":{"docs":{},"r":{"docs":{},"g":{"docs":{},"/":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"i":{"docs":{},"m":{"docs":{},"u":{"docs":{},"m":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.007263922518159807},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.01098901098901099}}}}}}}}},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02}}}}},"u":{"docs":{},"m":{"docs":{},"b":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.004842615012106538}}}}}},"x":{"docs":{},"o":{"docs":{},"r":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002421307506053269}}}}},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},"i":{"docs":{},"t":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609}}}}}}}},"t":{"docs":{},"a":{"docs":{},"g":{"docs":{},"/":{"docs":{},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{},"/":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609}}}}}}}}},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},"a":{"docs":{},"y":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678}}}}}}}}}}},"s":{"docs":{},"t":{"docs":{},"o":{"docs":{},"c":{"docs":{},"k":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}}}}}}}}}}}}}}}}}}}}}}},"t":{"docs":{},"e":{"docs":{},"c":{"docs":{},"h":{"docs":{},"i":{"docs":{},"e":{"docs":{},"d":{"docs":{},"e":{"docs":{},"l":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},".":{"docs":{},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"/":{"docs":{},"l":{"docs":{},"o":{"docs":{},"n":{"docs":{},"g":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.005555555555555556}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"m":{"docs":{},"e":{"docs":{},"d":{"docs":{},"i":{"docs":{},"u":{"docs":{},"m":{"docs":{},".":{"docs":{},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"/":{"docs":{},"@":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"f":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"k":{"docs":{},"/":{"docs":{},"b":{"docs":{},"i":{"docs":{},"n":{"docs":{},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"b":{"docs":{},"l":{"docs":{},"o":{"docs":{},"g":{"docs":{},".":{"docs":{},"u":{"docs":{},"s":{"docs":{},"e":{"docs":{},"j":{"docs":{},"o":{"docs":{},"u":{"docs":{},"r":{"docs":{},"n":{"docs":{},"a":{"docs":{},"l":{"docs":{},".":{"docs":{},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"/":{"docs":{},"t":{"docs":{},"o":{"docs":{},"p":{"docs":{"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.002777777777777778}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"e":{"docs":{},"l":{"docs":{},"p":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02}},"e":{"docs":{},"r":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.010752688172043012},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.003205128205128205}},"n":{"docs":{},"c":{"docs":{},"r":{"docs":{},"(":{"0":{"docs":{},",":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.003205128205128205}}}},"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.003205128205128205}},"s":{"docs":{},",":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.003205128205128205}}},":":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.003205128205128205}}}}}}}}}},"s":{"docs":{},".":{"docs":{"DataStructures/LinkedLists/Instructions.html":{"ref":"DataStructures/LinkedLists/Instructions.html","tf":0.019230769230769232}}}}}},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.009433962264150943},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.002890173410404624}},":":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.009433962264150943},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}},"s":{"docs":{},":":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.003125},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358}}},"[":{"docs":{},"i":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625}}},"x":{"docs":{},"]":{"docs":{},"[":{"docs":{},"y":{"docs":{},"]":{"docs":{},":":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358}}}}}}}}}},",":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006}}},".":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006}}}}}}},"r":{"docs":{},"e":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Algorithms/DP/NumSol.html":{"ref":"Algorithms/DP/NumSol.html","tf":0.013888888888888888},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0015527950310559005},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}},".":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.003703703703703704},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907},"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.010101010101010102}}},":":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.008955223880597015},"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062}}},")":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625}}},",":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}}},"a":{"docs":{},"d":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0144},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0125}},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0064},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.003125}}}}}}},":":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0096}}},"a":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0032}},",":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016}}},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016}},":":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016}}}}}}}},":":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016}}}},"b":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016}},")":{"docs":{},":":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016}}}},":":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0032}}}}},"p":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0032},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.008403361344537815},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":10.0234375},"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.007707129094412331},"Tricks/":{"ref":"Tricks/","tf":0.004608294930875576}},":":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.008403361344537815},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0078125},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}}},"q":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016},"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.008403361344537815},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0140625},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414},"Tricks/":{"ref":"Tricks/","tf":0.018433179723502304}},".":{"docs":{},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"p":{"docs":{},")":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.008403361344537815},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0140625},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}}}}},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"(":{"docs":{},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"p":{"docs":{},",":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0032},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.012605042016806723},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0109375},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828},"Tricks/":{"ref":"Tricks/","tf":0.004608294930875576}}}}}}}}}}}}}}}}}},".":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.003125}},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"(":{"0":{"docs":{},",":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907}}}},"docs":{}}}}}}}}}},",":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.00625}}},"[":{"0":{"docs":{},"]":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625}},":":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625}}}}},"docs":{},"d":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},"]":{"docs":{},")":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625}}}}}}}}}}}}}}},"docs":{}},"p":{"docs":{},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625}}}}}},")":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}},"u":{"docs":{},"r":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625}}}}}}}},"a":{"docs":{},"s":{"docs":{},"n":{"docs":{},"'":{"docs":{},"t":{"docs":{"DataStructures/StacksAndQueues/":{"ref":"DataStructures/StacksAndQueues/","tf":0.01020408163265306}}}}},"h":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02},"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.010101010101010102}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},")":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809}}}}}}},"c":{"docs":{},"y":{"docs":{},"c":{"docs":{},"l":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0032}}}}}}}}}}}}},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"l":{"docs":{},"e":{"docs":{},":":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006}}},"[":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"]":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0027063599458728013}},":":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006}}}}}}}}}}}}}}},"r":{"docs":{},"m":{"docs":{},"o":{"docs":{},"n":{"docs":{},"i":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609}}}}}},"d":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}},"n":{"docs":{},"d":{"docs":{},"l":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},".":{"docs":{"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877}}}}}}},".":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}},"b":{"docs":{},"i":{"docs":{},"t":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678}}}}},"t":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}},"p":{"docs":{},"p":{"docs":{},"i":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}},"n":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}},"e":{"docs":{},"n":{"docs":{},".":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}},"l":{"docs":{},"f":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},":":{"docs":{"DataStructures/StacksAndQueues/":{"ref":"DataStructures/StacksAndQueues/","tf":0.01020408163265306}}}}},"t":{"docs":{"DataStructures/Arrays/SlidingWindow.html":{"ref":"DataStructures/Arrays/SlidingWindow.html","tf":0.009174311926605505},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809}}},"s":{"docs":{},"t":{"docs":{},"o":{"docs":{},"g":{"docs":{},"r":{"docs":{},"a":{"docs":{},"m":{"docs":{},"/":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717}}}}}}}}}},"g":{"docs":{},"h":{"docs":{},"e":{"docs":{},"r":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}},"r":{"docs":{},"e":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}},"o":{"docs":{},"r":{"docs":{},"i":{"docs":{},"z":{"docs":{},"o":{"docs":{},"n":{"docs":{},"t":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{},"y":{"docs":{},".":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847}}}}},"c":{"docs":{},"u":{"docs":{},"t":{"docs":{},"s":{"docs":{},":":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}}}}}}}}}},"p":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.003125},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.005509641873278237}},"s":{"docs":{},",":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625}}},"[":{"docs":{},"p":{"docs":{},"o":{"docs":{},"s":{"docs":{},"]":{"docs":{},":":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.0027548209366391185}}}}}}}}},",":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.0027548209366391185}}},".":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.0027548209366391185}}}},"m":{"docs":{},"e":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}},"u":{"docs":{},"s":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.001962066710268149}},"e":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}},"l":{"docs":{},"d":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.03296703296703297}},",":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}}}},":":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}},"_":{"docs":{},"s":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},"e":{"docs":{},"d":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{},",":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}},"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},"i":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"l":{"docs":{"./":{"ref":"./","tf":0.05263157894736842}}},"n":{"docs":{},"t":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0015527950310559005}},"i":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016}}}}}},"r":{"docs":{},"u":{"docs":{},"c":{"docs":{},"t":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":5.010752688172043},"DataStructures/LinkedLists/Instructions.html":{"ref":"DataStructures/LinkedLists/Instructions.html","tf":10.01923076923077}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},":":{"docs":{"./":{"ref":"./","tf":0.02631578947368421},"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02}}},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}}}}},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.004842615012106538},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00404040404040404},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995},"Algorithms/DP/NumSol.html":{"ref":"Algorithms/DP/NumSol.html","tf":0.013888888888888888},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},".":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}}}}}}},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.003430531732418525},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Tricks/":{"ref":"Tricks/","tf":0.004608294930875576}},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}}}}}}}}},"p":{"docs":{},"i":{"docs":{},"r":{"docs":{"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.010101010101010102}}}}},"i":{"docs":{},"d":{"docs":{"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062}}}},"u":{"docs":{},"r":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}}},"t":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703}},"r":{"docs":{},"o":{"docs":{},"d":{"docs":{},"u":{"docs":{},"c":{"docs":{},"t":{"docs":{"./":{"ref":"./","tf":10.026315789473685}}}}}}}},":":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.009433962264150943},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.007263922518159807},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.008955223880597015},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.005847953216374269},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.003703703703703704},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.009433962264150943},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.005412719891745603},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847},"DataStructures/Trees/NumTrees.html":{"ref":"DataStructures/Trees/NumTrees.html","tf":0.008849557522123894},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.008403361344537815},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00404040404040404},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.00625},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.008522727272727272},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.010810810810810811},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.010291595197255575},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488},"Algorithms/DP/NumSol.html":{"ref":"Algorithms/DP/NumSol.html","tf":0.013888888888888888},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.009259259259259259},"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.013888888888888888},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.0027548209366391185},"Algorithms/DynamicProgramming-IV.html":{"ref":"Algorithms/DynamicProgramming-IV.html","tf":0.00980392156862745},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.006644518272425249},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.004658385093167702},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.00674373795761079}}},")":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.007263922518159807},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.011940298507462687},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0032},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.007075471698113208},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.008403361344537815},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0078125},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002840909090909091},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.00641025641025641},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.008108108108108109},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.008576329331046312},"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.010101010101010102},"Algorithms/Games.html":{"ref":"Algorithms/Games.html","tf":0.013333333333333334},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.006172839506172839},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.0027548209366391185},"Algorithms/DynamicProgramming-IV.html":{"ref":"Algorithms/DynamicProgramming-IV.html","tf":0.00980392156862745},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0033222591362126247},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0038535645472061657}}},"e":{"docs":{},"r":{"docs":{},"v":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.007263922518159807},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":10.033222591362126}},"i":{"docs":{},"e":{"docs":{},"w":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}}},"a":{"docs":{},"l":{"docs":{},"/":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},".":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{},"e":{"docs":{},"s":{"docs":{},"(":{"docs":{},")":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}}}}}}}}},"/":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0049833887043189366},"Tricks/":{"ref":"Tricks/","tf":0.004608294930875576}}},":":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.02159468438538206}}},"[":{"0":{"docs":{},"]":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}},"1":{"docs":{},":":{"docs":{},"]":{"docs":{},":":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}}}},"docs":{},"s":{"docs":{},"]":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}},"[":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"]":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}}}}}}}}}}}},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"t":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717}}}}}},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":5}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},".":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062}}}}}}}}},"s":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0033222591362126247}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"/":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0033222591362126247}}}}}}}}}}},"c":{"docs":{},"h":{"docs":{},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0015527950310559005}}}}}}},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.02631578947368421}}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717}}}}},"g":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002840909090909091},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.001962066710268149}},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}},",":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0023584905660377358},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.005952380952380952},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.01680672268907563},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00808080808080808},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.015748031496062992},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.00625},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0049382716049382715},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.003205128205128205},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.013513513513513514},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.010101010101010102},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.006172839506172839},"Algorithms/DynamicProgramming-IV.html":{"ref":"Algorithms/DynamicProgramming-IV.html","tf":0.00980392156862745},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.004816955684007707}}},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},")":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358}}}}}}}}}}},"b":{"docs":{},"u":{"docs":{},"c":{"docs":{},"k":{"docs":{},"e":{"docs":{},"t":{"docs":{},")":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.00641025641025641}}},"[":{"2":{"docs":{},":":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.003205128205128205}}},"]":{"docs":{},")":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.003205128205128205}}}}},"docs":{}}}}}}}}},"[":{"docs":{},"]":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703}}}},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703}}}},"i":{"docs":{},"n":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703}}}}},"u":{"docs":{},"i":{"docs":{},"t":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.0027548209366391185},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0015527950310559005}}}}}},"c":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"s":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002421307506053269},"DataStructures/Trees/NumTrees.html":{"ref":"DataStructures/Trees/NumTrees.html","tf":0.008849557522123894},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.005681818181818182},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995}}}}}}}}}},"l":{"docs":{},"u":{"docs":{},"d":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002421307506053269},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002840909090909091},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.003205128205128205},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.0027548209366391185},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.003105590062111801}},"e":{"docs":{},"d":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.00641025641025641}},":":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.003205128205128205}}}}}}},"/":{"docs":{},"e":{"docs":{},"x":{"docs":{},"c":{"docs":{},"l":{"docs":{},"u":{"docs":{},"d":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062}}}}}}}}}}}}},"o":{"docs":{},"m":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.015748031496062992},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"[":{"docs":{},"n":{"docs":{},"]":{"docs":{},".":{"docs":{},"r":{"docs":{},"e":{"docs":{},"m":{"docs":{},"o":{"docs":{},"v":{"docs":{},"e":{"docs":{},"(":{"docs":{},"c":{"docs":{},")":{"docs":{"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.007874015748031496}}}}}}}}}}}},":":{"docs":{"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.007874015748031496}}}},"e":{"docs":{},"i":{"docs":{},"]":{"docs":{},".":{"docs":{},"r":{"docs":{},"e":{"docs":{},"m":{"docs":{},"o":{"docs":{},"v":{"docs":{},"e":{"docs":{},"(":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},")":{"docs":{"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.007874015748031496}}}}}}}}}}}}}}},":":{"docs":{"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.007874015748031496}}}}}}},"p":{"docs":{},"]":{"docs":{},".":{"docs":{},"a":{"docs":{},"d":{"docs":{},"d":{"docs":{},"(":{"docs":{},"c":{"docs":{},")":{"docs":{"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.015748031496062992}}}}}}}}}}}}}}}}}},"f":{"docs":{},"'":{"docs":{},")":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.004842615012106538},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0027063599458728013},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0033222591362126247}},",":{"docs":{"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.016216216216216217},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0023584905660377358},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}},"}":{"docs":{"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406}}}}},"o":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00404040404040404}},"[":{"docs":{},"l":{"docs":{},"]":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}},"a":{"docs":{},"b":{"docs":{},"e":{"docs":{},"l":{"docs":{},"s":{"docs":{},"[":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"]":{"docs":{},"]":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00404040404040404}}}}}}}}}}}}}}}}},"l":{"docs":{},"u":{"docs":{},"e":{"docs":{},"n":{"docs":{},"c":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.023668639053254437},"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.009345794392523364},"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498},"DataStructures/Trees/NumTrees.html":{"ref":"DataStructures/Trees/NumTrees.html","tf":0.008849557522123894},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.003125},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.003205128205128205},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.003105590062111801},"Tricks/":{"ref":"Tricks/","tf":0.004608294930875576}},":":{"docs":{"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.009345794392523364}}},"[":{"docs":{},"'":{"docs":{},"i":{"docs":{},"'":{"docs":{},"]":{"docs":{"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.009345794392523364}}}}},"j":{"docs":{},"'":{"docs":{},"]":{"docs":{"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.009345794392523364}}}}},"k":{"docs":{},"'":{"docs":{},"]":{"docs":{"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.009345794392523364}}}}}},"i":{"docs":{},"]":{"docs":{"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.009345794392523364}}}},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},",":{"docs":{"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.009345794392523364}}}}}}}}}}}}},".":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"(":{"docs":{},"s":{"docs":{},"_":{"docs":{},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{"DataStructures/Trees/NumTrees.html":{"ref":"DataStructures/Trees/NumTrees.html","tf":0.008849557522123894}}}}}}}}}}}}}}},")":{"docs":{},")":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.003125}}}},",":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.003125},"Miscellaneous/Palindrome.html":{"ref":"Miscellaneous/Palindrome.html","tf":0.011235955056179775}}},"]":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625}}}},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"l":{"docs":{},"y":{"docs":{},".":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}}}}}}}}}}},"i":{"docs":{},"c":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002840909090909091},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.0027548209366391185}}}}},"i":{"docs":{},"t":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358}},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016}}}}}}}},"i":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006}},"a":{"docs":{},"l":{"docs":{},"i":{"docs":{},"z":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},":":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}}}}}}},"_":{"docs":{},"s":{"docs":{},"t":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0049382716049382715}},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},",":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358}}}}}}}}}}},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":5.011111111111111},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.012448132780082987}},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},",":{"docs":{"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996}}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},",":{"docs":{"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996}}},")":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},",":{"docs":{"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996}}}}}}}}},")":{"docs":{},":":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625}}}}}}}},"o":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},",":{"docs":{"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},",":{"docs":{"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996}}}}}}}}},":":{"docs":{"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{},"a":{"docs":{},"l":{"docs":{},",":{"docs":{"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996}}}}}}}}}}},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"1":{"docs":{},",":{"docs":{"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996}}}},"2":{"docs":{},",":{"docs":{"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996}}}},"docs":{}}}}}},":":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004149377593360996}}}}}}}},"p":{"docs":{},"u":{"docs":{},"t":{"docs":{"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004149377593360996},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002840909090909091},"Algorithms/":{"ref":"Algorithms/","tf":0.024691358024691357},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}}},"h":{"docs":{},"e":{"docs":{},"r":{"docs":{},"i":{"docs":{},"t":{"docs":{"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576}}}}}}},"j":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625}}}}}},"g":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002840909090909091}}},"w":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{},"s":{"docs":{},".":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358}}}}}}}},"n":{"docs":{},"e":{"docs":{},"r":{"docs":{"Algorithms/Games.html":{"ref":"Algorithms/Games.html","tf":0.013333333333333334},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}},"a":{"docs":{},"l":{"docs":{},"i":{"docs":{},"d":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0015527950310559005}}}}}}}},"m":{"docs":{},"p":{"docs":{},"l":{"docs":{},"e":{"docs":{},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.021505376344086023},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609}},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},":":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002840909090909091}}}}}}}}}}}}},"i":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002421307506053269},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002840909090909091}}}},"r":{"docs":{},"o":{"docs":{},"v":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.010752688172043012},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}}},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.01},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.014925373134328358},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0048},"DataStructures/LinkedLists/Instructions.html":{"ref":"DataStructures/LinkedLists/Instructions.html","tf":0.019230769230769232},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0040595399188092015},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.01092896174863388},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004149377593360996},"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.008928571428571428},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.02100840336134454},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00808080808080808},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.015748031496062992},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0140625},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.005681818181818182},"Algorithms/TrickySorting.html":{"ref":"Algorithms/TrickySorting.html","tf":0.04878048780487805},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.009876543209876543},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.003205128205128205},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828},"Tricks/":{"ref":"Tricks/","tf":0.018433179723502304}}}}},"e":{"docs":{},"r":{"docs":{},"f":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.006872852233676976}}}}}}}},":":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}},"a":{"docs":{},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002840909090909091}}}}}}}}},"m":{"docs":{},"u":{"docs":{},"t":{"docs":{},"a":{"docs":{},"b":{"docs":{},"l":{"docs":{},"e":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995}}}}}}}}},"e":{"docs":{},"d":{"docs":{},"i":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"l":{"docs":{},"y":{"docs":{},".":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0015527950310559005}}}}}}}}}}}}},",":{"docs":{"DataStructures/StacksAndQueues/":{"ref":"DataStructures/StacksAndQueues/","tf":0.01020408163265306},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.009685230024213076},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.01},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.005970149253731343},"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.010810810810810811},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.005847953216374269},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004149377593360996},"DataStructures/Trees/NumTrees.html":{"ref":"DataStructures/Trees/NumTrees.html","tf":0.008849557522123894},"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0046875},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.010101010101010102},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0049833887043189366},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.007763975155279503},"Miscellaneous/AlienDictionary.html":{"ref":"Miscellaneous/AlienDictionary.html","tf":0.043478260869565216},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.005780346820809248},"Tricks/":{"ref":"Tricks/","tf":0.004608294930875576}}},")":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002421307506053269},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414},"Tricks/":{"ref":"Tricks/","tf":0.004608294930875576}},":":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005},"DataStructures/Trees/NumTrees.html":{"ref":"DataStructures/Trees/NumTrees.html","tf":0.008849557522123894}}},")":{"docs":{"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.010810810810810811},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016}}}},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.007407407407407408},"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.003125},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"Algorithms/Games.html":{"ref":"Algorithms/Games.html","tf":0.013333333333333334},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},".":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002421307506053269},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}}}}},"v":{"docs":{},"e":{"docs":{},":":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.003703703703703704}}},")":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.017964071856287425}}},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"1":{"docs":{},")":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.003703703703703704}}}},"2":{"docs":{},",":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.003703703703703704}}}},"docs":{},",":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.003703703703703704}}}}}}}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"a":{"docs":{},"v":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.007407407407407408}},"e":{"docs":{},"s":{"docs":{},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{},"r":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},".":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},")":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.003703703703703704}}}}}}}}}}}}}}}}}}}}},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"0":{"docs":{},")":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.003703703703703704}}}},"docs":{}}}}}},"[":{"0":{"docs":{},"]":{"docs":{},":":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.003703703703703704}}}}},"docs":{}}}}}}}},"s":{"docs":{},"i":{"docs":{},"m":{"docs":{},"i":{"docs":{},"l":{"docs":{},"a":{"docs":{},"r":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.011111111111111112}}}}}}}}}}}}},"o":{"docs":{},"r":{"docs":{},"(":{"docs":{},"g":{"docs":{},"e":{"docs":{},"n":{"docs":{},"e":{"docs":{},"r":{"docs":{},"a":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},")":{"docs":{"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.009478672985781991}}}}}}}}}}}}},",":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625}}}}}}}},"m":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.003205128205128205},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.001962066710268149},"Tricks/":{"ref":"Tricks/","tf":0.004608294930875576}},":":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Tricks/":{"ref":"Tricks/","tf":0.004608294930875576}}},"]":{"docs":{},")":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}},"s":{"docs":{},",":{"docs":{"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062}}}},")":{"docs":{},")":{"docs":{"Tricks/":{"ref":"Tricks/","tf":0.004608294930875576}}}},"[":{"1":{"docs":{},":":{"docs":{},"]":{"docs":{"Tricks/":{"ref":"Tricks/","tf":0.004608294930875576}}}},"]":{"docs":{},")":{"docs":{},"}":{"docs":{"Tricks/":{"ref":"Tricks/","tf":0.004608294930875576}}}}}},"docs":{}}}},"h":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002421307506053269}}},"'":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.005970149253731343},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.003430531732418525},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.007751937984496124},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.006211180124223602},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.004816955684007707}}},".":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0015527950310559005},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006}}}}}},")":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847}}},"(":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},")":{"docs":{},":":{"docs":{"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996}}}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},")":{"docs":{"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},")":{"docs":{"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996}}}}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"e":{"docs":{},"r":{"docs":{},"a":{"docs":{},"r":{"docs":{},"y":{"docs":{},"/":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}}}}}}}},",":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0015527950310559005}}}},"s":{"docs":{},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},"(":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},",":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.01775147928994083}}}}}}}}}}}}}}},"e":{"docs":{},"s":{"docs":{},".":{"docs":{"DataStructures/Trees/NumTrees.html":{"ref":"DataStructures/Trees/NumTrees.html","tf":0.008849557522123894}}}}}}},",":{"docs":{"DataStructures/LinkedLists/Instructions.html":{"ref":"DataStructures/LinkedLists/Instructions.html","tf":0.019230769230769232},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"i":{"docs":{},"d":{"docs":{},"b":{"docs":{},"s":{"docs":{},"t":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006}}}}}}}}}}}}}}}},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"s":{"docs":{},"i":{"docs":{},"n":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847}}}}}}}}}}}}}}},"b":{"docs":{},"i":{"docs":{},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.005952380952380952}}}}}}}}}}}}}}}}},"l":{"docs":{},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.005681818181818182}},"/":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002840909090909091}}},"s":{"docs":{},"/":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002840909090909091}}}}}}}},"n":{"docs":{},"'":{"docs":{},"t":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}},"a":{"docs":{},"l":{"docs":{},"i":{"docs":{},"e":{"docs":{},"n":{"docs":{},"s":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{},"e":{"docs":{},"d":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Miscellaneous/AlienDictionary.html":{"ref":"Miscellaneous/AlienDictionary.html","tf":0.021739130434782608}}}}}}}}}}}}}}}}}}},"o":{"docs":{},"n":{"docs":{},"e":{"docs":{},"e":{"docs":{},"d":{"docs":{},"i":{"docs":{},"t":{"docs":{},"d":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}}}}}}}}}}}}}}}}}}},"/":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717}}},"]":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717},"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.016216216216216217},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.006872852233676976},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0015527950310559005}},",":{"docs":{"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406}}},"[":{"docs":{},"c":{"docs":{},"o":{"docs":{},"l":{"docs":{"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.010810810810810811}}}}}}},"d":{"docs":{},"e":{"docs":{},"a":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847},"Algorithms/Games.html":{"ref":"Algorithms/Games.html","tf":0.013333333333333334},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},".":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0015527950310559005}}},":":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.0027548209366391185}}}},"n":{"docs":{},"t":{"docs":{},"i":{"docs":{},"f":{"docs":{},"i":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0015527950310559005}}}}}}}},"(":{"docs":{},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},")":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016}}}}}}},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},")":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016}}}}}}}},"l":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}}}},"'":{"docs":{},"v":{"docs":{"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406}}}},"e":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995}},".":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0032},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995}}}},"i":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098},"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":3.333333333333333},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}},"i":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":3.333333333333333}},"/":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0023584905660377358},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625},"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.010101010101010102},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.003924133420536298},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.0027548209366391185},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}},"/":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0023584905660377358},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.007874015748031496},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.003205128205128205},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.010464355788096796},"Algorithms/DP/NumSol.html":{"ref":"Algorithms/DP/NumSol.html","tf":0.013888888888888888},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.005509641873278237},"Miscellaneous/Palindrome.html":{"ref":"Miscellaneous/Palindrome.html","tf":0.011235955056179775},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}},",":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}},"v":{"docs":{"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576},"Algorithms/DynamicProgramming-IV.html":{"ref":"Algorithms/DynamicProgramming-IV.html","tf":3.3431372549019605}},"/":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.007874015748031496},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.001962066710268149},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.0027548209366391185}},"d":{"docs":{},"i":{"docs":{},"s":{"docs":{},"c":{"docs":{},"u":{"docs":{},"s":{"docs":{},"s":{"docs":{},"/":{"5":{"4":{"1":{"1":{"7":{"docs":{},"/":{"docs":{},"c":{"docs":{},"l":{"docs":{},"e":{"docs":{},"a":{"docs":{},"n":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}}}}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}}},"_":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}},"e":{"docs":{},")":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}},":":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}}}},":":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}}}}},"f":{"docs":{},"(":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.00641025641025641}},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{},"r":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.005405405405405406}}}}}},"i":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}},"n":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703}}},"f":{"docs":{},"a":{"docs":{},"i":{"docs":{},"l":{"docs":{},"u":{"docs":{},"r":{"docs":{},"e":{"docs":{},"_":{"docs":{},"b":{"docs":{},"a":{"docs":{},"s":{"docs":{},"e":{"docs":{},"_":{"docs":{},"c":{"docs":{},"a":{"docs":{},"s":{"docs":{},"e":{"docs":{},")":{"docs":{},":":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"u":{"docs":{},"c":{"docs":{},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{},"_":{"docs":{},"b":{"docs":{},"a":{"docs":{},"s":{"docs":{},"e":{"docs":{},"_":{"docs":{},"c":{"docs":{},"a":{"docs":{},"s":{"docs":{},"e":{"docs":{},")":{"docs":{},":":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}}}}}}}}}}}}}}}}}}}}},":":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.0027548209366391185}}},".":{"docs":{},"e":{"docs":{},".":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"Algorithms/Games.html":{"ref":"Algorithms/Games.html","tf":0.013333333333333334},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062}}}}},"l":{"docs":{},"l":{"docs":{},"u":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.010101010101010102}}}}}}}},"+":{"1":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}},")":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}},"docs":{}},"r":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"p":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0015527950310559005}}}}}}}}}}},"l":{"1":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0064}},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0032}}}}}},":":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0048}}},"_":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016}}}}}},")":{"docs":{"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996}}},",":{"docs":{"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996}}}},"2":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0048},"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996}},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016}}}}}},":":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0064}}},"_":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0032}}}}}},")":{"docs":{"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.009478672985781991}}}},"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.009433962264150943},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.013531799729364006},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004149377593360996},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0046875},"Miscellaneous/Palindrome.html":{"ref":"Miscellaneous/Palindrome.html","tf":0.02247191011235955},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}},"o":{"docs":{},"c":{"docs":{},"a":{"docs":{},"l":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00404040404040404},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.016483516483516484}},"h":{"docs":{},"o":{"docs":{},"s":{"docs":{},"t":{"docs":{},":":{"4":{"0":{"0":{"0":{"docs":{"./":{"ref":"./","tf":0.02631578947368421}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}}}}}},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},")":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717}}}}}}}},"k":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358}},"/":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358}}}}},"o":{"docs":{},"k":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.004842615012106538},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.003703703703703704},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202},"Miscellaneous/AlienDictionary.html":{"ref":"Miscellaneous/AlienDictionary.html","tf":0.021739130434782608},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414},"Tricks/":{"ref":"Tricks/","tf":0.004608294930875576}}},"p":{"docs":{"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016},"DataStructures/LinkedLists/Instructions.html":{"ref":"DataStructures/LinkedLists/Instructions.html","tf":0.019230769230769232},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.003703703703703704},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00404040404040404},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002840909090909091},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.00641025641025641},"Algorithms/Games.html":{"ref":"Algorithms/Games.html","tf":0.02666666666666667},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.002616088947024199},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.011627906976744186},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.0027548209366391185},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.002890173410404624},"Tricks/":{"ref":"Tricks/","tf":0.004608294930875576}},"s":{"docs":{},":":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002840909090909091}}}},")":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.003430531732418525}}},".":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488}}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},":":{"docs":{"Tricks/":{"ref":"Tricks/","tf":0.004608294930875576}}}}}}}},"=":{"docs":{},"l":{"docs":{},"a":{"docs":{},"s":{"docs":{},"t":{"docs":{"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406}}}}}}},"l":{"docs":{"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.010810810810810811}},")":{"docs":{"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406}}},",":{"docs":{"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406}}},"[":{"docs":{},"c":{"docs":{},"_":{"docs":{},"l":{"docs":{},"]":{"docs":{"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406}}}}},"o":{"docs":{},"l":{"docs":{},"]":{"docs":{},")":{"docs":{"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406}}}}}}}}},"r":{"docs":{"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.021621621621621623}},"[":{"docs":{},"c":{"docs":{},"_":{"docs":{},"r":{"docs":{},"]":{"docs":{"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406}}}}},"o":{"docs":{},"l":{"docs":{},"]":{"docs":{"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406}}}}}}}},"n":{"docs":{},"g":{"docs":{"DataStructures/LinkedLists/Instructions.html":{"ref":"DataStructures/LinkedLists/Instructions.html","tf":0.019230769230769232},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358},"Miscellaneous/Palindrome.html":{"ref":"Miscellaneous/Palindrome.html","tf":0.011235955056179775}},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0023584905660377358},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002840909090909091},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.006872852233676976},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995},"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.005555555555555556}},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"c":{"docs":{},"h":{"docs":{},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343}}}}}}}}}}}}}}}},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"e":{"docs":{},"c":{"docs":{},"u":{"docs":{},"t":{"docs":{},"i":{"docs":{},"v":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0023584905660377358}}}}}}}}}}}}}}}}},"m":{"docs":{},"m":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"s":{"docs":{},"e":{"docs":{},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.008333333333333333}}}}}}}}}}}}}}}}}}}}}}}}},"z":{"docs":{},"i":{"docs":{},"g":{"docs":{},"z":{"docs":{},"a":{"docs":{},"g":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0023584905660377358}}}}}}}}}}}}}},"p":{"docs":{},"a":{"docs":{},"l":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"r":{"docs":{},"o":{"docs":{},"m":{"docs":{},"e":{"docs":{},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"s":{"docs":{},"e":{"docs":{},"q":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.005555555555555556}}}}}}}}}}}}}},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Miscellaneous/Palindrome.html":{"ref":"Miscellaneous/Palindrome.html","tf":0.011235955056179775}}}}}}}}}}}}}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"i":{"docs":{},"d":{"docs":{},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"h":{"docs":{},"e":{"docs":{},"s":{"docs":{},"e":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0015527950310559005}}}}}}}}}}}}}}}}}}}}}}}}}},"r":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}}}},"w":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"m":{"docs":{},"o":{"docs":{},"n":{"docs":{},"a":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0027063599458728013}}}}}}}}}}}}}}}}}}}}}}}},"r":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0033222591362126247}},"=":{"docs":{},"=":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},")":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}}}}}}}}}}}}},":":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}}}},"t":{"docs":{"DataStructures/Trees/NumTrees.html":{"ref":"DataStructures/Trees/NumTrees.html","tf":0.008849557522123894},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}},"g":{"docs":{},"i":{"docs":{},"c":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002840909090909091}}}}},"s":{"docs":{},"e":{"docs":{"Algorithms/Games.html":{"ref":"Algorithms/Games.html","tf":0.05333333333333334}}}}},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{},"u":{"docs":{},"a":{"docs":{},"g":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.010752688172043012}}}}}}},"s":{"docs":{},"t":{"docs":{"DataStructures/StacksAndQueues/":{"ref":"DataStructures/StacksAndQueues/","tf":0.01020408163265306},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.005970149253731343},"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.016216216216216217},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.011695906432748537},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0032},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.002616088947024199},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828},"Tricks/":{"ref":"Tricks/","tf":0.009216589861751152}},":":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343}}},".":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016}}},"_":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016}}}}}}}}}}},"d":{"docs":{},"a":{"docs":{},"y":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625}}}}},"p":{"docs":{},"o":{"docs":{},"w":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.006872852233676976}},"e":{"docs":{},"r":{"docs":{},"]":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488}}}}}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},",":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}}}}}}}}}},"/":{"docs":{},"l":{"docs":{},"a":{"docs":{},"s":{"docs":{},"t":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}}},"r":{"docs":{},"g":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.001962066710268149},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}},"d":{"docs":{},"i":{"docs":{},"v":{"docs":{},"i":{"docs":{},"s":{"docs":{},"i":{"docs":{},"b":{"docs":{},"l":{"docs":{},"e":{"docs":{},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609}}}}}}}}}}}}}}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{},"l":{"docs":{},"e":{"docs":{},"a":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717}}}}}}}}}}}}}}}}}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"b":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Algorithms/TrickySorting.html":{"ref":"Algorithms/TrickySorting.html","tf":0.024390243902439025}}}}}}}}}}}}}},"t":{"docs":{},"i":{"docs":{},"m":{"docs":{},"e":{"docs":{},"f":{"docs":{},"r":{"docs":{},"o":{"docs":{},"m":{"docs":{},"d":{"docs":{},"i":{"docs":{},"g":{"docs":{},"i":{"docs":{},"t":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.003205128205128205}}}}}}}}}}}}}}}}}}}}}}}},"r":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}},"m":{"docs":{},"b":{"docs":{},"d":{"docs":{},"a":{"docs":{"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.009345794392523364},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343},"Algorithms/TrickySorting.html":{"ref":"Algorithms/TrickySorting.html","tf":0.024390243902439025},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.006644518272425249},"Tricks/":{"ref":"Tricks/","tf":0.009216589861751152}},".":{"docs":{"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.009345794392523364},"Tricks/":{"ref":"Tricks/","tf":0.004608294930875576}}}}}}},"b":{"docs":{},"e":{"docs":{},"l":{"docs":{},"/":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}},"s":{"docs":{},":":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}},"/":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0033222591362126247}}}}}}},"d":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},",":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625}}},":":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.003125}}}}}}}}},"e":{"docs":{},"v":{"docs":{},"e":{"docs":{},"l":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.010752688172043012},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011976047904191617},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0023584905660377358},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":3.3415300546448083},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0106951871657754},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.003205128205128205}},"w":{"docs":{},"i":{"docs":{},"s":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0023584905660377358},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847}},"e":{"docs":{},",":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809}}}}}}},".":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847}}},"_":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.01092896174863388}}}}}}}}},"n":{"docs":{},"(":{"docs":{},"p":{"docs":{},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"e":{"docs":{},"d":{"docs":{},")":{"docs":{"DataStructures/StacksAndQueues/":{"ref":"DataStructures/StacksAndQueues/","tf":0.01020408163265306}}}}}}}},"o":{"docs":{},"s":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},")":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},")":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}}}}}}}}},"i":{"docs":{},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},")":{"docs":{},")":{"docs":{},":":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}}}}}}}},"a":{"docs":{},"t":{"docs":{},"h":{"docs":{},")":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}}}}},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},")":{"docs":{"DataStructures/Arrays/SlidingWindow.html":{"ref":"DataStructures/Arrays/SlidingWindow.html","tf":0.009174311926605505},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006}}}}}}},"s":{"docs":{},"k":{"docs":{},"s":{"docs":{},")":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}}}}}}},"o":{"docs":{},"p":{"docs":{},"o":{"docs":{},")":{"docs":{"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.007874015748031496}}}}}},"e":{"docs":{},"x":{"docs":{},"t":{"1":{"docs":{},")":{"docs":{"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.002777777777777778}}}},"2":{"docs":{},")":{"docs":{"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.002777777777777778}},")":{"docs":{"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.005555555555555556}}}}},"docs":{}}}},")":{"docs":{},")":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}}}}},"h":{"docs":{},"e":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},")":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.009433962264150943}}},"s":{"docs":{},")":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358}},",":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625}}}},"[":{"0":{"docs":{},"]":{"docs":{},")":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358}}}}},"docs":{}}}}}}},"a":{"docs":{},"p":{"docs":{},")":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.009375}}}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},")":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.009433962264150943},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002421307506053269},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.011834319526627219},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.01},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.005970149253731343},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.005145797598627788},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0030864197530864196},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0038535645472061657}},")":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}},":":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.003205128205128205}}},"]":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.003205128205128205},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}},":":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.00641025641025641}}},",":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}}}}}},"t":{"docs":{},"s":{"docs":{},")":{"docs":{},"]":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"_":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"s":{"docs":{},")":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}}}}}}}}}}}},"r":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},")":{"docs":{},")":{"docs":{},":":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005}}},"]":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.01}}}}}}}}}},"o":{"docs":{},"o":{"docs":{},"m":{"docs":{},"s":{"docs":{},")":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907}}}}}}},"e":{"docs":{},"s":{"docs":{},"u":{"docs":{},"l":{"docs":{},"t":{"docs":{},")":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625}}}}}}}}},"a":{"docs":{},"r":{"docs":{},"r":{"1":{"docs":{},")":{"docs":{"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.009345794392523364}}}},"2":{"docs":{},")":{"docs":{"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.009345794392523364}}}},"3":{"docs":{},")":{"docs":{},":":{"docs":{"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.009345794392523364}}}}},"docs":{},")":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.003205128205128205}}}}},")":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002840909090909091},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488}},":":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488}}}},"[":{"0":{"docs":{},"]":{"docs":{},")":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002840909090909091}}}}},"docs":{}}},"c":{"docs":{},"o":{"docs":{},"l":{"docs":{},"o":{"docs":{},"r":{"docs":{},"s":{"docs":{},")":{"docs":{"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406}}}}}}},"i":{"docs":{},"n":{"docs":{},"s":{"docs":{},")":{"docs":{},")":{"docs":{},":":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.005509641873278237}}}},".":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.0027548209366391185}}}}}}}},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{},"i":{"docs":{},"d":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"s":{"docs":{},")":{"docs":{},":":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703}}}}}}}}}}}}}},"s":{"docs":{},")":{"docs":{"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.010810810810810811},"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.005555555555555556},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.0027548209366391185},"Miscellaneous/Palindrome.html":{"ref":"Miscellaneous/Palindrome.html","tf":0.011235955056179775}},":":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0015527950310559005}}}},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"e":{"docs":{},"[":{"docs":{},"c":{"docs":{},"]":{"docs":{},")":{"docs":{},")":{"docs":{},":":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343}}}},":":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343}}}}}}}}}},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},")":{"docs":{},")":{"docs":{},":":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358}}}}}}}}},"_":{"docs":{},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},")":{"docs":{"DataStructures/Trees/NumTrees.html":{"ref":"DataStructures/Trees/NumTrees.html","tf":0.017699115044247787}},")":{"docs":{},":":{"docs":{"DataStructures/Trees/NumTrees.html":{"ref":"DataStructures/Trees/NumTrees.html","tf":0.008849557522123894}}}}}}}}}},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},")":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.0027548209366391185}},":":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358}}},"]":{"docs":{},":":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.0027548209366391185}}}}},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{},"+":{"1":{"docs":{},"]":{"docs":{},")":{"docs":{},":":{"docs":{"Miscellaneous/AlienDictionary.html":{"ref":"Miscellaneous/AlienDictionary.html","tf":0.021739130434782608}}}}}},"docs":{}}}}}}}},"e":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},"s":{"docs":{},")":{"docs":{},":":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}}}}}}}}}}},"x":{"docs":{},")":{"docs":{},",":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.005847953216374269}}}}},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"v":{"docs":{},"e":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"a":{"docs":{},"v":{"docs":{},"e":{"docs":{},"s":{"docs":{},")":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.003703703703703704}}}}}}}}}}}}}}}}}},"n":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},")":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}}}}}}}},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"s":{"docs":{},")":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0033222591362126247}}}}}}}}}}}},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"u":{"docs":{},"e":{"docs":{},")":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.01092896174863388},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498},"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002840909090909091}}}}}}}},"g":{"docs":{},"r":{"docs":{},"a":{"docs":{},"p":{"docs":{},"h":{"docs":{},")":{"docs":{},")":{"docs":{},":":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476}}},"]":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476}}}}}}}},"i":{"docs":{},"d":{"docs":{},")":{"docs":{},",":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.005681818181818182},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703}}}},"[":{"0":{"docs":{},"]":{"docs":{},")":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.005681818181818182},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703}}}}},"docs":{}}}}}},"v":{"docs":{},"i":{"docs":{},"s":{"docs":{},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{},"d":{"docs":{},")":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.008403361344537815}}}}}}}}},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{},"e":{"docs":{},"s":{"docs":{},")":{"docs":{},"+":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}}}}}}}},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"s":{"docs":{},")":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625}}}}}}}},"b":{"docs":{},"o":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{},")":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358}}},"[":{"0":{"docs":{},"]":{"docs":{},")":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358}}}}},"docs":{}}}}}},"u":{"docs":{},"c":{"docs":{},"k":{"docs":{},"e":{"docs":{},"t":{"docs":{},")":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.009615384615384616}}}}}}}},"l":{"docs":{},"o":{"docs":{},"o":{"docs":{},"m":{"docs":{},"d":{"docs":{},"a":{"docs":{},"y":{"docs":{},")":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}}}}}}}}}},")":{"docs":{},":":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488}}}}},"d":{"docs":{},"p":{"docs":{},")":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}},")":{"docs":{},":":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.0027548209366391185}}}}}}},"o":{"docs":{},"b":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"c":{"docs":{},"l":{"docs":{},"e":{"docs":{},"g":{"docs":{},"r":{"docs":{},"i":{"docs":{},"d":{"docs":{},")":{"docs":{"Algorithms/DP/NumSol.html":{"ref":"Algorithms/DP/NumSol.html","tf":0.013888888888888888}}},"[":{"0":{"docs":{},"]":{"docs":{},")":{"docs":{"Algorithms/DP/NumSol.html":{"ref":"Algorithms/DP/NumSol.html","tf":0.013888888888888888}}}}},"docs":{}}}}}}}}}}}}}}},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.009685230024213076},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.01179245283018868},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.008928571428571428},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.005405405405405406},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.003105590062111801},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}},")":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002421307506053269},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.009433962264150943},"Miscellaneous/Palindrome.html":{"ref":"Miscellaneous/Palindrome.html","tf":0.02247191011235955}},":":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0047169811320754715}}}}}}}},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.009433962264150943},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498},"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0030864197530864196},"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.002777777777777778},"Algorithms/DynamicProgramming-IV.html":{"ref":"Algorithms/DynamicProgramming-IV.html","tf":0.00980392156862745},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}},"e":{"docs":{},":":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}}}}}}},"f":{"docs":{},"t":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002421307506053269},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717},"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":5.0162162162162165},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011976047904191617},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.003703703703703704},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0023584905660377358},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.009472259810554804},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00546448087431694},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.006224066390041493},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Miscellaneous/Palindrome.html":{"ref":"Miscellaneous/Palindrome.html","tf":0.011235955056179775},"Tricks/":{"ref":"Tricks/","tf":0.004608294930875576}},"/":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809}}},",":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.007075471698113208},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0027063599458728013},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}},":":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0023584905660377358}}},".":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006}}},"=":{"docs":{},"n":{"docs":{},"o":{"docs":{},"n":{"docs":{},"e":{"docs":{},",":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0040595399188092015},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}}}}}}}},"_":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},",":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006}}}}},"i":{"docs":{},"n":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006}}}}},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{"DataStructures/Trees/NumTrees.html":{"ref":"DataStructures/Trees/NumTrees.html","tf":0.008849557522123894}}}}}},"d":{"docs":{},"x":{"docs":{"Tricks/":{"ref":"Tricks/","tf":0.009216589861751152}},",":{"docs":{"Tricks/":{"ref":"Tricks/","tf":0.004608294930875576}}},"t":{"docs":{},"o":{"docs":{"Tricks/":{"ref":"Tricks/","tf":0.004608294930875576}}}}}}}}}},"s":{"docs":{},"s":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.007263922518159807},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}},"a":{"docs":{},"v":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.003703703703703704},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0027063599458728013},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}},"e":{"docs":{},"s":{"docs":{},"/":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.003703703703703704},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006}},")":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006}}}},".":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006}}},",":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}},",":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}}},"f":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0023584905660377358},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0027063599458728013},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}},"s":{"docs":{},"i":{"docs":{},"m":{"docs":{},"i":{"docs":{},"l":{"docs":{},"a":{"docs":{},"r":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.003703703703703704}}}}}}}}}}}}}}}},"s":{"docs":{},"t":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}}}}}}}}}}}}}}}}}}},"t":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.008771929824561403},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358}}}}}},"x":{"docs":{},"o":{"docs":{},"g":{"docs":{},"r":{"docs":{},"a":{"docs":{},"p":{"docs":{},"h":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}}}}}}}},"i":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.011834319526627219},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.002777777777777778}},"b":{"docs":{},"r":{"docs":{},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.010752688172043012}}}}}}},"s":{"docs":{},"t":{"2":{"docs":{},")":{"docs":{"Tricks/":{"ref":"Tricks/","tf":0.004608294930875576}}}},"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.010752688172043012},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":5.008},"DataStructures/LinkedLists/Instructions.html":{"ref":"DataStructures/LinkedLists/Instructions.html","tf":0.057692307692307696},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.003703703703703704},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0023584905660377358},"Algorithms/":{"ref":"Algorithms/","tf":0.024691358024691357},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0033222591362126247},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0015527950310559005},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414},"Tricks/":{"ref":"Tricks/","tf":0.027649769585253458}},"s":{"docs":{},".":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.010752688172043012}}},"/":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0048},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625}}},":":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625}}},"[":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"_":{"docs":{},"i":{"docs":{},"d":{"docs":{},"x":{"docs":{},"]":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0048}},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016}}}}}}}}}}}}}}}}},")":{"docs":{"DataStructures/LinkedLists/Instructions.html":{"ref":"DataStructures/LinkedLists/Instructions.html","tf":0.019230769230769232}}},",":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678}}}},"[":{"docs":{},"i":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}},"n":{"docs":{},"t":{"docs":{},"]":{"docs":{},")":{"docs":{"DataStructures/StacksAndQueues/":{"ref":"DataStructures/StacksAndQueues/","tf":0.01020408163265306},"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.018867924528301886},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.015},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.005970149253731343},"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.009345794392523364},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.008298755186721992},"DataStructures/Trees/NumTrees.html":{"ref":"DataStructures/Trees/NumTrees.html","tf":0.008849557522123894},"Algorithms/TrickySorting.html":{"ref":"Algorithms/TrickySorting.html","tf":0.024390243902439025},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.009615384615384616},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.005145797598627788},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0030864197530864196},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.00674373795761079}}},",":{"docs":{"DataStructures/StacksAndQueues/":{"ref":"DataStructures/StacksAndQueues/","tf":0.01020408163265306},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.007263922518159807},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.008955223880597015},"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.018691588785046728},"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004149377593360996},"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.015151515151515152},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.00686106346483705},"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.010101010101010102},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.002890173410404624}}},":":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.008955223880597015},"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.009345794392523364},"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.010810810810810811},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996},"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.005952380952380952},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.007874015748031496},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0046875},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0033222591362126247},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}},"]":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}},"n":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609}}},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"[":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"]":{"docs":{},"]":{"docs":{},":":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.01},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0023584905660377358},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00546448087431694},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.00641025641025641},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0033222591362126247}}},")":{"docs":{"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.011904761904761904},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.006060606060606061},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.015748031496062992},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0046875},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002840909090909091},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703},"Algorithms/DP/NumSol.html":{"ref":"Algorithms/DP/NumSol.html","tf":0.013888888888888888},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.008305647840531562},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}}},",":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.008403361344537815},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.007874015748031496},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0046875},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002840909090909091},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0049833887043189366}}}}}}}},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"]":{"docs":{},"]":{"docs":{},":":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343}}},")":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002840909090909091}}},",":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358}}}}}}}}},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"]":{"docs":{},")":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625}}}}}}}}}}}},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"]":{"docs":{},")":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.011695906432748537},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.0027548209366391185}}},":":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.003703703703703704},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.0027548209366391185},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0015527950310559005}}},",":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358},"Miscellaneous/AlienDictionary.html":{"ref":"Miscellaneous/AlienDictionary.html","tf":0.021739130434782608},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}}}}}}},"b":{"docs":{},"o":{"docs":{},"o":{"docs":{},"l":{"docs":{},"]":{"docs":{},")":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006}}},":":{"docs":{"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.007874015748031496}}}}}}}}},",":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.003205128205128205},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}},".":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0064},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}},"i":{"docs":{},"n":{"docs":{},"s":{"docs":{},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},",":{"docs":{"Tricks/":{"ref":"Tricks/","tf":0.004608294930875576}}}}}}}}}}}}}}}},"/":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0064}}},"_":{"docs":{},"i":{"docs":{},"d":{"docs":{},"x":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016}},")":{"docs":{},")":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016}}}}}}}},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0048}}},"d":{"docs":{},"i":{"docs":{},"g":{"docs":{},"i":{"docs":{},"t":{"docs":{},")":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016}}}}}}}},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{},"_":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},")":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.003125}}}}}}}}}}},")":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0096}}},",":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.008}}},":":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0192},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625}}}}}}},":":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.003205128205128205}}},")":{"docs":{},";":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}},"}":{"docs":{"Tricks/":{"ref":"Tricks/","tf":0.004608294930875576}}}},".":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609}}},",":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}},"m":{"docs":{},"i":{"docs":{},"t":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.009433962264150943},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703}},"/":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002421307506053269}}},",":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}}}},"n":{"docs":{},"e":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002421307506053269},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}},"a":{"docs":{},"r":{"docs":{"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.010101010101010102}}}}},"k":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":5.016},"DataStructures/LinkedLists/Instructions.html":{"ref":"DataStructures/LinkedLists/Instructions.html","tf":0.07692307692307693},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0023584905660377358},"Algorithms/":{"ref":"Algorithms/","tf":0.024691358024691357}}}},"k":{"docs":{},"e":{"docs":{},".":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609}}},":":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}}},"t":{"docs":{},"t":{"docs":{},"l":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358}}}}},"f":{"docs":{},"t":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}},"e":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}},",":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.009433962264150943},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0027063599458728013},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}},"c":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006},"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.002777777777777778}},"a":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0040595399188092015}},"d":{"docs":{},"e":{"docs":{},"e":{"docs":{},"p":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"l":{"docs":{},"e":{"docs":{},"a":{"docs":{},"v":{"docs":{},"e":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006}}}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"(":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"(":{"docs":{},"t":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"1":{"docs":{},")":{"docs":{},",":{"docs":{"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.005555555555555556}}}}},"docs":{}}}}}}}}},"m":{"docs":{"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.005555555555555556}},",":{"docs":{"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.011111111111111112}}}}}}},".":{"docs":{},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{},"m":{"docs":{},"s":{"docs":{},"(":{"docs":{},")":{"docs":{},":":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006}}}}}}}}}},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},".":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},")":{"docs":{"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996}}}}}}}}}}}}}}}}}},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625}},":":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625}}}}}}}},"_":{"docs":{},"h":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0040595399188092015}},",":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006}}},":":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006}}}},"l":{"docs":{},"c":{"docs":{},"a":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0027063599458728013}}}}}},")":{"docs":{"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.009478672985781991}},":":{"docs":{"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996}}},")":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.003125}}}},":":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625}}},"l":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678}}},"s":{"docs":{},"b":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488}}}},"p":{"docs":{},"s":{"docs":{},"(":{"0":{"docs":{},",":{"docs":{"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.005555555555555556}}}},"docs":{},"m":{"docs":{"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.005555555555555556}},",":{"docs":{"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.011111111111111112}}}}}}},"r":{"docs":{},"u":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}},"n":{"docs":{"DataStructures/StacksAndQueues/":{"ref":"DataStructures/StacksAndQueues/","tf":0.01020408163265306},"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.018867924528301886},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.012106537530266344},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.011834319526627219},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.03},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.008955223880597015},"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.021621621621621623},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0048},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.005952380952380952},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.010101010101010102},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.007874015748031496},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.009876543209876543},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.02564102564102564},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.013513513513513514},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.020202020202020204},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.037800687285223365},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.001962066710268149},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.013888888888888888},"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.03333333333333333},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.008264462809917356},"Algorithms/DynamicProgramming-IV.html":{"ref":"Algorithms/DynamicProgramming-IV.html","tf":0.00980392156862745},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0049833887043189366},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.004658385093167702},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.012524084778420038},"Tricks/":{"ref":"Tricks/","tf":0.004608294930875576}},"o":{"docs":{},"t":{"docs":{},"e":{"docs":{"./":{"ref":"./","tf":0.02631578947368421},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.003205128205128205},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}},"s":{"docs":{},".":{"docs":{},"g":{"docs":{},"i":{"docs":{},"t":{"docs":{"./":{"ref":"./","tf":0.02631578947368421}}}}}},":":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358}}}},":":{"docs":{"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.009345794392523364},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006},"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.001962066710268149},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062}}}},"h":{"docs":{"DataStructures/StacksAndQueues/":{"ref":"DataStructures/StacksAndQueues/","tf":0.01020408163265306},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}},")":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809}},",":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809}}}},"i":{"docs":{},"c":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.0027548209366391185}}}},"!":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}},",":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625}}},":":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488}}},";":{"docs":{"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062}}}},"w":{"docs":{"DataStructures/Arrays/SlidingWindow.html":{"ref":"DataStructures/Arrays/SlidingWindow.html","tf":0.009174311926605505},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717},"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},",":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062},"Miscellaneous/Palindrome.html":{"ref":"Miscellaneous/Palindrome.html","tf":0.011235955056179775}}}},"n":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002421307506053269},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0032701111837802484},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}},"e":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0096},"DataStructures/LinkedLists/Instructions.html":{"ref":"DataStructures/LinkedLists/Instructions.html","tf":0.038461538461538464},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.003703703703703704},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.007075471698113208},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.009472259810554804},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0106951871657754},"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.018957345971563982},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.01867219917012448},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062}},":":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.009433962264150943},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0048},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.003205128205128205},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}}},",":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016}}},".":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016}}}}},"d":{"docs":{},"e":{"1":{"docs":{"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.009478672985781991}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996}}}}}}},"v":{"docs":{"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996}}}},":":{"docs":{"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996}}}},"2":{"docs":{"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996}},")":{"docs":{},":":{"docs":{"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996}}}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},")":{"docs":{"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},")":{"docs":{"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996}}}}}}}},"v":{"docs":{"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996}}}},":":{"docs":{"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996}}}},"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0128},"DataStructures/LinkedLists/Instructions.html":{"ref":"DataStructures/LinkedLists/Instructions.html","tf":0.038461538461538464},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.023952095808383235},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.003703703703703704},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.01179245283018868},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.016238159675236806},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.01366120218579235},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0213903743315508},"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.018957345971563982},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.008298755186721992},"DataStructures/Trees/NumTrees.html":{"ref":"DataStructures/Trees/NumTrees.html","tf":0.008849557522123894},"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.015151515151515152},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.008403361344537815},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.014141414141414142},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.015748031496062992},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.005681818181818182},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.003205128205128205},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},".":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016},"DataStructures/LinkedLists/Instructions.html":{"ref":"DataStructures/LinkedLists/Instructions.html","tf":0.019230769230769232},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0047169811320754715},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.006765899864682003},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00546448087431694},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0106951871657754},"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004149377593360996},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},":":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016}}}}}}},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.003703703703703704},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.009433962264150943},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0027063599458728013},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}},":":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0023584905660377358},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00546448087431694}}},")":{"docs":{},")":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00546448087431694}}}},",":{"docs":{"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0047169811320754715},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}},":":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.003703703703703704},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.007075471698113208},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0040595399188092015},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00546448087431694}}},")":{"docs":{},")":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00546448087431694}}}},"]":{"docs":{"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877}}}}}}}},"v":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.007407407407407408},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0047169811320754715},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0040595399188092015},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}},"a":{"docs":{},"l":{"docs":{},")":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.01179245283018868},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0027063599458728013},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0106951871657754}},":":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0023584905660377358}}}},",":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0047169811320754715},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006}}},"]":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006}},")":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006}}}}}}}},"_":{"docs":{},"b":{"docs":{},"e":{"docs":{},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"e":{"docs":{},"_":{"docs":{},"r":{"docs":{},"e":{"docs":{},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016}}}}}}}}}}}}}}},"p":{"docs":{},"o":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}},"s":{"docs":{},"[":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},".":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"]":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}}}}}}}}}}}}}}},"v":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}},"a":{"docs":{},"l":{"docs":{},"s":{"docs":{},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},".":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},")":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}}}}}}}}}}}}}}}}}}}}}}}},"/":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}},":":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.007407407407407408},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.009433962264150943},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.009472259810554804},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.009478672985781991},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004149377593360996},"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625}}},"'":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006}}},"s":{"docs":{},".":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00404040404040404},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}},":":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006}}},"]":{"docs":{},")":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006}}}},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}},",":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.005952380952380952}}}}},"r":{"docs":{},"m":{"docs":{},"a":{"docs":{},"l":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.003205128205128205},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0015527950310559005}},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.003205128205128205}}}}}}}}}}}}}}}}}}},"p":{"docs":{},"m":{"docs":{"./":{"ref":"./","tf":0.02631578947368421}}}},"e":{"docs":{},"e":{"docs":{},"d":{"docs":{"DataStructures/Arrays/SlidingWindow.html":{"ref":"DataStructures/Arrays/SlidingWindow.html","tf":0.009174311926605505},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0064},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.006765899864682003},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00546448087431694},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.006060606060606061},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.003125},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002840909090909091},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.003205128205128205},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"Algorithms/Games.html":{"ref":"Algorithms/Games.html","tf":0.02666666666666667},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0030864197530864196},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.011019283746556474},"Algorithms/DynamicProgramming-IV.html":{"ref":"Algorithms/DynamicProgramming-IV.html","tf":0.00980392156862745},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0033222591362126247},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.003105590062111801},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.002890173410404624}}}},"g":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0040595399188092015},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002840909090909091},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"v":{"docs":{},"e":{"docs":{},",":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002421307506053269}}},".":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}}}}}}},"w":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002421307506053269},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.014150943396226415},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625}},"_":{"docs":{},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.005847953216374269}}}}}},"p":{"docs":{},"a":{"docs":{},"t":{"docs":{},"h":{"docs":{},"_":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.007075471698113208}},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"n":{"docs":{},"e":{"docs":{},"w":{"docs":{},"_":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},")":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0023584905660377358}}}}}}}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0047169811320754715}}}}}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0047169811320754715}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0023584905660377358}}}}}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"v":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0033222591362126247}},"a":{"docs":{},"l":{"docs":{},":":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}}}}}}}}}},"x":{"docs":{},"t":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.008955223880597015},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0112},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.002616088947024199},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717}}}}}}}},":":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717}}},"g":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"e":{"docs":{},"l":{"docs":{},"e":{"docs":{},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717}}}}}}}}}}}}}}}}}}}}}},".":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016}}},"=":{"docs":{},"n":{"docs":{},"o":{"docs":{},"n":{"docs":{},"e":{"docs":{},")":{"docs":{},":":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0064}}}}}}}}},"_":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"t":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.009876543209876543}}}}}}},"p":{"docs":{},"o":{"docs":{},"s":{"docs":{},"i":{"docs":{},"t":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.005405405405405406}}}}}},"e":{"docs":{},"r":{"docs":{},"m":{"docs":{},"u":{"docs":{},"t":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}}}}}}}}}}}}}}}},"i":{"docs":{"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.016042780748663103},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.007874015748031496}},"g":{"docs":{},"h":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476}},"t":{"docs":{},"b":{"docs":{},"o":{"docs":{},"r":{"docs":{"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.010101010101010102}}}}}},":":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476}}}}}},"s":{"docs":{},"t":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"/":{"docs":{"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576}}}}}}}},"t":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.015527950310559006}},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"k":{"docs":{},"d":{"docs":{},"e":{"docs":{},"l":{"docs":{},"a":{"docs":{},"y":{"docs":{},"t":{"docs":{},"i":{"docs":{},"m":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907}}}}}}}}}}}}}}}}}}}}},",":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.006211180124223602}}}},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}},"l":{"docs":{},"i":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.0027548209366391185}}}}},"y":{"docs":{},",":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.0027548209366391185}}},".":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}}}}}}}},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0015527950310559005},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}},":":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.009433962264150943},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0048},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.005952380952380952},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.01680672268907563},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.006060606060606061},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.007874015748031496},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.005405405405405406},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"Algorithms/Games.html":{"ref":"Algorithms/Games.html","tf":0.013333333333333334},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.004629629629629629},"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.016666666666666666},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.0027548209366391185},"Algorithms/DynamicProgramming-IV.html":{"ref":"Algorithms/DynamicProgramming-IV.html","tf":0.00980392156862745},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0038535645472061657}}},"u":{"docs":{},"m":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.009433962264150943},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.01},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717},"DataStructures/Trees/NumTrees.html":{"ref":"DataStructures/Trees/NumTrees.html","tf":0.04424778761061947},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.003205128205128205},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.003430531732418525},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.010309278350515464},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.002616088947024199},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.002890173410404624}},"s":{"1":{"docs":{},":":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717}}}},"2":{"docs":{},":":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717}}}},"docs":{},":":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.009433962264150943},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.007263922518159807},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.01},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.005970149253731343},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004149377593360996},"Algorithms/TrickySorting.html":{"ref":"Algorithms/TrickySorting.html","tf":0.024390243902439025},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.009615384615384616},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.00686106346483705},"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.010101010101010102},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0030864197530864196},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0033222591362126247},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.005780346820809248}}},"[":{"0":{"docs":{},"]":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.004629629629629629},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}},"1":{"docs":{},":":{"docs":{},"]":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}},"]":{"docs":{},")":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}}},"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}},"p":{"docs":{},"]":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.009433962264150943}},",":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.009433962264150943}}}},"o":{"docs":{},"s":{"docs":{},"i":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"]":{"docs":{},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703}}}}}}}}}}},"i":{"docs":{},"v":{"docs":{},"o":{"docs":{},"t":{"docs":{},"_":{"docs":{},"i":{"docs":{},"d":{"docs":{},"x":{"docs":{},"]":{"docs":{"Tricks/":{"ref":"Tricks/","tf":0.004608294930875576}},",":{"docs":{"Tricks/":{"ref":"Tricks/","tf":0.004608294930875576}}}}}}}}}}}}},"z":{"docs":{},"]":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.009433962264150943}},",":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.009433962264150943}}}}},"j":{"docs":{},"]":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},")":{"docs":{},"]":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005}},")":{"docs":{},")":{"docs":{},")":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005}}}}}}},",":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}},"i":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.001962066710268149},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},"]":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}},")":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}},",":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}},":":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}}}},"+":{"1":{"docs":{},"]":{"docs":{},":":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}},"docs":{}}},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"_":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},"]":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}},":":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}}}}}}}}}}}}},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"]":{"docs":{},":":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.003430531732418525}}}}}}},"l":{"docs":{},"o":{"docs":{},"w":{"docs":{},"e":{"docs":{},"r":{"docs":{},"]":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}}}}}}},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},"_":{"docs":{},"i":{"docs":{},"d":{"docs":{},"x":{"docs":{},"]":{"docs":{"Tricks/":{"ref":"Tricks/","tf":0.004608294930875576}},",":{"docs":{"Tricks/":{"ref":"Tricks/","tf":0.004608294930875576}}}}}}}}}}}},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},"]":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.005145797598627788}}}}}}}},":":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}},"a":{"docs":{},"b":{"docs":{},"s":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}}},"r":{"docs":{},"u":{"docs":{},"n":{"docs":{},"n":{"docs":{},"e":{"docs":{},"r":{"docs":{},"]":{"docs":{"Tricks/":{"ref":"Tricks/","tf":0.004608294930875576}}}}}}}}}},")":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703}}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.005405405405405406}}}}}}}},"r":{"docs":{},"e":{"docs":{},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}}}}}}}},"b":{"docs":{},"e":{"docs":{},"r":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002421307506053269},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343},"DataStructures/Trees/NumTrees.html":{"ref":"DataStructures/Trees/NumTrees.html","tf":5.017699115044247},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625},"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.00641025641025641},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.010101010101010102},"Algorithms/Games.html":{"ref":"Algorithms/Games.html","tf":0.013333333333333334},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.010309278350515464},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.009810333551340745},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062},"Algorithms/DP/NumSol.html":{"ref":"Algorithms/DP/NumSol.html","tf":5.013888888888889},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.007716049382716049},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.008264462809917356},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.02197802197802198},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.006211180124223602},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},"s":{"docs":{},"/":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0023584905660377358}}},"(":{"docs":{},"a":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{},",":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}},"docs":{}}}}},"/":{"docs":{"Algorithms/TrickySorting.html":{"ref":"Algorithms/TrickySorting.html","tf":0.024390243902439025},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995}}}}}},"t":{"docs":{},"e":{"docs":{},"a":{"docs":{},"m":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005}}}}}}}}}}}}},"f":{"docs":{},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"e":{"docs":{},"d":{"docs":{},"b":{"docs":{},"i":{"docs":{},"n":{"docs":{},"a":{"docs":{},"r":{"docs":{},"y":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Trees/NumTrees.html":{"ref":"DataStructures/Trees/NumTrees.html","tf":0.008849557522123894}}}}}}}}}}}}}}}}}}}}}}}}}}},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"r":{"docs":{},"s":{"docs":{"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.007874015748031496}},"e":{"docs":{},"s":{"docs":{},")":{"docs":{},":":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}},")":{"docs":{"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.007874015748031496}}}},":":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.007874015748031496}}}}}}}}}},"i":{"docs":{},"s":{"docs":{},"l":{"docs":{},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002840909090909091}}}}}}}}}}}}}}},")":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}},":":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488}}},"e":{"docs":{},"q":{"docs":{},"u":{"docs":{},"i":{"docs":{},"v":{"docs":{},"d":{"docs":{},"o":{"docs":{},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{},"o":{"docs":{},"p":{"docs":{},"a":{"docs":{},"i":{"docs":{},"r":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}}}}}}}}}}}}}}}}}}}},"t":{"docs":{},"s":{"docs":{},":":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}},")":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002421307506053269},"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.010101010101010102},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0030864197530864196},"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.005555555555555556}},"]":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.005952380952380952},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00404040404040404},"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.03333333333333333}},":":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}},":":{"docs":{"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.003205128205128205},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.005405405405405406},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.004629629629629629},"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.011111111111111112}}},")":{"docs":{"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.007874015748031496}}},",":{"docs":{"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.011111111111111112}}}},",":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.008403361344537815}}},"t":{"docs":{},"h":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}},"_":{"docs":{},"d":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907}},",":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907}}}},"e":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}},"s":{"docs":{},",":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}}},"i":{"docs":{},"c":{"docs":{},"e":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358}},".":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}}}},"c":{"docs":{},"r":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.00641025641025641}},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"b":{"docs":{},"u":{"docs":{},"c":{"docs":{},"k":{"docs":{},"e":{"docs":{},"t":{"docs":{},"[":{"docs":{},":":{"docs":{},"]":{"docs":{},")":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.003205128205128205}}}}}}}}}}}}}}}}}}}}}},"/":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}},"[":{"0":{"docs":{},"]":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}},"1":{"docs":{},"]":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}},"docs":{}}},"p":{"1":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.017964071856287425}},",":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809}}},".":{"docs":{},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011976047904191617}}}}}}}}}},"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.018867924528301886},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.004842615012106538},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809},"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.023622047244094488},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.003125},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995},"Tricks/":{"ref":"Tricks/","tf":0.004608294930875576}},"o":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.0027548209366391185}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"./":{"ref":"./","tf":0.02631578947368421},"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.018691588785046728},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0048},"DataStructures/LinkedLists/Instructions.html":{"ref":"DataStructures/LinkedLists/Instructions.html","tf":0.019230769230769232},"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Tricks/":{"ref":"Tricks/","tf":0.004608294930875576}},"e":{"docs":{},"r":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":5.018867924528302},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.007263922518159807},"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.018691588785046728},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0032},"DataStructures/LinkedLists/Instructions.html":{"ref":"DataStructures/LinkedLists/Instructions.html","tf":0.019230769230769232},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},"s":{"docs":{},":":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.009433962264150943}}}}}},"s":{"docs":{},":":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.003125},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}},"r":{"docs":{},"t":{"docs":{"./":{"ref":"./","tf":0.02631578947368421}},"s":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}},"s":{"docs":{},"s":{"docs":{},"i":{"docs":{},"b":{"docs":{},"l":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.010752688172043012},"DataStructures/Arrays/SlidingWindow.html":{"ref":"DataStructures/Arrays/SlidingWindow.html","tf":0.009174311926605505},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343},"DataStructures/Trees/NumTrees.html":{"ref":"DataStructures/Trees/NumTrees.html","tf":0.008849557522123894},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703},"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.010101010101010102},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.002616088947024199},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0030864197530864196},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.005509641873278237},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0015527950310559005}},"e":{"docs":{},":":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.010752688172043012},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.0027548209366391185},"Miscellaneous/Palindrome.html":{"ref":"Miscellaneous/Palindrome.html","tf":0.011235955056179775}}},";":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625}}},"_":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995}}}}}}}}},".":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}},"i":{"docs":{},"t":{"docs":{},"i":{"docs":{},"e":{"docs":{},"s":{"docs":{},".":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}}}},"i":{"docs":{},"l":{"docs":{},"t":{"docs":{},"i":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}}},"i":{"docs":{},"t":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.04},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.015},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.005681818181818182},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.00686106346483705},"Algorithms/Games.html":{"ref":"Algorithms/Games.html","tf":0.04},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Algorithms/DynamicProgramming-IV.html":{"ref":"Algorithms/DynamicProgramming-IV.html","tf":0.00980392156862745}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"[":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"]":{"docs":{},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"i":{"docs":{},")":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005}}}}}}}}}}}}}}}}},".":{"docs":{"Algorithms/Games.html":{"ref":"Algorithms/Games.html","tf":0.013333333333333334}}}},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703}}}}}}},"b":{"docs":{},"l":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}}},"t":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.004842615012106538},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016}},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011976047904191617},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.003703703703703704},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":5.001353179972936},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004149377593360996}},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},")":{"docs":{},":":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.005412719891745603}}}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},")":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.005412719891745603}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},")":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.005412719891745603}}}}}}}}}}}}},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},")":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0040595399188092015}}}}}}}},".":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006}},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"_":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0040595399188092015}}}}}}}}}},":":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}}}}}}}}}},"p":{"docs":{"DataStructures/StacksAndQueues/":{"ref":"DataStructures/StacksAndQueues/","tf":0.030612244897959183},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.005970149253731343},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.007763975155279503},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},"p":{"docs":{},"e":{"docs":{},"d":{"docs":{},":":{"docs":{"DataStructures/StacksAndQueues/":{"ref":"DataStructures/StacksAndQueues/","tf":0.01020408163265306}}},"[":{"docs":{},"k":{"docs":{},"]":{"docs":{"DataStructures/StacksAndQueues/":{"ref":"DataStructures/StacksAndQueues/","tf":0.01020408163265306}},",":{"docs":{"DataStructures/StacksAndQueues/":{"ref":"DataStructures/StacksAndQueues/","tf":0.01020408163265306}}}}}}}}},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002840909090909091},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358}}}}}},".":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625}}}},"w":{"docs":{},"e":{"docs":{},"r":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0032701111837802484},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},"_":{"docs":{},"v":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.013745704467353952}},"a":{"docs":{},"l":{"docs":{},":":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488}}}}}}},".":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}},"'":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}},"l":{"docs":{},"y":{"docs":{},"g":{"docs":{},"o":{"docs":{},"n":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}}},"a":{"docs":{},"l":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"r":{"docs":{},"o":{"docs":{},"m":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.010752688172043012},"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.002616088947024199},"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.008333333333333333},"Miscellaneous/Palindrome.html":{"ref":"Miscellaneous/Palindrome.html","tf":10.044943820224718}},"e":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}}}}},"r":{"docs":{},"a":{"docs":{},"m":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.003205128205128205},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062}},"e":{"docs":{},"t":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.010752688172043012}},"e":{"docs":{},"r":{"docs":{},",":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703}}}}},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00819672131147541},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498},"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.022727272727272728}},")":{"docs":{"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877}},",":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809}}},":":{"docs":{"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877}}}},"h":{"docs":{},"e":{"docs":{},"s":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.004658385093167702}},"e":{"docs":{},"s":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.013975155279503106}}}}},"i":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":10.006211180124224}}}}}}}}},"t":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},"i":{"docs":{},"c":{"docs":{},"u":{"docs":{},"l":{"docs":{},"a":{"docs":{},"r":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}},"l":{"docs":{},"i":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.003703703703703704}}}}}}}}},"t":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995},"Tricks/":{"ref":"Tricks/","tf":0.004608294930875576}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}},"s":{"docs":{},":":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}},"l":{"docs":{},"a":{"docs":{},"b":{"docs":{},"e":{"docs":{},"l":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}}}}}}}}}}}},"(":{"docs":{},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},",":{"docs":{"Tricks/":{"ref":"Tricks/","tf":0.004608294930875576}}}}}}}}}}}}},"a":{"docs":{},"l":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}},"s":{"docs":{},".":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}}},":":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}},".":{"docs":{"Algorithms/TrickySorting.html":{"ref":"Algorithms/TrickySorting.html","tf":0.024390243902439025}}}}},"s":{"docs":{},"s":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.03225806451612903},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011976047904191617},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0023584905660377358},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0027063599458728013}}},"t":{"docs":{"Algorithms/DynamicProgramming-IV.html":{"ref":"Algorithms/DynamicProgramming-IV.html","tf":0.00980392156862745}}}},"t":{"docs":{},"h":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.010752688172043012},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.007407407407407408},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0047169811320754715},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0027063599458728013},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.006060606060606061},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.011363636363636364},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.005232177894048398},"Algorithms/DP/NumSol.html":{"ref":"Algorithms/DP/NumSol.html","tf":0.013888888888888888},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0030864197530864196}},")":{"docs":{},":":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.003703703703703704},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}},"s":{"docs":{},".":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.003703703703703704}}},"/":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.003703703703703704},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995}},"d":{"docs":{},"i":{"docs":{},"s":{"docs":{},"c":{"docs":{},"u":{"docs":{},"s":{"docs":{},"s":{"docs":{},"/":{"1":{"0":{"2":{"9":{"9":{"3":{"docs":{},"/":{"docs":{},"p":{"docs":{},"y":{"docs":{},"t":{"docs":{},"h":{"docs":{},"o":{"docs":{},"n":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}}}}}}}},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"m":{"docs":{},"i":{"docs":{},"s":{"docs":{},"s":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"/":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}}}}}}}}}}}}},"u":{"docs":{},"m":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0047169811320754715}}}}}}}}}},":":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.005952380952380952}}}},",":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0023584905660377358}}},".":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},".":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},")":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0023584905660377358}}}}}}}}}}}}}}}}}}},"_":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},")":{"docs":{},":":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0023584905660377358}}}},":":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0023584905660377358}}}}}}},"[":{"docs":{},":":{"docs":{},"]":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}}}},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"n":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}},")":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717}}},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"q":{"docs":{},"u":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717}}}}}}}}}}}},"i":{"docs":{},"r":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.009433962264150943},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0038535645472061657}},"s":{"docs":{},"/":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}},"n":{"docs":{},"t":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002840909090909091},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}},"_":{"docs":{},"i":{"docs":{},"s":{"docs":{},"l":{"docs":{},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"x":{"docs":{},",":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002840909090909091}}}}}}}}}}}}}}},"c":{"docs":{},"i":{"docs":{},"f":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0049382716049382715}},"i":{"docs":{},"c":{"docs":{},"_":{"docs":{},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"u":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358}},"e":{"docs":{},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"(":{"0":{"docs":{},",":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358}}}},"docs":{},"x":{"docs":{},",":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358}}}}}}}}}}}}}}}}}}},"a":{"docs":{},"t":{"docs":{},"l":{"docs":{},"a":{"docs":{},"n":{"docs":{},"t":{"docs":{},"i":{"docs":{},"c":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358}}}}}}}}}}}}}}}}}}}},"k":{"docs":{},"a":{"docs":{},"g":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}}}}}},"g":{"docs":{},"e":{"docs":{},"s":{"docs":{},".":{"docs":{"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.002777777777777778}}}}}}},"r":{"docs":{},"o":{"docs":{},"b":{"docs":{},"l":{"docs":{},"e":{"docs":{},"m":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.010752688172043012},"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.04},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.004842615012106538},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.01775147928994083},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809},"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.015151515151515152},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.005952380952380952},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.005681818181818182},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0049382716049382715},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.005145797598627788},"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.010101010101010102},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.013888888888888888},"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.005555555555555556},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.0027548209366391185},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.02631578947368421}},".":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343},"DataStructures/Trees/NumTrees.html":{"ref":"DataStructures/Trees/NumTrees.html","tf":0.008849557522123894}}},":":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{},":":{"docs":{"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576},"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.002777777777777778}}}}},".":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907}}},",":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002840909090909091}}},")":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703}}},":":{"docs":{"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062},"Algorithms/DynamicProgramming-IV.html":{"ref":"Algorithms/DynamicProgramming-IV.html","tf":0.00980392156862745},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0015527950310559005}}}},",":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}}},";":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}}}},"a":{"docs":{},"b":{"docs":{},"l":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995}}},"i":{"docs":{},"l":{"docs":{},"i":{"docs":{},"t":{"docs":{},"y":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}}}}},"p":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.009433962264150943}},"e":{"docs":{},"r":{"docs":{"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476}},"t":{"docs":{},"y":{"docs":{},",":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.010752688172043012}}}},"i":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098},"Algorithms/DynamicProgramming-IV.html":{"ref":"Algorithms/DynamicProgramming-IV.html","tf":0.00980392156862745}},"e":{"docs":{},"s":{"docs":{},",":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006}}},";":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006}}}}}}},"l":{"docs":{},"i":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}},"y":{"docs":{},".":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}}},"d":{"docs":{},"u":{"docs":{},"c":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.004842615012106538}},"t":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.009685230024213076},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.002616088947024199}},",":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0023584905660377358},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00404040404040404},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.003205128205128205}},"/":{"docs":{"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576}}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},",":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.003125}}}}}},":":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}}},"e":{"docs":{},"d":{"docs":{},".":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358}}}}}}},"f":{"docs":{},"i":{"docs":{},"t":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.016483516483516484}}}}},"g":{"docs":{},"r":{"docs":{},"a":{"docs":{},"m":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":5.007716049382716},"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":3.336111111111111},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":3.333333333333333},"Algorithms/DynamicProgramming-IV.html":{"ref":"Algorithms/DynamicProgramming-IV.html","tf":3.3431372549019605},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}},":":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},")":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0030864197530864196}}},":":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}},"/":{"docs":{"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.002777777777777778}}}}}}}}}}},"o":{"docs":{},"f":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},":":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}},"j":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},",":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.02631578947368421}}}}}}}},"e":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.004842615012106538},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.007874015748031496}},"f":{"docs":{},"i":{"docs":{},"x":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.009685230024213076},"Tricks/":{"ref":"Tricks/","tf":0.004608294930875576}},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"f":{"docs":{},"i":{"docs":{},"x":{"docs":{},"[":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002421307506053269}}}}}}}}}}}}}}}}},"_":{"docs":{},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002421307506053269}}}},"1":{"docs":{},"]":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002421307506053269}}}},"docs":{}}}}}}}},"e":{"docs":{},"r":{"docs":{"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062}},"e":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},".":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}}}}}}}},"v":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.004842615012106538},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0064},"DataStructures/LinkedLists/Instructions.html":{"ref":"DataStructures/LinkedLists/Instructions.html","tf":0.019230769230769232},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}},";":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002421307506053269}}},"i":{"docs":{},"o":{"docs":{},"u":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002421307506053269},"DataStructures/Trees/NumTrees.html":{"ref":"DataStructures/Trees/NumTrees.html","tf":0.008849557522123894},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.004578155657292348},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062},"Algorithms/DP/NumSol.html":{"ref":"Algorithms/DP/NumSol.html","tf":0.013888888888888888},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.0027548209366391185},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.02631578947368421}},"s":{"docs":{},",":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}},"_":{"docs":{},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.005847953216374269}}}}}}}},",":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0023584905660377358}}},")":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0023584905660377358}}}},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609}}},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},"]":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609}}}}}}}},"n":{"docs":{},"]":{"docs":{"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.007874015748031496}},".":{"docs":{},"u":{"docs":{},"n":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"(":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"[":{"docs":{},"c":{"docs":{},"]":{"docs":{},".":{"docs":{},"u":{"docs":{},"n":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{},"(":{"docs":{},"[":{"docs":{},"c":{"docs":{},"]":{"docs":{},")":{"docs":{},")":{"docs":{},")":{"docs":{"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.007874015748031496}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"p":{"docs":{},"]":{"docs":{"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.007874015748031496}}}}},"p":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016}},"a":{"docs":{},"r":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625}}}}},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011976047904191617},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":5.002358490566038},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.01037344398340249},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.003430531732418525}},"(":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"1":{"docs":{},",":{"docs":{"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996}}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},",":{"docs":{"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},",":{"docs":{"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996}}}}}}}}}},"docs":{},",":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0047169811320754715}}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},",":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0047169811320754715}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},",":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0047169811320754715}}}}}}}}}}}}},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},",":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0047169811320754715}}}}}}},"t":{"1":{"docs":{},",":{"docs":{"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996}}}},"docs":{}}},".":{"docs":{},"l":{"docs":{},"o":{"docs":{},"n":{"docs":{},"g":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.007075471698113208}}}}}}}}}},":":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004149377593360996},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}}},"[":{"docs":{},"f":{"docs":{},"g":{"docs":{},"]":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}}}}},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},"]":{"docs":{},")":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}}}}}}}}}}}}}}},"s":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.0027548209366391185}}}},"r":{"docs":{},"v":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.0027548209366391185}}}}}},"r":{"docs":{},"e":{"docs":{},"q":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}},".":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"(":{"docs":{},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"r":{"docs":{},"s":{"docs":{},"e":{"docs":{},",":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}}}}}}},"p":{"docs":{},",":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}}}}}}},"[":{"docs":{},"p":{"docs":{},"]":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}}},"u":{"docs":{},"i":{"docs":{},"s":{"docs":{},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{},"s":{"docs":{},":":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00404040404040404},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.031496062992125984}}}}}}}}}}}}}},"i":{"docs":{},"o":{"docs":{},"r":{"docs":{},"i":{"docs":{},"t":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}},"i":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.04},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.008403361344537815},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828},"Tricks/":{"ref":"Tricks/","tf":0.009216589861751152}}}}}}},"c":{"docs":{},"e":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625}},":":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717}}},",":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625}}},"s":{"docs":{},",":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}},"[":{"0":{"docs":{},"]":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}},"docs":{},"i":{"docs":{},"]":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.01098901098901099}},")":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.01098901098901099}}}}}}}}},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}},"(":{"docs":{},"\"":{"docs":{},">":{"docs":{},">":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}}}},"u":{"docs":{},"n":{"docs":{},"e":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0015527950310559005}}}}},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{},"i":{"docs":{},"c":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809},"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576},"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.002777777777777778}},"e":{"docs":{},":":{"docs":{"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.002777777777777778}}}}}}}}}},"y":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},"t":{"docs":{},"h":{"docs":{},"o":{"docs":{},"n":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.03225806451612903},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002421307506053269},"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.014218009478672985},"Algorithms/TrickySorting.html":{"ref":"Algorithms/TrickySorting.html","tf":0.024390243902439025},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{"DataStructures/StacksAndQueues/":{"ref":"DataStructures/StacksAndQueues/","tf":0.030612244897959183},"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.009345794392523364},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.003125},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002840909090909091},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0049833887043189366},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.003105590062111801},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},"e":{"docs":{},"d":{"docs":{},".":{"docs":{"DataStructures/StacksAndQueues/":{"ref":"DataStructures/StacksAndQueues/","tf":0.01020408163265306},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625}}},":":{"docs":{"DataStructures/StacksAndQueues/":{"ref":"DataStructures/StacksAndQueues/","tf":0.01020408163265306}}}}}}},"b":{"docs":{},"l":{"docs":{},"i":{"docs":{},"c":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.005405405405405406}}}}}}},"e":{"docs":{},"r":{"docs":{},"m":{"docs":{},"u":{"docs":{},"t":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.00641025641025641},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},"s":{"docs":{},"o":{"docs":{},"l":{"docs":{},"u":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"/":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02}}}}}}}}}}}}}}}}},"e":{"docs":{},"(":{"docs":{},"b":{"docs":{},"u":{"docs":{},"c":{"docs":{},"k":{"docs":{},"e":{"docs":{},"t":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.003205128205128205}},")":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.003205128205128205}},":":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.003205128205128205}}}}}}}}}},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.003205128205128205}}}}}}}},"u":{"docs":{},"n":{"docs":{},"i":{"docs":{},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.003205128205128205}}}}}}}}}}}}}}}}}},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"m":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0106951871657754},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002840909090909091},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}}}}},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0023584905660377358},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098},"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.002777777777777778}},"l":{"docs":{},"y":{"docs":{},":":{"docs":{"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.010101010101010102}}}}}}}}},"s":{"docs":{},"p":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.0027548209366391185}}}}}}}},"o":{"docs":{},"p":{"docs":{},"l":{"docs":{},"e":{"docs":{},"/":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.009433962264150943}}}}}}},"e":{"docs":{},"p":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343}}}}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717}}}}}}}}}},"v":{"docs":{},"o":{"docs":{},"t":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.006224066390041493},"Tricks/":{"ref":"Tricks/","tf":0.009216589861751152}},".":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}}},"_":{"docs":{},"i":{"docs":{},"d":{"docs":{},"x":{"docs":{"Tricks/":{"ref":"Tricks/","tf":0.004608294930875576}}}}}}}}},"d":{"docs":{"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576}},":":{"docs":{"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576}}},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576}}}}}},"c":{"docs":{},"t":{"docs":{},"u":{"docs":{},"r":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625}},"e":{"docs":{},"!":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}},"k":{"docs":{},"u":{"docs":{},"p":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995}},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}},"e":{"docs":{},"c":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},"e":{"docs":{},",":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}},"z":{"docs":{},"z":{"docs":{},"a":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}},"h":{"docs":{},"a":{"docs":{},"s":{"docs":{},"e":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016}}}}},"o":{"docs":{},"n":{"docs":{},"e":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678}}}}}},"l":{"docs":{},"a":{"docs":{},"c":{"docs":{},"e":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}},".":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}},"s":{"docs":{},".":{"docs":{"Algorithms/DynamicProgramming-IV.html":{"ref":"Algorithms/DynamicProgramming-IV.html","tf":0.00980392156862745},"Tricks/":{"ref":"Tricks/","tf":0.004608294930875576}}}}}},"n":{"docs":{},"t":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.008928571428571428}},"e":{"docs":{},"d":{"docs":{},"[":{"docs":{},"i":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.005952380952380952}}},"n":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476}}}}}}}},"y":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907}},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"s":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}}}},"u":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}},"g":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}},",":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809},"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.015748031496062992}}},":":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006}}},"p":{"docs":{},"i":{"docs":{},"d":{"docs":{},":":{"docs":{"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576}}}}}},")":{"docs":{},"}":{"docs":{},",":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"p":{"docs":{},"[":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Tricks/":{"ref":"Tricks/","tf":0.004608294930875576}}}}}}}}}}}},"[":{"docs":{},"y":{"docs":{},"]":{"docs":{},")":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}},"i":{"docs":{},"]":{"docs":{},")":{"docs":{},",":{"docs":{"Tricks/":{"ref":"Tricks/","tf":0.004608294930875576}}}}}}}},"r":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.009433962264150943},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.02165087956698241},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.00641025641025641},"Miscellaneous/Palindrome.html":{"ref":"Miscellaneous/Palindrome.html","tf":0.02247191011235955},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414},"Tricks/":{"ref":"Tricks/","tf":0.004608294930875576}},"e":{"docs":{},"p":{"docs":{},"o":{"docs":{"./":{"ref":"./","tf":0.02631578947368421}}},"e":{"docs":{},"a":{"docs":{},"t":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002421307506053269},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.001962066710268149},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.007751937984496124}},"i":{"docs":{},"t":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703}}}},",":{"docs":{"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062}}}}},"t":{"docs":{},"i":{"docs":{},"t":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},".":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005}}},",":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.003205128205128205}}},"s":{"docs":{},".":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}}}}},"l":{"docs":{},"a":{"docs":{},"c":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0023584905660377358},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0015527950310559005}}}}},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.0027548209366391185}},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476}}}}}}}}},"a":{"docs":{},"d":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},"a":{"docs":{},"b":{"docs":{},"l":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.010752688172043012}}}}},":":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.0027548209366391185}}}},"c":{"docs":{},"h":{"docs":{"DataStructures/StacksAndQueues/":{"ref":"DataStructures/StacksAndQueues/","tf":0.01020408163265306},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0032},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.011019283746556474},"Algorithms/DynamicProgramming-IV.html":{"ref":"Algorithms/DynamicProgramming-IV.html","tf":0.00980392156862745}},"/":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625}}}}},"l":{"docs":{},"l":{"docs":{},"i":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.009433962264150943},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}},"i":{"docs":{},"z":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}}}},"f":{"docs":{},"e":{"docs":{},"r":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.021505376344086023},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002421307506053269},"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996}},"e":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},".":{"docs":{"DataStructures/LinkedLists/Instructions.html":{"ref":"DataStructures/LinkedLists/Instructions.html","tf":0.019230769230769232}}},":":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.003205128205128205}}},"s":{"docs":{},",":{"docs":{"Tricks/":{"ref":"Tricks/","tf":0.004608294930875576}}}}}}}}}},"l":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002840909090909091}}}}}},"u":{"docs":{},"e":{"docs":{},"l":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}},"m":{"docs":{},"e":{"docs":{},"m":{"docs":{},"b":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.010752688172043012}},"e":{"docs":{},"r":{"docs":{},":":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}}}}}},"e":{"docs":{},"b":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}},"o":{"docs":{},"v":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002421307506053269},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.003703703703703704},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.006644518272425249},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.017080745341614908}},"e":{"docs":{},"d":{"docs":{},"u":{"docs":{},"p":{"docs":{},"l":{"docs":{},"i":{"docs":{},"c":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/StacksAndQueues/":{"ref":"DataStructures/StacksAndQueues/","tf":0.01020408163265306}}}}}}}}}}}}}}}}}},"/":{"docs":{},"a":{"docs":{},"d":{"docs":{},"d":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343}}}}}},")":{"docs":{},".":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016}}}},"n":{"docs":{},"t":{"docs":{},"h":{"docs":{},"f":{"docs":{},"r":{"docs":{},"o":{"docs":{},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016}}}}}}}}}}}}}}}}}},"c":{"docs":{},"o":{"docs":{},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"e":{"docs":{},"d":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}}}}}}}}}}}}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"i":{"docs":{},"d":{"docs":{},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"h":{"docs":{},"e":{"docs":{},"s":{"docs":{},"e":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0015527950310559005}}}}}}}}}}}}}}}}}}}}}}}}}},"o":{"docs":{},"u":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"h":{"docs":{},"e":{"docs":{},"s":{"docs":{},"e":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0015527950310559005}}}}}}}}}}}}}}}}}}}}}}}}},"a":{"docs":{},"l":{"docs":{},")":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0015527950310559005}}},"s":{"docs":{},")":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.006211180124223602}},")":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0015527950310559005}}},":":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0015527950310559005}}}}}}}}},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.002890173410404624}}}}}},"t":{"docs":{},"u":{"docs":{},"r":{"docs":{},"n":{"docs":{"DataStructures/StacksAndQueues/":{"ref":"DataStructures/StacksAndQueues/","tf":0.02040816326530612},"DataStructures/Arrays/SlidingWindow.html":{"ref":"DataStructures/Arrays/SlidingWindow.html","tf":0.009174311926605505},"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.009433962264150943},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.009685230024213076},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.005970149253731343},"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.037383177570093455},"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.010810810810810811},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.014619883040935672},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0208},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011976047904191617},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.05185185185185185},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.04481132075471698},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.04059539918809202},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.0273224043715847},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0213903743315508},"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.037914691943127965},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.035269709543568464},"DataStructures/Trees/NumTrees.html":{"ref":"DataStructures/Trees/NumTrees.html","tf":0.008849557522123894},"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.015151515151515152},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.02976190476190476},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.029411764705882353},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.048484848484848485},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.015748031496062992},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0109375},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.008522727272727272},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.01728395061728395},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.04487179487179487},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.03513513513513514},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0274442538593482},"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.010101010101010102},"Algorithms/Games.html":{"ref":"Algorithms/Games.html","tf":0.013333333333333334},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.027491408934707903},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.001962066710268149},"Algorithms/DP/NumSol.html":{"ref":"Algorithms/DP/NumSol.html","tf":0.013888888888888888},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.033950617283950615},"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.05277777777777778},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.01928374655647383},"Algorithms/DynamicProgramming-IV.html":{"ref":"Algorithms/DynamicProgramming-IV.html","tf":0.00980392156862745},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.01098901098901099},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.014950166112956811},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.015527950310559006},"Miscellaneous/AlienDictionary.html":{"ref":"Miscellaneous/AlienDictionary.html","tf":0.08695652173913043},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.017341040462427744},"Tricks/":{"ref":"Tricks/","tf":0.009216589861751152}}}}}},"q":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}},"u":{"docs":{},"i":{"docs":{},"r":{"docs":{"DataStructures/Arrays/SlidingWindow.html":{"ref":"DataStructures/Arrays/SlidingWindow.html","tf":0.01834862385321101},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002421307506053269},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0023584905660377358},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0030864197530864196},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0015527950310559005}},"e":{"docs":{},"d":{"docs":{},".":{"docs":{"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.009345794392523364},"Tricks/":{"ref":"Tricks/","tf":0.004608294930875576}}}}}}},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"s":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}}},"s":{"docs":{},"u":{"docs":{},"l":{"docs":{},"t":{"docs":{"DataStructures/Arrays/SlidingWindow.html":{"ref":"DataStructures/Arrays/SlidingWindow.html","tf":0.01834862385321101},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.011834319526627219},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.015},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.008955223880597015},"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.028037383177570093},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.008771929824561403},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.007407407407407408},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0047169811320754715},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0027063599458728013},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0106951871657754},"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.006224066390041493},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.005952380952380952},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.006060606060606061},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.009375},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.01282051282051282},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.005405405405405406},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.005145797598627788},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.01718213058419244},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.007751937984496124},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.0027548209366391185},"Miscellaneous/Palindrome.html":{"ref":"Miscellaneous/Palindrome.html","tf":0.011235955056179775},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.014950166112956811},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.007763975155279503},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.002890173410404624}},".":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343}},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},"]":{"docs":{},")":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609}}}}}}}}}}}}},"e":{"docs":{},"i":{"docs":{},")":{"docs":{"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877}}}}}},"[":{"docs":{},"x":{"docs":{},",":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005}}}},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},",":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}}}}}}},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{},")":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717}}}}},"docs":{}}}},"docs":{}}}}},"r":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},")":{"docs":{},")":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}}}}}}}}}}},"a":{"docs":{},"r":{"docs":{},"r":{"1":{"docs":{},"[":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},"[":{"docs":{},"'":{"docs":{},"i":{"docs":{},"'":{"docs":{},"]":{"docs":{},"]":{"docs":{},")":{"docs":{"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.009345794392523364}}}}}}}}}}}}}}}},"docs":{}}}},"p":{"docs":{},"a":{"docs":{},"t":{"docs":{},"h":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.003703703703703704}},")":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0023584905660377358}}}}}}},"k":{"docs":{},"e":{"docs":{},"y":{"docs":{},")":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006}}}}}},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},")":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625}}}}}}}},"b":{"docs":{},"u":{"docs":{},"c":{"docs":{},"k":{"docs":{},"e":{"docs":{},"t":{"docs":{},"[":{"docs":{},":":{"docs":{},"]":{"docs":{},")":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.00641025641025641},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703}}}}}}}}}}}},"'":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}},"t":{"docs":{},")":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}}}}},"d":{"docs":{},"d":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},")":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0015527950310559005}}}}}}}}}}}}}},"_":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005}},"s":{"docs":{},".":{"docs":{},"a":{"docs":{},"d":{"docs":{},"d":{"docs":{},"(":{"docs":{},"t":{"docs":{},"u":{"docs":{},"p":{"docs":{},"l":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{},"e":{"docs":{},"d":{"docs":{},"(":{"docs":{},"[":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},",":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005}}}}}}}}}}}}}}}}}}}}}}}}}}}},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005}}}}}}}},":":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005}}}}},"[":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0033222591362126247}},":":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"(":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"u":{"docs":{},"l":{"docs":{},"t":{"docs":{},")":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}}}}}}}}}}}}}},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"]":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.005952380952380952},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}}}}},"l":{"docs":{},"a":{"docs":{},"s":{"docs":{},"t":{"docs":{},"_":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"]":{"docs":{},"[":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"]":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},",":{"docs":{"Algorithms/DynamicProgramming-IV.html":{"ref":"Algorithms/DynamicProgramming-IV.html","tf":0.00980392156862745}}}},";":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}}}},"e":{"docs":{},"r":{"docs":{},"v":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016}}}},"t":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0048},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809}}}},"p":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625}}}}}},"t":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}},"d":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.002890173410404624}},"u":{"docs":{},"c":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002421307506053269},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}},",":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476}}},"]":{"docs":{},")":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476}}}},"_":{"docs":{},"e":{"docs":{},"d":{"docs":{},"g":{"docs":{},"e":{"docs":{},"s":{"docs":{},":":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.005952380952380952}}}}}}}}}},"l":{"docs":{},"a":{"docs":{},"t":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002421307506053269},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},":":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00404040404040404}}}}}}}}}},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.003703703703703704}},"s":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011976047904191617},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.003703703703703704},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.009615384615384616},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.010810810810810811},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.010802469135802469},"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.008333333333333333},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.005509641873278237},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},"i":{"docs":{},"v":{"docs":{},"e":{"docs":{},":":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016}}}}},"o":{"docs":{},"n":{"docs":{},":":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.003205128205128205},"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.005555555555555556}}},")":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703}}},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703}}},"/":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.0027548209366391185}}}}}},"e":{"docs":{},"(":{"0":{"docs":{},",":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}},"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},")":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},")":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006}}}}}}}}},":":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006}}}}}}},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{},"r":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},",":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}},":":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}}}}}}}}}}}}},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.02631578947368421}},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},":":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717}}}}}}}}}}}}},"t":{"docs":{},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{},"l":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995}},"e":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}}},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}},"/":{"docs":{},"u":{"docs":{},"p":{"docs":{},"d":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006}}}}}}}}}},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0032},"DataStructures/LinkedLists/Instructions.html":{"ref":"DataStructures/LinkedLists/Instructions.html","tf":0.019230769230769232},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.0027548209366391185},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},"e":{"docs":{},"=":{"docs":{},"t":{"docs":{},"r":{"docs":{},"u":{"docs":{},"e":{"docs":{},")":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.003205128205128205}}}}}}}},"b":{"docs":{},"e":{"docs":{},"t":{"docs":{},"w":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016}}}}}}}}}}}}}}},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016}}}}}}}}}}}},";":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358}}}}},"t":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.003205128205128205}}}}},"i":{"docs":{},"s":{"docs":{},"i":{"docs":{},"t":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}}}}},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}},"u":{"docs":{},"n":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.004842615012106538},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0032},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002840909090909091},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358},"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.010101010101010102},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.005509641873278237},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},"t":{"docs":{},"i":{"docs":{},"m":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.010752688172043012},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}},"e":{"docs":{},"s":{"docs":{},":":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678}}}},":":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358}}}}}}},"n":{"docs":{},"e":{"docs":{},"r":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.008},"Tricks/":{"ref":"Tricks/","tf":0.018433179723502304}},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0064}}}}}}},")":{"docs":{},",":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625}}}}}}},".":{"docs":{"DataStructures/LinkedLists/Instructions.html":{"ref":"DataStructures/LinkedLists/Instructions.html","tf":0.019230769230769232}}}},"l":{"docs":{},"e":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.0027548209366391185}}}}},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"DataStructures/StacksAndQueues/":{"ref":"DataStructures/StacksAndQueues/","tf":0.01020408163265306},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002421307506053269},"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":5.010810810810811},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.017964071856287425},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.007407407407407408},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0023584905660377358},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.012178619756427604},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.006224066390041493},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002840909090909091},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.003205128205128205},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},".":{"docs":{"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847}}},",":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.007075471698113208}}},":":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0023584905660377358}}},";":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006}}},"=":{"docs":{},"n":{"docs":{},"o":{"docs":{},"n":{"docs":{},"e":{"docs":{},")":{"docs":{},":":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0040595399188092015},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}}}}}}}}},"_":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},",":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006}}}}},"i":{"docs":{},"n":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006}}}}},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{"DataStructures/Trees/NumTrees.html":{"ref":"DataStructures/Trees/NumTrees.html","tf":0.017699115044247787}}}}}}}}}}}},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847},"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.010101010101010102}},"e":{"docs":{},"(":{"0":{"docs":{},",":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.025},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717},"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406},"DataStructures/Trees/NumTrees.html":{"ref":"DataStructures/Trees/NumTrees.html","tf":0.008849557522123894},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.011904761904761904},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0049382716049382715},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.009615384615384616},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.012345679012345678},"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.005555555555555556},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.013774104683195593},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}},"1":{"docs":{},",":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005},"DataStructures/Trees/NumTrees.html":{"ref":"DataStructures/Trees/NumTrees.html","tf":0.008849557522123894},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.007751937984496124},"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.005555555555555556},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.0027548209366391185},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}},"2":{"docs":{},",":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}},")":{"docs":{},"]":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}}},"3":{"docs":{},",":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}},"docs":{},"i":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005}},")":{"docs":{},":":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995}}}},",":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.005509641873278237}}}},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"2":{"docs":{},")":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717}}}},"docs":{}}}}},"c":{"docs":{},"o":{"docs":{},"l":{"docs":{},"o":{"docs":{},"r":{"docs":{},"s":{"docs":{},")":{"docs":{},")":{"docs":{},"]":{"docs":{"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406}}}}}}}}}}},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},")":{"docs":{},")":{"docs":{},":":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.005847953216374269}}}}}}}}},"g":{"docs":{},"r":{"docs":{},"a":{"docs":{},"p":{"docs":{},"h":{"docs":{},")":{"docs":{},")":{"docs":{},":":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476}}}}}}}}}},"d":{"docs":{},"p":{"docs":{},")":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}},")":{"docs":{},":":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}},",":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}}},",":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}}}},"o":{"docs":{},"f":{"docs":{},"f":{"docs":{},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{},",":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343}}}}}}}}},"n":{"docs":{},")":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703}},":":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}}},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{},"_":{"docs":{},"x":{"docs":{},",":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847}}}}}}},")":{"docs":{},")":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703}}}}},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},")":{"docs":{},":":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00546448087431694},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498},"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002840909090909091}}}}}}},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},",":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}}},"x":{"docs":{},"_":{"docs":{},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{},",":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847}}}}}}},")":{"docs":{},":":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062},"Algorithms/DP/NumSol.html":{"ref":"Algorithms/DP/NumSol.html","tf":0.013888888888888888},"Algorithms/DynamicProgramming-IV.html":{"ref":"Algorithms/DynamicProgramming-IV.html","tf":0.00980392156862745}}},"]":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358},"Algorithms/DP/NumSol.html":{"ref":"Algorithms/DP/NumSol.html","tf":0.013888888888888888},"Algorithms/DynamicProgramming-IV.html":{"ref":"Algorithms/DynamicProgramming-IV.html","tf":0.00980392156862745}}}},"+":{"1":{"docs":{},")":{"docs":{},":":{"docs":{"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062}}},"]":{"docs":{"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062}}}}},"docs":{}},",":{"docs":{"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.007751937984496124}}}},"y":{"docs":{},")":{"docs":{},":":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358},"Algorithms/DP/NumSol.html":{"ref":"Algorithms/DP/NumSol.html","tf":0.013888888888888888},"Algorithms/DynamicProgramming-IV.html":{"ref":"Algorithms/DynamicProgramming-IV.html","tf":0.00980392156862745}}},"]":{"docs":{"Algorithms/DP/NumSol.html":{"ref":"Algorithms/DP/NumSol.html","tf":0.013888888888888888},"Algorithms/DynamicProgramming-IV.html":{"ref":"Algorithms/DynamicProgramming-IV.html","tf":0.00980392156862745}}}},"+":{"1":{"docs":{},")":{"docs":{},"]":{"docs":{"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062}}}}},"docs":{}},",":{"docs":{"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.007751937984496124}}}},"k":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},",":{"docs":{"Tricks/":{"ref":"Tricks/","tf":0.004608294930875576}}}}}}}}},".":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}},"s":{"docs":{},"/":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}}}}},"t":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},":":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005}}},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.01}}}},"j":{"docs":{},"]":{"docs":{},":":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005}}}}}}}}}}},"o":{"docs":{},"t":{"docs":{},"a":{"docs":{},"t":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.005847953216374269},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.003430531732418525}}}},"t":{"docs":{},"e":{"docs":{},"n":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002840909090909091}}}}}},"o":{"docs":{},"t":{"1":{"docs":{},":":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.003703703703703704},"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996}}}},"2":{"docs":{},":":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.003703703703703704},"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996}}}},"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.014814814814814815},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0047169811320754715},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00546448087431694},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.012448132780082987},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}},".":{"docs":{},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004149377593360996}},")":{"docs":{},":":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.003703703703703704}}}},",":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0023584905660377358}}},":":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006}}}}}}}},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0023584905660377358},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004149377593360996}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},":":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}}}}}}},":":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.014814814814814815},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.02122641509433962},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.012178619756427604},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.01912568306010929},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004149377593360996},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625}}},")":{"docs":{},")":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00546448087431694}}},":":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}}}},"_":{"docs":{},"i":{"docs":{},"d":{"docs":{},"x":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004149377593360996}}}}}}},"m":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.011627906976744186}},"s":{"docs":{},"/":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907}}},":":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.008403361344537815}}},"[":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"m":{"docs":{},"]":{"docs":{},":":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907}}}}}}}}},")":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}},",":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}}}},"w":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0023584905660377358},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.003125},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}},":":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625}}},"[":{"docs":{},"i":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}},"]":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}}}},"b":{"docs":{},"b":{"docs":{},"e":{"docs":{},"r":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.001962066710268149}},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}}}},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0030864197530864196}}}}}}}}},"l":{"docs":{},"l":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995}}}},"u":{"docs":{},"t":{"docs":{},"e":{"docs":{},"s":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}},".":{"docs":{},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{},"m":{"docs":{},"s":{"docs":{},"(":{"docs":{},")":{"docs":{},":":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006}}}}}}}}}}},"_":{"docs":{},"h":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0027063599458728013}},",":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006}}},":":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006}}}},"l":{"docs":{},"c":{"docs":{},"a":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0027063599458728013}}}}}},"c":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006}}},")":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}},":":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004149377593360996},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.003205128205128205},"Miscellaneous/Palindrome.html":{"ref":"Miscellaneous/Palindrome.html","tf":0.011235955056179775}}}},":":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.003205128205128205}}}},"s":{"docs":{"DataStructures/StacksAndQueues/":{"ref":"DataStructures/StacksAndQueues/","tf":0.01020408163265306},"DataStructures/Arrays/SlidingWindow.html":{"ref":"DataStructures/Arrays/SlidingWindow.html","tf":0.009174311926605505},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0047169811320754715},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.008928571428571428},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.007874015748031496},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0033222591362126247},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.003105590062111801},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414},"Tricks/":{"ref":"Tricks/","tf":0.004608294930875576}},"e":{"docs":{},"r":{"docs":{},"v":{"docs":{"./":{"ref":"./","tf":0.05263157894736842}},"e":{"docs":{},"r":{"docs":{"./":{"ref":"./","tf":0.02631578947368421}}}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"s":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}},"i":{"docs":{},"a":{"docs":{},"l":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}}}}}}}}}}}}}}},"t":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.010752688172043012},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002421307506053269},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.01},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.003703703703703704},"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.005952380952380952},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.008522727272727272},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.008108108108108109},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.007751937984496124},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.0027548209366391185},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0015527950310559005}},"(":{"docs":{},"[":{"1":{"docs":{},",":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.005952380952380952}}}},"docs":{},"s":{"docs":{},"o":{"docs":{},"m":{"docs":{},"e":{"docs":{},"t":{"docs":{},"h":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"]":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.010752688172043012}}}}}}}}}}}},"i":{"docs":{},".":{"docs":{},"v":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006}}}}},"r":{"docs":{},"e":{"docs":{},"d":{"docs":{},",":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476}}}}}},"'":{"docs":{},"a":{"docs":{},"'":{"docs":{},",":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488}}}}}}},")":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.01},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0032},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.012121212121212121},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.007407407407407408},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.003105590062111801},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},")":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703}}}},"r":{"docs":{},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{},"e":{"docs":{},"(":{"0":{"docs":{},",":{"docs":{"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.015748031496062992}}}},"docs":{}}}}}}},"d":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"s":{"docs":{},")":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358}}}}}}}}}}},"s":{"docs":{},")":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.0027548209366391185}}}},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},")":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.0027548209366391185}}}}}}}},"s":{"docs":{},",":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.010752688172043012}}},":":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.0027548209366391185}}}},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.010752688172043012}}}}},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609}},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.01775147928994083}},":":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609}}}}},"j":{"docs":{},"]":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609}},")":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609}}}}}}}}}},".":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625}}},")":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703}}},":":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}}},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}},"a":{"docs":{},"r":{"docs":{},"c":{"docs":{},"h":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02},"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.009433962264150943},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002421307506053269},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006},"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004149377593360996},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.007407407407407408},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":3.3387387387387384},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":5.0102915951972555},"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.010101010101010102},"Algorithms/Games.html":{"ref":"Algorithms/Games.html","tf":0.013333333333333334},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}},";":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.003703703703703704}}},"r":{"docs":{},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}}}}}}}}}}}}}}}},"t":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}},"c":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Tricks/":{"ref":"Tricks/","tf":0.004608294930875576}},")":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.0027548209366391185},"Tricks/":{"ref":"Tricks/","tf":0.004608294930875576}}},"s":{"docs":{},".":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476}}}}}}}},"o":{"docs":{},"n":{"docs":{},"d":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062},"Tricks/":{"ref":"Tricks/","tf":0.004608294930875576}},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}}},"l":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.003125},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.00641025641025641},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.011627906976744186},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123},"Tricks/":{"ref":"Tricks/","tf":0.004608294930875576}},".":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.003205128205128205}}}}}},"f":{"docs":{},".":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.005970149253731343}},"[":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717}}}}}}},"o":{"docs":{},"l":{"docs":{},"u":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"_":{"docs":{},"f":{"docs":{},"u":{"docs":{},"n":{"docs":{},"c":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"(":{"docs":{},"c":{"docs":{},"a":{"docs":{},"s":{"docs":{},"e":{"docs":{},"_":{"docs":{},"o":{"docs":{},"n":{"docs":{},"e":{"docs":{},",":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}}}},"t":{"docs":{},"w":{"docs":{},"o":{"docs":{},",":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"w":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"o":{"docs":{},"w":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.005970149253731343}},"[":{"0":{"docs":{},"]":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717}}}},"docs":{}}}}}}},"a":{"docs":{},"l":{"docs":{},"k":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.005412719891745603}}}}}},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.008}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.008},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0023584905660377358},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.005412719891745603},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004149377593360996},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}},"i":{"docs":{},"d":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0040595399188092015},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00404040404040404}},":":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00404040404040404}}}}}}}},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0023584905660377358},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.005412719891745603},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004149377593360996},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}}}}},"c":{"docs":{},"a":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.008119079837618403}},":":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006}}}}}},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.007075471698113208}}}}}}}},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0040595399188092015}}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"u":{"docs":{},"l":{"docs":{},"t":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.009433962264150943},"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.014218009478672985},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002840909090909091}}}}}},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{},"s":{"docs":{},"e":{"docs":{},"(":{"docs":{},"k":{"docs":{},",":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.003205128205128205}}}}}}}}}}},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0023584905660377358},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.005412719891745603},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004149377593360996},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}}}}}}},"t":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.009615384615384616}},"o":{"docs":{},"t":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.007075471698113208},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006}}}},":":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.003205128205128205}}}},"i":{"docs":{},"t":{"docs":{},"i":{"docs":{},"n":{"docs":{},"e":{"docs":{},"r":{"docs":{},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.006060606060606061}}},"y":{"docs":{},":":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}}}}}}}}}},"_":{"docs":{},"h":{"docs":{},"e":{"docs":{},"l":{"docs":{},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{},"c":{"docs":{},"o":{"docs":{},"p":{"docs":{},"y":{"docs":{},"p":{"docs":{},"a":{"docs":{},"s":{"docs":{},"t":{"docs":{},"e":{"docs":{},"(":{"docs":{},"n":{"docs":{},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.008108108108108109}}}}}}}}}}}}}}}}}}}}}}},"l":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0032701111837802484},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.03296703296703297}},"/":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}}},"q":{"docs":{"Miscellaneous/AlienDictionary.html":{"ref":"Miscellaneous/AlienDictionary.html","tf":0.021739130434782608}},"u":{"docs":{},"e":{"docs":{},"n":{"docs":{},"c":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002840909090909091},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}},"e":{"docs":{},":":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016}}},"/":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0023584905660377358},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}},"[":{"docs":{},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"[":{"docs":{},"j":{"docs":{},"]":{"docs":{},"]":{"docs":{"Miscellaneous/AlienDictionary.html":{"ref":"Miscellaneous/AlienDictionary.html","tf":0.021739130434782608}}}}}},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{},"+":{"1":{"docs":{},"]":{"docs":{},"[":{"docs":{},"j":{"docs":{},"]":{"docs":{},"]":{"docs":{},":":{"docs":{"Miscellaneous/AlienDictionary.html":{"ref":"Miscellaneous/AlienDictionary.html","tf":0.021739130434782608}}}}}}}}},"docs":{}}}}}}}}}}},"e":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703}},"n":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.005952380952380952},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358}},".":{"docs":{},"a":{"docs":{},"d":{"docs":{},"d":{"docs":{},"(":{"docs":{},"(":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},",":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476}}}}}}},"i":{"docs":{},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703}}}}}}}}},"d":{"docs":{},"i":{"docs":{},"s":{"docs":{},"c":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{},"(":{"docs":{},"(":{"docs":{},"i":{"docs":{},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703}}}}}}}}}}}}}},":":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703}}},")":{"docs":{},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703}}},":":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703}}}}}},"n":{"docs":{},"d":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0027063599458728013},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358}}},"s":{"docs":{},"e":{"docs":{},".":{"docs":{"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062}}}}}},"m":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}},"g":{"docs":{},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"s":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}}}},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{"./":{"ref":"./","tf":0.02631578947368421},"DataStructures/Arrays/SlidingWindow.html":{"ref":"DataStructures/Arrays/SlidingWindow.html","tf":0.01834862385321101},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002421307506053269},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0023584905660377358},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0106951871657754},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.014522821576763486},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.007874015748031496},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.005681818181818182},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.044596912521440824},"Algorithms/Games.html":{"ref":"Algorithms/Games.html","tf":0.013333333333333334},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098},"Miscellaneous/Palindrome.html":{"ref":"Miscellaneous/Palindrome.html","tf":0.02247191011235955},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.014950166112956811},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.004658385093167702},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0038535645472061657},"Tricks/":{"ref":"Tricks/","tf":0.004608294930875576}},",":{"docs":{"DataStructures/Arrays/SlidingWindow.html":{"ref":"DataStructures/Arrays/SlidingWindow.html","tf":0.009174311926605505},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476},"Miscellaneous/Palindrome.html":{"ref":"Miscellaneous/Palindrome.html","tf":0.011235955056179775},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.006644518272425249}}},"=":{"1":{"docs":{},")":{"docs":{},":":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.002890173410404624}}}}},"docs":{}},")":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}}},"s":{"docs":{},".":{"docs":{},"r":{"docs":{},"e":{"docs":{},"m":{"docs":{},"o":{"docs":{},"v":{"docs":{},"e":{"docs":{},"(":{"docs":{},"p":{"docs":{},")":{"docs":{"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.007874015748031496}}}}}}}}}}}},":":{"docs":{"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.015748031496062992}}}},".":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}}},":":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}}}}},"n":{"docs":{},"d":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{"DataStructures/":{"ref":"DataStructures/","tf":0.2},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":5.002923976608187}}}}}}},"c":{"docs":{},"k":{"docs":{"DataStructures/StacksAndQueues/":{"ref":"DataStructures/StacksAndQueues/","tf":5.051020408163265},"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.04},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":5.032835820895523},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.014814814814814815},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.013513513513513514},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.018633540372670808}},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"1":{"docs":{},")":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0015527950310559005}}}},"docs":{},"s":{"docs":{},")":{"docs":{"DataStructures/StacksAndQueues/":{"ref":"DataStructures/StacksAndQueues/","tf":0.01020408163265306}}}},"n":{"docs":{},")":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717}}}},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{},"r":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0015527950310559005}},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},")":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.007407407407407408}}}}}}}}},")":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0015527950310559005}}}},"'":{"docs":{},"(":{"docs":{},"'":{"docs":{},")":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0015527950310559005}}}}}},"i":{"docs":{},")":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.003105590062111801}}}}}}}}}}},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{"DataStructures/StacksAndQueues/":{"ref":"DataStructures/StacksAndQueues/","tf":0.01020408163265306},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.007407407407407408},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.006211180124223602}}}}}}}},"[":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.005970149253731343},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.003105590062111801}},"l":{"docs":{},"a":{"docs":{},"s":{"docs":{},"t":{"docs":{},"]":{"docs":{"DataStructures/StacksAndQueues/":{"ref":"DataStructures/StacksAndQueues/","tf":0.01020408163265306}}}}}}},":":{"docs":{},"k":{"docs":{},"]":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717}}}}}},"s":{"docs":{},":":{"docs":{"DataStructures/StacksAndQueues/":{"ref":"DataStructures/StacksAndQueues/","tf":0.01020408163265306}}}},"/":{"docs":{},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"u":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.005970149253731343}}}}}}},")":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0015527950310559005}},"]":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.012422360248447204}}}},",":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0015527950310559005}}},":":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.006211180124223602}}}}},"t":{"docs":{},"e":{"docs":{"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.009345794392523364},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0023584905660377358},"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.020202020202020204},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.005509641873278237},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0015527950310559005}},",":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358}}},"[":{"docs":{},":":{"docs":{},"i":{"docs":{},"]":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358}}}}},"i":{"docs":{},"+":{"1":{"docs":{},":":{"docs":{},"]":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358}}}}},"docs":{}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.010101010101010102}}}}}}}}},":":{"docs":{"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.010101010101010102},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0015527950310559005}}}},"i":{"docs":{},"c":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.003703703703703704},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004149377593360996},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}}},"y":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}},"i":{"docs":{},"r":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0030864197530864196}},".":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}},"s":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995}}},":":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}}}}},"u":{"docs":{},"f":{"docs":{},"f":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.010752688172043012},"Tricks/":{"ref":"Tricks/","tf":0.004608294930875576}}}},"p":{"docs":{},"i":{"docs":{},"d":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.010752688172043012}}}}},"d":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}},"r":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004149377593360996}},"u":{"docs":{},"c":{"docs":{},"t":{"docs":{},"u":{"docs":{},"r":{"docs":{"DataStructures/":{"ref":"DataStructures/","tf":5.2},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}},"e":{"docs":{},":":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.009433962264150943},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717}}},"s":{"docs":{},".":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}}}}},")":{"docs":{"DataStructures/StacksAndQueues/":{"ref":"DataStructures/StacksAndQueues/","tf":0.01020408163265306},"DataStructures/Arrays/SlidingWindow.html":{"ref":"DataStructures/Arrays/SlidingWindow.html","tf":0.009174311926605505},"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0049382716049382715},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.006872852233676976},"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.013888888888888888},"Miscellaneous/Palindrome.html":{"ref":"Miscellaneous/Palindrome.html","tf":0.02247191011235955},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.009316770186335404},"Miscellaneous/AlienDictionary.html":{"ref":"Miscellaneous/AlienDictionary.html","tf":0.021739130434782608},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}},":":{"docs":{"DataStructures/StacksAndQueues/":{"ref":"DataStructures/StacksAndQueues/","tf":0.01020408163265306},"DataStructures/Arrays/SlidingWindow.html":{"ref":"DataStructures/Arrays/SlidingWindow.html","tf":0.009174311926605505},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343},"Algorithms/TrickySorting.html":{"ref":"Algorithms/TrickySorting.html","tf":0.024390243902439025},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.003205128205128205},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488},"Miscellaneous/Palindrome.html":{"ref":"Miscellaneous/Palindrome.html","tf":0.011235955056179775},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.003105590062111801}}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{"DataStructures/Strings/":{"ref":"DataStructures/Strings/","tf":11},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.008771929824561403},"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.005405405405405406},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.001962066710268149},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.007751937984496124},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.0027548209366391185},"Miscellaneous/Palindrome.html":{"ref":"Miscellaneous/Palindrome.html","tf":0.02247191011235955},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.010869565217391304},"Tricks/":{"ref":"Tricks/","tf":0.009216589861751152}},"/":{"docs":{"DataStructures/StacksAndQueues/":{"ref":"DataStructures/StacksAndQueues/","tf":0.01020408163265306},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.002616088947024199},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0015527950310559005}}},"s":{"docs":{},"/":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.001962066710268149}}},":":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.005847953216374269}}},",":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678}}}},".":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0015527950310559005}}},",":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.003105590062111801}}}}},"c":{"docs":{},"t":{"docs":{},"l":{"docs":{},"i":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002421307506053269},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}},",":{"docs":{"DataStructures/Arrays/SlidingWindow.html":{"ref":"DataStructures/Arrays/SlidingWindow.html","tf":0.009174311926605505},"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488},"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.008333333333333333},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.0027548209366391185},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}},"(":{"docs":{},"d":{"docs":{},"i":{"docs":{},"f":{"docs":{},"f":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343}}}}},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},")":{"docs":{},")":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.003205128205128205}}}}}}}},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},".":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},")":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.007407407407407408}},")":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.003703703703703704}}}}}}}}}}}},"(":{"docs":{},"w":{"docs":{},"h":{"docs":{},"e":{"docs":{},"e":{"docs":{},"l":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358}}}}}}}},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},")":{"docs":{},")":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}}}}},"u":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{},")":{"docs":{},"]":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}}}}}}}},"e":{"docs":{},"a":{"docs":{},"m":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678}},"/":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678}}}},"k":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.003430531732418525}}}},"t":{"docs":{},"c":{"docs":{},"h":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0033222591362126247}}}}}},"a":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"w":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}}}}}}}},"s":{"docs":{},":":{"docs":{"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.007751937984496124}}}}},"e":{"docs":{},"p":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002421307506053269},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.01},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016},"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.008522727272727272},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.005405405405405406},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.001962066710268149},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0030864197530864196},"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.005555555555555556},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.008264462809917356},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.004816955684007707}},";":{"docs":{"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877}}},".":{"docs":{"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}}},"?":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002840909090909091}}},"s":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}},",":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}}},"o":{"docs":{},"r":{"docs":{},"e":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.007263922518159807},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.011695906432748537},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00819672131147541},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00404040404040404},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.005509641873278237},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}},"[":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"2":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"]":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717}}}}}}},"docs":{}}}}},"c":{"docs":{},"]":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343}},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.005847953216374269}}}}}}},"s":{"docs":{},"]":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625}}}},"(":{"docs":{},"f":{"docs":{},",":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}},",":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343}}},".":{"docs":{},"a":{"docs":{},"d":{"docs":{},"d":{"docs":{},"(":{"docs":{},"f":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"e":{"docs":{},"r":{"docs":{},"p":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},")":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343}}}}}}}}}}}}}}}}}},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"(":{"docs":{},"c":{"docs":{},",":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343}}},"i":{"docs":{},"t":{"docs":{},"y":{"docs":{},",":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625}}}}}}},"s":{"docs":{},",":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625}}}},"(":{"docs":{},"f":{"docs":{},",":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}}}},"s":{"docs":{},",":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}}}}},":":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.005847953216374269}}},"_":{"docs":{},"o":{"docs":{},"b":{"docs":{},"j":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"_":{"docs":{},"i":{"docs":{},"d":{"docs":{},"x":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}}}}}}}}},"a":{"docs":{},"g":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}},"c":{"docs":{},"k":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717},"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.002616088947024199},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":10.027472527472527}},"s":{"docs":{},"p":{"docs":{},"a":{"docs":{},"n":{"docs":{},"n":{"docs":{},"e":{"docs":{},"r":{"docs":{},":":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717}}}}}}}}}},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}},",":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}},".":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.01098901098901099}}}}},"p":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.002890173410404624}},"s":{"docs":{},"/":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995}}}}},"n":{"docs":{},"e":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}},"s":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}},"y":{"docs":{},"l":{"docs":{},"e":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}}}}},"i":{"docs":{},"c":{"docs":{},"k":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}},"t":{"docs":{},"c":{"docs":{},"h":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}}}}},"o":{"docs":{},"l":{"docs":{},"v":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.010752688172043012},"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.009478672985781991},"DataStructures/Trees/NumTrees.html":{"ref":"DataStructures/Trees/NumTrees.html","tf":0.008849557522123894},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.009259259259259259},"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.002777777777777778}}},"u":{"docs":{},"t":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.009433962264150943},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006},"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.008928571428571428},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002840909090909091},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.008108108108108109},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.005145797598627788},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.004578155657292348},"Algorithms/DP/NumSol.html":{"ref":"Algorithms/DP/NumSol.html","tf":5.013888888888889},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.012345679012345678},"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.005555555555555556},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0033222591362126247},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.003105590062111801}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},":":{"docs":{"DataStructures/StacksAndQueues/":{"ref":"DataStructures/StacksAndQueues/","tf":0.02040816326530612},"DataStructures/Arrays/SlidingWindow.html":{"ref":"DataStructures/Arrays/SlidingWindow.html","tf":0.009174311926605505},"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.018867924528301886},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.007263922518159807},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.015},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.01791044776119403},"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.009345794392523364},"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.010810810810810811},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.014619883040935672},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0144},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.014814814814814815},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.01650943396226415},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.012178619756427604},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.01366120218579235},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.014218009478672985},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.01037344398340249},"DataStructures/Trees/NumTrees.html":{"ref":"DataStructures/Trees/NumTrees.html","tf":0.008849557522123894},"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.011904761904761904},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.012605042016806723},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.010101010101010102},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.015748031496062992},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0140625},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.008522727272727272},"Algorithms/TrickySorting.html":{"ref":"Algorithms/TrickySorting.html","tf":0.024390243902439025},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.009876543209876543},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.009615384615384616},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.005405405405405406},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0137221269296741},"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.010101010101010102},"Algorithms/Games.html":{"ref":"Algorithms/Games.html","tf":0.013333333333333334},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.010309278350515464},"Algorithms/DP/NumSol.html":{"ref":"Algorithms/DP/NumSol.html","tf":0.013888888888888888},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.015432098765432098},"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.013888888888888888},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.008264462809917356},"Algorithms/DynamicProgramming-IV.html":{"ref":"Algorithms/DynamicProgramming-IV.html","tf":0.00980392156862745},"Miscellaneous/Palindrome.html":{"ref":"Miscellaneous/Palindrome.html","tf":0.02247191011235955},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.016611295681063124},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.009316770186335404},"Miscellaneous/AlienDictionary.html":{"ref":"Miscellaneous/AlienDictionary.html","tf":0.021739130434782608},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.014450867052023121}}},".":{"docs":{"DataStructures/Arrays/SlidingWindow.html":{"ref":"DataStructures/Arrays/SlidingWindow.html","tf":0.009174311926605505},"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.003205128205128205},"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.020202020202020204}}},",":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809}}},"s":{"docs":{},":":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}},".":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}},"_":{"docs":{},"f":{"docs":{},"u":{"docs":{},"n":{"docs":{},"c":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}}}}}}}}}}}}}}},"(":{"docs":{},"o":{"docs":{},"b":{"docs":{},"j":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},")":{"docs":{},":":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}}}}}}}}}}}}}},"d":{"docs":{},"i":{"docs":{},"e":{"docs":{},"r":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0046875}},"s":{"docs":{},",":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625}}}}}}}}},"m":{"docs":{},"e":{"docs":{},"h":{"docs":{},"o":{"docs":{},"w":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.003430531732418525}},".":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.010752688172043012}}}}}},"t":{"docs":{},"h":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},",":{"docs":{"DataStructures/StacksAndQueues/":{"ref":"DataStructures/StacksAndQueues/","tf":0.01020408163265306},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}},"i":{"docs":{},"m":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0023584905660377358},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0027063599458728013},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002840909090909091},"Algorithms/DynamicProgramming-IV.html":{"ref":"Algorithms/DynamicProgramming-IV.html","tf":0.00980392156862745}},"e":{"docs":{},"s":{"docs":{},",":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.007751937984496124}}}}}}}},";":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717}}},"w":{"docs":{},"h":{"docs":{},"e":{"docs":{},"r":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358}}}}}}}},"r":{"docs":{},"t":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.04},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717},"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.009345794392523364},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0032},"DataStructures/LinkedLists/Instructions.html":{"ref":"DataStructures/LinkedLists/Instructions.html","tf":0.019230769230769232},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.003703703703703704},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.01092896174863388},"DataStructures/Trees/NumTrees.html":{"ref":"DataStructures/Trees/NumTrees.html","tf":0.008849557522123894},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":5.0078740157480315},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.003125},"Algorithms/TrickySorting.html":{"ref":"Algorithms/TrickySorting.html","tf":5.048780487804878},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.00686106346483705},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.002616088947024199},"Miscellaneous/Palindrome.html":{"ref":"Miscellaneous/Palindrome.html","tf":0.011235955056179775},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.011627906976744186},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828},"Tricks/":{"ref":"Tricks/","tf":0.02304147465437788}},"e":{"docs":{},"d":{"docs":{},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},")":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005}}}}}}},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"s":{"docs":{},",":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343}}}}}}}},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{},"r":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"_":{"docs":{},"r":{"docs":{},"o":{"docs":{},"w":{"docs":{},"[":{"docs":{},"x":{"docs":{},"]":{"docs":{},")":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847}}}}}}}}}}}}}}}},"o":{"docs":{},"u":{"docs":{},"r":{"docs":{},"s":{"docs":{},"e":{"docs":{},"s":{"docs":{},",":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625}}}}}}}}}},"x":{"docs":{},")":{"docs":{},"]":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847}}}},".":{"docs":{},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{},"m":{"docs":{},"s":{"docs":{},"(":{"docs":{},")":{"docs":{},",":{"docs":{"Tricks/":{"ref":"Tricks/","tf":0.004608294930875576}}}}}}}}}}}},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},")":{"docs":{"DataStructures/Trees/NumTrees.html":{"ref":"DataStructures/Trees/NumTrees.html","tf":0.008849557522123894}}}}},",":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.003205128205128205}}}},"g":{"docs":{},"r":{"docs":{},"a":{"docs":{},"p":{"docs":{},"h":{"docs":{},"[":{"docs":{},"s":{"docs":{},"]":{"docs":{},")":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}}}}}}}}},"[":{"docs":{},"[":{"docs":{},"t":{"docs":{},"a":{"docs":{},"s":{"docs":{},"k":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{},",":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625}}}}},"docs":{}}}}}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"s":{"docs":{},",":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.006644518272425249}}}}}}}}}}}},"p":{"docs":{},"o":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"s":{"docs":{},",":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}}}}}}},"s":{"docs":{},"l":{"docs":{},"o":{"docs":{},"t":{"docs":{},"s":{"1":{"docs":{},")":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}},"2":{"docs":{},")":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}},"docs":{}}}}}},"h":{"docs":{},"o":{"docs":{},"r":{"docs":{},"i":{"docs":{},"z":{"docs":{},"o":{"docs":{},"n":{"docs":{},"t":{"docs":{},"a":{"docs":{},"l":{"docs":{},"c":{"docs":{},"u":{"docs":{},"t":{"docs":{},"s":{"docs":{},")":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}}}}}}}}}}}},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{},"i":{"docs":{},"c":{"docs":{},"a":{"docs":{},"l":{"docs":{},"c":{"docs":{},"u":{"docs":{},"t":{"docs":{},"s":{"docs":{},")":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}}}}}}}}}},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},",":{"docs":{"Tricks/":{"ref":"Tricks/","tf":0.004608294930875576}}}}}}}},";":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}}}}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},",":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00546448087431694}}}}}},".":{"docs":{"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.010101010101010102}}},":":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}},",":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0032},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.0027548209366391185},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0015527950310559005}}}},":":{"docs":{"DataStructures/StacksAndQueues/":{"ref":"DataStructures/StacksAndQueues/","tf":0.02040816326530612},"DataStructures/Arrays/SlidingWindow.html":{"ref":"DataStructures/Arrays/SlidingWindow.html","tf":0.009174311926605505},"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.005847953216374269},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.003205128205128205},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488},"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.005555555555555556},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.0027548209366391185},"Miscellaneous/Palindrome.html":{"ref":"Miscellaneous/Palindrome.html","tf":0.02247191011235955},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.010869565217391304},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}}},"u":{"docs":{},"b":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002421307506053269},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}},"t":{"docs":{},"l":{"docs":{"DataStructures/StacksAndQueues/":{"ref":"DataStructures/StacksAndQueues/","tf":0.01020408163265306}}},"r":{"docs":{},"e":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0040595399188092015},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004149377593360996},"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576}},"e":{"docs":{},".":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006}}}}},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002421307506053269},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.006872852233676976},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"/":{"docs":{"DataStructures/Arrays/SlidingWindow.html":{"ref":"DataStructures/Arrays/SlidingWindow.html","tf":0.009174311926605505},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Miscellaneous/Palindrome.html":{"ref":"Miscellaneous/Palindrome.html","tf":0.011235955056179775}}},"s":{"docs":{},"/":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625}}}}},"u":{"docs":{},"c":{"docs":{},"t":{"docs":{},"u":{"docs":{},"r":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.005681818181818182},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098},"Algorithms/DynamicProgramming-IV.html":{"ref":"Algorithms/DynamicProgramming-IV.html","tf":0.00980392156862745}}}}}}}},"i":{"docs":{},"t":{"docs":{},"u":{"docs":{},"t":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0015527950310559005}}}}}}},"e":{"docs":{},"q":{"docs":{},"u":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002421307506053269},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.001962066710268149},"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.008333333333333333}},"e":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},".":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002421307506053269}}},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.001962066710268149}}}},",":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609}}},"/":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.005886200130804447},"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.008333333333333333}}}}}}}}},"t":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":10},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.003205128205128205},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}},"/":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}},"d":{"docs":{},"i":{"docs":{},"s":{"docs":{},"c":{"docs":{},"u":{"docs":{},"s":{"docs":{},"s":{"docs":{},"/":{"8":{"4":{"0":{"0":{"6":{"docs":{},"/":{"docs":{},"c":{"docs":{},"l":{"docs":{},"a":{"docs":{},"s":{"docs":{},"s":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609}}}}}}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}},"s":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"s":{"docs":{},"q":{"docs":{},"u":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609}}}}}}}}},":":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}}}}},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},"a":{"docs":{},"y":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.009433962264150943},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":10.043583535108958},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.001962066710268149}},"/":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002421307506053269},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.002616088947024199}}},"s":{"docs":{},",":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002421307506053269}}},":":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.004842615012106538}}},"u":{"docs":{},"m":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002421307506053269}}}}}}}}}},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995}}}},".":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}}}}}},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"c":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.001962066710268149}}}}}}}},"p":{"docs":{},"r":{"docs":{},"o":{"docs":{},"b":{"docs":{},"l":{"docs":{},"e":{"docs":{},"m":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0030864197530864196},"Algorithms/DynamicProgramming-IV.html":{"ref":"Algorithms/DynamicProgramming-IV.html","tf":0.00980392156862745}}}}}}}}}},"m":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.01694915254237288},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.01775147928994083},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.003703703703703704},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0047169811320754715},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0027063599458728013},"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.005405405405405406},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.011772400261608895},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.006172839506172839},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.011019283746556474},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.003105590062111801},"Tricks/":{"ref":"Tricks/","tf":0.004608294930875576}},"/":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.009433962264150943},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002421307506053269},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0027063599458728013},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.007848266841072597},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.0027548209366391185}},"d":{"docs":{},"i":{"docs":{},"s":{"docs":{},"c":{"docs":{},"u":{"docs":{},"s":{"docs":{},"s":{"docs":{},"/":{"1":{"6":{"5":{"1":{"0":{"docs":{},"/":{"docs":{},"p":{"docs":{},"y":{"docs":{},"t":{"docs":{},"h":{"docs":{},"o":{"docs":{},"n":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.003205128205128205}}}}}}}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"2":{"9":{"9":{"0":{"4":{"9":{"docs":{},"/":{"docs":{},"d":{"docs":{},"p":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"4":{"5":{"5":{"0":{"2":{"4":{"docs":{},"/":{"docs":{},"d":{"docs":{},"p":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}}}}}}}},"a":{"docs":{},"m":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.0027548209366391185}},":":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.005509641873278237}}}}}}}}}},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},")":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002421307506053269}}}}}}},"i":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}}},"x":{"docs":{},"i":{"docs":{"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062}}}},"y":{"docs":{},"i":{"docs":{"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062}}}},"d":{"docs":{},"p":{"docs":{},")":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.0027548209366391185}}}}},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},")":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0015527950310559005}}}}}}}}},",":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002421307506053269},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0030864197530864196}}},"_":{"docs":{},"p":{"docs":{},"o":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.004842615012106538},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005}},"s":{"docs":{},":":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002421307506053269},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005}}},"[":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005}},"p":{"docs":{},"]":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002421307506053269}}}}}}}},"w":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.005145797598627788}}},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{},"_":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"b":{"docs":{},"e":{"docs":{},"r":{"docs":{},"_":{"docs":{},"o":{"docs":{},"f":{"docs":{},"_":{"docs":{},"e":{"docs":{},"l":{"docs":{},"e":{"docs":{},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"s":{"docs":{},"(":{"docs":{},"x":{"docs":{},",":{"docs":{"Tricks/":{"ref":"Tricks/","tf":0.004608294930875576}}}}}}}}}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},":":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.004842615012106538}}},"[":{"docs":{},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{},"r":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002421307506053269}},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"]":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002421307506053269}}}}}}}}}},"l":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0027063599458728013}}}},".":{"docs":{},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{},"m":{"docs":{},"s":{"docs":{},"(":{"docs":{},")":{"docs":{},":":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006}}}}}}}}}}}},".":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005}}},"o":{"docs":{},"f":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},"l":{"docs":{},"e":{"docs":{},"a":{"docs":{},"v":{"docs":{},"e":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.003703703703703704}}}}}}}}}}}}}}}}}}}},":":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.009433962264150943},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"b":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0023584905660377358}}}}}}}}}}}}}}}},"r":{"docs":{},"e":{"docs":{"DataStructures/LinkedLists/Instructions.html":{"ref":"DataStructures/LinkedLists/Instructions.html","tf":0.019230769230769232},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.003703703703703704},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.02631578947368421}}}},"c":{"docs":{},"h":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002840909090909091},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.005509641873278237},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0015527950310559005}}}}}}},"f":{"docs":{},"f":{"docs":{},"i":{"docs":{},"c":{"docs":{},"i":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"e":{"docs":{},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}}}},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}}}}},"p":{"docs":{},"o":{"docs":{},"s":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}},"r":{"docs":{},"t":{"docs":{"Miscellaneous/Palindrome.html":{"ref":"Miscellaneous/Palindrome.html","tf":0.011235955056179775}}}}}}}},"i":{"docs":{},"m":{"docs":{},"i":{"docs":{},"l":{"docs":{},"a":{"docs":{},"r":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002421307506053269},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.003703703703703704},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.003205128205128205},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.002616088947024199},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.009259259259259259},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.0027548209366391185},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.01098901098901099},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}}}}}},"p":{"docs":{},"l":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0015527950310559005},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}},"e":{"docs":{},".":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}},":":{"docs":{"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996}}}},"i":{"docs":{},"f":{"docs":{},"i":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062}}}}}}},"u":{"docs":{},"l":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}},"s":{"docs":{},"o":{"docs":{},"l":{"docs":{},"u":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"/":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}}}}}}}}}}}}}}},"z":{"docs":{},"e":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.009433962264150943},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.014527845036319613},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.01639344262295082},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498},"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.003125},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.005681818181818182},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},":":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00546448087431694}}}}},"n":{"docs":{},"g":{"docs":{},"l":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0023584905660377358},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},"i":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0064}}}}}},"t":{"docs":{},"u":{"docs":{},"a":{"docs":{},"t":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016},"Algorithms/Games.html":{"ref":"Algorithms/Games.html","tf":0.013333333333333334},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},",":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809}}}},",":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}}}},"g":{"docs":{},"n":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},"i":{"docs":{},"f":{"docs":{},"i":{"docs":{},"c":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.006872852233676976}}}}}},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}},".":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}}}},"[":{"0":{"docs":{},"]":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343}}}},"1":{"docs":{},":":{"docs":{},"]":{"docs":{},":":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343}}}}}},"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0015527950310559005}},":":{"docs":{"DataStructures/Arrays/SlidingWindow.html":{"ref":"DataStructures/Arrays/SlidingWindow.html","tf":0.009174311926605505}}},"]":{"docs":{"DataStructures/Arrays/SlidingWindow.html":{"ref":"DataStructures/Arrays/SlidingWindow.html","tf":0.009174311926605505}}}}}}}},"i":{"docs":{},"]":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005},"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.004658385093167702},"Tricks/":{"ref":"Tricks/","tf":0.004608294930875576}}},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},"]":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.004658385093167702}},",":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0015527950310559005}}}}}}}}},"j":{"docs":{},"]":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005}}}},"n":{"docs":{"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406}},"]":{"docs":{},":":{"docs":{"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.005555555555555556}}}}},"m":{"docs":{},"]":{"docs":{"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.005555555555555556}}}},":":{"docs":{},"i":{"docs":{},"]":{"docs":{},".":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"s":{"docs":{},"w":{"docs":{},"i":{"docs":{},"t":{"docs":{},"h":{"docs":{},"(":{"docs":{},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},")":{"docs":{},":":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.0027548209366391185}}}}}}}}}}}}}}}}}}}}},"x":{"docs":{},"]":{"docs":{},")":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"s":{"docs":{},"f":{"docs":{},"i":{"docs":{"DataStructures/Arrays/SlidingWindow.html":{"ref":"DataStructures/Arrays/SlidingWindow.html","tf":0.009174311926605505},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002421307506053269},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.003703703703703704},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0023584905660377358},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002840909090909091},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}}}}},"v":{"docs":{},"e":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.009433962264150943},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.0027548209366391185}}}},"m":{"docs":{},"e":{"docs":{"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.005847953216374269},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0027063599458728013},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00546448087431694},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.003205128205128205},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.010101010101010102},"Algorithms/Games.html":{"ref":"Algorithms/Games.html","tf":0.013333333333333334},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.002616088947024199},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414},"Tricks/":{"ref":"Tricks/","tf":0.004608294930875576}},".":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.006872852233676976}}},",":{"docs":{"Miscellaneous/Palindrome.html":{"ref":"Miscellaneous/Palindrome.html","tf":0.011235955056179775}}}},"p":{"docs":{},"l":{"docs":{"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}}}}},"y":{"docs":{},",":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}},"l":{"docs":{},"i":{"docs":{},"d":{"docs":{},"e":{"docs":{"DataStructures/Arrays/SlidingWindow.html":{"ref":"DataStructures/Arrays/SlidingWindow.html","tf":5.018348623853211},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.004842615012106538},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.005970149253731343},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343},"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.020202020202020204}}}},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},"l":{"docs":{},"i":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847}}}}}}},"c":{"docs":{},"e":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Miscellaneous/Palindrome.html":{"ref":"Miscellaneous/Palindrome.html","tf":0.011235955056179775}},"s":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995}}}},"+":{"1":{"docs":{},";":{"docs":{"Tricks/":{"ref":"Tricks/","tf":0.004608294930875576}}}},"docs":{}}}}},"o":{"docs":{},"w":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0064},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}},"e":{"docs":{},"r":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.009433962264150943},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358}}}},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0032}},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016}}}}}}}}}}}}},"t":{"docs":{},"s":{"1":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}},":":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"[":{"1":{"docs":{},"]":{"docs":{},":":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}}},"docs":{}}}}}},"2":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}},":":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}},"docs":{},"_":{"docs":{},"a":{"docs":{},"v":{"docs":{},"a":{"docs":{},"i":{"docs":{},"l":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}}}}}}}}}}}},"m":{"docs":{},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}},"e":{"docs":{},"r":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.009433962264150943},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.005970149253731343},"DataStructures/Trees/NumTrees.html":{"ref":"DataStructures/Trees/NumTrees.html","tf":0.008849557522123894},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Tricks/":{"ref":"Tricks/","tf":0.009216589861751152}},":":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717}}}},"s":{"docs":{},"t":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}},"_":{"docs":{},"a":{"docs":{},"m":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995}}}}}}}}}}},"r":{"docs":{},"t":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609}},":":{"docs":{"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062}}}}}}},"w":{"docs":{},"a":{"docs":{},"p":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002421307506053269},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828},"Tricks/":{"ref":"Tricks/","tf":0.004608294930875576}},".":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488}}}}}},"c":{"docs":{"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406}},"e":{"docs":{},"n":{"docs":{},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{},"o":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.003205128205128205}},"s":{"docs":{},":":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717}}}}}}}}}},"h":{"docs":{},"e":{"docs":{},"d":{"docs":{},"u":{"docs":{},"l":{"docs":{"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.015748031496062992},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},"e":{"docs":{},"/":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"r":{"docs":{},"s":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625}}}}}}}}}}}}}},"r":{"docs":{},"/":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0033222591362126247},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}}},"m":{"docs":{},"e":{"docs":{},"s":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}},"o":{"docs":{},"r":{"docs":{},"e":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.001962066710268149}},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995}}},"o":{"docs":{},"f":{"docs":{},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"h":{"docs":{},"e":{"docs":{},"s":{"docs":{},"e":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0015527950310559005}}}}}}}}}}}}}}}}}}}}}}}}},"p":{"docs":{},"a":{"docs":{},"n":{"docs":{},"/":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717}}}},"c":{"docs":{},"e":{"docs":{"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}},"i":{"docs":{},"r":{"docs":{},"a":{"docs":{},"l":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678}}}}}},"e":{"docs":{},"l":{"docs":{},"l":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}},"c":{"docs":{},"i":{"docs":{},"f":{"docs":{},"i":{"docs":{},"c":{"docs":{},"s":{"docs":{},",":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.02631578947368421}}}}}}}}}},"l":{"docs":{},"i":{"docs":{},"t":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}}}}}}},"h":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}},"d":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},"c":{"docs":{},"o":{"docs":{},"l":{"docs":{},"o":{"docs":{},"r":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406}}}}}}}}}}}}}}}}}}}}},"t":{"docs":{},"o":{"docs":{},"c":{"docs":{},"h":{"docs":{},"a":{"docs":{},"r":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406}}}}}}}}}}}}}},"a":{"docs":{},"l":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"n":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"p":{"docs":{},"a":{"docs":{},"t":{"docs":{},"h":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476}}}}}}}}}}}}}}}}}}}}}}}},"b":{"docs":{},"r":{"docs":{},"i":{"docs":{},"d":{"docs":{},"g":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002840909090909091}}}}}}}}}}}}}},"p":{"docs":{},"a":{"docs":{},"t":{"docs":{},"h":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002840909090909091}}}}}}}}}}}}}}}}},"u":{"docs":{},"l":{"docs":{},"d":{"docs":{},"n":{"docs":{},"'":{"docs":{},"t":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016}}}}}}},"d":{"docs":{},"n":{"docs":{},"'":{"docs":{},"t":{"docs":{"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062}}}}}}},"w":{"docs":{},"c":{"docs":{},"a":{"docs":{},"s":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}},"i":{"docs":{},"f":{"docs":{},"t":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343}}}},"p":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}},"w":{"docs":{},"i":{"docs":{},"t":{"docs":{},"h":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"a":{"docs":{},"y":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}}}}}}}}}}}}}}}}}}}},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.003205128205128205}}}},"l":{"docs":{},"v":{"docs":{},"e":{"docs":{},"s":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}},"a":{"docs":{},"r":{"docs":{},"e":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.016483516483516484}}}}}},",":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.005952380952380952},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.006060606060606061},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.003125},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0049833887043189366},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}},"_":{"docs":{},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{"DataStructures/Trees/NumTrees.html":{"ref":"DataStructures/Trees/NumTrees.html","tf":0.008849557522123894}},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{"DataStructures/Trees/NumTrees.html":{"ref":"DataStructures/Trees/NumTrees.html","tf":0.008849557522123894}}}},"j":{"docs":{},"]":{"docs":{"DataStructures/Trees/NumTrees.html":{"ref":"DataStructures/Trees/NumTrees.html","tf":0.008849557522123894}},",":{"docs":{"DataStructures/Trees/NumTrees.html":{"ref":"DataStructures/Trees/NumTrees.html","tf":0.008849557522123894}}}}}}}}},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"r":{"docs":{},"s":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625}},"e":{"docs":{},"s":{"docs":{},":":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625}}}}}}}}}},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.005509641873278237}},":":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.0027548209366391185}}}}}},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0015527950310559005}},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.004658385093167702}}}},"o":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"_":{"docs":{},"b":{"docs":{},"r":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"e":{"docs":{},"t":{"docs":{},"s":{"docs":{},".":{"docs":{},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{},"]":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0015527950310559005}}}}}}}}}}}}}}}}}}}}}}}}}}}},"q":{"docs":{},"u":{"docs":{},"a":{"docs":{},"r":{"docs":{"DataStructures/Trees/NumTrees.html":{"ref":"DataStructures/Trees/NumTrees.html","tf":0.008849557522123894},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0030864197530864196},"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.002777777777777778}},"e":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995}}},"s":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995}}},",":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}}}}},"i":{"docs":{},"r":{"docs":{},"r":{"docs":{},"e":{"docs":{},"l":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}},":":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}}}}},")":{"docs":{},")":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476}}},":":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476}}},",":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}}},"]":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}},"r":{"docs":{},"c":{"docs":{},",":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907}}},":":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625}}},")":{"docs":{},")":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625}}}}}},"]":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0015527950310559005}}},"n":{"docs":{},"i":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"t":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}}}},"u":{"docs":{},"r":{"docs":{},"l":{"docs":{"./":{"ref":"./","tf":0.02631578947368421}}}},"s":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.03225806451612903},"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.009433962264150943},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002421307506053269},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005},"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.009345794392523364},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016},"DataStructures/LinkedLists/Instructions.html":{"ref":"DataStructures/LinkedLists/Instructions.html","tf":0.038461538461538464},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.018518518518518517},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847},"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.014218009478672985},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004149377593360996},"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.008403361344537815},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.003125},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002840909090909091},"Algorithms/TrickySorting.html":{"ref":"Algorithms/TrickySorting.html","tf":0.024390243902439025},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.007407407407407408},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.00641025641025641},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.005405405405405406},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.020202020202020204},"Algorithms/Games.html":{"ref":"Algorithms/Games.html","tf":0.013333333333333334},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.006172839506172839},"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.002777777777777778},"Algorithms/DynamicProgramming-IV.html":{"ref":"Algorithms/DynamicProgramming-IV.html","tf":0.00980392156862745},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.01098901098901099},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0038535645472061657},"Tricks/":{"ref":"Tricks/","tf":0.013824884792626729}},"e":{"docs":{},"r":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.010752688172043012}}},"d":{"docs":{},":":{"docs":{"DataStructures/StacksAndQueues/":{"ref":"DataStructures/StacksAndQueues/","tf":0.01020408163265306}}}},"f":{"docs":{},"u":{"docs":{},"l":{"docs":{},":":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358}}}}}}},"u":{"docs":{},"a":{"docs":{},"l":{"docs":{},".":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}},"l":{"docs":{},"y":{"docs":{},",":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}}}}}}},"n":{"docs":{},"t":{"docs":{},"i":{"docs":{},"l":{"docs":{"DataStructures/Arrays/SlidingWindow.html":{"ref":"DataStructures/Arrays/SlidingWindow.html","tf":0.009174311926605505},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016},"DataStructures/LinkedLists/Instructions.html":{"ref":"DataStructures/LinkedLists/Instructions.html","tf":0.019230769230769232},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.003703703703703704},"Miscellaneous/Palindrome.html":{"ref":"Miscellaneous/Palindrome.html","tf":0.011235955056179775},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0015527950310559005}}}}},"l":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002421307506053269},"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.010101010101010102}}}}},"i":{"docs":{},"k":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}}}}},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062}},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{"DataStructures/LinkedLists/Instructions.html":{"ref":"DataStructures/LinkedLists/Instructions.html","tf":0.019230769230769232},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202},"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}}}}}}},"i":{"docs":{},"r":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}}}}}},"n":{"docs":{},"e":{"docs":{},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.003703703703703704}}}}}}}}}}},"u":{"docs":{},"s":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}}}},"v":{"docs":{},"i":{"docs":{},"s":{"docs":{},"i":{"docs":{},"t":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}}}}},"i":{"docs":{},"q":{"docs":{},"u":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.003205128205128205},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0030864197530864196},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.011019283746556474}},"e":{"docs":{},"p":{"docs":{},"a":{"docs":{},"t":{"docs":{},"h":{"docs":{},"s":{"docs":{},"w":{"docs":{},"i":{"docs":{},"t":{"docs":{},"h":{"docs":{},"o":{"docs":{},"b":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"c":{"docs":{},"l":{"docs":{},"e":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Algorithms/DP/NumSol.html":{"ref":"Algorithms/DP/NumSol.html","tf":0.013888888888888888}}}}}}}}}}}}}}}}}}}}},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0030864197530864196},"Algorithms/DynamicProgramming-IV.html":{"ref":"Algorithms/DynamicProgramming-IV.html","tf":0.00980392156862745}}}}}}}}}}}}}}}}},"b":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"d":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995}}}}}},"a":{"docs":{},"l":{"docs":{},"a":{"docs":{},"n":{"docs":{},"c":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0015527950310559005}}}}}}}}},"p":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.023952095808383235},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.003703703703703704},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0040595399188092015},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476},"Algorithms/TrickySorting.html":{"ref":"Algorithms/TrickySorting.html","tf":0.024390243902439025},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.001962066710268149},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.007751937984496124},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.02631578947368421}},"d":{"docs":{},"a":{"docs":{},"t":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.001962066710268149},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.0027548209366391185},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}}},":":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062}}},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0033222591362126247}},":":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}}}}},",":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.008403361344537815}}},"_":{"docs":{},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.007874015748031496}},".":{"docs":{},"r":{"docs":{},"e":{"docs":{},"m":{"docs":{},"o":{"docs":{},"v":{"docs":{},"e":{"docs":{},"(":{"docs":{},"p":{"docs":{},")":{"docs":{"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.007874015748031496}}}}}}}}}}}},":":{"docs":{"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.015748031496062992}}}}}}},"l":{"docs":{},"t":{"docs":{},"i":{"docs":{},"m":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}}}}}},"t":{"docs":{},"i":{"docs":{},"l":{"docs":{"Miscellaneous/Palindrome.html":{"ref":"Miscellaneous/Palindrome.html","tf":0.011235955056179775}}}}}},"(":{"0":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.005681818181818182}},",":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.005681818181818182},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.005509641873278237}}}},"1":{"0":{"docs":{},"*":{"docs":{},"*":{"9":{"docs":{"DataStructures/Trees/NumTrees.html":{"ref":"DataStructures/Trees/NumTrees.html","tf":0.008849557522123894}}},"docs":{}}}},"3":{"2":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717}}},"docs":{}},"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}},")":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}},",":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.008264462809917356}}}},"2":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0015527950310559005}},",":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.005509641873278237}}}},"4":{"docs":{},",":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.0027548209366391185}}}},"6":{"docs":{},",":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.0027548209366391185}}}},"7":{"docs":{},",":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.0027548209366391185}}}},"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},"h":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625}},"t":{"docs":{},"t":{"docs":{},"p":{"docs":{},"s":{"docs":{},":":{"docs":{},"/":{"docs":{},"/":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},".":{"docs":{},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"/":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"/":{"docs":{},"w":{"docs":{},"e":{"docs":{},"e":{"docs":{},"k":{"docs":{},"l":{"docs":{},"i":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.010752688172043012}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},"a":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016}}}},"p":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625}}}}}},"k":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907}},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"a":{"docs":{},"!":{"docs":{},")":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.010752688172043012}}}}}}}},"+":{"1":{"docs":{},")":{"docs":{},":":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625}}}}},"docs":{}},"n":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"Algorithms/DynamicProgramming-IV.html":{"ref":"Algorithms/DynamicProgramming-IV.html","tf":0.00980392156862745}}}}}}}},"e":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}},"n":{"docs":{},"d":{"docs":{"DataStructures/Arrays/SlidingWindow.html":{"ref":"DataStructures/Arrays/SlidingWindow.html","tf":0.01834862385321101},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}},"_":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002421307506053269}}}}}}}}}},"g":{"docs":{},".":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006}}}},"a":{"docs":{},"s":{"docs":{},"i":{"docs":{},"e":{"docs":{},"r":{"docs":{"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576}}}}}}},"v":{"docs":{},"e":{"docs":{},"n":{"docs":{"Miscellaneous/Palindrome.html":{"ref":"Miscellaneous/Palindrome.html","tf":0.011235955056179775}}}}}},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{"DataStructures/Arrays/SlidingWindow.html":{"ref":"DataStructures/Arrays/SlidingWindow.html","tf":0.009174311926605505},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.003430531732418525},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}},"_":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002421307506053269}}}}}}}}}}},"e":{"docs":{},"p":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809}},"s":{"docs":{},",":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002840909090909091}}}}}},"r":{"docs":{},"(":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},".":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},")":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},",":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0015527950310559005}}}}}}}},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625}},"e":{"docs":{},"d":{"docs":{},")":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002421307506053269}}}}}}},"m":{"docs":{},"e":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}},"u":{"docs":{},"m":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0023584905660377358}}},"b":{"docs":{},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},"a":{"docs":{},"y":{"docs":{},")":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}}}},"e":{"docs":{},"e":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488}}},"c":{"docs":{},"r":{"docs":{},"e":{"docs":{},"t":{"docs":{},"l":{"docs":{},"i":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}}}}}}}},"n":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.009433962264150943},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002421307506053269},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005},"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.010810810810810811},"Algorithms/Games.html":{"ref":"Algorithms/Games.html","tf":0.013333333333333334},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.006872852233676976},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.0027548209366391185},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.002890173410404624}},"o":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809}},"t":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.009433962264150943},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0023584905660377358}}},"d":{"docs":{},"e":{"docs":{},".":{"docs":{},"v":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0023584905660377358},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0040595399188092015}}}},",":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476}}}}}},"u":{"docs":{},"m":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.01}}}}}}}},"+":{"1":{"docs":{},")":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}},"t":{"docs":{},"h":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016}}}},"s":{"docs":{},"t":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}},"docs":{}},"e":{"docs":{},"e":{"docs":{},"d":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625}}}}},"c":{"docs":{},"r":{"docs":{},")":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.003205128205128205}}}}}},"c":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476}},"u":{"docs":{},"r":{"docs":{},"r":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.004842615012106538},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0023584905660377358}}}}}}}},"h":{"docs":{},"e":{"docs":{},"c":{"docs":{},"k":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609},"DataStructures/LinkedLists/Instructions.html":{"ref":"DataStructures/LinkedLists/Instructions.html","tf":0.019230769230769232},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.0027548209366391185},"Tricks/":{"ref":"Tricks/","tf":0.004608294930875576}}}}}},"o":{"docs":{},"l":{"docs":{},"l":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},".":{"docs":{},"d":{"docs":{},"e":{"docs":{},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},")":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809}}}}}}}}}}}}}}}}}}},"a":{"docs":{},"r":{"docs":{},"e":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}},"d":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002421307506053269},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0023584905660377358},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907}},"j":{"docs":{},"i":{"docs":{},"k":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"a":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907}}}}}}}}},"p":{"docs":{},"[":{"docs":{},"p":{"docs":{},"o":{"docs":{},"s":{"docs":{},"]":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.0027548209366391185}}}}}}}},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"_":{"docs":{},"t":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}}},"i":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002421307506053269},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.008108108108108109},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.001962066710268149},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.005509641873278237},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}},"d":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016}}},"e":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002840909090909091}}},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703}}},"n":{"docs":{},"t":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}},"c":{"docs":{},"l":{"docs":{},"u":{"docs":{},"d":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.0027548209366391185}}}}}}},")":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}}},"f":{"docs":{"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062}}}},"l":{"1":{"docs":{},"_":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016}}}}}}},"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0027063599458728013}},"e":{"docs":{},"n":{"docs":{},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},")":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002421307506053269}}}}}}},"t":{"docs":{},"i":{"docs":{},"c":{"docs":{},"k":{"docs":{},"e":{"docs":{},"t":{"docs":{},"s":{"docs":{},")":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}}}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{},"e":{"docs":{},"s":{"docs":{},")":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}}}}}}}}},"v":{"docs":{},"e":{"docs":{},"l":{"docs":{},"w":{"docs":{},"i":{"docs":{},"s":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809}}}}}}}},"f":{"docs":{},"t":{"docs":{},"_":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006}}}}},"i":{"docs":{},"d":{"docs":{},"x":{"docs":{"Tricks/":{"ref":"Tricks/","tf":0.004608294930875576}}}}}}}},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}}}}}},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"s":{"docs":{},"[":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"_":{"docs":{},"i":{"docs":{},"d":{"docs":{},"x":{"docs":{},"]":{"docs":{},".":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},",":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016}}}}}}}}}}}}}}}}}}}}},".":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},",":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.003125}}}}}}},"a":{"docs":{},"s":{"docs":{},"t":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}}}},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"[":{"docs":{},"i":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343}}}}}}}}}}}}},"n":{"docs":{},"e":{"docs":{"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062}}}},"u":{"docs":{},"t":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.005509641873278237}}}},"d":{"docs":{},"d":{"docs":{"Miscellaneous/Palindrome.html":{"ref":"Miscellaneous/Palindrome.html","tf":0.011235955056179775}}}}},"w":{"docs":{},"e":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343}}},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.007751937984496124}}}}}},"_":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},".":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},",":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016}}}}}}}}}}},"d":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625}}},"x":{"docs":{},",":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358}}}}},"t":{"docs":{"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.020202020202020204}},"h":{"docs":{},"e":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625}}},"i":{"docs":{},"n":{"docs":{},"k":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847}}}}}},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"/":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},"m":{"docs":{},"e":{"docs":{},".":{"docs":{},"m":{"docs":{},"d":{"docs":{},")":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016}}}}}}}}}}}}},"s":{"docs":{},"[":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},"_":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},"]":{"docs":{"DataStructures/Trees/NumTrees.html":{"ref":"DataStructures/Trees/NumTrees.html","tf":0.017699115044247787}}}}}}}}}}}}}},",":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678}}}}}},"i":{"docs":{},"c":{"docs":{},"k":{"docs":{},"s":{"docs":{},"/":{"docs":{},"d":{"docs":{},"s":{"docs":{},")":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}}}}},"i":{"docs":{},"m":{"docs":{},"e":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907}}}}},"o":{"docs":{},"p":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}},"t":{"docs":{},"a":{"docs":{},"l":{"docs":{},"_":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}}}}}}}},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},")":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}}}},"m":{"docs":{},"e":{"docs":{},"r":{"docs":{},"g":{"docs":{"DataStructures/LinkedLists/Instructions.html":{"ref":"DataStructures/LinkedLists/Instructions.html","tf":0.019230769230769232}}}}},"a":{"docs":{},"t":{"docs":{},"h":{"docs":{},".":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"(":{"docs":{},"i":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}},"j":{"docs":{},",":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}}}}},"k":{"docs":{},"e":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}},"x":{"docs":{},"_":{"docs":{},"f":{"docs":{},"r":{"docs":{},"e":{"docs":{},"q":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},"_":{"docs":{},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}}}}}}},"h":{"docs":{},"e":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}}}}}},",":{"docs":{"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.005555555555555556}}}},"r":{"docs":{},"e":{"docs":{},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{},"s":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.017964071856287425}}}}}}},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.003703703703703704}}}}}}}}}},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"Tricks/":{"ref":"Tricks/","tf":0.004608294930875576}},"_":{"docs":{},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006}}}}}}}}}}},"f":{"docs":{},"l":{"docs":{},"o":{"docs":{},"a":{"docs":{},"t":{"docs":{},"(":{"docs":{},"'":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006}}}}}}}}},"x":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.005681818181818182},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0049382716049382715},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},"_":{"docs":{},"f":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"d":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.01092896174863388}}}}}}}},"*":{"docs":{},"x":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625}}}},",":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.009876543209876543},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062}},"i":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.008522727272727272}}},"y":{"docs":{},"+":{"1":{"docs":{},")":{"docs":{},",":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.005681818181818182}}},"]":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002840909090909091}}}}},"docs":{}}}},"[":{"0":{"docs":{},"]":{"docs":{},",":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123},"Tricks/":{"ref":"Tricks/","tf":0.004608294930875576}}}}},"1":{"docs":{},"]":{"docs":{},",":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625}}}}},"docs":{}},"+":{"1":{"docs":{},",":{"docs":{},"y":{"docs":{},")":{"docs":{},",":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002840909090909091}}}}}},")":{"docs":{"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062}}}},"docs":{}},"i":{"docs":{},")":{"docs":{},"]":{"docs":{"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062}}}}}},"y":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}},"_":{"docs":{},"f":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"d":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847}}}}}}}},"o":{"docs":{},"u":{"docs":{},"'":{"docs":{},"l":{"docs":{},"l":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358}}}}}}},"+":{"1":{"docs":{},")":{"docs":{"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062}}}},"docs":{}},"i":{"docs":{},")":{"docs":{},"]":{"docs":{"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062}}}}}},"a":{"docs":{},"d":{"docs":{},"d":{"docs":{"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877}}}},"r":{"docs":{},"r":{"docs":{},"a":{"docs":{},"y":{"docs":{},"s":{"docs":{},",":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678}}}}}}}},"[":{"docs":{},"p":{"docs":{},"+":{"1":{"docs":{},"]":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}},"docs":{}}}},"b":{"docs":{},"s":{"docs":{},"(":{"docs":{},"x":{"docs":{},")":{"docs":{},",":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}}}}}}},"u":{"docs":{},"s":{"docs":{},"e":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"i":{"docs":{},"d":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476}}}}}},"e":{"docs":{},"r":{"docs":{},"i":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703}}}}}},"p":{"docs":{},"o":{"docs":{},"s":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},")":{"docs":{},".":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}}}}}}}},"i":{"docs":{},"t":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703}}}}}},"a":{"docs":{},"y":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625}}}},"r":{"docs":{},"i":{"docs":{},"c":{"docs":{},"e":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625}}}},"o":{"docs":{},"r":{"docs":{},"i":{"docs":{},"t":{"docs":{},"y":{"docs":{},",":{"docs":{"Tricks/":{"ref":"Tricks/","tf":0.004608294930875576}}}}}}}}},"o":{"docs":{},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},",":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625}}}}}}}}}}}},"[":{"docs":{},"x":{"docs":{},"]":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}},"j":{"docs":{},"]":{"docs":{"Tricks/":{"ref":"Tricks/","tf":0.004608294930875576}}}}}},"(":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625}},"i":{"docs":{},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703}}}}},"=":{"docs":{},"=":{"docs":{},"r":{"docs":{},")":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.003205128205128205}}}}}},"b":{"docs":{},"i":{"docs":{},"t":{"docs":{},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488}}}}}}},"a":{"docs":{},"g":{"docs":{},"_":{"docs":{},"w":{"docs":{},"e":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}}}}}}}}},"o":{"docs":{},"t":{"docs":{},"t":{"docs":{},"o":{"docs":{},"m":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}}}}}},"j":{"docs":{"Tricks/":{"ref":"Tricks/","tf":0.004608294930875576}}}},"+":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.010752688172043012},"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.04},"DataStructures/Arrays/SlidingWindow.html":{"ref":"DataStructures/Arrays/SlidingWindow.html","tf":0.027522935779816515},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.009685230024213076},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.01775147928994083},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.02},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.017543859649122806},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0032},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.018518518518518517},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0330188679245283},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.02165087956698241},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00819672131147541},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.012448132780082987},"DataStructures/Trees/NumTrees.html":{"ref":"DataStructures/Trees/NumTrees.html","tf":0.008849557522123894},"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.005952380952380952},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.01680672268907563},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.014141414141414142},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0125},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002840909090909091},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.014814814814814815},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.02564102564102564},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.04054054054054054},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.012006861063464836},"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.04040404040404041},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.01718213058419244},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.013734466971877043},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.011627906976744186},"Algorithms/DP/NumSol.html":{"ref":"Algorithms/DP/NumSol.html","tf":0.013888888888888888},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.023148148148148147},"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.041666666666666664},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.02203856749311295},"Algorithms/DynamicProgramming-IV.html":{"ref":"Algorithms/DynamicProgramming-IV.html","tf":0.00980392156862745},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.02197802197802198},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.013289036544850499},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.026397515527950312},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.015414258188824663},"Tricks/":{"ref":"Tricks/","tf":0.009216589861751152}},"=":{"docs":{"DataStructures/Arrays/SlidingWindow.html":{"ref":"DataStructures/Arrays/SlidingWindow.html","tf":0.009174311926605505},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.012106537530266344},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.01},"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.018691588785046728},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.008771929824561403},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.007407407407407408},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.009433962264150943},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.006765899864682003},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847},"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.006224066390041493},"DataStructures/Trees/NumTrees.html":{"ref":"DataStructures/Trees/NumTrees.html","tf":0.017699115044247787},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.010101010101010102},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.00625},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002840909090909091},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.003205128205128205},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.003430531732418525},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.006872852233676976},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Algorithms/DP/NumSol.html":{"ref":"Algorithms/DP/NumSol.html","tf":0.027777777777777776},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.005509641873278237},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.008305647840531562},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.010869565217391304},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.010597302504816955}}}},"=":{"docs":{"DataStructures/StacksAndQueues/":{"ref":"DataStructures/StacksAndQueues/","tf":0.061224489795918366},"DataStructures/Arrays/SlidingWindow.html":{"ref":"DataStructures/Arrays/SlidingWindow.html","tf":0.07339449541284404},"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.0660377358490566},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.04116222760290557},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.07100591715976332},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.08},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.05373134328358209},"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.018691588785046728},"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.0918918918918919},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0847953216374269},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0912},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.017964071856287425},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.06296296296296296},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.054245283018867926},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.06495263870094722},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.09289617486338798},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.058823529411764705},"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.037914691943127965},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.08298755186721991},"DataStructures/Trees/NumTrees.html":{"ref":"DataStructures/Trees/NumTrees.html","tf":0.061946902654867256},"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.05303030303030303},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.07738095238095238},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.06302521008403361},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.06464646464646465},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.10236220472440945},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.06875},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.06818181818181818},"Algorithms/TrickySorting.html":{"ref":"Algorithms/TrickySorting.html","tf":0.024390243902439025},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.06419753086419754},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.057692307692307696},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.021621621621621623},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0823327615780446},"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.030303030303030304},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.07903780068728522},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.020274689339437543},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.023255813953488372},"Algorithms/DP/NumSol.html":{"ref":"Algorithms/DP/NumSol.html","tf":0.06944444444444445},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.044753086419753084},"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.041666666666666664},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.030303030303030304},"Algorithms/DynamicProgramming-IV.html":{"ref":"Algorithms/DynamicProgramming-IV.html","tf":0.06862745098039216},"Miscellaneous/Palindrome.html":{"ref":"Miscellaneous/Palindrome.html","tf":0.02247191011235955},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.03296703296703297},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.08305647840531562},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.046583850931677016},"Miscellaneous/AlienDictionary.html":{"ref":"Miscellaneous/AlienDictionary.html","tf":0.043478260869565216},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.057803468208092484},"Tricks/":{"ref":"Tricks/","tf":0.027649769585253458}},">":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.010752688172043012},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016}}},"=":{"docs":{"DataStructures/StacksAndQueues/":{"ref":"DataStructures/StacksAndQueues/","tf":0.01020408163265306},"DataStructures/Arrays/SlidingWindow.html":{"ref":"DataStructures/Arrays/SlidingWindow.html","tf":0.009174311926605505},"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.009433962264150943},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.007263922518159807},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005},"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.04672897196261682},"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.010810810810810811},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.008771929824561403},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0032},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.007407407407407408},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.02122641509433962},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0040595399188092015},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00819672131147541},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.016042780748663103},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498},"DataStructures/Trees/NumTrees.html":{"ref":"DataStructures/Trees/NumTrees.html","tf":0.02654867256637168},"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.030303030303030304},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.008928571428571428},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.012605042016806723},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.007874015748031496},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0140625},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.008522727272727272},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.009876543209876543},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.028846153846153848},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.016216216216216217},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.003430531732418525},"Algorithms/Games.html":{"ref":"Algorithms/Games.html","tf":0.013333333333333334},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.027491408934707903},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Algorithms/DP/NumSol.html":{"ref":"Algorithms/DP/NumSol.html","tf":0.013888888888888888},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.027777777777777776},"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.025},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.008264462809917356},"Algorithms/DynamicProgramming-IV.html":{"ref":"Algorithms/DynamicProgramming-IV.html","tf":0.0392156862745098},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.006644518272425249},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.027950310559006212},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.008670520231213872}}}},"[":{"0":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.01},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.005952380952380952}},"]":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002421307506053269},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0030864197530864196},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.0027548209366391185},"Tricks/":{"ref":"Tricks/","tf":0.004608294930875576}},"[":{"0":{"docs":{},"]":{"docs":{},")":{"docs":{"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062}}}}},"docs":{}}},",":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}},"1":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.0027548209366391185}},"]":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609},"DataStructures/Trees/NumTrees.html":{"ref":"DataStructures/Trees/NumTrees.html","tf":0.008849557522123894},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}},",":{"docs":{"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358}}}},"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.005145797598627788},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.003105590062111801}},"n":{"docs":{},"e":{"docs":{},"w":{"docs":{},"]":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.010752688172043012}}}}},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},".":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"]":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00546448087431694}},")":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0047169811320754715}}},",":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0047169811320754715}}}}}}},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},",":{"docs":{"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877}}}}}}}}}}}}},"]":{"docs":{},")":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}},"u":{"docs":{},"m":{"docs":{},"]":{"docs":{},",":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.003205128205128205}}}},"s":{"docs":{},"[":{"docs":{},"j":{"docs":{},"]":{"docs":{},"]":{"docs":{},")":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.003205128205128205}}}}}}}}}}},"]":{"docs":{"DataStructures/StacksAndQueues/":{"ref":"DataStructures/StacksAndQueues/","tf":0.02040816326530612},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.014925373134328358},"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.009345794392523364},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.014814814814814815},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0047169811320754715},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0027063599458728013},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0106951871657754},"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498},"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.008403361344537815},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.015748031496062992},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0109375},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.016025641025641024},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.0027548209366391185},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.009966777408637873},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.004658385093167702},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0038535645472061657},"Tricks/":{"ref":"Tricks/","tf":0.004608294930875576}},")":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.005847953216374269},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0023584905660377358},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00819672131147541},"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.015151515151515152},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.006060606060606061},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625}},":":{"docs":{"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00404040404040404},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625}}}},",":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0023584905660377358},"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.00625},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.0027548209366391185}}}},"[":{"0":{"docs":{"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062},"Algorithms/DP/NumSol.html":{"ref":"Algorithms/DP/NumSol.html","tf":0.013888888888888888},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098},"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.002777777777777778},"Algorithms/DynamicProgramming-IV.html":{"ref":"Algorithms/DynamicProgramming-IV.html","tf":0.00980392156862745}},"]":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}},"docs":{},"i":{"docs":{},",":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717}}}},"f":{"docs":{},"l":{"docs":{},"o":{"docs":{},"a":{"docs":{},"t":{"docs":{},"(":{"docs":{},"'":{"docs":{},"i":{"docs":{},"n":{"docs":{},"f":{"docs":{},"'":{"docs":{},")":{"docs":{},",":{"docs":{"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406}}}}}}}}}}}}}},"a":{"docs":{},"l":{"docs":{},"s":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}}}},"x":{"docs":{},",":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358}}}},"]":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.0027548209366391185}}}},"d":{"docs":{},"m":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"[":{"docs":{},"q":{"docs":{"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406}}}}}}}}},"f":{"docs":{},"l":{"docs":{},"o":{"docs":{},"a":{"docs":{},"t":{"docs":{},"(":{"docs":{},"'":{"docs":{},"i":{"docs":{},"n":{"docs":{},"f":{"docs":{},"'":{"docs":{},")":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907}},"]":{"docs":{"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406}}}}}}}}}}}}}},"a":{"docs":{},"l":{"docs":{},"s":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.003205128205128205}},"e":{"docs":{},"]":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.003205128205128205}}}}}}}},"i":{"docs":{},"]":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343}}},",":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"]":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343}}}}}},"(":{"docs":{},"l":{"docs":{},"o":{"docs":{},"w":{"docs":{},"e":{"docs":{},"r":{"docs":{},")":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}},"]":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}}}}}}}}}},"]":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}},",":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}},"p":{"docs":{},".":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},",":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0027063599458728013}}}}}}},"i":{"docs":{},"d":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"]":{"docs":{"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576}}}}}}}},"r":{"docs":{},"e":{"docs":{},"v":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}}}},"x":{"docs":{"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062}},"[":{"docs":{},"x":{"docs":{},"]":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00819672131147541}}}}},"]":{"docs":{},"[":{"docs":{},"y":{"docs":{},"]":{"docs":{"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062}}}}}}},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},".":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"]":{"docs":{"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877}}}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"(":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},")":{"docs":{},")":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}}}}}}}}}}}}}}}}}}}},"'":{"docs":{},"j":{"docs":{},"f":{"docs":{},"k":{"docs":{},"'":{"docs":{},"]":{"docs":{},")":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}}}}}},"(":{"docs":{},"'":{"docs":{},",":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.003105590062111801}}}}},")":{"docs":{},"'":{"docs":{},",":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0015527950310559005}}}}}},"c":{"docs":{"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.007874015748031496},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0015527950310559005}},"]":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{},"i":{"docs":{},"d":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"]":{"docs":{},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703}}}}}}}}}}}}}}}}},"e":{"docs":{},"]":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}},"(":{"0":{"docs":{},",":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625}}}},"4":{"docs":{},",":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.0027548209366391185}}}},"docs":{},"e":{"docs":{},",":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625}}}},"x":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002840909090909091}},"+":{"1":{"docs":{},",":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358}},"y":{"docs":{},")":{"docs":{},",":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.005681818181818182}},"(":{"docs":{},"x":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625}}}}}}}}},"docs":{}}},"(":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}},"l":{"docs":{},"o":{"docs":{},"o":{"docs":{},"k":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}}}},"w":{"docs":{},"e":{"docs":{},"r":{"docs":{},",":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}}}}}}}},"_":{"docs":{},"a":{"docs":{},",":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488}}}}},"a":{"docs":{},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"a":{"docs":{},"g":{"docs":{},"e":{"docs":{},"(":{"0":{"docs":{},",":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}},"docs":{}}}}}}}}},"y":{"docs":{"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062}}},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"_":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},",":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}}}}}}}}}},".":{"2":{"docs":{},"*":{"docs":{},"(":{"docs":{},"c":{"1":{"docs":{},"+":{"docs":{},"c":{"2":{"docs":{},"+":{"docs":{},"c":{"3":{"docs":{},")":{"docs":{},"]":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0015527950310559005}}}}},"docs":{}}}},"docs":{}}}},"docs":{}}}}},"docs":{},"(":{"docs":{},"c":{"1":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0015527950310559005}}},"docs":{}}},".":{"1":{"docs":{},"]":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0015527950310559005}}}},"docs":{},"(":{"docs":{},"]":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0015527950310559005}}}}}}},"a":{"docs":{},"b":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.010752688172043012}}}}}}},"o":{"docs":{},"l":{"docs":{},"u":{"docs":{},"t":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.004842615012106538},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}},"v":{"docs":{},"e":{"docs":{},".":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}},"(":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},".":{"docs":{},"v":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625}}}}}}}},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"[":{"docs":{},"b":{"docs":{"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.010101010101010102}}}}}}}},"q":{"docs":{},"u":{"docs":{},"i":{"docs":{},"r":{"docs":{},"r":{"docs":{},"e":{"docs":{},"l":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}},"1":{"docs":{},"]":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}},"docs":{}}}}}}}}}},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"(":{"docs":{},"s":{"docs":{},")":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}}}}}}}},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}},"1":{"docs":{},"]":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}},"docs":{}}}}}}}},"o":{"docs":{},"v":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002840909090909091}},"e":{"docs":{},".":{"docs":{"Algorithms/Games.html":{"ref":"Algorithms/Games.html","tf":0.013333333333333334}}}}}}},"p":{"docs":{},"p":{"docs":{},"r":{"docs":{},"o":{"docs":{},"a":{"docs":{},"c":{"docs":{},"h":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.010752688172043012},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}},"e":{"docs":{},"s":{"docs":{},":":{"docs":{"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877}}}}}}}},"p":{"docs":{},"r":{"docs":{},"i":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}}}}}}},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847},"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}},"l":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006}},"e":{"docs":{},"_":{"docs":{},"i":{"docs":{},"n":{"docs":{},"_":{"docs":{},"p":{"docs":{},"a":{"docs":{},"t":{"docs":{},"h":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.006765899864682003}}}}}}}}}}},"i":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0030864197530864196}}}}},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358}}}}}},"v":{"docs":{},"o":{"docs":{},"i":{"docs":{},"d":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.010752688172043012},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0032},"DataStructures/LinkedLists/Instructions.html":{"ref":"DataStructures/LinkedLists/Instructions.html","tf":0.019230769230769232},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358}}}}},"e":{"docs":{},"r":{"docs":{},"a":{"docs":{},"g":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.002616088947024199}},"e":{"docs":{},"(":{"docs":{},"i":{"docs":{},"+":{"1":{"docs":{},",":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}},"docs":{}}},"x":{"docs":{},",":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}},".":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}},"s":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}}}},"d":{"docs":{},"j":{"docs":{},"a":{"docs":{},"c":{"docs":{"DataStructures/StacksAndQueues/":{"ref":"DataStructures/StacksAndQueues/","tf":0.01020408163265306}},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"/":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476}}}}}}}},"u":{"docs":{},"s":{"docs":{},"t":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0032},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0023584905660377358},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006},"Miscellaneous/Palindrome.html":{"ref":"Miscellaneous/Palindrome.html","tf":0.011235955056179775}}}}}},"d":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002421307506053269},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.005970149253731343},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.003703703703703704},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.003205128205128205},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995},"Algorithms/DP/NumSol.html":{"ref":"Algorithms/DP/NumSol.html","tf":0.013888888888888888},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.0027548209366391185},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.003105590062111801},"Tricks/":{"ref":"Tricks/","tf":0.004608294930875576}},"i":{"docs":{},"t":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002421307506053269},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.011940298507462687},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.003205128205128205}}},"n":{"docs":{},"g":{"docs":{},",":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0015527950310559005}}}}}},".":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717}}},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016}}}}}},"t":{"docs":{},"w":{"docs":{},"o":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"b":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016}}}}}}}}}}}}}}}}},"o":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"u":{"docs":{},"l":{"docs":{},"t":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},",":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.006644518272425249}}}}}}}}}}}}}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"(":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},",":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0023584905660377358}}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},",":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0023584905660377358}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},",":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0023584905660377358}}}}}}}}}}}}},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},",":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0023584905660377358}}}}}}}}}}}},"o":{"docs":{},"n":{"docs":{},"e":{"docs":{},"r":{"docs":{},"o":{"docs":{},"w":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0023584905660377358}}}}}}}}}}}}}},"(":{"docs":{},"_":{"docs":{},"a":{"docs":{},",":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.006872852233676976}}}}}},"b":{"docs":{},"i":{"docs":{},"n":{"docs":{},"a":{"docs":{},"r":{"docs":{},"y":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488}}}}}}}}}}}}}}}},"g":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.0027548209366391185}},".":{"docs":{"DataStructures/StacksAndQueues/":{"ref":"DataStructures/StacksAndQueues/","tf":0.01020408163265306},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062}}},",":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809}}},")":{"docs":{"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062}}},"s":{"docs":{},"t":{"docs":{},".":{"docs":{"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062}}}}}}}}},"n":{"docs":{},"y":{"docs":{},"t":{"docs":{},"h":{"docs":{"DataStructures/StacksAndQueues/":{"ref":"DataStructures/StacksAndQueues/","tf":0.01020408163265306}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},".":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717}}},",":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}}}}}}}},"o":{"docs":{},"n":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}}},"s":{"docs":{},"w":{"docs":{},"e":{"docs":{},"r":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002421307506053269},"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406},"DataStructures/Trees/NumTrees.html":{"ref":"DataStructures/Trees/NumTrees.html","tf":0.008849557522123894},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.003430531732418525},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.0027548209366391185},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.07894736842105263}},".":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002840909090909091},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.02631578947368421}}},":":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703}}}}}}},"o":{"docs":{},"t":{"docs":{},"h":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.003703703703703704},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00546448087431694},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}},"e":{"docs":{},"r":{"docs":{},".":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717}}}}}}}},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.005412719891745603},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}},"d":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.006872852233676976}}}},"w":{"docs":{},"a":{"docs":{},"y":{"docs":{"DataStructures/StacksAndQueues/":{"ref":"DataStructures/StacksAndQueues/","tf":0.01020408163265306}}}}},"r":{"docs":{},"r":{"1":{"docs":{},":":{"docs":{"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.009345794392523364}}},"[":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},"[":{"docs":{},"'":{"docs":{},"i":{"docs":{},"'":{"docs":{},"]":{"docs":{},"]":{"docs":{"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.009345794392523364}}}}}}},"x":{"docs":{},"]":{"docs":{},"]":{"docs":{"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.009345794392523364}}}}}}}}}}}}},"2":{"docs":{},":":{"docs":{"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.009345794392523364}}},"[":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},"[":{"docs":{},"'":{"docs":{},"j":{"docs":{},"'":{"docs":{},"]":{"docs":{},"]":{"docs":{"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.009345794392523364}}}}}}},"x":{"docs":{},"]":{"docs":{},"]":{"docs":{"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.009345794392523364}}}}}}}}}}}}},"3":{"docs":{},":":{"docs":{"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.009345794392523364}}},"[":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},"[":{"docs":{},"'":{"docs":{},"k":{"docs":{},"'":{"docs":{},"]":{"docs":{},"]":{"docs":{},":":{"docs":{"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.009345794392523364}}}}}}}},"x":{"docs":{},"]":{"docs":{},"]":{"docs":{"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.009345794392523364}}}}}}}}}}}}},"docs":{},"a":{"docs":{},"y":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":10.08},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.014527845036319613},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.011834319526627219},"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":5.009345794392523},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004149377593360996},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.003125},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0049382716049382715},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.00641025641025641},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.010291595197255575},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.007194244604316547},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0030864197530864196},"Algorithms/DynamicProgramming-IV.html":{"ref":"Algorithms/DynamicProgramming-IV.html","tf":0.00980392156862745},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.002890173410404624},"Tricks/":{"ref":"Tricks/","tf":0.013824884792626729}},".":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.009433962264150943},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062}}},";":{"docs":{"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.009345794392523364}}},"s":{"docs":{},"/":{"docs":{"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.009345794392523364}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.009345794392523364}}}}}}}}}}}}}}}}}}}}},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703}}},"/":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.003430531732418525},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.002616088947024199},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.002890173410404624}}}}},":":{"docs":{"DataStructures/Trees/NumTrees.html":{"ref":"DataStructures/Trees/NumTrees.html","tf":0.008849557522123894},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.003205128205128205},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.003430531732418525}}},"i":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},",":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625}}}}}}},"[":{"0":{"docs":{},"]":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}}}},"docs":{}},"o":{"docs":{},"w":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0033222591362126247}}}}},"c":{"docs":{},"h":{"docs":{},"i":{"docs":{},"v":{"docs":{},"e":{"docs":{},"s":{"docs":{},":":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609}}}}}}}}},"b":{"docs":{},"i":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877}}}}}}}},"s":{"docs":{},"e":{"docs":{},"n":{"docs":{},"a":{"docs":{},"l":{"docs":{},".":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907}}}}}}}},"e":{"docs":{},"a":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002840909090909091},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}},":":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0015527950310559005}}}},"t":{"docs":{},"i":{"docs":{},"c":{"docs":{},"l":{"docs":{},"e":{"docs":{},":":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}}}}}}}},"i":{"docs":{},"t":{"docs":{},"h":{"docs":{},"m":{"docs":{},"e":{"docs":{},"t":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995}}}}}}}},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"d":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.007751937984496124}},".":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703}}}}}}},"l":{"docs":{},"w":{"docs":{},"a":{"docs":{},"y":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.006872852233676976},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0015527950310559005},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},"s":{"docs":{},",":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0023584905660377358},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002840909090909091}}}}}}},"o":{"docs":{},"n":{"docs":{},"g":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343}}}}},"s":{"docs":{},"o":{"docs":{},",":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016},"DataStructures/LinkedLists/Instructions.html":{"ref":"DataStructures/LinkedLists/Instructions.html","tf":0.019230769230769232},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877}},"n":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625}}}}}},"g":{"docs":{},"o":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},"r":{"docs":{},"i":{"docs":{},"t":{"docs":{},"h":{"docs":{},"m":{"docs":{"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996},"Algorithms/":{"ref":"Algorithms/","tf":10.012345679012345},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414},"Tricks/":{"ref":"Tricks/","tf":0.004608294930875576}},"s":{"docs":{},".":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}}}}}}}}},"l":{"docs":{},"o":{"docs":{},"w":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.003205128205128205},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703}},"e":{"docs":{},"d":{"docs":{},":":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}},"c":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625}}}},",":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},"i":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00404040404040404},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.0027548209366391185}}}}}}},"i":{"docs":{},"e":{"docs":{},"n":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678},"Miscellaneous/AlienDictionary.html":{"ref":"Miscellaneous/AlienDictionary.html","tf":5.043478260869565}}}}},"p":{"docs":{},"h":{"docs":{},"a":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}},"u":{"docs":{},"g":{"docs":{},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.003703703703703704},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}}}}},"t":{"docs":{},"o":{"docs":{},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}}}}},"x":{"docs":{},"_":{"docs":{},"d":{"docs":{},"p":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995}},"[":{"0":{"docs":{},"]":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}},"1":{"docs":{},"]":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}},"2":{"docs":{},"]":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}},"docs":{}}}}},"i":{"docs":{},"l":{"docs":{},"l":{"docs":{},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{"Algorithms/DynamicProgramming-IV.html":{"ref":"Algorithms/DynamicProgramming-IV.html","tf":0.00980392156862745}}}}}}}}}},"c":{"docs":{},"c":{"docs":{},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0033222591362126247}},",":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.003205128205128205}}}}}}},"t":{"docs":{},"u":{"docs":{},"a":{"docs":{},"l":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.005405405405405406},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.0027548209366391185},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},"l":{"docs":{},"y":{"docs":{},".":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}}}}}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},".":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}},"h":{"docs":{},"i":{"docs":{},"e":{"docs":{},"v":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}},",":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}},"s":{"docs":{},"k":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0032}}},"s":{"docs":{},"i":{"docs":{},"g":{"docs":{},"n":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}},"c":{"docs":{},"i":{"docs":{},"i":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}},"t":{"docs":{},"t":{"docs":{},"r":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.007407407407407408}},"i":{"docs":{},"b":{"docs":{},"u":{"docs":{},"t":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.007751937984496124}}}}}}},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625}}},"d":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}},"l":{"docs":{},"e":{"docs":{},"a":{"docs":{},"s":{"docs":{},"t":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847}}}}}},"a":{"docs":{},"n":{"docs":{},"t":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0049382716049382715}},"i":{"docs":{},"c":{"docs":{},"]":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358}}},"_":{"docs":{},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"u":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358}},"e":{"docs":{},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"(":{"docs":{},"x":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358}},",":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358}}}}}}}}}}}}}}}}}}}}}}}}}},"f":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"w":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{},"s":{"docs":{},".":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006}}},",":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0015527950310559005}}}}}}}}}}}},"m":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{"DataStructures/Trees/NumTrees.html":{"ref":"DataStructures/Trees/NumTrees.html","tf":0.008849557522123894},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.007751937984496124},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.005509641873278237}},")":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.005509641873278237}}},"/":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},":":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.0027548209366391185}}}}}}}}}}},"a":{"docs":{},"z":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625}}}}},")":{"docs":{},":":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476}}}},"i":{"docs":{},"m":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625}}}},":":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002840909090909091},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.003205128205128205},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488},"Tricks/":{"ref":"Tricks/","tf":0.004608294930875576}}},"[":{"0":{"docs":{},"]":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}},"1":{"docs":{},"]":{"docs":{},",":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}},"docs":{},"x":{"docs":{},"]":{"docs":{},"[":{"docs":{},"y":{"docs":{},"]":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.011363636363636364}}}}}}},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"(":{"docs":{},"a":{"docs":{},")":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488}}}}}}}},"i":{"docs":{},"]":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}},")":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995}}},".":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995}}}}},"p":{"docs":{},"+":{"1":{"docs":{},"]":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995}}}},"2":{"docs":{},"]":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}},"docs":{}}}},"^":{"docs":{},"n":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358}}}},".":{"docs":{},"k":{"docs":{},"a":{"docs":{},"d":{"docs":{},"a":{"docs":{},"n":{"docs":{},"e":{"docs":{},"'":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}}}},"]":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}},",":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}},"d":{"1":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006}},",":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006}}}},"2":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006}},",":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006}}}},"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.004842615012106538},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0023584905660377358},"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.008928571428571428},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.008403361344537815},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00404040404040404},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.003125},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.003205128205128205},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.00686106346483705}},"e":{"docs":{},"c":{"docs":{},"o":{"docs":{},"r":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.010752688172043012}}},"m":{"docs":{},"p":{"docs":{},"o":{"docs":{},"s":{"docs":{},"i":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}}}}}},"d":{"docs":{"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.002777777777777778}}}},"i":{"docs":{},"d":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.009433962264150943},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}}}},"l":{"docs":{},"a":{"docs":{},"r":{"docs":{"DataStructures/LinkedLists/Instructions.html":{"ref":"DataStructures/LinkedLists/Instructions.html","tf":0.019230769230769232},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.0027548209366391185}}}}},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0023584905660377358},"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576},"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.002777777777777778}}}}},"r":{"docs":{},"e":{"docs":{},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}}}}}},"a":{"docs":{},"s":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},"e":{"docs":{},".":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"\"":{"docs":{},")":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}}}}}}},"f":{"docs":{"DataStructures/StacksAndQueues/":{"ref":"DataStructures/StacksAndQueues/","tf":0.02040816326530612},"DataStructures/Arrays/SlidingWindow.html":{"ref":"DataStructures/Arrays/SlidingWindow.html","tf":0.009174311926605505},"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.018867924528301886},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.007263922518159807},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.015},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.023880597014925373},"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.018691588785046728},"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.010810810810810811},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.014619883040935672},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.024},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.025925925925925925},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.030660377358490566},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.02706359945872801},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.01366120218579235},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.016042780748663103},"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.037914691943127965},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.03319502074688797},"DataStructures/Trees/NumTrees.html":{"ref":"DataStructures/Trees/NumTrees.html","tf":0.008849557522123894},"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.017857142857142856},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.012605042016806723},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.020202020202020204},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.015748031496062992},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.015625},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.017045454545454544},"Algorithms/TrickySorting.html":{"ref":"Algorithms/TrickySorting.html","tf":0.024390243902439025},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.014814814814814815},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.02564102564102564},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.016216216216216217},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.025728987993138937},"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.010101010101010102},"Algorithms/Games.html":{"ref":"Algorithms/Games.html","tf":0.013333333333333334},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.013745704467353952},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Algorithms/DP/NumSol.html":{"ref":"Algorithms/DP/NumSol.html","tf":0.013888888888888888},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.012345679012345678},"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.025},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.005509641873278237},"Algorithms/DynamicProgramming-IV.html":{"ref":"Algorithms/DynamicProgramming-IV.html","tf":0.00980392156862745},"Miscellaneous/Palindrome.html":{"ref":"Miscellaneous/Palindrome.html","tf":0.033707865168539325},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.018272425249169437},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.010869565217391304},"Miscellaneous/AlienDictionary.html":{"ref":"Miscellaneous/AlienDictionary.html","tf":0.021739130434782608},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.01348747591522158},"Tricks/":{"ref":"Tricks/","tf":0.009216589861751152}},"a":{"docs":{},"u":{"docs":{},"l":{"docs":{},"t":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0023584905660377358},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002840909090909091},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.005145797598627788}},")":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678}},",":{"docs":{"DataStructures/Arrays/SlidingWindow.html":{"ref":"DataStructures/Arrays/SlidingWindow.html","tf":0.009174311926605505}}}},"d":{"docs":{},"i":{"docs":{},"c":{"docs":{},"t":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0040595399188092015},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.008403361344537815},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00808080808080808},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.007874015748031496}},"(":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},")":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.005952380952380952},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.008403361344537815},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.006060606060606061},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.007874015748031496}}}}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},")":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00404040404040404}}}}}},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{},")":{"docs":{"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.031496062992125984}}}}}}},",":{"docs":{"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.007874015748031496}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"i":{"docs":{},"t":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0064},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0023584905660377358},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.005412719891745603},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004149377593360996},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}}}}}}},"a":{"docs":{},"l":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002421307506053269}}},"d":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"s":{"docs":{},":":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358}}},"_":{"docs":{},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0049382716049382715}},":":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358}}}}}}}}}}}}},"s":{"docs":{},"i":{"docs":{},"r":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002421307506053269}},"a":{"docs":{},"b":{"docs":{},"l":{"docs":{},"e":{"docs":{},".":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}},"g":{"docs":{},"n":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678}}}}},"e":{"docs":{},"r":{"docs":{},"i":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}},"a":{"docs":{},"l":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}}}}}}}}}}}}}}}},"t":{"docs":{},"i":{"docs":{},"n":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"'":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.0027548209366391185}}},"s":{"docs":{},";":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.0027548209366391185}}}}}}}}}}}},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}}},"q":{"docs":{},"u":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.011940298507462687},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.01092896174863388},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498},"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.005952380952380952},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.007874015748031496},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.005681818181818182},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.007407407407407408}},"e":{"docs":{},"(":{"docs":{},")":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.008955223880597015},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.01092896174863388},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498},"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.005952380952380952},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.015748031496062992},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.008522727272727272},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.007407407407407408}}},"[":{"docs":{},"(":{"0":{"docs":{},",":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358}}}},"docs":{}}}},",":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.007874015748031496}}}}}},"v":{"docs":{},"i":{"docs":{},"d":{"docs":{"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406}}}}},"l":{"docs":{"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.010101010101010102}},"e":{"docs":{},"t":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"/":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343}}}}},"o":{"docs":{},"n":{"docs":{},".":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016}}},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}},"a":{"docs":{},"y":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907}}}},"i":{"docs":{},"v":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.02631578947368421}},"e":{"docs":{},"r":{"docs":{},"i":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}},"p":{"docs":{},"t":{"docs":{},"h":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.009433962264150943},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00404040404040404}},")":{"docs":{},":":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0023584905660377358}}}}}},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002840909090909091},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098},"Algorithms/DynamicProgramming-IV.html":{"ref":"Algorithms/DynamicProgramming-IV.html","tf":0.00980392156862745}}}}}},"e":{"docs":{},"p":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.003205128205128205}},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0027063599458728013},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}},"l":{"docs":{},"e":{"docs":{},"a":{"docs":{},"v":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847}}}}}}}}}}}}}}}}}}}}}},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062}}}}}}}}},"o":{"docs":{"Algorithms/DP/NumSol.html":{"ref":"Algorithms/DP/NumSol.html","tf":0.013888888888888888},"Tricks/":{"ref":"Tricks/","tf":0.004608294930875576}},"c":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.010752688172043012}}}}}},"e":{"docs":{},"s":{"docs":{},"n":{"docs":{},"'":{"docs":{},"t":{"docs":{"DataStructures/StacksAndQueues/":{"ref":"DataStructures/StacksAndQueues/","tf":0.01020408163265306},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006}}}}}}},"n":{"docs":{},"'":{"docs":{},"t":{"docs":{"DataStructures/StacksAndQueues/":{"ref":"DataStructures/StacksAndQueues/","tf":0.01020408163265306},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.003703703703703704},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0040595399188092015},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.005509641873278237},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.003105590062111801}}}},"’":{"docs":{},"t":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002421307506053269}}}},"e":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358}},":":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}}}}},"m":{"docs":{},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002421307506053269}},")":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.003205128205128205}}}}}},"i":{"docs":{},"n":{"docs":{},"o":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},"e":{"docs":{},"s":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}},":":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}},"[":{"docs":{},":":{"docs":{},":":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}}}}}},"w":{"docs":{},"n":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.017964071856287425},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0047169811320754715},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002840909090909091},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.0027548209366391185},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0015527950310559005}},":":{"docs":{"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062}}}}},":":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678}}},"u":{"docs":{},"b":{"docs":{},"l":{"docs":{"Algorithms/Games.html":{"ref":"Algorithms/Games.html","tf":0.013333333333333334}}}}},"l":{"docs":{},"l":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}},"t":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}},"?":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.02631578947368421}}}},"a":{"docs":{},"t":{"docs":{},"a":{"docs":{"DataStructures/":{"ref":"DataStructures/","tf":5.2},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002421307506053269},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0027063599458728013},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202},"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},":":{"docs":{"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}}},")":{"docs":{},":":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}}}},".":{"docs":{},"s":{"docs":{},"p":{"docs":{},"l":{"docs":{},"i":{"docs":{},"t":{"docs":{},"(":{"docs":{},"'":{"docs":{},",":{"docs":{},"'":{"docs":{},")":{"docs":{},"]":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}}}}}}}}}}}}}}}},"y":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.009433962264150943},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.005145797598627788},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.01098901098901099}},")":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.003430531732418525}}},":":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}}},"s":{"docs":{},"/":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}}},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}}}}}}}},",":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.01098901098901099}}}}},"i":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}},"s":{"docs":{},"t":{"docs":{},"i":{"docs":{},"n":{"docs":{},"c":{"docs":{},"t":{"docs":{},".":{"docs":{"DataStructures/StacksAndQueues/":{"ref":"DataStructures/StacksAndQueues/","tf":0.01020408163265306}}}}}}},"a":{"docs":{},"n":{"docs":{},"c":{"docs":{"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.016216216216216217},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011976047904191617},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0038535645472061657}},"e":{"docs":{},":":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006}}},"k":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877}}}}}}}}},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}},"_":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},"d":{"docs":{},"i":{"docs":{},"f":{"docs":{},"f":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}},"s":{"docs":{},")":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}},"[":{"docs":{},"m":{"docs":{},"_":{"docs":{},"i":{"docs":{},"d":{"docs":{},"x":{"docs":{},"]":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}}}}},"t":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}},"[":{"docs":{},"m":{"docs":{},"_":{"docs":{},"i":{"docs":{},"d":{"docs":{},"x":{"docs":{},"]":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}}}}}}},"p":{"docs":{},"l":{"docs":{},"a":{"docs":{},"c":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.023880597014925373},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625}},"e":{"docs":{},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"s":{"docs":{},".":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717}}}}}}}}}}}}},"c":{"docs":{},"r":{"docs":{},"e":{"docs":{},"p":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.003703703703703704}},"a":{"docs":{},"n":{"docs":{},"c":{"docs":{},"y":{"docs":{},".":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809}}}}}}}}}},"u":{"docs":{},"s":{"docs":{},"s":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"/":{"6":{"5":{"1":{"7":{"1":{"9":{"docs":{},"/":{"docs":{},"h":{"docs":{},"o":{"docs":{},"w":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}}}}},"docs":{}},"docs":{}},"docs":{}},"5":{"7":{"0":{"8":{"docs":{},"/":{"docs":{},"g":{"docs":{},"r":{"docs":{},"a":{"docs":{},"p":{"docs":{},"h":{"docs":{"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576}}}}}}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"9":{"1":{"8":{"2":{"5":{"docs":{},"/":{"docs":{},"b":{"docs":{},"i":{"docs":{},"n":{"docs":{},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}}}}}}}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"7":{"8":{"6":{"1":{"2":{"6":{"docs":{},"/":{"docs":{},"p":{"docs":{},"y":{"docs":{},"t":{"docs":{},"h":{"docs":{},"o":{"docs":{},"n":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}}}}}}}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}}}}}}},"o":{"docs":{},"n":{"docs":{},"n":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476}}}}}}}}},"h":{"docs":{},"e":{"docs":{},"s":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}},"g":{"docs":{},"u":{"docs":{},"i":{"docs":{},"s":{"docs":{"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062}}}}}}},"c":{"docs":{},"t":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.0027548209366391185},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}},".":{"docs":{"DataStructures/Arrays/SlidingWindow.html":{"ref":"DataStructures/Arrays/SlidingWindow.html","tf":0.009174311926605505},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"(":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},",":{"docs":{"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576}}}}}}},"k":{"docs":{},"e":{"docs":{},"y":{"docs":{},",":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678}}}}}}}}}}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"a":{"docs":{},"r":{"docs":{},"y":{"docs":{},".":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005}}},")":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343}}},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Miscellaneous/AlienDictionary.html":{"ref":"Miscellaneous/AlienDictionary.html","tf":0.021739130434782608}}}},"i":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343},"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678},"Miscellaneous/AlienDictionary.html":{"ref":"Miscellaneous/AlienDictionary.html","tf":5.021739130434782},"Tricks/":{"ref":"Tricks/","tf":0.009216589861751152}}}}}}}},":":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.005847953216374269}}},"(":{"docs":{},")":{"docs":{"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.005555555555555556},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}},"e":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}},"f":{"docs":{},"f":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002421307506053269},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343},"DataStructures/Trees/NumTrees.html":{"ref":"DataStructures/Trees/NumTrees.html","tf":0.008849557522123894},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0046875},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}},"e":{"docs":{},"r":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002421307506053269},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.001962066710268149},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0030864197530864196},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.0027548209366391185},"Algorithms/DynamicProgramming-IV.html":{"ref":"Algorithms/DynamicProgramming-IV.html","tf":0.00980392156862745},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.016483516483516484},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0015527950310559005},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},"b":{"docs":{},"y":{"docs":{},"o":{"docs":{},"n":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343}}}}}}}}}}}}},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},".":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016}}}},"c":{"docs":{},"e":{"docs":{},".":{"docs":{"DataStructures/LinkedLists/Instructions.html":{"ref":"DataStructures/LinkedLists/Instructions.html","tf":0.019230769230769232}}},",":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0030864197530864196}}},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}},":":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}}},"i":{"docs":{},"c":{"docs":{},"u":{"docs":{},"l":{"docs":{},"t":{"docs":{},"i":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}}}},"v":{"docs":{},"i":{"docs":{},"s":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.011834319526627219},"Algorithms/Games.html":{"ref":"Algorithms/Games.html","tf":0.02666666666666667},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},"o":{"docs":{},"r":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},"s":{"docs":{},".":{"docs":{},"a":{"docs":{},"d":{"docs":{},"d":{"docs":{},"(":{"docs":{},"i":{"docs":{},")":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}}}}},"/":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}},":":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}},"d":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004149377593360996},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}}},"d":{"docs":{},"n":{"docs":{},"'":{"docs":{},"t":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}}}},"r":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0047169811320754715},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.014204545454545454},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"Miscellaneous/Palindrome.html":{"ref":"Miscellaneous/Palindrome.html","tf":0.011235955056179775},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.02631578947368421}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},")":{"docs":{},":":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717}}}}}}}}}}}},",":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0023584905660377358}}},"s":{"docs":{},":":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.008522727272727272}}}},")":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358}}}}}},"l":{"docs":{},"i":{"docs":{"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002840909090909091}}}}}}}},"g":{"docs":{},"i":{"docs":{},"t":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995}},"s":{"docs":{},"/":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.003205128205128205},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}},"a":{"docs":{},"l":{"docs":{},"e":{"docs":{},"r":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.0027548209366391185}}},")":{"docs":{"Algorithms/DynamicProgramming-IV.html":{"ref":"Algorithms/DynamicProgramming-IV.html","tf":0.00980392156862745}}}}}},"g":{"docs":{},"r":{"docs":{},"a":{"docs":{},"m":{"docs":{"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.002777777777777778}}}}}}},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"s":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}}}},"u":{"docs":{},"p":{"docs":{},"l":{"docs":{},"i":{"docs":{},"c":{"docs":{"DataStructures/StacksAndQueues/":{"ref":"DataStructures/StacksAndQueues/","tf":0.01020408163265306},"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.010101010101010102},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.0027548209366391185},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}},"r":{"docs":{},"e":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002421307506053269},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062}}},"a":{"docs":{},"t":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.003125},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},")":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.003125}}},",":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625}}},":":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0033222591362126247}}},"]":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}}}}}}},"m":{"docs":{},"m":{"docs":{},"i":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0032},"DataStructures/LinkedLists/Instructions.html":{"ref":"DataStructures/LinkedLists/Instructions.html","tf":0.019230769230769232}}},"y":{"docs":{},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016}}}}}}}}}}},"p":{"1":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.005509641873278237}},"[":{"docs":{},"n":{"docs":{},"]":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.0027548209366391185}}}}}},"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002421307506053269},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.029585798816568046},"DataStructures/Trees/NumTrees.html":{"ref":"DataStructures/Trees/NumTrees.html","tf":0.017699115044247787},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002840909090909091},"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678},"Algorithms/Games.html":{"ref":"Algorithms/Games.html","tf":0.013333333333333334},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":10.015042511445388},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.023255813953488372},"Algorithms/DP/NumSol.html":{"ref":"Algorithms/DP/NumSol.html","tf":0.027777777777777776},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.007716049382716049},"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.008333333333333333},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.011019283746556474},"Algorithms/DynamicProgramming-IV.html":{"ref":"Algorithms/DynamicProgramming-IV.html","tf":0.0196078431372549},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}},"'":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}},",":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}},".":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"(":{"docs":{},"n":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}},";":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.0027548209366391185}}},"[":{"0":{"docs":{},"]":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}},"[":{"0":{"docs":{},"]":{"docs":{"Algorithms/DP/NumSol.html":{"ref":"Algorithms/DP/NumSol.html","tf":0.013888888888888888},"Algorithms/DynamicProgramming-IV.html":{"ref":"Algorithms/DynamicProgramming-IV.html","tf":0.00980392156862745}}}},"docs":{}}}},"1":{"docs":{},"]":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}},")":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}},"2":{"docs":{},"]":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}},")":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995}}},",":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}},"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Algorithms/DP/NumSol.html":{"ref":"Algorithms/DP/NumSol.html","tf":0.013888888888888888},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.0027548209366391185},"Algorithms/DynamicProgramming-IV.html":{"ref":"Algorithms/DynamicProgramming-IV.html","tf":0.00980392156862745}},":":{"docs":{},"]":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}},"f":{"docs":{},"i":{"docs":{},"r":{"docs":{},"s":{"docs":{},"t":{"docs":{},"_":{"docs":{},"o":{"docs":{},"n":{"docs":{},"e":{"docs":{},"]":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}}}}}},"i":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.006540222367560497},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0030864197530864196},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.0027548209366391185}},"]":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.007848266841072597},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}},")":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}},"[":{"0":{"docs":{},"]":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}},"1":{"docs":{},"]":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}},"2":{"docs":{},"]":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}},"docs":{},"d":{"docs":{},"i":{"docs":{},"f":{"docs":{},"f":{"docs":{},"]":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"c":{"docs":{},"h":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.0027548209366391185}}}}}}},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},")":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.0027548209366391185}}}}}}}}}}}}}}}}},"j":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}},"]":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}},")":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}},")":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}},",":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}},".":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"(":{"docs":{},"d":{"docs":{},"i":{"docs":{},"f":{"docs":{},"f":{"docs":{},",":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}}}}}}}},"n":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0030864197530864196}},"]":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0030864197530864196}},")":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}},"s":{"docs":{},"m":{"docs":{},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{},"_":{"docs":{},"a":{"docs":{},"m":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{},"]":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}}}}}}}}},"_":{"docs":{},"x":{"docs":{},"]":{"docs":{},"[":{"docs":{},"_":{"docs":{},"y":{"docs":{},"]":{"docs":{},",":{"docs":{"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062}}}}}}}}}},"x":{"docs":{"Algorithms/DP/NumSol.html":{"ref":"Algorithms/DP/NumSol.html","tf":0.013888888888888888},"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.002777777777777778},"Algorithms/DynamicProgramming-IV.html":{"ref":"Algorithms/DynamicProgramming-IV.html","tf":0.0196078431372549}},"]":{"docs":{},"[":{"docs":{},"y":{"docs":{},"]":{"docs":{"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062},"Algorithms/DP/NumSol.html":{"ref":"Algorithms/DP/NumSol.html","tf":0.041666666666666664},"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.008333333333333333},"Algorithms/DynamicProgramming-IV.html":{"ref":"Algorithms/DynamicProgramming-IV.html","tf":0.029411764705882353}},")":{"docs":{"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062}}}}},"i":{"docs":{"Algorithms/DP/NumSol.html":{"ref":"Algorithms/DP/NumSol.html","tf":0.013888888888888888},"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.002777777777777778},"Algorithms/DynamicProgramming-IV.html":{"ref":"Algorithms/DynamicProgramming-IV.html","tf":0.0196078431372549}}}}}},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"v":{"2":{"docs":{},"]":{"docs":{},")":{"docs":{"Algorithms/DP/NumSol.html":{"ref":"Algorithms/DP/NumSol.html","tf":0.013888888888888888}}}}},"docs":{}}}}}},":":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}},"r":{"docs":{},"o":{"docs":{},"p":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609}},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}},"y":{"docs":{},":":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717}}}},"a":{"docs":{},"w":{"docs":{},"n":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.02631578947368421}}}}}},"m":{"docs":{"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.016216216216216217}},"=":{"docs":{},"d":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"n":{"docs":{},"c":{"docs":{"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406}}}}}}}}}},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406}},"[":{"docs":{},"c":{"docs":{},"o":{"docs":{},"l":{"docs":{"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406}}}}},"q":{"docs":{"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406}}}}}},"n":{"docs":{"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.010810810810810811}}}}},":":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.005847953216374269},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0047169811320754715},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}}},"f":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":5.004040404040404},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.005681818181818182},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":5.009876543209876},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.003205128205128205},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}},"s":{"docs":{},"(":{"0":{"docs":{},",":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}},"docs":{},"d":{"docs":{},",":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476}}}},"i":{"docs":{},",":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476}}},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},",":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476}}},")":{"docs":{},":":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}}}}}},")":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}},":":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00404040404040404}}}}},"c":{"docs":{},")":{"docs":{},")":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}},"o":{"docs":{},"u":{"docs":{},"r":{"docs":{},"s":{"docs":{},"e":{"docs":{},")":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}},":":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}}}}}}}},"j":{"docs":{},")":{"docs":{},":":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}}},"n":{"docs":{},")":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}},"l":{"docs":{},"e":{"docs":{},"t":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},",":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358}}}}}}}}},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703}}}}}}},"x":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}},",":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}},":":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}}},".":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}},"v":{"docs":{},"i":{"docs":{},"s":{"docs":{},"i":{"docs":{},"t":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.006060606060606061}},"e":{"docs":{},"d":{"docs":{},".":{"docs":{},"a":{"docs":{},"d":{"docs":{},"d":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},")":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"m":{"docs":{},"o":{"docs":{},"v":{"docs":{},"e":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},")":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}}}}}}}}}}}}}},":":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}}}}}}}}},":":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002840909090909091}}}}},",":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0046875}}},"s":{"docs":{},"t":{"docs":{},":":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.008403361344537815},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.003125}}}}},")":{"docs":{},"]":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625}}},")":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625}}},"`":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358}}}},"j":{"docs":{},"i":{"docs":{},"k":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"a":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625}},".":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625}}}}}}}}}},".":{"2":{"docs":{},"d":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}},"docs":{}},"y":{"docs":{},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":5.012345679012346},"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":3.3388888888888886},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":3.333333333333333},"Algorithms/DynamicProgramming-IV.html":{"ref":"Algorithms/DynamicProgramming-IV.html","tf":3.3431372549019605},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}}}}},"e":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004149377593360996},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.006644518272425249}},"n":{"docs":{},"d":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.010752688172043012},"DataStructures/StacksAndQueues/":{"ref":"DataStructures/StacksAndQueues/","tf":0.01020408163265306},"DataStructures/Arrays/SlidingWindow.html":{"ref":"DataStructures/Arrays/SlidingWindow.html","tf":0.009174311926605505},"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.009433962264150943},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002421307506053269},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0032},"DataStructures/LinkedLists/Instructions.html":{"ref":"DataStructures/LinkedLists/Instructions.html","tf":0.038461538461538464},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004149377593360996},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.007407407407407408},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.029159519725557463},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995},"Miscellaneous/Palindrome.html":{"ref":"Miscellaneous/Palindrome.html","tf":0.033707865168539325},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.01098901098901099},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.016611295681063124},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.008670520231213872}},"+":{"1":{"docs":{},"]":{"docs":{"DataStructures/Arrays/SlidingWindow.html":{"ref":"DataStructures/Arrays/SlidingWindow.html","tf":0.009174311926605505}}},")":{"docs":{},":":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}},"docs":{}},",":{"docs":{"DataStructures/Arrays/SlidingWindow.html":{"ref":"DataStructures/Arrays/SlidingWindow.html","tf":0.009174311926605505},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004149377593360996},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.003430531732418525},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495},"Miscellaneous/AlienDictionary.html":{"ref":"Miscellaneous/AlienDictionary.html","tf":0.021739130434782608}}},"s":{"docs":{},",":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002421307506053269}}}},")":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004149377593360996},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.008305647840531562}},":":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004149377593360996},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}},":":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.006224066390041493},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}},"=":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},")":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}}}}}}}}}}}}}}},"]":{"docs":{},")":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}}},"u":{"docs":{},"m":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717}},"e":{"docs":{},"r":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},")":{"docs":{},":":{"docs":{"DataStructures/StacksAndQueues/":{"ref":"DataStructures/StacksAndQueues/","tf":0.01020408163265306},"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.007763975155279503},"Tricks/":{"ref":"Tricks/","tf":0.004608294930875576}}}},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"[":{"1":{"docs":{},":":{"docs":{},"]":{"docs":{},",":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343}}}}}},"docs":{}}}}}}},"_":{"docs":{},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},")":{"docs":{},"}":{"docs":{"DataStructures/Trees/NumTrees.html":{"ref":"DataStructures/Trees/NumTrees.html","tf":0.008849557522123894}}}}}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},")":{"docs":{},":":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.007263922518159807},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717},"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.010101010101010102},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}},"[":{"1":{"docs":{},":":{"docs":{},"]":{"docs":{},",":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}},"docs":{}}}},"t":{"docs":{},"s":{"docs":{},")":{"docs":{},":":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}}},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"f":{"docs":{},"i":{"docs":{},"x":{"docs":{},")":{"docs":{},":":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002421307506053269}}}}}}}}},"p":{"docs":{},"i":{"docs":{},"d":{"docs":{},")":{"docs":{},":":{"docs":{"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576}}}}}}}},"h":{"docs":{},"e":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},"s":{"docs":{},")":{"docs":{},":":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717}}}},"[":{"1":{"docs":{},":":{"docs":{},"]":{"docs":{},",":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625}}}}}},"docs":{}}}}}}}},"_":{"docs":{},"s":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{},"e":{"docs":{},"d":{"docs":{},"[":{"1":{"docs":{},":":{"docs":{},"]":{"docs":{},",":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}},"docs":{}}}}}}}}}},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"s":{"docs":{},")":{"docs":{},":":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},")":{"docs":{},":":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}}},"}":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}}}}}}}}}}},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},")":{"docs":{},":":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625}}}}}}},"t":{"docs":{},"a":{"docs":{},"s":{"docs":{},"k":{"docs":{},"s":{"docs":{},")":{"docs":{},"]":{"docs":{},")":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625}}}},":":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}}}},"b":{"docs":{},"l":{"docs":{},"o":{"docs":{},"o":{"docs":{},"m":{"docs":{},"d":{"docs":{},"a":{"docs":{},"y":{"docs":{},")":{"docs":{},":":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}}}}}}}}}}}},"c":{"docs":{},"o":{"docs":{},"s":{"docs":{},"t":{"docs":{},"s":{"docs":{},"[":{"1":{"docs":{},":":{"docs":{},"]":{"docs":{},",":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}},"docs":{}}}}}}},"d":{"docs":{},"p":{"docs":{},"[":{"1":{"docs":{},":":{"docs":{},"]":{"docs":{},",":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}},"docs":{}}}},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},")":{"docs":{},"}":{"docs":{"Miscellaneous/AlienDictionary.html":{"ref":"Miscellaneous/AlienDictionary.html","tf":0.021739130434782608}}}}}}}}},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"s":{"docs":{},"[":{"docs":{},":":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"(":{"docs":{},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"s":{"docs":{},")":{"docs":{"Miscellaneous/AlienDictionary.html":{"ref":"Miscellaneous/AlienDictionary.html","tf":0.021739130434782608}}}}}}}}}}}}}}}}}}},"v":{"docs":{},"_":{"docs":{},"s":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{},"e":{"docs":{},"d":{"docs":{},"[":{"1":{"docs":{},":":{"docs":{},"]":{"docs":{},",":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}},"docs":{}}}}}}}}}}}}}}}}}},"o":{"docs":{},"u":{"docs":{},"g":{"docs":{},"h":{"docs":{"DataStructures/Arrays/SlidingWindow.html":{"ref":"DataStructures/Arrays/SlidingWindow.html","tf":0.009174311926605505},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}},".":{"docs":{"Algorithms/DynamicProgramming-IV.html":{"ref":"Algorithms/DynamicProgramming-IV.html","tf":0.00980392156862745}}}}}}},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.003105590062111801},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}},"d":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}}}}},"v":{"docs":{},"e":{"docs":{},"l":{"docs":{},"o":{"docs":{},"p":{"docs":{},"e":{"docs":{},"s":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}}}}},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"y":{"docs":{},"t":{"docs":{},"h":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.010752688172043012},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}},"i":{"docs":{},"m":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002421307506053269}}}}},"o":{"docs":{},"n":{"docs":{"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576}}}},"w":{"docs":{},"h":{"docs":{},"e":{"docs":{},"r":{"docs":{},"e":{"docs":{},",":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358}}}}}}}}}},"n":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.003703703703703704},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.006872852233676976},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}},"t":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0049833887043189366}},"s":{"docs":{},",":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}}}}}},"l":{"docs":{},"e":{"docs":{},"m":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.005970149253731343},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.007407407407407408},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414},"Tricks/":{"ref":"Tricks/","tf":0.004608294930875576}},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"DataStructures/StacksAndQueues/":{"ref":"DataStructures/StacksAndQueues/","tf":0.02040816326530612},"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.007263922518159807},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.023880597014925373},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0032},"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.006224066390041493},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002840909090909091},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.003205128205128205},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.005405405405405406},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.005145797598627788},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.011627906976744186},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.01098901098901099},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828},"Tricks/":{"ref":"Tricks/","tf":0.02304147465437788}},"/":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.04},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002421307506053269}}},":":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002421307506053269},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703}}},",":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}},"s":{"docs":{},",":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}},"/":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}}}}},",":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}},"s":{"docs":{},":":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625}}},")":{"docs":{"Tricks/":{"ref":"Tricks/","tf":0.004608294930875576}}}},")":{"docs":{"Tricks/":{"ref":"Tricks/","tf":0.004608294930875576}}}}},"s":{"docs":{},"e":{"docs":{},":":{"docs":{"DataStructures/StacksAndQueues/":{"ref":"DataStructures/StacksAndQueues/","tf":0.01020408163265306},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002421307506053269},"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.009345794392523364},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.007407407407407408},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0047169811320754715},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.008576329331046312},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488},"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.011111111111111112},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.009966777408637873},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.012422360248447204},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0038535645472061657}}}}},"i":{"docs":{},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.0027548209366391185}},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"/":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002840909090909091}}}}}}}}}}},"f":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0023584905660377358},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.003105590062111801},"Miscellaneous/AlienDictionary.html":{"ref":"Miscellaneous/AlienDictionary.html","tf":0.021739130434782608},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}},"(":{"docs":{},"w":{"docs":{},"e":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}}}}}}}}}},"a":{"docs":{},"s":{"docs":{},"i":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.009433962264150943}},"l":{"docs":{},"i":{"docs":{"DataStructures/Arrays/SlidingWindow.html":{"ref":"DataStructures/Arrays/SlidingWindow.html","tf":0.009174311926605505},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}},"e":{"docs":{},"r":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006}},".":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}},"y":{"docs":{},"!":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}},"c":{"docs":{},"h":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.004842615012106538},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717},"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.009345794392523364},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.005847953216374269},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002840909090909091},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.005405405405405406},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0030864197530864196},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}}}},"r":{"docs":{},"l":{"docs":{},"i":{"docs":{},"e":{"docs":{},"r":{"docs":{"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406}}}}}},"n":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}},"t":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}},"f":{"docs":{},"f":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.009433962264150943}}}}},"i":{"docs":{},"c":{"docs":{},"i":{"docs":{"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098},"Tricks/":{"ref":"Tricks/","tf":0.004608294930875576}},"e":{"docs":{},"n":{"docs":{},"c":{"docs":{},"y":{"docs":{},".":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}}}}},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{},"/":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625}}}}}}}},"q":{"docs":{},"u":{"docs":{},"a":{"docs":{},"l":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.007263922518159807},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.010101010101010102},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.002616088947024199},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},":":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717}}},",":{"docs":{"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.009345794392523364}}},"i":{"docs":{},"t":{"docs":{},"y":{"docs":{},":":{"docs":{"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996}}},",":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}}},".":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}}}}}}},"t":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},":":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}},"i":{"docs":{},"d":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809}}}}}},"l":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}}},"x":{"docs":{},"c":{"docs":{},"l":{"docs":{},"u":{"docs":{},"d":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002421307506053269},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0015527950310559005}},"e":{"docs":{},")":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}}}}},"e":{"docs":{},"l":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358}}},"e":{"docs":{},"d":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358}}}},"p":{"docs":{},"t":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}}}},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0023584905660377358},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625}},"a":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},".":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016}}}}}}},"s":{"docs":{},",":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476}}},":":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703}}}},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358}}}}}}}}}},"t":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.007407407407407408},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}},"\"":{"docs":{},")":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}},"t":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847}}}}},"r":{"docs":{},"e":{"docs":{},"m":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.001962066710268149}}}},"a":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.006872852233676976}},")":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488}}},",":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488}}}}}},"p":{"docs":{},"l":{"docs":{},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},":":{"docs":{"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996},"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.005555555555555556}}},"\"":{"docs":{"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.002777777777777778}}}}}}}}}},"n":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},":":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}}}}},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476}},"e":{"docs":{},"d":{"docs":{},")":{"docs":{},":":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476}}}},",":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476}}}}}}},"r":{"docs":{},"i":{"docs":{},"e":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},",":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.02631578947368421}}},".":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.02631578947368421}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995}}}}}},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{"Miscellaneous/Palindrome.html":{"ref":"Miscellaneous/Palindrome.html","tf":0.02247191011235955}}}}}},"h":{"docs":{},"a":{"docs":{},"u":{"docs":{},"s":{"docs":{},"t":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995}}}}}}},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.004629629629629629}},"l":{"docs":{},"i":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}},"m":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}},"p":{"docs":{},"l":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995}},"e":{"docs":{},":":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062},"Tricks/":{"ref":"Tricks/","tf":0.004608294930875576}}}}}}}}},"s":{"docs":{},"q":{"docs":{},"u":{"docs":{"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406}}}},"p":{"docs":{},"e":{"docs":{},"c":{"docs":{},"i":{"docs":{},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{},"y":{"docs":{},",":{"docs":{"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877}}},")":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678}}}}}}}},"t":{"docs":{},"i":{"docs":{"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062}}}}}}},"s":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"i":{"docs":{"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.002777777777777778}}}}}}}},"d":{"docs":{},"g":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0032},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.010101010101010102},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},"e":{"docs":{},"s":{"docs":{},":":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0027063599458728013},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00808080808080808}}},"[":{"docs":{},"(":{"docs":{},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{},"r":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},",":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.006060606060606061}}}}}}}}}},"s":{"docs":{},",":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}}}}}}}},".":{"docs":{},"g":{"docs":{},".":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002840909090909091}}}},"c":{"docs":{},"u":{"docs":{},"m":{"docs":{},"u":{"docs":{},"l":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}},"g":{"docs":{},".":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002840909090909091},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0049382716049382715},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.004629629629629629}}},":":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}}},"g":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}},",":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625}}},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{},"i":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.004658385093167702}}}}}},"t":{"docs":{},"c":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}},")":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678}}}}},"r":{"docs":{},"r":{"docs":{},"o":{"docs":{},"r":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358}}}}},"a":{"docs":{},"s":{"docs":{},"e":{"docs":{},"o":{"docs":{},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"l":{"docs":{},"a":{"docs":{},"p":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}}}}}}}}}}}}}}}}}}}}}}}}}},"i":{"docs":{},"t":{"docs":{},"h":{"docs":{},"e":{"docs":{},"r":{"docs":{},":":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}},":":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}},"]":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}},"f":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00404040404040404},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},"i":{"docs":{},"r":{"docs":{},"s":{"docs":{},"t":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.010752688172043012},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.005970149253731343},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.008928571428571428},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.005681818181818182},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.004578155657292348},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0015527950310559005},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.004816955684007707},"Tricks/":{"ref":"Tricks/","tf":0.004608294930875576}},".":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.003703703703703704},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}},":":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}},"n":{"docs":{},"d":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.012106537530266344},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.01},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.007407407407407408},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0027063599458728013},"DataStructures/Trees/NumTrees.html":{"ref":"DataStructures/Trees/NumTrees.html","tf":0.008849557522123894},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.006060606060606061},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002840909090909091},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.005145797598627788},"Algorithms/Games.html":{"ref":"Algorithms/Games.html","tf":0.013333333333333334},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.007716049382716049},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.011019283746556474},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0033222591362126247},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.007763975155279503},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.00674373795761079}},"l":{"docs":{},"o":{"docs":{},"n":{"docs":{},"g":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343}}}}}}}}}}}}}}}}}}},"f":{"docs":{},"r":{"docs":{},"e":{"docs":{},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006}}}}}}}}}}}}}}}}}}}}}}},"_":{"docs":{},"f":{"docs":{},"i":{"docs":{},"r":{"docs":{},"s":{"docs":{},"t":{"docs":{},"_":{"docs":{},"g":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}},",":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}}}}}}}}}}}}}}}}}}}}}},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"(":{"docs":{},"l":{"docs":{},",":{"docs":{"Miscellaneous/Palindrome.html":{"ref":"Miscellaneous/Palindrome.html","tf":0.011235955056179775}}}}}}}}},"c":{"docs":{},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"p":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"p":{"docs":{},"r":{"docs":{},"i":{"docs":{},"c":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625}}}}}}}}}}}}}}}}}}}}},"i":{"docs":{},"t":{"docs":{},"i":{"docs":{},"n":{"docs":{},"e":{"docs":{},"r":{"docs":{},"a":{"docs":{},"r":{"docs":{},"y":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}}}}}}}}}}}}}}},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.007874015748031496}}}}}}}}}}}}},"b":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}}}}}}}}}}}}}}}}},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.003430531732418525}}}}}}}},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},"o":{"docs":{},"w":{"docs":{},"s":{"docs":{},"h":{"docs":{},"o":{"docs":{},"t":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"s":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"r":{"docs":{},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{},"e":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}}}}}}}}}}}}}}}}}}},"t":{"docs":{},"h":{"docs":{},"e":{"docs":{},"l":{"docs":{},"o":{"docs":{},"n":{"docs":{},"g":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488}}}}}}}}}}}}}}}}}}}}}}}}}}},"d":{"docs":{},"u":{"docs":{},"p":{"docs":{},"l":{"docs":{},"i":{"docs":{},"c":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}}}}}}}}}}}}}},"a":{"docs":{},"l":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}},"_":{"docs":{},"a":{"docs":{},"n":{"docs":{},"s":{"docs":{},"w":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002421307506053269}}}}}}}}},"g":{"docs":{},"e":{"docs":{},"r":{"docs":{},"p":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.017543859649122806},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0032}},"s":{"docs":{},".":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"(":{"docs":{},"f":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"e":{"docs":{},"r":{"docs":{},"p":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},",":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343}}}}}}}}}}}}}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{},"e":{"docs":{},"s":{"docs":{},"(":{"docs":{},")":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343}}}}}}}}}}},"[":{"docs":{},"f":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"e":{"docs":{},"r":{"docs":{},"p":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"]":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343}}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}},"i":{"docs":{},"s":{"docs":{},"h":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}},"x":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005}}},"l":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.003205128205128205}}}}},"l":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},":":{"docs":{"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062}}}}}}}},"b":{"docs":{},"o":{"docs":{},"n":{"docs":{},"a":{"docs":{},"c":{"docs":{},"c":{"docs":{},"i":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}}},"g":{"docs":{},"u":{"docs":{},"r":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}}},"t":{"docs":{"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.007751937984496124}}}},"o":{"docs":{"Tricks/":{"ref":"Tricks/","tf":0.004608294930875576}},"r":{"docs":{},"c":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.010752688172043012},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}},"w":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.009433962264150943},"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.009345794392523364}},";":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}},",":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.003703703703703704}}},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0049382716049382715},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}},"m":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995}}}},"u":{"docs":{},"n":{"docs":{},"d":{"docs":{"DataStructures/Arrays/SlidingWindow.html":{"ref":"DataStructures/Arrays/SlidingWindow.html","tf":0.01834862385321101},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0040595399188092015},"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.010101010101010102},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.01098901098901099},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0015527950310559005}},",":{"docs":{"DataStructures/Arrays/SlidingWindow.html":{"ref":"DataStructures/Arrays/SlidingWindow.html","tf":0.009174311926605505},"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576}}}}}},"l":{"docs":{},"l":{"docs":{},"o":{"docs":{},"w":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002840909090909091},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.02631578947368421}},"u":{"docs":{},"p":{"docs":{"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.009478672985781991}}}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},":":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002840909090909091}}}}}},"s":{"docs":{},":":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}}}},"u":{"docs":{},"n":{"docs":{},"c":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.021505376344086023},"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.009345794392523364},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907},"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678},"Algorithms/TrickySorting.html":{"ref":"Algorithms/TrickySorting.html","tf":0.024390243902439025},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.003430531732418525},"Miscellaneous/Palindrome.html":{"ref":"Miscellaneous/Palindrome.html","tf":0.033707865168539325},"Tricks/":{"ref":"Tricks/","tf":0.009216589861751152}},".":{"docs":{"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.009345794392523364},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488},"Tricks/":{"ref":"Tricks/","tf":0.004608294930875576}}},")":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016}}},":":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358}}}}}},"o":{"docs":{},"o":{"docs":{},"l":{"docs":{"Algorithms/TrickySorting.html":{"ref":"Algorithms/TrickySorting.html","tf":0.024390243902439025}},"s":{"docs":{},".":{"docs":{},"c":{"docs":{},"m":{"docs":{},"p":{"docs":{},"_":{"docs":{},"t":{"docs":{},"o":{"docs":{},"_":{"docs":{},"k":{"docs":{},"e":{"docs":{},"y":{"docs":{},"(":{"docs":{},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{},"a":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},")":{"docs":{"Algorithms/TrickySorting.html":{"ref":"Algorithms/TrickySorting.html","tf":0.024390243902439025}}}}}}}}}}}}}}}}}}}}}}}},"l":{"docs":{},"r":{"docs":{},"u":{"docs":{},"_":{"docs":{},"c":{"docs":{},"a":{"docs":{},"c":{"docs":{},"h":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703}}}}}}}}}}}}}}}}}},"r":{"docs":{},"t":{"docs":{},"h":{"docs":{},"e":{"docs":{},"r":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.010752688172043012}}},"s":{"docs":{},"t":{"docs":{},"b":{"docs":{},"u":{"docs":{},"i":{"docs":{},"l":{"docs":{},"d":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625}}}}}}}}}}}}}}}},"j":{"docs":{},"u":{"docs":{},"m":{"docs":{},"p":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703}}}}}}}}}}}},"l":{"docs":{},"l":{"docs":{},"i":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}}}},"a":{"docs":{},"l":{"docs":{},"s":{"docs":{"DataStructures/StacksAndQueues/":{"ref":"DataStructures/StacksAndQueues/","tf":0.01020408163265306},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0032},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.007407407407407408},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00819672131147541},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.011904761904761904},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00808080808080808},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.00641025641025641},"Algorithms/Games.html":{"ref":"Algorithms/Games.html","tf":0.013333333333333334},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0030864197530864196},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.003105590062111801},"Miscellaneous/AlienDictionary.html":{"ref":"Miscellaneous/AlienDictionary.html","tf":0.043478260869565216},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0038535645472061657}},"e":{"docs":{},":":{"docs":{},"=":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.003703703703703704}}}},")":{"docs":{},")":{"docs":{"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576}}}},",":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}}},"l":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.001962066710268149}},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}},"s":{"docs":{},"t":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0144}},"e":{"docs":{},"r":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.009433962264150943},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.005681818181818182}}}},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0032}},".":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016}}},":":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016}}}}}}}}}},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"DataStructures/Trees/NumTrees.html":{"ref":"DataStructures/Trees/NumTrees.html","tf":0.008849557522123894}},"s":{"docs":{},"/":{"docs":{"DataStructures/Trees/NumTrees.html":{"ref":"DataStructures/Trees/NumTrees.html","tf":0.008849557522123894}},"d":{"docs":{},"i":{"docs":{},"v":{"docs":{},"i":{"docs":{},"s":{"docs":{},"o":{"docs":{},"r":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678}}}}}}}}}}}}}},"i":{"docs":{},"l":{"docs":{},"i":{"docs":{},"t":{"docs":{"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.010101010101010102}}}}}},"e":{"docs":{},"d":{"docs":{},"?":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.02631578947368421}}}}}},"u":{"docs":{},"l":{"docs":{},"t":{"docs":{},"i":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678}}}}}},"r":{"docs":{},";":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.003205128205128205}}},",":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}},".":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}},"t":{"docs":{},"h":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}}},"i":{"docs":{},"l":{"docs":{},"u":{"docs":{},"r":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.005509641873278237},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0015527950310559005}}}}},"r":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}},"l":{"docs":{},"o":{"docs":{},"a":{"docs":{},"t":{"docs":{},"(":{"docs":{},"'":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.004842615012106538},"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0023584905660377358},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0027063599458728013},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0049833887043189366},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},"i":{"docs":{},"n":{"docs":{},"f":{"docs":{},"'":{"docs":{},")":{"docs":{"DataStructures/Arrays/SlidingWindow.html":{"ref":"DataStructures/Arrays/SlidingWindow.html","tf":0.009174311926605505},"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.010810810810810811},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.003430531732418525},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.005509641873278237},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}},",":{"docs":{"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847}}},"]":{"docs":{"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406}}},")":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006}}}}}}}}}},",":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}},":":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}},"w":{"docs":{},"e":{"docs":{},"r":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476}},"s":{"docs":{},".":{"docs":{},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476}}}}}}},"r":{"docs":{},"e":{"docs":{},"m":{"docs":{},"o":{"docs":{},"v":{"docs":{},"e":{"docs":{},"(":{"docs":{},"p":{"docs":{},"l":{"docs":{},"a":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"d":{"docs":{},"[":{"docs":{},"n":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476}}}}}}}}}}}}}}}}}}},":":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476}}}}}},"/":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358}}}},"o":{"docs":{},"r":{"docs":{},"(":{"docs":{},"s":{"docs":{},"q":{"docs":{},"r":{"docs":{},"t":{"docs":{},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},")":{"docs":{},")":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}}}}}}}}}}}}}}}},"a":{"docs":{},"g":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.003703703703703704}}},"t":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}},"s":{"docs":{},":":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.008403361344537815},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.003125}}}}}}},"p":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.006872852233676976},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}},"r":{"docs":{},"e":{"docs":{},"q":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002421307506053269},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.002890173410404624}},":":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.004842615012106538},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}},"[":{"docs":{},"(":{"docs":{},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{},"r":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002421307506053269}}}}}}},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{},"r":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"]":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.004842615012106538}}}}}}}}}},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"]":{"docs":{},"[":{"docs":{},"'":{"0":{"docs":{},"'":{"docs":{},"]":{"docs":{"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062}}}}},"1":{"docs":{},"'":{"docs":{},"]":{"docs":{"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062}}}}},"docs":{}}}}}}}}}},"t":{"docs":{},"]":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}}},"a":{"docs":{},"s":{"docs":{},"k":{"docs":{},"]":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}},":":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}}}},"u":{"docs":{},"e":{"docs":{},"n":{"docs":{},"c":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.004842615012106538},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},"y":{"docs":{},".":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}},"t":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006},"Tricks/":{"ref":"Tricks/","tf":0.009216589861751152}}}}}},"(":{"docs":{},"x":{"docs":{},")":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609}}},"+":{"1":{"docs":{},")":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609}}}},"docs":{}}}},".":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"(":{"docs":{},"t":{"docs":{},",":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}}},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{},"m":{"docs":{},"s":{"docs":{},"(":{"docs":{},")":{"docs":{},":":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}}}}}}}},"i":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{"Algorithms/Games.html":{"ref":"Algorithms/Games.html","tf":0.013333333333333334}}}}}}},"g":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004149377593360996},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.003430531732418525}}},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"h":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}}},"d":{"docs":{"Algorithms/TrickySorting.html":{"ref":"Algorithms/TrickySorting.html","tf":0.024390243902439025}}},"w":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358}},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}},"e":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.01098901098901099}},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}},")":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.01098901098901099}},":":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}}}},"(":{"docs":{},"d":{"docs":{},"p":{"docs":{},"[":{"1":{"docs":{},"]":{"docs":{},",":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}},"docs":{},"i":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}},"s":{"docs":{},"m":{"docs":{},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{},"_":{"docs":{},"a":{"docs":{},"m":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}}}}}}}}}}},"g":{"docs":{},"(":{"docs":{},"j":{"docs":{},",":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}},".":{"docs":{},"h":{"docs":{},"a":{"docs":{},"s":{"docs":{},"h":{"docs":{},"m":{"docs":{},"a":{"docs":{},"p":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}}}},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"[":{"docs":{},"j":{"docs":{},"]":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995}},"b":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}},"p":{"docs":{},"]":{"docs":{},"[":{"docs":{},"j":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}},")":{"docs":{},",":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}},",":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}},"=":{"docs":{},"=":{"docs":{},"s":{"docs":{},",":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}},"k":{"docs":{"DataStructures/StacksAndQueues/":{"ref":"DataStructures/StacksAndQueues/","tf":0.030612244897959183},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.007263922518159807},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.015},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.005970149253731343},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0427807486631016},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.025210084033613446},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.015625},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.005681818181818182},"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.009615384615384616},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.010101010101010102},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.003924133420536298},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}},"e":{"docs":{},"e":{"docs":{},"p":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.010752688172043012},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002421307506053269},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.003703703703703704},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002840909090909091},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.010309278350515464},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.003105590062111801},"Tricks/":{"ref":"Tricks/","tf":0.009216589861751152}}}},"y":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717},"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.009345794392523364},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625},"Algorithms/TrickySorting.html":{"ref":"Algorithms/TrickySorting.html","tf":0.024390243902439025},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995},"Algorithms/DP/NumSol.html":{"ref":"Algorithms/DP/NumSol.html","tf":0.013888888888888888},"Miscellaneous/Palindrome.html":{"ref":"Miscellaneous/Palindrome.html","tf":0.011235955056179775},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.006644518272425249},"Tricks/":{"ref":"Tricks/","tf":0.009216589861751152}},"=":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343}},"l":{"docs":{},"a":{"docs":{},"m":{"docs":{},"b":{"docs":{},"d":{"docs":{},"a":{"docs":{"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.009345794392523364},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.005847953216374269},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123},"Tricks/":{"ref":"Tricks/","tf":0.004608294930875576}}}}}}}}},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},",":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016}}}}}}},",":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006}}},"b":{"docs":{},"o":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678}},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"m":{"docs":{},"i":{"docs":{},"s":{"docs":{},"s":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"/":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703}}}}}}}}}}}}}}}}}}}}},"p":{"docs":{},"t":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}},"n":{"docs":{},"o":{"docs":{},"w":{"docs":{"DataStructures/Arrays/SlidingWindow.html":{"ref":"DataStructures/Arrays/SlidingWindow.html","tf":0.01834862385321101},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.0027548209366391185}}}},"u":{"docs":{},"t":{"docs":{},"h":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717}}}}},"a":{"docs":{},"p":{"docs":{},"s":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.001962066710268149},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":10.003875968992247},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}},".":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}}}}}},",":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}}}}}}},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},"d":{"docs":{},"i":{"docs":{},"a":{"docs":{},"l":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.0027548209366391185}}}}}}}}}}}}}}}}}}},"’":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.009433962264150943}}},")":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002421307506053269}},"]":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002421307506053269}}},")":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907}}}},"/":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.007263922518159807},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}},":":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.004842615012106538},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.005970149253731343},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.008403361344537815},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.00625},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002840909090909091},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.00641025641025641},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.010101010101010102}}},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005}},"a":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006}}}}},"l":{"docs":{},"l":{"docs":{},":":{"docs":{"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.022727272727272728}}},"p":{"docs":{},"r":{"docs":{},"o":{"docs":{},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576}}}}}}}}}}}}}}}}}},",":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.003125},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414},"Tricks/":{"ref":"Tricks/","tf":0.004608294930875576}}},"c":{"docs":{},"l":{"docs":{},"o":{"docs":{},"s":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625}}}}}}}}}}}}}}},"w":{"docs":{},"e":{"docs":{},"a":{"docs":{},"k":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"o":{"docs":{},"w":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625}}}}}}}}}}}}}}}}}}},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.011363636363636364}},")":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002840909090909091}},")":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002840909090909091}}}},":":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002840909090909091}}}}}}}},"a":{"docs":{},"d":{"docs":{},"a":{"docs":{},"n":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678}},"e":{"docs":{},"'":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}}},"m":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.005145797598627788},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0030864197530864196},"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.016666666666666666},"Algorithms/DynamicProgramming-IV.html":{"ref":"Algorithms/DynamicProgramming-IV.html","tf":0.00980392156862745},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062}},"t":{"docs":{},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.010752688172043012},"DataStructures/Arrays/SlidingWindow.html":{"ref":"DataStructures/Arrays/SlidingWindow.html","tf":0.009174311926605505},"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.009433962264150943},"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.009345794392523364},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.003125},"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.010101010101010102},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.01098901098901099},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}},"t":{"docs":{},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717}}}}}},"l":{"docs":{},"b":{"docs":{},"o":{"docs":{},"x":{"docs":{},"e":{"docs":{},"s":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}}}},"t":{"docs":{},"c":{"docs":{},"h":{"docs":{"DataStructures/StacksAndQueues/":{"ref":"DataStructures/StacksAndQueues/","tf":0.02040816326530612},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.014619883040935672},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.003703703703703704},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.0027548209366391185},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.004658385093167702}},"e":{"docs":{},"d":{"docs":{},":":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002421307506053269}}}}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995}}}}}},".":{"docs":{"Miscellaneous/Palindrome.html":{"ref":"Miscellaneous/Palindrome.html","tf":0.011235955056179775}}}}},"r":{"docs":{},"i":{"docs":{},"x":{"docs":{"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002840909090909091},"Algorithms/":{"ref":"Algorithms/","tf":0.024691358024691357}},"/":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.005681818181818182},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}},":":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625}}},"h":{"docs":{"Tricks/":{"ref":"Tricks/","tf":0.004608294930875576}},".":{"docs":{},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},"p":{"docs":{},"o":{"docs":{},"s":{"docs":{},"i":{"docs":{},"t":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703}}}}}}}}}},"a":{"docs":{},"x":{"docs":{},"(":{"docs":{},"d":{"docs":{},"p":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},",":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}}}}}},"c":{"docs":{},"e":{"docs":{},"i":{"docs":{},"l":{"docs":{"Tricks/":{"ref":"Tricks/","tf":0.004608294930875576}}}}}},"f":{"docs":{},"l":{"docs":{},"o":{"docs":{},"o":{"docs":{},"r":{"docs":{"Tricks/":{"ref":"Tricks/","tf":0.004608294930875576}}}}}}}}},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0015527950310559005}}}}}},"n":{"docs":{},"i":{"docs":{"DataStructures/Arrays/SlidingWindow.html":{"ref":"DataStructures/Arrays/SlidingWindow.html","tf":0.009174311926605505},"DataStructures/LinkedLists/Instructions.html":{"ref":"DataStructures/LinkedLists/Instructions.html","tf":0.019230769230769232},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}}}},"x":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002421307506053269},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0023584905660377358},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.005412719891745603},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.003430531732418525},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098},"Miscellaneous/Palindrome.html":{"ref":"Miscellaneous/Palindrome.html","tf":0.011235955056179775},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.00674373795761079}},"a":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.009433962264150943},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}}}}}}},"(":{"1":{"docs":{"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062}}},"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},",":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002421307506053269}}}}}}}},"c":{"docs":{},"s":{"docs":{},"(":{"docs":{},"m":{"docs":{"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.005555555555555556}}}}}},"p":{"docs":{},"s":{"docs":{},"(":{"docs":{},"m":{"docs":{"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.005555555555555556}}}}}}},"c":{"docs":{},"h":{"docs":{},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{},",":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343}}}}}}},"a":{"docs":{},"s":{"docs":{},"h":{"docs":{},",":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.01098901098901099}}}}}}},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"s":{"docs":{},"_":{"docs":{},"s":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"e":{"docs":{},"[":{"docs":{},"n":{"docs":{},"e":{"docs":{},"w":{"docs":{},"_":{"docs":{},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"]":{"docs":{},",":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343}}}}}}}}}}}}}}}}}}}}}}}},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},".":{"docs":{},"l":{"docs":{},"o":{"docs":{},"n":{"docs":{},"g":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},",":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0023584905660377358}}}}}}}}}}}}}}}}}},"o":{"docs":{},"s":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},".":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"_":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},",":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},".":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},",":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0023584905660377358}}}}}}}}},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{},",":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006}}}}}}}}}}}},"d":{"docs":{},"f":{"docs":{},"s":{"docs":{},"(":{"docs":{},"i":{"docs":{},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703}}}},"x":{"docs":{},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703}}}}}}}}}}}}},"x":{"docs":{},"_":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},",":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847}}}}}}}},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"_":{"docs":{},"t":{"docs":{},"i":{"docs":{},"m":{"docs":{},"e":{"docs":{},",":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907}}}}}}},"d":{"docs":{},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{},"h":{"docs":{},",":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}}}}}},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},",":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}}}}},"w":{"docs":{},",":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}}},"i":{"docs":{},"d":{"docs":{},"t":{"docs":{},"h":{"docs":{},",":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}}}}}}}},"s":{"docs":{},"e":{"docs":{},"q":{"docs":{},",":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"m":{"docs":{},"s":{"docs":{},",":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}}}}}},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},",":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0015527950310559005}}}}}},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},",":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}},"h":{"docs":{},"e":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},",":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}}}}}}}}}}}},"e":{"docs":{},"m":{"docs":{},"o":{"docs":{},"[":{"docs":{},"i":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}}}}}},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},",":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.003430531732418525}}}}}},"d":{"docs":{},"p":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},",":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}},".":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"(":{"docs":{},"d":{"docs":{},"i":{"docs":{},"f":{"docs":{},"f":{"docs":{},",":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}}}}}}}},"x":{"docs":{"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.002777777777777778}}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"[":{"0":{"docs":{},":":{"2":{"docs":{},"]":{"docs":{},")":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}},"docs":{}},"]":{"docs":{},",":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}}},"docs":{}}}}}},"i":{"docs":{},"n":{"docs":{},"c":{"docs":{},"l":{"docs":{},"u":{"docs":{},"d":{"docs":{},"e":{"docs":{},",":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}}}}}}}},"h":{"docs":{},"o":{"docs":{},"l":{"docs":{},"d":{"docs":{},",":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.01098901098901099}}}}}}},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"u":{"docs":{},"l":{"docs":{},"t":{"docs":{},"[":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}}}}}}},"t":{"docs":{},"[":{"docs":{},"x":{"docs":{},"]":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}},"/":{"docs":{},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062}},".":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002421307506053269}}},":":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002421307506053269}}}}}}},"i":{"docs":{},"m":{"docs":{},"u":{"docs":{},"m":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002421307506053269},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002840909090909091},"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.005405405405405406},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.003924133420536298},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.016483516483516484}},"/":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717}}},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.008108108108108109}},")":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703}}}}}},",":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}}}}},"a":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}}},"n":{"docs":{},"o":{"docs":{},"n":{"docs":{},"o":{"docs":{},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"l":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002421307506053269}}}}}}}}}}}}}}}}}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002421307506053269}}}}},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.011834319526627219},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.004658385093167702}},":":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609}}}}}},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006}}}}}}},"x":{"docs":{},"+":{"1":{"docs":{},")":{"docs":{},"]":{"docs":{},".":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847}}}}}},"docs":{}},".":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847}}}},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004149377593360996}},")":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}}}}}}}},"t":{"docs":{},"i":{"docs":{},"m":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.012605042016806723}}}}},"d":{"docs":{},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{},"h":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.006060606060606061}}}}}}},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.006060606060606061}}}}}},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"p":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.003125},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}},",":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625}}}}},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.002890173410404624}}}}}}}},"w":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.005145797598627788}},"i":{"docs":{},"d":{"docs":{},"t":{"docs":{},"h":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.002890173410404624}},")":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}}},"s":{"docs":{},"e":{"docs":{},"q":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}},",":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}}}}}},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"m":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0049833887043189366}}}}}},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.005780346820809248}}}}},"f":{"docs":{},"r":{"docs":{},"e":{"docs":{},"q":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.002890173410404624}},",":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}},"_":{"docs":{},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.002890173410404624}}}}}}}}}}}}},"s":{"docs":{},"l":{"docs":{},"i":{"docs":{},"d":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"w":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"o":{"docs":{},"w":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717}}}}}}}}}}}}}}}}}}}}},"p":{"docs":{},"a":{"docs":{},"t":{"docs":{},"h":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006}}}}}}}}}}}}}},"r":{"docs":{},"o":{"docs":{},"f":{"docs":{},"i":{"docs":{},"t":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}}}}}}}}}}}},",":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}}}},"k":{"docs":{},"e":{"docs":{"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.009345794392523364},"DataStructures/LinkedLists/Instructions.html":{"ref":"DataStructures/LinkedLists/Instructions.html","tf":0.019230769230769232},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.003703703703703704},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625},"Algorithms/TrickySorting.html":{"ref":"Algorithms/TrickySorting.html","tf":0.024390243902439025},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.003205128205128205},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.004578155657292348},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.007751937984496124},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.006211180124223602},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.002890173410404624},"Tricks/":{"ref":"Tricks/","tf":0.004608294930875576}}}},"r":{"docs":{},"k":{"docs":{"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877}}}},"p":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}}},"d":{"docs":{},"e":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.003205128205128205},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0015527950310559005},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.02631578947368421}}}},"c":{"docs":{},"h":{"docs":{},"i":{"docs":{},"n":{"docs":{},"e":{"docs":{},"s":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}}}},"e":{"docs":{},"t":{"docs":{},"h":{"docs":{},"o":{"docs":{},"d":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}},"s":{"docs":{},",":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.010752688172043012}}}},":":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907}}}}}},"r":{"docs":{},"i":{"docs":{},"c":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625}}}}}},"a":{"docs":{},"n":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},",":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609}}}}}},"s":{"docs":{},",":{"docs":{"DataStructures/Trees/NumTrees.html":{"ref":"DataStructures/Trees/NumTrees.html","tf":0.008849557522123894}}}}}},"r":{"docs":{},"g":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809},"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0049833887043189366},"Tricks/":{"ref":"Tricks/","tf":0.013824884792626729}},"e":{"docs":{},"k":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625}}}}}}}}}}}}}},"t":{"docs":{},"w":{"docs":{},"o":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016}}}}}}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996}}}}}}}}}}}}},"(":{"docs":{},"l":{"1":{"docs":{},",":{"docs":{"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996}}}},"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"1":{"docs":{},",":{"docs":{"Tricks/":{"ref":"Tricks/","tf":0.004608294930875576}}}},"docs":{}}}}},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}}}}}}}}},"m":{"docs":{},"o":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0030864197530864196},"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.005555555555555556},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.0027548209366391185}},"r":{"docs":{},"i":{"docs":{"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}},"i":{"docs":{},"z":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.006172839506172839},"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.005555555555555556},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.0027548209366391185}}}},"[":{"0":{"docs":{},"]":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}},"1":{"docs":{},"]":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}},"docs":{},"i":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}},"]":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}},"n":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}},"x":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0030864197530864196}},"]":{"docs":{},"[":{"docs":{},"i":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}},"y":{"docs":{},"]":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.004629629629629629}}}}}}},"(":{"docs":{},"m":{"docs":{},",":{"docs":{"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.03333333333333333}}}},"i":{"docs":{},",":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.012422360248447204}}}}}},":":{"docs":{"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.005555555555555556}}}}},"s":{"docs":{},"s":{"docs":{},"i":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358}}}}},"e":{"docs":{},"t":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0033222591362126247}}}},"n":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.02631578947368421}}}}}}}},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"k":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.010752688172043012}}}}},"c":{"docs":{},"e":{"docs":{},"l":{"docs":{},"l":{"docs":{},"a":{"docs":{},"n":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609},"Miscellaneous/":{"ref":"Miscellaneous/","tf":11},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":5}}}}}}}},"s":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"c":{"docs":{},"h":{"docs":{},",":{"docs":{"Miscellaneous/Palindrome.html":{"ref":"Miscellaneous/Palindrome.html","tf":0.011235955056179775}}}}}}}}},"n":{"docs":{"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.009345794392523364},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0046875},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.003430531732418525},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.008264462809917356},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{"DataStructures/Arrays/SlidingWindow.html":{"ref":"DataStructures/Arrays/SlidingWindow.html","tf":0.01834862385321101}}}}},"x":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847}}},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"p":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},",":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625}}}}}},"s":{"docs":{},"t":{"docs":{},"e":{"docs":{},"p":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.005509641873278237}}}}}},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.009966777408637873}},":":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}}}}},"w":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"o":{"docs":{},"w":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Arrays/SlidingWindow.html":{"ref":"DataStructures/Arrays/SlidingWindow.html","tf":0.009174311926605505}}}}}}}}}}}}}},"o":{"docs":{},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002421307506053269}}}}}}}}}}}}}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002421307506053269}}}}},"/":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625}},"/":{"docs":{},"s":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.009345794392523364},"Tricks/":{"ref":"Tricks/","tf":0.004608294930875576}}}}}}}}}}},"i":{"docs":{},"m":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}},"u":{"docs":{},"m":{"docs":{"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.009345794392523364},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.005145797598627788},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.006172839506172839},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.016483516483516484},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0015527950310559005}},"s":{"docs":{},"e":{"docs":{},"m":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}}}}}}}}}}}}}}},"e":{"docs":{},"f":{"docs":{},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{},"p":{"docs":{},"a":{"docs":{},"t":{"docs":{},"h":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625}}}}}}}}}}}}}}}}}}}},"a":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.01098901098901099}}}}},"(":{"2":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703}}},"docs":{},"d":{"docs":{},"m":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},",":{"docs":{"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406}}},"[":{"docs":{},"c":{"docs":{},"o":{"docs":{},"l":{"docs":{"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406}}}}}}}},"n":{"docs":{"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.010810810810810811}}}}},"p":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{},",":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995}}}}},"1":{"docs":{},"]":{"docs":{},",":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}},"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}},"i":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.001962066710268149}}},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"v":{"1":{"docs":{},"]":{"docs":{},",":{"docs":{"Algorithms/DP/NumSol.html":{"ref":"Algorithms/DP/NumSol.html","tf":0.013888888888888888}}}}},"docs":{}}}}}}}},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"u":{"docs":{},"l":{"docs":{},"t":{"docs":{},",":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343}}}}}}}}},"x":{"docs":{},"_":{"docs":{},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{},",":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847}}}}}}}},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},",":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}}}}}}}},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{},"_":{"docs":{},"s":{"docs":{},"t":{"docs":{},"e":{"docs":{},"p":{"docs":{},"s":{"docs":{},",":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.0027548209366391185}}}}}}}},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},",":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}}}}}}}}},"t":{"docs":{},"i":{"docs":{},"m":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006}}}}}}}}}}}},"d":{"docs":{"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476}},"a":{"docs":{},"y":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}}}}}}}}}}},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}}}}}}}}}}},"u":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}},"s":{"docs":{},"t":{"docs":{},"e":{"docs":{},"p":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703}}}}}}}}}}}}},".":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}},"a":{"docs":{},"v":{"docs":{},"a":{"docs":{},"i":{"docs":{},"l":{"docs":{},"a":{"docs":{},"b":{"docs":{},"l":{"docs":{},"e":{"docs":{},"d":{"docs":{},"u":{"docs":{},"r":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}}}}}}}}}}}}}}}}}}}}}},"d":{"docs":{},"d":{"docs":{},"t":{"docs":{},"o":{"docs":{},"m":{"docs":{},"a":{"docs":{},"k":{"docs":{},"e":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"i":{"docs":{},"d":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0015527950310559005}}}}}}}}}}}}}}}}}}}}}},"m":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"m":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}}}}}}}}}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"m":{"docs":{},"o":{"docs":{},"v":{"docs":{},"e":{"docs":{},"t":{"docs":{},"o":{"docs":{},"m":{"docs":{},"a":{"docs":{},"k":{"docs":{},"e":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"i":{"docs":{},"d":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0015527950310559005}}}}}}}}}}}}}}}}}}}}}}}}}},"d":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.02058319039451115}},"+":{"1":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}}},"docs":{}},"d":{"docs":{},"l":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004149377593360996}}}},";":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}}}}},"o":{"docs":{},"v":{"docs":{},"e":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.018867924528301886},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0032},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.007407407407407408},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062}},"z":{"docs":{},"e":{"docs":{},"r":{"docs":{},"o":{"docs":{},"e":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.009433962264150943},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}}}}}}}}},":":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.004842615012106538}}},"s":{"docs":{},"+":{"1":{"docs":{},")":{"docs":{},")":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358}}}}},"docs":{}}}}},"d":{"docs":{"DataStructures/Trees/NumTrees.html":{"ref":"DataStructures/Trees/NumTrees.html","tf":0.017699115044247787},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.005509641873278237},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}},"u":{"docs":{},"l":{"docs":{},"o":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002421307506053269}}}}},"i":{"docs":{},"f":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002840909090909091}},"i":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}},"c":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"?":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002840909090909091}}}}}}}}}}}},"e":{"docs":{},"l":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343}}}},")":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.0027548209366391185}}}},"r":{"docs":{},"e":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.007263922518159807},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847}}}},"n":{"docs":{},"o":{"docs":{},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"u":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717}}}}}},"t":{"docs":{},"o":{"docs":{},"n":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}}}}}}},"s":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"p":{"docs":{},"e":{"docs":{},"t":{"docs":{},"i":{"docs":{},"t":{"docs":{},"i":{"docs":{},"v":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717}}}}}}}}}}}}}}}}}}}}},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}}},"u":{"docs":{},"l":{"docs":{},"t":{"docs":{},"i":{"docs":{},",":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002421307506053269}}},"p":{"docs":{},"l":{"docs":{"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":5.009345794392523},"DataStructures/LinkedLists/Instructions.html":{"ref":"DataStructures/LinkedLists/Instructions.html","tf":0.019230769230769232},"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.0027548209366391185},"Tricks/":{"ref":"Tricks/","tf":0.004608294930875576}}}}}}},"t":{"docs":{},"a":{"docs":{},"t":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}}}}},"s":{"docs":{},"i":{"docs":{},"c":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}},":":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0030864197530864196},"Algorithms/DynamicProgramming-IV.html":{"ref":"Algorithms/DynamicProgramming-IV.html","tf":0.00980392156862745}}},"_":{"docs":{},"r":{"docs":{},"e":{"docs":{},"f":{"docs":{},"e":{"docs":{},"r":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016}}}}}}},"i":{"docs":{},"d":{"docs":{},"x":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}},"y":{"docs":{},"r":{"docs":{},"i":{"docs":{},"a":{"docs":{},"d":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907}}}}}},"s":{"docs":{},"q":{"docs":{},"r":{"docs":{},"t":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}}}}}}}}}}}},"p":{"docs":{},"o":{"docs":{},"w":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}}}}}}},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}},"o":{"docs":{"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996}},"b":{"docs":{},"j":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.010752688172043012},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877}}}}}},"l":{"docs":{},"i":{"docs":{},"v":{"docs":{},"i":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.010752688172043012}}}}}},"s":{"docs":{},"e":{"docs":{},"r":{"docs":{},"v":{"docs":{"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.010810810810810811}}}}},"t":{"docs":{},"a":{"docs":{},"c":{"docs":{},"l":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002840909090909091}},"e":{"docs":{},"g":{"docs":{},"r":{"docs":{},"i":{"docs":{},"d":{"docs":{},":":{"docs":{"Algorithms/DP/NumSol.html":{"ref":"Algorithms/DP/NumSol.html","tf":0.013888888888888888}}},"[":{"docs":{},"x":{"docs":{},"]":{"docs":{},"[":{"docs":{},"y":{"docs":{},"]":{"docs":{"Algorithms/DP/NumSol.html":{"ref":"Algorithms/DP/NumSol.html","tf":0.013888888888888888}}}}}}}}}}}}}}}},"r":{"docs":{},"u":{"docs":{},"c":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},".":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}}}}}}}}}},"v":{"docs":{},"i":{"docs":{},"o":{"docs":{},"u":{"docs":{},"s":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}},"l":{"docs":{},"y":{"docs":{},"!":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625}}}}}}}}},")":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}},"t":{"docs":{},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}},"o":{"docs":{},"p":{"docs":{},":":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.010752688172043012}}}}},"p":{"docs":{},"t":{"docs":{},"i":{"docs":{},"m":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.010752688172043012},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002421307506053269},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.008403361344537815},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002840909090909091},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.007751937984496124},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.006172839506172839},"Algorithms/DynamicProgramming-IV.html":{"ref":"Algorithms/DynamicProgramming-IV.html","tf":0.00980392156862745},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0015527950310559005}},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{},"y":{"docs":{},".":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358}}}}}}},"i":{"docs":{},"z":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},":":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}}}}},"o":{"docs":{},"n":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.005405405405405406}},"s":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}},"e":{"docs":{},"r":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.004842615012106538},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.007407407407407408},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995}},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},",":{"docs":{"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.010101010101010102}}}}}}}}}},"n":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.017080745341614908},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},"l":{"docs":{},"o":{"docs":{},"c":{"docs":{},"k":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358}}}}}}}}}}}},"_":{"docs":{},"b":{"docs":{},"r":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"e":{"docs":{},"t":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.007763975155279503}},"s":{"docs":{},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"i":{"docs":{},")":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0015527950310559005}}}}}}}}}}}},":":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.003105590062111801}}}}}}}}}}}}}},"p":{"docs":{},"o":{"docs":{},"n":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},".":{"docs":{"Algorithms/Games.html":{"ref":"Algorithms/Games.html","tf":0.013333333333333334}}}}}}}}}},"n":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02},"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.02830188679245283},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002421307506053269},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.008955223880597015},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.008771929824561403},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.008},"DataStructures/LinkedLists/Instructions.html":{"ref":"DataStructures/LinkedLists/Instructions.html","tf":0.019230769230769232},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0023584905660377358},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847},"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00404040404040404},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.005681818181818182},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"Algorithms/Games.html":{"ref":"Algorithms/Games.html","tf":0.05333333333333334},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.024054982817869417},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.002616088947024199},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.007751937984496124},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.0027548209366391185},"Algorithms/DynamicProgramming-IV.html":{"ref":"Algorithms/DynamicProgramming-IV.html","tf":0.00980392156862745},"Miscellaneous/Palindrome.html":{"ref":"Miscellaneous/Palindrome.html","tf":0.011235955056179775},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.006644518272425249},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.009316770186335404},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.00674373795761079},"Tricks/":{"ref":"Tricks/","tf":0.004608294930875576},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.02631578947368421}},"e":{"docs":{},",":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.009433962264150943},"Miscellaneous/Palindrome.html":{"ref":"Miscellaneous/Palindrome.html","tf":0.011235955056179775},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.003105590062111801}}},".":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006},"Algorithms/Games.html":{"ref":"Algorithms/Games.html","tf":0.013333333333333334},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0015527950310559005},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}}},":":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476}}},"s":{"docs":{},":":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016}}},".":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"Algorithms/DP/NumSol.html":{"ref":"Algorithms/DP/NumSol.html","tf":0.013888888888888888},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0015527950310559005},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}},",":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995}}},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.001962066710268149}}},")":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0015527950310559005}}}},"!":{"docs":{},"!":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}}}},";":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0015527950310559005}}}},"t":{"docs":{},"o":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002840909090909091}}}},"c":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0030864197530864196},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}},"d":{"docs":{},"d":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002421307506053269}}}},"l":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002421307506053269}}}}}},"u":{"docs":{},"t":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.003205128205128205},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098},"Miscellaneous/AlienDictionary.html":{"ref":"Miscellaneous/AlienDictionary.html","tf":0.021739130434782608}},"s":{"docs":{},"i":{"docs":{},"d":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002421307506053269}}}}},".":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}},"e":{"docs":{},"r":{"docs":{},"m":{"docs":{},"o":{"docs":{},"s":{"docs":{},"t":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.003105590062111801}}}}}}}}}},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002840909090909091},"Algorithms/Games.html":{"ref":"Algorithms/Games.html","tf":0.013333333333333334},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}},"l":{"docs":{},"a":{"docs":{},"p":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002421307506053269},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002840909090909091},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.002616088947024199},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098},"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.002777777777777778},"Algorithms/DynamicProgramming-IV.html":{"ref":"Algorithms/DynamicProgramming-IV.html","tf":0.00980392156862745},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0033222591362126247}},",":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0033222591362126247}}}}}},"f":{"docs":{},"l":{"docs":{},"o":{"docs":{},"w":{"docs":{},".":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016}}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},".":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625}}}}}},"s":{"docs":{},",":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625}}}},";":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},".":{"docs":{"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062}}}}}}}}}}}}}},"(":{"2":{"docs":{},"^":{"docs":{},"n":{"docs":{},")":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}}}},"docs":{},"n":{"2":{"docs":{},")":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609}}}},"docs":{},")":{"docs":{"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877}},"?":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678}}}}}},"r":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}},"i":{"docs":{},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847},"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996},"DataStructures/Trees/NumTrees.html":{"ref":"DataStructures/Trees/NumTrees.html","tf":0.017699115044247787},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625}},"a":{"docs":{},"l":{"docs":{},":":{"docs":{"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996}}}}},"/":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625}}}}}}},"d":{"docs":{},"(":{"docs":{},"c":{"docs":{},")":{"docs":{},")":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343}}}}}},"e":{"docs":{},"r":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0023584905660377358},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.01366120218579235},"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.0027548209366391185},"Miscellaneous/AlienDictionary.html":{"ref":"Miscellaneous/AlienDictionary.html","tf":0.021739130434782608}},".":{"docs":{"DataStructures/Trees/NumTrees.html":{"ref":"DataStructures/Trees/NumTrees.html","tf":0.008849557522123894}}},";":{"docs":{"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062}}},":":{"docs":{"Miscellaneous/AlienDictionary.html":{"ref":"Miscellaneous/AlienDictionary.html","tf":0.021739130434782608},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002840909090909091}},"e":{"docs":{},"s":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}}},"t":{"docs":{},"h":{"docs":{},"e":{"docs":{},"r":{"docs":{},"w":{"docs":{},"i":{"docs":{},"s":{"docs":{"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.009345794392523364},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0027063599458728013},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625}},"e":{"docs":{},")":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358}}},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062},"Algorithms/DynamicProgramming-IV.html":{"ref":"Algorithms/DynamicProgramming-IV.html","tf":0.00980392156862745}}}}}}},"/":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}},"c":{"docs":{},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.005847953216374269}},"r":{"docs":{},"e":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},",":{"docs":{"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406}}}}}}}}}}}},"f":{"docs":{},"f":{"docs":{},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.011695906432748537}},"s":{"docs":{},".":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"(":{"docs":{},"c":{"docs":{},",":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343}}}}}}}}},"[":{"docs":{},"c":{"docs":{},"]":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343}}}}}}}}},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}},":":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002840909090909091}}},".":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703}}}},":":{"docs":{"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996}}},"w":{"docs":{},"n":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}}},"q":{"1":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011976047904191617}},".":{"docs":{},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011976047904191617}}}}}}}}},":":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809}}}},"docs":{"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011976047904191617}},"u":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{"DataStructures/":{"ref":"DataStructures/","tf":0.2},"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002421307506053269},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.005970149253731343},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":5.002923976608187},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.017964071856287425},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0023584905660377358},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.006060606060606061},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.005681818181818182},"Algorithms/":{"ref":"Algorithms/","tf":0.037037037037037035},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.003430531732418525},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098},"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.002777777777777778},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0015527950310559005},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":5.052631578947368}},"!":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.010752688172043012},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625}}},",":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002421307506053269},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0023584905660377358},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}},":":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717},"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}},".":{"docs":{"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.008771929824561403},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0032},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.003125},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}}},")":{"docs":{"DataStructures/LinkedLists/Instructions.html":{"ref":"DataStructures/LinkedLists/Instructions.html","tf":0.019230769230769232},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488}}},"s":{"docs":{},":":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625},"Algorithms/":{"ref":"Algorithms/","tf":0.024691358024691357},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.003205128205128205},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703}}},"*":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678}}},",":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}},".":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995}}}},"/":{"2":{"8":{"1":{"4":{"7":{"0":{"docs":{},"/":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"6":{"4":{"3":{"1":{"5":{"8":{"docs":{},"/":{"docs":{},"g":{"docs":{},"o":{"docs":{},"o":{"docs":{},"g":{"docs":{},"l":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678}}}}}}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}}}}}},"u":{"docs":{},"e":{"docs":{"DataStructures/StacksAndQueues/":{"ref":"DataStructures/StacksAndQueues/","tf":5.010204081632653},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.008955223880597015},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.01366120218579235},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498},"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.005952380952380952},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.008403361344537815},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.015748031496062992},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.014204545454545454},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.012345679012345678},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0038535645472061657}},".":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809}},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"0":{"docs":{},")":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907}}}},"docs":{},"(":{"0":{"docs":{},",":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00546448087431694},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.005952380952380952},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002840909090909091}}}},"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717}},"c":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},"u":{"docs":{},"r":{"docs":{},"r":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},",":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},",":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847}}}}}}}}}}}}}}}},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},",":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847}}}}}}},"x":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00546448087431694}},"+":{"1":{"docs":{},",":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00546448087431694}}}},"docs":{}},",":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002840909090909091}}}},"d":{"docs":{},",":{"docs":{"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576}}}},"p":{"docs":{},"i":{"docs":{},"d":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},",":{"docs":{"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576}}}}}}}}},"i":{"docs":{},",":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476}}},"n":{"docs":{},"i":{"docs":{},"t":{"docs":{},"_":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},",":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358}}}}}}}}}}}}},"v":{"docs":{},",":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.005952380952380952}}}},"_":{"docs":{},"x":{"docs":{},",":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.005681818181818182},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358}}}}},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},"_":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},",":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358}}}}}}}}}}}}}},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{},"r":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},")":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},")":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847}}}}}}}}}}}}}}}},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},")":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}}}}}}},"n":{"docs":{},"e":{"docs":{},"i":{"docs":{},")":{"docs":{"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.007874015748031496}}}}},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},")":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},")":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}}}}}}}}},")":{"docs":{"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.007874015748031496}}}}}},")":{"docs":{"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.007874015748031496}}}},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},".":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},")":{"docs":{"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877}}}}}}}}}}}}},"v":{"docs":{},")":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907}}}},"s":{"docs":{},")":{"docs":{"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.007874015748031496}}}}}}}}}}},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.01092896174863388},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498},"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.005952380952380952},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.015748031496062992},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.005681818181818182},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0049382716049382715}}}}}}}},"(":{"docs":{},")":{"docs":{},")":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}}}},":":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.01092896174863388},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498},"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.005952380952380952},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.015748031496062992},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.005681818181818182},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0049382716049382715},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}}},")":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907}}},",":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}},"r":{"docs":{},"i":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995}},"e":{"docs":{},"s":{"docs":{},":":{"docs":{"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.007874015748031496}}},"]":{"docs":{"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.007874015748031496}}}}}}}},"a":{"docs":{},"n":{"docs":{},"t":{"docs":{},"i":{"docs":{},"t":{"docs":{},"y":{"docs":{},".":{"docs":{"DataStructures/Arrays/SlidingWindow.html":{"ref":"DataStructures/Arrays/SlidingWindow.html","tf":0.009174311926605505}}}},"i":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002421307506053269}}}}}}},"l":{"docs":{},"i":{"docs":{},"f":{"docs":{},"i":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625}}}}}}},"i":{"docs":{},"c":{"docs":{},"k":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907}}}},"r":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}}}},"s":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}}}}},":":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006}}},".":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"]":{"docs":{},")":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006}},")":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006}}}}}}}}}},"t":{"1":{"docs":{},":":{"docs":{"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996}}}},"2":{"docs":{},")":{"docs":{"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996}}},":":{"docs":{"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996}}}},"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.015625},"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.010101010101010102},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.002890173410404624}},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":10.035928143712574},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.003703703703703704},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.007075471698113208},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.010825439783491205},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00546448087431694},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":5.021390374331551},"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":5.028436018957346},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":5.018672199170124},"DataStructures/Trees/NumTrees.html":{"ref":"DataStructures/Trees/NumTrees.html","tf":5.035398230088496},"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00808080808080808},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.005145797598627788},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.005232177894048398},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098},"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.002777777777777778},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0015527950310559005},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}},"/":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.003703703703703704},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0023584905660377358},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0040595399188092015},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00546448087431694},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.006224066390041493},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.002616088947024199}},")":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.010752688172043012}}},"d":{"docs":{},"i":{"docs":{},"s":{"docs":{},"c":{"docs":{},"u":{"docs":{},"s":{"docs":{},"s":{"docs":{},"/":{"5":{"3":{"7":{"6":{"8":{"6":{"docs":{},"/":{"docs":{},"p":{"docs":{},"y":{"docs":{},"t":{"docs":{},"h":{"docs":{},"o":{"docs":{},"n":{"docs":{"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.009478672985781991}}}}}}}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}},":":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},"l":{"docs":{},"c":{"docs":{},"a":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016}}}}}},",":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011976047904191617},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.003703703703703704}}},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004149377593360996}},"e":{"docs":{},")":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.014814814814814815},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.007075471698113208},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.006765899864682003},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00819672131147541},"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.014218009478672985},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}},":":{"docs":{"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996}}}},",":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.003703703703703704},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.007075471698113208},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0106951871657754},"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.023696682464454975},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625}}},":":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.003703703703703704},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0047169811320754715},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.006765899864682003},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.014218009478672985},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.012448132780082987},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.003430531732418525}}},"(":{"docs":{},"v":{"docs":{},")":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.007075471698113208}}}},")":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}}},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"_":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"s":{"docs":{},"[":{"docs":{},"m":{"docs":{},"i":{"docs":{},"d":{"docs":{},"d":{"docs":{},"l":{"docs":{},"e":{"docs":{},"]":{"docs":{},")":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}}}}}}}}}}}}}}}}}}}},"o":{"docs":{},"b":{"docs":{},"j":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},")":{"docs":{},":":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}}}}}}}}}},"p":{"docs":{},"o":{"docs":{},"s":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},"[":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"u":{"docs":{},"c":{"docs":{},"t":{"docs":{},".":{"docs":{},"p":{"docs":{},"o":{"docs":{},"s":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},"_":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},"]":{"docs":{},")":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},"[":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"u":{"docs":{},"c":{"docs":{},"t":{"docs":{},"_":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},".":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},"]":{"docs":{},")":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}}}}}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},"]":{"docs":{},")":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}}}}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"/":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.003703703703703704},"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.009478672985781991},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{"DataStructures/Trees/NumTrees.html":{"ref":"DataStructures/Trees/NumTrees.html","tf":0.008849557522123894}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},"_":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},"]":{"docs":{},")":{"docs":{"DataStructures/Trees/NumTrees.html":{"ref":"DataStructures/Trees/NumTrees.html","tf":0.017699115044247787}}}}}}}}}}}}}}}}},".":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0047169811320754715},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}}},";":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006}}},"[":{"docs":{},"e":{"docs":{},"]":{"docs":{},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"s":{"docs":{},")":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006}}}}}}}}}}}}}},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"]":{"docs":{},":":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0027063599458728013}}}}}}}},"s":{"docs":{},"]":{"docs":{},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"e":{"docs":{},")":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006}}}}}}}}}}}}}}}},"a":{"docs":{},"t":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016},"DataStructures/LinkedLists/Instructions.html":{"ref":"DataStructures/LinkedLists/Instructions.html","tf":0.019230769230769232},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006}}}},"s":{"docs":{},"s":{"docs":{"DataStructures/Trees/NumTrees.html":{"ref":"DataStructures/Trees/NumTrees.html","tf":0.008849557522123894}}}}},"i":{"docs":{"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.009345794392523364},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"Algorithms/Games.html":{"ref":"Algorithms/Games.html","tf":0.02666666666666667},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0015527950310559005},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},"c":{"docs":{},"k":{"docs":{"DataStructures/StacksAndQueues/":{"ref":"DataStructures/StacksAndQueues/","tf":0.01020408163265306},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":5.005970149253732},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809},"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":5.01010101010101},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414},"Tricks/":{"ref":"Tricks/","tf":10.004608294930875}},"i":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006},"Algorithms/TrickySorting.html":{"ref":"Algorithms/TrickySorting.html","tf":5.024390243902439},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Tricks/":{"ref":"Tricks/","tf":0.004608294930875576}}},":":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488}}}}},"_":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005}}}}}},"p":{"docs":{},"l":{"docs":{},"e":{"docs":{},"t":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":10.005}}}}}},"v":{"docs":{},"i":{"docs":{},"a":{"docs":{},"l":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002840909090909091},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}}}},"e":{"docs":{},":":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678}}}},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{},"u":{"docs":{},"l":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}},"a":{"docs":{},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002421307506053269},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":5.007407407407407},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":5.002358490566038},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":5.001353179972936},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":3.3469945355191255},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.016042780748663103},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625},"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0049382716049382715},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0032701111837802484},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},"e":{"docs":{},"(":{"0":{"docs":{},")":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}},"docs":{},")":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016}}},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},")":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016}}}}}}},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},",":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.003703703703703704},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.01179245283018868},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877}}},")":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0027063599458728013},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},",":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.003703703703703704},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.01179245283018868},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877}}},")":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0027063599458728013},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}}}}}}}}},"=":{"docs":{},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},")":{"docs":{},":":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016}}}}}}}}},",":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.003703703703703704},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.007075471698113208},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877}}},")":{"docs":{},":":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0040595399188092015},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}}}}},",":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},",":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.003703703703703704},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.007075471698113208},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877}}},")":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0027063599458728013},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}}}}}}},"v":{"docs":{},")":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006}},".":{"docs":{},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{},"m":{"docs":{},"s":{"docs":{},"(":{"docs":{},")":{"docs":{},":":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}}}}}}}}}}},"'":{"docs":{},"j":{"docs":{},"f":{"docs":{},"k":{"docs":{},"'":{"docs":{},",":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}}}}}},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{},"r":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},",":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}}}}}}}},"x":{"docs":{},",":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002840909090909091}}}},"a":{"docs":{},"t":{"docs":{},"l":{"docs":{},"a":{"docs":{},"n":{"docs":{},"t":{"docs":{},"i":{"docs":{},"c":{"docs":{},"_":{"docs":{},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"u":{"docs":{},"e":{"docs":{},")":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358}}}}}}}}}}}}}}}}},"p":{"docs":{},"a":{"docs":{},"c":{"docs":{},"i":{"docs":{},"f":{"docs":{},"i":{"docs":{},"c":{"docs":{},"_":{"docs":{},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"u":{"docs":{},"e":{"docs":{},")":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358}}}}}}}}}}}}}}}},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"u":{"docs":{},"e":{"docs":{},")":{"docs":{},":":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358}}}}}}}}}}},"a":{"docs":{},"l":{"docs":{},"/":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0023584905660377358},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.006224066390041493},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}},"]":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}}}},",":{"docs":{"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062}}}}}}}}},"c":{"docs":{},"k":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.003703703703703704},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002840909090909091},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.003205128205128205},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495},"Tricks/":{"ref":"Tricks/","tf":0.004608294930875576}}}},"i":{"docs":{},"l":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}},"n":{"docs":{},"s":{"docs":{},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.04945054945054945}}}}},"f":{"docs":{},"e":{"docs":{},"r":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}},"o":{"docs":{},"r":{"docs":{},"m":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}}}},"i":{"docs":{},"t":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}}}}},"u":{"docs":{},"e":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0032},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.007407407407407408},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847},"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.015151515151515152},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.011904761904761904},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.008403361344537815},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.010101010101010102},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.00641025641025641},"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.010101010101010102},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.006172839506172839},"Miscellaneous/AlienDictionary.html":{"ref":"Miscellaneous/AlienDictionary.html","tf":0.043478260869565216},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.002890173410404624}},":":{"docs":{"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.009345794392523364},"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},"=":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.003703703703703704}}}},",":{"docs":{"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476}}},";":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703}}}}},"o":{"docs":{},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{},"o":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}},"h":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.016483516483516484}},"e":{"docs":{},"r":{"docs":{},"e":{"docs":{},"'":{"docs":{"DataStructures/StacksAndQueues/":{"ref":"DataStructures/StacksAndQueues/","tf":0.02040816326530612},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.0027548209366391185},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}},"y":{"docs":{},"'":{"docs":{},"l":{"docs":{},"l":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809}}}}}},"s":{"docs":{},"e":{"docs":{},",":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476}}}}},"m":{"docs":{},")":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}},"?":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}},"n":{"docs":{},",":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002421307506053269},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016},"DataStructures/LinkedLists/Instructions.html":{"ref":"DataStructures/LinkedLists/Instructions.html","tf":0.019230769230769232},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002840909090909091},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.005145797598627788},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.001962066710268149},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.01937984496124031}},";":{"docs":{"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406}}},"s":{"docs":{},":":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}},")":{"docs":{"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.007751937984496124}}},",":{"docs":{"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062}}}}},"k":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.003703703703703704},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0023584905660377358},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002840909090909091},"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.0027548209366391185}}}},"s":{"docs":{},":":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}},".":{"docs":{"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.010101010101010102}}}},"r":{"docs":{},"d":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.01}}}}},"a":{"docs":{},"t":{"docs":{},"'":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.0027548209366391185},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0015527950310559005}},"l":{"docs":{},"l":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}},",":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}},")":{"docs":{},".":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625}}}},".":{"docs":{"Algorithms/Games.html":{"ref":"Algorithms/Games.html","tf":0.013333333333333334},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0015527950310559005}}}}},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.009345794392523364}},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.01}}}}}}}}}}},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995}}}},"a":{"docs":{},"d":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625}}}}},"o":{"docs":{},"u":{"docs":{},"g":{"docs":{},"h":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.005681818181818182},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}},"t":{"docs":{"Tricks/":{"ref":"Tricks/","tf":0.004608294930875576}}}}}}}},"o":{"docs":{},"u":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}}}},"r":{"docs":{},"o":{"docs":{},"u":{"docs":{},"g":{"docs":{},"h":{"docs":{},"l":{"docs":{},"y":{"docs":{},".":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002840909090909091}}}}}}}}}},"s":{"docs":{},"e":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}},"u":{"docs":{},"m":{"docs":{},"b":{"docs":{},":":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.0027548209366391185}}}}}}},"o":{"docs":{},"p":{"docs":{"DataStructures/StacksAndQueues/":{"ref":"DataStructures/StacksAndQueues/","tf":0.02040816326530612},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0046875},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.007751937984496124},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.0027548209366391185},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0015527950310559005},"Tricks/":{"ref":"Tricks/","tf":0.004608294930875576}},"o":{"docs":{"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.007874015748031496}},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},")":{"docs":{"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.007874015748031496}}}}}}}}}}}}}}},"[":{"docs":{},":":{"docs":{},":":{"docs":{"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.007874015748031496}}}}},"l":{"docs":{},"o":{"docs":{},"g":{"docs":{"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":5.0078740157480315}}}}}}},"t":{"docs":{},"a":{"docs":{},"l":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.01937046004842615},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.01},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343},"DataStructures/Trees/NumTrees.html":{"ref":"DataStructures/Trees/NumTrees.html","tf":0.02654867256637168},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.004629629629629629},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.005509641873278237},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0038535645472061657}},"_":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.011111111111111112}}}},"t":{"docs":{},"e":{"docs":{},"p":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.005509641873278237}}}}}}}}}},"u":{"docs":{},"g":{"docs":{},"h":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016}}}}},"o":{"docs":{},"/":{"4":{"7":{"5":{"4":{"6":{"2":{"docs":{"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"l":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907}}}},"_":{"docs":{},"b":{"docs":{},"e":{"docs":{},"_":{"docs":{},"k":{"docs":{},"i":{"docs":{},"l":{"docs":{"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.015151515151515152}},"l":{"docs":{},"e":{"docs":{},"d":{"docs":{},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"p":{"docs":{},")":{"docs":{"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576}}}}}}}}}}}}}}}}}}}}}},"g":{"docs":{},"g":{"docs":{},"l":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488}}}}},"j":{"docs":{},"g":{"docs":{},"r":{"docs":{},"o":{"docs":{},"u":{"docs":{},"p":{"docs":{},"s":{"docs":{},".":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}}}},"w":{"docs":{},"e":{"docs":{},"r":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}},":":{"docs":{"DataStructures/Arrays/SlidingWindow.html":{"ref":"DataStructures/Arrays/SlidingWindow.html","tf":0.027522935779816515},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.003205128205128205},"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.010101010101010102},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{"DataStructures/Arrays/SlidingWindow.html":{"ref":"DataStructures/Arrays/SlidingWindow.html","tf":0.027522935779816515},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.007263922518159807},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.011834319526627219},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717},"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0032},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0027063599458728013},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0106951871657754},"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.015151515151515152},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.008108108108108109},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.005145797598627788},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.001962066710268149},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062}},",":{"docs":{"DataStructures/Arrays/SlidingWindow.html":{"ref":"DataStructures/Arrays/SlidingWindow.html","tf":0.009174311926605505},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}}},".":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.0027548209366391185}},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"(":{"docs":{},"c":{"docs":{},",":{"docs":{"DataStructures/Arrays/SlidingWindow.html":{"ref":"DataStructures/Arrays/SlidingWindow.html","tf":0.009174311926605505}}}}}}}}},"[":{"docs":{},"c":{"docs":{},"]":{"docs":{"DataStructures/Arrays/SlidingWindow.html":{"ref":"DataStructures/Arrays/SlidingWindow.html","tf":0.009174311926605505}}}}},")":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002421307506053269},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006}},":":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}}}},"/":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002421307506053269},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.001962066710268149}}},":":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002421307506053269},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.009478672985781991},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.007407407407407408},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.005405405405405406},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.00686106346483705}}},"]":{"docs":{},")":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002421307506053269}}}},"+":{"1":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}}},"docs":{}}}}}},"k":{"docs":{},"e":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809},"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996},"DataStructures/Trees/NumTrees.html":{"ref":"DataStructures/Trees/NumTrees.html","tf":0.008849557522123894},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0030864197530864196},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.0027548209366391185},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}},"n":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002840909090909091},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703}}},".":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358}}}}},"g":{"docs":{"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.045454545454545456}},")":{"docs":{},")":{"docs":{"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576}}}},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"/":{"docs":{},"m":{"docs":{},"a":{"docs":{},"r":{"docs":{},"k":{"docs":{"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576}}}}}}}}}}}},"s":{"docs":{},"k":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.002890173410404624}},"[":{"1":{"docs":{},"]":{"docs":{},",":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625}}}}},"docs":{}},"_":{"docs":{},"i":{"docs":{},"d":{"docs":{},"x":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.00625}}}}}},"s":{"docs":{},".":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625}}},":":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.002890173410404624}}},"_":{"docs":{},"s":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625}},"e":{"docs":{},"d":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625}}}},"docs":{}}}},"docs":{},"t":{"docs":{},"a":{"docs":{},"s":{"docs":{},"k":{"docs":{},"_":{"docs":{},"i":{"docs":{},"d":{"docs":{},"x":{"docs":{},"]":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625}},"[":{"0":{"docs":{},"]":{"docs":{},":":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625}}}}},"docs":{}}}}}}}}}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"m":{"docs":{},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}}}}}}},"p":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}},"b":{"docs":{},"l":{"docs":{"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.007751937984496124},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.004629629629629629}},"e":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"[":{"docs":{},"w":{"docs":{},"e":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},"]":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}}}}}}}}}}}}}}},"e":{"docs":{},"c":{"docs":{},"h":{"docs":{},"n":{"docs":{},"i":{"docs":{},"q":{"docs":{},"u":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.018867924528301886},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}}}}}},"a":{"docs":{},"m":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}},"s":{"docs":{},"/":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005}}}},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},"d":{"docs":{},"i":{"docs":{},"s":{"docs":{},"c":{"docs":{},"u":{"docs":{},"s":{"docs":{},"s":{"docs":{},"/":{"5":{"3":{"9":{"7":{"9":{"7":{"docs":{},"/":{"docs":{},"c":{"docs":{},"%":{"2":{"docs":{},"b":{"docs":{},"%":{"2":{"docs":{},"b":{"docs":{},"p":{"docs":{},"y":{"docs":{},"t":{"docs":{},"h":{"docs":{},"o":{"docs":{},"n":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}}}}},"docs":{}}}},"docs":{}}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}}}},"m":{"docs":{},"p":{"docs":{},"l":{"docs":{},"a":{"docs":{},"t":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}},"e":{"docs":{},":":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}}}}},"o":{"docs":{},"r":{"docs":{},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}}}}}}},"r":{"docs":{},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"s":{"docs":{},".":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}}}}}}}}}}},"x":{"docs":{},"t":{"1":{"docs":{},":":{"docs":{"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.008333333333333333}}},"[":{"docs":{},"i":{"docs":{"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.002777777777777778}}},"m":{"docs":{"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.005555555555555556}}}}},"2":{"docs":{},":":{"docs":{"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.008333333333333333}}},"[":{"docs":{},"n":{"docs":{"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.005555555555555556}}},"x":{"docs":{"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.002777777777777778}}}}},"docs":{}}},"l":{"docs":{},"l":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.02631578947368421}}}}},"w":{"docs":{},"o":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":5.018867924528302},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.007263922518159807},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0048},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":5.014218009478673},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703},"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.010101010101010102},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.006872852233676976},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.004578155657292348},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098},"Algorithms/DynamicProgramming-IV.html":{"ref":"Algorithms/DynamicProgramming-IV.html","tf":0.00980392156862745},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0015527950310559005},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.02631578947368421}},"/":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488}}}},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},".":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995}}},";":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}},"c":{"docs":{},"e":{"docs":{},"/":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}}}}},"y":{"docs":{},"p":{"docs":{},"i":{"docs":{},"c":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.009433962264150943}}}},"e":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995}}}}},"i":{"docs":{},"l":{"docs":{},"l":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002421307506053269},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.01098901098901099}}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}},"m":{"docs":{},"e":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00404040404040404},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.003205128205128205},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.003924133420536298},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0030864197530864196},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.01098901098901099},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0049833887043189366},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.05263157894736842}},")":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907}}},",":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907}}},"/":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907}}},"s":{"docs":{},":":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.008403361344537815}}},")":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625}}},",":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}},".":{"docs":{"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.010101010101010102},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}}},"p":{"docs":{},"s":{"docs":{},":":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476}}}},":":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002840909090909091}}}},"c":{"docs":{},"k":{"docs":{},"e":{"docs":{},"t":{"docs":{},"s":{"docs":{},":":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00404040404040404}}},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}},"e":{"docs":{"Tricks/":{"ref":"Tricks/","tf":0.009216589861751152}},"b":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"k":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}}}}}}}},",":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}},"u":{"docs":{},"r":{"docs":{},"b":{"docs":{},"u":{"docs":{},"l":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}},")":{"docs":{},")":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}}}}},"v":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0027063599458728013},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.012605042016806723},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202},"Tricks/":{"ref":"Tricks/","tf":0.009216589861751152}},"a":{"docs":{},"l":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0064},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.005412719891745603},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.006224066390041493},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.003105590062111801}},"u":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.021505376344086023},"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.009685230024213076},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0032},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0023584905660377358},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.005412719891745603},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.003125},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002840909090909091},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"Algorithms/Games.html":{"ref":"Algorithms/Games.html","tf":0.013333333333333334},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Algorithms/DP/NumSol.html":{"ref":"Algorithms/DP/NumSol.html","tf":0.013888888888888888},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.005509641873278237},"Tricks/":{"ref":"Tricks/","tf":0.004608294930875576}},"e":{"docs":{},".":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847}}},":":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006}}},"s":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}},",":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}}}},"i":{"docs":{},"d":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.007407407407407408},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.011904761904761904},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.002616088947024199},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.007763975155279503}},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"s":{"docs":{},"e":{"docs":{},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/StacksAndQueues/":{"ref":"DataStructures/StacksAndQueues/","tf":0.01020408163265306}}}}}}}}}}}}}}}}}}}}}}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},":":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.003703703703703704}}},"=":{"docs":{},"f":{"docs":{},"a":{"docs":{},"l":{"docs":{},"s":{"docs":{},"e":{"docs":{},")":{"docs":{},":":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.003703703703703704}}}}}}}}},"t":{"docs":{},"r":{"docs":{},"u":{"docs":{},"e":{"docs":{},")":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.003703703703703704}}}}}}}}}}}}},"p":{"docs":{},"a":{"docs":{},"l":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"r":{"docs":{},"o":{"docs":{},"m":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Miscellaneous/Palindrome.html":{"ref":"Miscellaneous/Palindrome.html","tf":0.011235955056179775}}}}}}}}}}}}}}}}}},"/":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.003105590062111801}}}}},"=":{"0":{"docs":{},",":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0064},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0040595399188092015},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}}}},"docs":{}},",":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006}}}},"r":{"docs":{},"i":{"docs":{},"a":{"docs":{},"b":{"docs":{},"l":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.010752688172043012},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.003703703703703704},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004149377593360996},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}},"e":{"docs":{},".":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}}}},"t":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}},"g":{"docs":{},"u":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.02631578947368421}}}}},"e":{"docs":{},"r":{"docs":{},"i":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0015527950310559005}},"f":{"docs":{},"y":{"docs":{},"(":{"docs":{},"m":{"docs":{},"i":{"docs":{},"d":{"docs":{},")":{"docs":{},":":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}}}}}}}}}}},"t":{"docs":{},"i":{"docs":{},"c":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.01092896174863388},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},"a":{"docs":{},"l":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847}}}}}}}}}}}}},"t":{"docs":{},"r":{"docs":{},"a":{"docs":{},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"a":{"docs":{},"l":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847}}}}}}}}}}}}}}}}},"c":{"docs":{},"u":{"docs":{},"t":{"docs":{},"s":{"docs":{},":":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}}}}}}},"s":{"docs":{},"a":{"docs":{},".":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}},"i":{"docs":{},"s":{"docs":{},"u":{"docs":{},"a":{"docs":{},"l":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.002777777777777778},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}}}}},"i":{"docs":{},"t":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0048},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0106951871657754},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.008928571428571428},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.012605042016806723},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.026262626262626262},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.003125},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.014204545454545454},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.01728395061728395},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.003205128205128205},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0015527950310559005},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},"e":{"docs":{},"d":{"docs":{},".":{"docs":{},"a":{"docs":{},"d":{"docs":{},"d":{"docs":{},"(":{"docs":{},"f":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"e":{"docs":{},"r":{"docs":{},"p":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},")":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016}}}}}}}}}}}}}},"i":{"docs":{},"d":{"docs":{},"(":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},")":{"docs":{},")":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016}}}}}}}}}},")":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},")":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}}}}}},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},")":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}}}},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},"_":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},")":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358}}}}}}}}}}}}},"v":{"docs":{},")":{"docs":{"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877}}}},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"m":{"docs":{},")":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907}}}}}}},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"r":{"docs":{},"s":{"docs":{},"e":{"docs":{},")":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}}}}}}},"(":{"docs":{},"x":{"docs":{},",":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358}}}},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},",":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0015527950310559005}}}}}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"m":{"docs":{},"o":{"docs":{},"v":{"docs":{},"e":{"docs":{},"(":{"docs":{},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"r":{"docs":{},"s":{"docs":{},"e":{"docs":{},")":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}}}}}}},"i":{"docs":{},")":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}}}}}}}}}},":":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0032},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.012605042016806723},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.010101010101010102},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.007407407407407408},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0015527950310559005}}},"[":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},"]":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.005952380952380952}}}}}}}},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"]":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.008928571428571428},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907}},":":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476}}}}}}}},"s":{"docs":{},"]":{"docs":{},":":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476}}}}},"c":{"docs":{},"]":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.008403361344537815}}}},"j":{"docs":{},"]":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.00641025641025641}},":":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.003205128205128205}}}}},"x":{"docs":{},"]":{"docs":{},"[":{"docs":{},"y":{"docs":{},"]":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0030864197530864196}},":":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}}}}}}}}}}}},"c":{"docs":{},"e":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}},"i":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}},":":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0023584905660377358}}},"s":{"docs":{"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576}}},",":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.012605042016806723}}},")":{"docs":{},")":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907}}}},"o":{"docs":{},"w":{"docs":{},"e":{"docs":{},"l":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.010309278350515464},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995}},"_":{"docs":{},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.006872852233676976}}}}}}}}}},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995}}},"_":{"docs":{},"s":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},"e":{"docs":{},"d":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{},",":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}},"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},"i":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}}}}}}},"w":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.012605042016806723},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.003430531732418525},"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.010101010101010102},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},"a":{"docs":{},"y":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.010752688172043012},"DataStructures/StacksAndQueues/":{"ref":"DataStructures/StacksAndQueues/","tf":0.01020408163265306},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005},"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.009478672985781991},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.004578155657292348},"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.002777777777777778},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.011019283746556474},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},"s":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.009433962264150943},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0049382716049382715},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}},"/":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.009433962264150943}}}}}},"n":{"docs":{},"t":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011976047904191617},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.003703703703703704},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0023584905660377358},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.003125},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.010101010101010102},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.007751937984496124},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0030864197530864196},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.011019283746556474},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}},"s":{"docs":{},"h":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}},"e":{"docs":{},"l":{"docs":{},"l":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.010752688172043012},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002421307506053269},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}},".":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}},",":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625}}},")":{"docs":{},":":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.0027548209366391185}}}}}},"a":{"docs":{},"p":{"docs":{},"o":{"docs":{},"n":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02}}}}},"k":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625}}}}}},"r":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}},"'":{"docs":{},"v":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062}}},"d":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0015527950310559005}}},"r":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625}}},"l":{"docs":{},"l":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625}}}}},"e":{"docs":{},"k":{"docs":{},"l":{"docs":{},"i":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678}}}}}},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0030864197530864196}},"s":{"docs":{},":":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.003430531732418525}}},"[":{"0":{"docs":{},"]":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}}}},"1":{"docs":{},":":{"docs":{},"]":{"docs":{},":":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}}}}}},"docs":{}},",":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}}}}}}},"o":{"docs":{},"r":{"docs":{},"k":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.010752688172043012},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.02631578947368421}},".":{"docs":{"Algorithms/TrickySorting.html":{"ref":"Algorithms/TrickySorting.html","tf":0.024390243902439025}}},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"/":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}},"d":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.014619883040935672},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098},"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.002777777777777778},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.005509641873278237},"Miscellaneous/AlienDictionary.html":{"ref":"Miscellaneous/AlienDictionary.html","tf":0.021739130434782608}},",":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.005847953216374269}}},":":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358}}},"[":{"docs":{},":":{"docs":{},"i":{"docs":{},"]":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.005847953216374269}}}}},"i":{"docs":{},"+":{"1":{"docs":{},":":{"docs":{},"]":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.005847953216374269}}}}},"docs":{}}}},"s":{"docs":{},":":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343},"Miscellaneous/AlienDictionary.html":{"ref":"Miscellaneous/AlienDictionary.html","tf":0.021739130434782608}}},"_":{"docs":{},"s":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343}},":":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343}}}}}},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343}},"e":{"docs":{},":":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343}}},"[":{"docs":{},"n":{"docs":{},"e":{"docs":{},"w":{"docs":{},"_":{"docs":{},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"]":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343}},")":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343}}}}}}}}}}}},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"]":{"docs":{},"+":{"1":{"docs":{},")":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343}}}},"docs":{}}}}}}}}}}}}}},"}":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343}}},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}},")":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.0027548209366391185}}},"b":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"k":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.0027548209366391185}}}}}}}}}}}}},"d":{"docs":{},"i":{"docs":{},"c":{"docs":{},"t":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.0027548209366391185}},":":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.008264462809917356}}}}}}}}},"n":{"docs":{},"'":{"docs":{},"t":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006}}}}}},"r":{"docs":{},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.010752688172043012},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Miscellaneous/Palindrome.html":{"ref":"Miscellaneous/Palindrome.html","tf":0.011235955056179775}}}}},"a":{"docs":{},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"d":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}}}},"t":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}},"h":{"docs":{},"y":{"docs":{},"?":{"docs":{"DataStructures/StacksAndQueues/":{"ref":"DataStructures/StacksAndQueues/","tf":0.01020408163265306}}}},"o":{"docs":{},"l":{"docs":{},"e":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002421307506053269},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}},"a":{"docs":{},"t":{"docs":{},"'":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002840909090909091}}}}},"e":{"docs":{},"e":{"docs":{},"l":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358}}},"n":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358}}}},"r":{"docs":{},"e":{"docs":{},",":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}},"t":{"docs":{},"h":{"docs":{},"e":{"docs":{},"r":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}},"n":{"docs":{},"?":{"docs":{"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062}}}}}},"i":{"docs":{},"n":{"docs":{"Algorithms/Games.html":{"ref":"Algorithms/Games.html","tf":0.013333333333333334}},"d":{"docs":{},"o":{"docs":{},"w":{"docs":{"DataStructures/Arrays/SlidingWindow.html":{"ref":"DataStructures/Arrays/SlidingWindow.html","tf":5.036697247706422},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.004842615012106538},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.011940298507462687},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343},"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.020202020202020204}},".":{"docs":{"DataStructures/Arrays/SlidingWindow.html":{"ref":"DataStructures/Arrays/SlidingWindow.html","tf":0.009174311926605505}}}}}},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}},"n":{"docs":{},"e":{"docs":{},"r":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}},"t":{"docs":{},"h":{"docs":{},"o":{"docs":{},"u":{"docs":{},"t":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0015527950310559005}}}}},"i":{"docs":{},"n":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062}}}},";":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0015527950310559005}}}}},"s":{"docs":{},"e":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":3.333333333333333},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0106951871657754}}}},"d":{"docs":{},"t":{"docs":{},"h":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.002890173410404624}},":":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}},")":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}},")":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.008403361344537815}}}},",":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907}}},"g":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.003430531732418525}}},":":{"docs":{"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.010101010101010102},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}},"]":{"docs":{"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.010101010101010102}}}},"&":{"docs":{"DataStructures/":{"ref":"DataStructures/","tf":0.2},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.006872852233676976}},"=":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488}}}},"'":{"0":{"0":{"0":{"0":{"docs":{},"'":{"docs":{},",":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358}}}}},"docs":{}},"docs":{}},"docs":{},"'":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.010309278350515464}},",":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.006872852233676976}}}}},"1":{"docs":{},"'":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.010309278350515464}},",":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.006872852233676976}}},":":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.006872852233676976}}}}},"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}},"'":{"docs":{"DataStructures/Arrays/SlidingWindow.html":{"ref":"DataStructures/Arrays/SlidingWindow.html","tf":0.01834862385321101},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.005847953216374269},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.003105590062111801}},".":{"docs":{},"j":{"docs":{},"o":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},")":{"docs":{"DataStructures/StacksAndQueues/":{"ref":"DataStructures/StacksAndQueues/","tf":0.01020408163265306}}}}}}},"_":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},")":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0015527950310559005}}}}}}}}}}}}}}},",":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0015527950310559005}}}},"q":{"docs":{},"u":{"docs":{},"i":{"docs":{},"r":{"docs":{},"k":{"docs":{},"y":{"docs":{},"'":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02}}}}}}}}},"i":{"docs":{},"'":{"docs":{},":":{"docs":{"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.009345794392523364}}},",":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488}}}}},"j":{"docs":{},"'":{"docs":{},":":{"docs":{"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.018691588785046728}}}}},"k":{"docs":{},"'":{"docs":{},":":{"docs":{"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.018691588785046728}}}}},"*":{"docs":{},"'":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0015527950310559005}},":":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0015527950310559005}}},"]":{"docs":{},":":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.003105590062111801}}}}}},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},"'":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016}}}}}},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"'":{"docs":{},")":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809}}},",":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809}}},":":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809}}}}}}}},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"[":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"]":{"docs":{},"'":{"docs":{},")":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006}}}}}}}}}}}}}}}}}},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"'":{"docs":{},")":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006}}},",":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0040595399188092015}}},":":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0027063599458728013}}}}}}}}}}}},"#":{"docs":{},"'":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}}},",":{"docs":{},"'":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}}}}},",":{"docs":{},"'":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}},")":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}}}}},":":{"docs":{},"'":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.003205128205128205}}}},"(":{"docs":{},"'":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0015527950310559005}},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.003105590062111801}}},":":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.012422360248447204}}}}},")":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},"'":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0015527950310559005}},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.003105590062111801}}},":":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.004658385093167702}}},"]":{"docs":{},":":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0015527950310559005}}}}}},"v":{"docs":{},"i":{"docs":{},"s":{"docs":{},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{},"d":{"docs":{},"'":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.005405405405405406}}}}}}}}}},"c":{"docs":{},"a":{"docs":{},"n":{"docs":{},"'":{"docs":{"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.010101010101010102}}}}}},"e":{"docs":{},"'":{"docs":{},",":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488}}}}},"o":{"docs":{},"'":{"docs":{},",":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488}}}}},"u":{"docs":{},"'":{"docs":{},"]":{"docs":{},")":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488}}}}}},"p":{"docs":{},"i":{"docs":{},"v":{"docs":{},"o":{"docs":{},"t":{"docs":{},"'":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}}}}}}}},">":{"docs":{"DataStructures/StacksAndQueues/":{"ref":"DataStructures/StacksAndQueues/","tf":0.02040816326530612},"DataStructures/Arrays/SlidingWindow.html":{"ref":"DataStructures/Arrays/SlidingWindow.html","tf":0.009174311926605505},"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.018867924528301886},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.007263922518159807},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.01775147928994083},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.03},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.023880597014925373},"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.009345794392523364},"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.010810810810810811},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.023391812865497075},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0144},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.014814814814814815},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.014150943396226415},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.014884979702300407},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.01092896174863388},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.014218009478672985},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.02074688796680498},"DataStructures/Trees/NumTrees.html":{"ref":"DataStructures/Trees/NumTrees.html","tf":0.008849557522123894},"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.01488095238095238},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.02100840336134454},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.014141414141414142},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.015748031496062992},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0171875},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.014204545454545454},"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678},"Algorithms/TrickySorting.html":{"ref":"Algorithms/TrickySorting.html","tf":0.04878048780487805},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.012345679012345678},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.03205128205128205},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.01891891891891892},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.017152658662092625},"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.010101010101010102},"Algorithms/Games.html":{"ref":"Algorithms/Games.html","tf":0.013333333333333334},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.01718213058419244},"Algorithms/DP/NumSol.html":{"ref":"Algorithms/DP/NumSol.html","tf":0.041666666666666664},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.015432098765432098},"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.019444444444444445},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.011019283746556474},"Algorithms/DynamicProgramming-IV.html":{"ref":"Algorithms/DynamicProgramming-IV.html","tf":0.00980392156862745},"Miscellaneous/Palindrome.html":{"ref":"Miscellaneous/Palindrome.html","tf":0.02247191011235955},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.016611295681063124},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.010869565217391304},"Miscellaneous/AlienDictionary.html":{"ref":"Miscellaneous/AlienDictionary.html","tf":0.021739130434782608},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.018304431599229287}},"=":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.009433962264150943},"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.028037383177570093},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0040595399188092015},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004149377593360996},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0049382716049382715},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.003430531732418525},"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.010101010101010102},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.007751937984496124},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098},"Miscellaneous/Palindrome.html":{"ref":"Miscellaneous/Palindrome.html","tf":0.011235955056179775},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0033222591362126247},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.002890173410404624}}},"\"":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}},")":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.007407407407407408}}}}},"j":{"docs":{"DataStructures/StacksAndQueues/":{"ref":"DataStructures/StacksAndQueues/","tf":0.01020408163265306},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.011834319526627219},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.02},"DataStructures/Trees/NumTrees.html":{"ref":"DataStructures/Trees/NumTrees.html","tf":0.017699115044247787},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.003205128205128205},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.010810810810810811},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.005886200130804447},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.008264462809917356},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0033222591362126247},"Miscellaneous/AlienDictionary.html":{"ref":"Miscellaneous/AlienDictionary.html","tf":0.043478260869565216},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0038535645472061657}},",":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}},":":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703}}},"u":{"docs":{},"m":{"docs":{},"p":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.0027548209366391185},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995}}},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}}}}},"g":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0049382716049382715}}},"n":{"docs":{},"e":{"docs":{"Algorithms/DynamicProgramming-IV.html":{"ref":"Algorithms/DynamicProgramming-IV.html","tf":0.0196078431372549},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}}}}},"o":{"docs":{},"b":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995}},"s":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}},")":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995}},")":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.005405405405405406}},":":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703}}}},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703}}}},"'":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}},"+":{"1":{"docs":{},")":{"docs":{},")":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}},"docs":{}},".":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}},"]":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995}},")":{"docs":{},")":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}},")":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}},"a":{"docs":{},"v":{"docs":{},"a":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}},"n":{"docs":{},"u":{"docs":{},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}}}}}}}}},":":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703}},"r":{"docs":{},"t":{"docs":{},"y":{"docs":{},"p":{"docs":{},"e":{"docs":{},":":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004149377593360996}}}}}}}},"t":{"docs":{},"y":{"docs":{},"p":{"docs":{},"e":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004149377593360996}}}}}}},"{":{"0":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006}},":":{"1":{"docs":{},"}":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002421307506053269}}}},"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.004842615012106538},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006}}}},"1":{"docs":{},":":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006}},"f":{"docs":{},"l":{"docs":{},"o":{"docs":{},"a":{"docs":{},"t":{"docs":{},"(":{"docs":{},"'":{"docs":{"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406}},"i":{"docs":{},"n":{"docs":{},"f":{"docs":{},"'":{"docs":{},")":{"docs":{},",":{"docs":{"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406}}}}}}}}}}}}}}}}},"6":{"4":{"docs":{},":":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488}}}},"docs":{}},"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.008108108108108109}},"}":{"docs":{"DataStructures/Arrays/SlidingWindow.html":{"ref":"DataStructures/Arrays/SlidingWindow.html","tf":0.009174311926605505},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002421307506053269},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.008771929824561403},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00819672131147541},"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00808080808080808},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002840909090909091},"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.010101010101010102},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}},",":{"docs":{"DataStructures/Arrays/SlidingWindow.html":{"ref":"DataStructures/Arrays/SlidingWindow.html","tf":0.009174311926605505}}}},"'":{"docs":{},"i":{"docs":{},"'":{"docs":{},":":{"docs":{"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.009345794392523364}}}}}},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},":":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343}}}}}}},"v":{"docs":{},":":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},":":{"docs":{"DataStructures/Trees/NumTrees.html":{"ref":"DataStructures/Trees/NumTrees.html","tf":0.008849557522123894}}}}}},"l":{"docs":{},"a":{"docs":{},"b":{"docs":{},"e":{"docs":{},"l":{"docs":{},"s":{"docs":{},"[":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"]":{"docs":{},":":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202}}}}}}}}}}}}}}},"f":{"docs":{},"[":{"docs":{},"p":{"docs":{},"]":{"docs":{},"[":{"docs":{},"j":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}}}},"c":{"docs":{},":":{"docs":{"Miscellaneous/AlienDictionary.html":{"ref":"Miscellaneous/AlienDictionary.html","tf":0.021739130434782608}}}},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{},"m":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{},":":{"docs":{"Tricks/":{"ref":"Tricks/","tf":0.004608294930875576}}}}},"docs":{}}}}}},"k":{"docs":{},":":{"docs":{"Tricks/":{"ref":"Tricks/","tf":0.004608294930875576}}}}},"z":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.02830188679245283},"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005}},"e":{"docs":{},"r":{"docs":{},"o":{"docs":{},"/":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002421307506053269},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995}}},"e":{"docs":{},"s":{"docs":{},"/":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.011627906976744186}},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"m":{"docs":{},"i":{"docs":{},"s":{"docs":{},"s":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"/":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}}}}}}}}}}}}},".":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0015527950310559005}}}}}},"]":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}},")":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}},"i":{"docs":{},"g":{"docs":{},"z":{"docs":{},"a":{"docs":{},"g":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0023584905660377358},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497}}}}}},"p":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012345679012345678}}}},":":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358}}}},"!":{"docs":{},"=":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002421307506053269},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609},"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.005988023952095809},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.01092896174863388},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0106951871657754},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.003105590062111801},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828}}}},"*":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.007263922518159807},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.011834319526627219},"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.007075471698113208},"DataStructures/Trees/NumTrees.html":{"ref":"DataStructures/Trees/NumTrees.html","tf":0.035398230088495575},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.00202020202020202},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.007407407407407408},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.003205128205128205},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.003430531732418525},"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.002616088947024199},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.007751937984496124},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.006172839506172839},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.0027548209366391185},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.003105590062111801},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.00674373795761079}},"=":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488}}},"*":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.0027548209366391185}}}},"x":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.007263922518159807},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609},"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.028037383177570093},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0023584905660377358},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.01912568306010929},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.008522727272727272},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.019753086419753086},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.015503875968992248},"Algorithms/DP/NumSol.html":{"ref":"Algorithms/DP/NumSol.html","tf":0.041666666666666664},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.018518518518518517},"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.016666666666666666},"Algorithms/DynamicProgramming-IV.html":{"ref":"Algorithms/DynamicProgramming-IV.html","tf":0.049019607843137254},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414},"Tricks/":{"ref":"Tricks/","tf":0.009216589861751152}},".":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002421307506053269}},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"(":{"docs":{},"x":{"docs":{},",":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00546448087431694}}}}}}}}},":":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002421307506053269},"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.009345794392523364},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.005847953216374269},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00546448087431694},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.003430531732418525},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.008305647840531562},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.002890173410404624},"Tricks/":{"ref":"Tricks/","tf":0.004608294930875576}}},"o":{"docs":{},"r":{"docs":{},"s":{"docs":{},"/":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.002421307506053269}}}}}},",":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00546448087431694},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.00625},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.014204545454545454},"Algorithms/TrickySorting.html":{"ref":"Algorithms/TrickySorting.html","tf":0.024390243902439025},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.007407407407407408},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703}}},")":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00546448087431694},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0019267822736030828},"Tricks/":{"ref":"Tricks/","tf":0.004608294930875576}},")":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.0029239766081871343},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}}},":":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0023584905660377358},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}}},"]":{"docs":{"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0030864197530864196}}}},"[":{"0":{"docs":{},"]":{"docs":{},")":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0049833887043189366}},")":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625}}}}}},"1":{"docs":{},"]":{"docs":{},")":{"docs":{},")":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123},"Tricks/":{"ref":"Tricks/","tf":0.004608294930875576}}}}}},"docs":{},"x":{"docs":{},"]":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00546448087431694}}}}},"_":{"docs":{},"f":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"d":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00546448087431694}}}}}}},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00546448087431694}},"+":{"1":{"docs":{},")":{"docs":{},"]":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847}}}}},"docs":{}}}},"i":{"docs":{},"n":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847}},",":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847}}}}}},"d":{"docs":{},"i":{"docs":{},"r":{"docs":{},",":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002840909090909091}}}}}}},";":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.004201680672268907}}},"+":{"docs":{},"i":{"docs":{"Algorithms/TrickySorting.html":{"ref":"Algorithms/TrickySorting.html","tf":0.04878048780487805}}}},"i":{"docs":{"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.007751937984496124}}},"t":{"docs":{},"h":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}},"%":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.005847953216374269},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016},"DataStructures/Trees/NumTrees.html":{"ref":"DataStructures/Trees/NumTrees.html","tf":0.017699115044247787},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358},"Algorithms/Games.html":{"ref":"Algorithms/Games.html","tf":0.013333333333333334},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.005509641873278237},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.002890173410404624}}},"/":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.01775147928994083},"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.005970149253731343},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}},"/":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498},"DataStructures/Trees/NumTrees.html":{"ref":"DataStructures/Trees/NumTrees.html","tf":0.017699115044247787},"Algorithms/BucketTrick.html":{"ref":"Algorithms/BucketTrick.html","tf":0.020202020202020204},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}},"=":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}},"|":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.005917159763313609}}},"\\":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.005},"DataStructures/Arrays/MultipleArrays.html":{"ref":"DataStructures/Arrays/MultipleArrays.html","tf":0.018691588785046728},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.003703703703703704},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002840909090909091},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098},"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.013888888888888888},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.0027548209366391185},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.004658385093167702}}},"y":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0078125},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.014204545454545454},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.024691358024691357},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.015503875968992248},"Algorithms/DP/NumSol.html":{"ref":"Algorithms/DP/NumSol.html","tf":0.041666666666666664},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.018518518518518517},"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.016666666666666666},"Algorithms/DynamicProgramming-IV.html":{"ref":"Algorithms/DynamicProgramming-IV.html","tf":0.049019607843137254},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.004816955684007707},"Tricks/":{"ref":"Tricks/","tf":0.004608294930875576}},",":{"docs":{"DataStructures/Arrays/Triplets.html":{"ref":"DataStructures/Arrays/Triplets.html","tf":0.01},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.005681818181818182},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703}}},"o":{"docs":{},"u":{"docs":{},"r":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.0029850746268656717}}}}}}},"'":{"docs":{},"d":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}},":":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00546448087431694},"Algorithms/TrickySorting.html":{"ref":"Algorithms/TrickySorting.html","tf":0.024390243902439025},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0030864197530864196},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}},"_":{"docs":{},"f":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"d":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00546448087431694}},")":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847}},":":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847}}}}}}}}},"d":{"docs":{},"i":{"docs":{},"r":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002840909090909091}}}}}},"i":{"docs":{"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.007751937984496124}},"e":{"docs":{},"l":{"docs":{},"d":{"docs":{"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.014218009478672985}}}}}},")":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.009876543209876543},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.002890173410404624}},")":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002840909090909091},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.007407407407407408}},"]":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358}}}},",":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002840909090909091},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0049382716049382715}}},":":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.005681818181818182},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0006540222367560497},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098},"Tricks/":{"ref":"Tricks/","tf":0.004608294930875576}}},"]":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002840909090909091},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0030864197530864196}}},".":{"docs":{"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.003875968992248062}}}},"*":{"docs":{},"y":{"docs":{},")":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625}}}}},"+":{"1":{"docs":{},")":{"docs":{},",":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358}}}}},"docs":{},"x":{"docs":{"Algorithms/TrickySorting.html":{"ref":"Algorithms/TrickySorting.html","tf":0.024390243902439025}}}},"]":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358}}}},"_":{"docs":{"DataStructures/Arrays/LeftAndRight.html":{"ref":"DataStructures/Arrays/LeftAndRight.html","tf":0.005405405405405406},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00546448087431694},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498},"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.007575757575757576},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002840909090909091},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.007751937984496124},"Algorithms/DP/NumSol.html":{"ref":"Algorithms/DP/NumSol.html","tf":0.027777777777777776},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098}},"_":{"docs":{},"i":{"docs":{},"n":{"docs":{},"i":{"docs":{},"t":{"docs":{},"_":{"docs":{},"_":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},")":{"docs":{},":":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.005970149253731343}}}},",":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0064},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.0023584905660377358},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.005412719891745603},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.00273224043715847},"Datastructures/Trees/TreeToGraph.html":{"ref":"Datastructures/Trees/TreeToGraph.html","tf":0.0053475935828877},"DataStructures/Trees/TwoTrees.html":{"ref":"DataStructures/Trees/TwoTrees.html","tf":0.004739336492890996},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004149377593360996},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}}}}}}}}}}}}}}},",":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006},"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625}}},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0032}}}}},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},",":{"docs":{"Tricks/":{"ref":"Tricks/","tf":0.004608294930875576}}}}}}},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0048}}}}}},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0048}}}}},"i":{"docs":{},"n":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},")":{"docs":{},":":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.003703703703703704}}}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},")":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.003703703703703704}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},")":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.003703703703703704}}}}}}}}}}}}},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},")":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.003703703703703704}}}}}}}},".":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.011111111111111112}}}}}}}}}}}},"m":{"docs":{},"p":{"docs":{},":":{"docs":{},"_":{"docs":{"Tricks/":{"ref":"Tricks/","tf":0.004608294930875576}}}}}}},"d":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625}},"i":{"docs":{},"r":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358}},":":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358}}}}}},"x":{"docs":{"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.015503875968992248}},",":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.005681818181818182},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358}}}},"y":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625},"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.005681818181818182},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358},"Algorithms/DP/Knapsack.html":{"ref":"Algorithms/DP/Knapsack.html","tf":0.015503875968992248}},")":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358}},")":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002840909090909091},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358}}}},",":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002840909090909091}}}},"h":{"docs":{},"e":{"docs":{},"l":{"docs":{},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{},"c":{"docs":{},"o":{"docs":{},"p":{"docs":{},"y":{"docs":{},"p":{"docs":{},"a":{"docs":{},"s":{"docs":{},"t":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703}}}}}}}}}}}}}}}}}}}}}}},"a":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.006872852233676976}}},"b":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488}},",":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.010309278350515464}}}},"c":{"docs":{},")":{"docs":{},":":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488}}}},"]":{"docs":{},":":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"Tricks/":{"ref":"Tricks/","tf":0.004608294930875576}},")":{"docs":{},":":{"docs":{"Tricks/":{"ref":"Tricks/","tf":0.009216589861751152}}}}}}}}}},"`":{"0":{"docs":{},"`":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006}}}},"docs":{},"`":{"docs":{},"`":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}},"p":{"docs":{},"i":{"docs":{"DataStructures/Arrays/StackTricks.html":{"ref":"DataStructures/Arrays/StackTricks.html","tf":0.011940298507462687},"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0016},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0049382716049382715},"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.003430531732418525},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123},"Tricks/":{"ref":"Tricks/","tf":0.009216589861751152}}}}}},"v":{"docs":{},"i":{"docs":{},"s":{"docs":{},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{},"d":{"docs":{},"`":{"docs":{"DataStructures/Heap.html":{"ref":"DataStructures/Heap.html","tf":0.0015625}}}}}}}}}},"d":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"s":{"docs":{},"_":{"docs":{},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{},"`":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358}}}}}}}}}}}}}}},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},"^":{"2":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.0024691358024691358}}},"docs":{}}}}},"/":{"docs":{},"/":{"docs":{"Tricks/":{"ref":"Tricks/","tf":0.004608294930875576}}}},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"h":{"docs":{},"`":{"docs":{"Tricks/":{"ref":"Tricks/","tf":0.004608294930875576}}}}}}}},"\"":{"0":{"docs":{},"\"":{"docs":{"DataStructures/Grid.html":{"ref":"DataStructures/Grid.html","tf":0.002840909090909091}}}},"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.007407407407407408},"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.005509641873278237},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.0016611295681063123}},"\"":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.00641025641025641},"Miscellaneous/Palindrome.html":{"ref":"Miscellaneous/Palindrome.html","tf":0.011235955056179775},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0015527950310559005}},"\"":{"docs":{"DataStructures/LinkedLists/":{"ref":"DataStructures/LinkedLists/","tf":0.0032},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.007407407407407408},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004149377593360996},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0038535645472061657}},"d":{"docs":{},"e":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}}}}}}},"e":{"docs":{},"n":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.002074688796680498}}}}}}}},")":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.003703703703703704}}}},"m":{"docs":{},"e":{"docs":{},"a":{"docs":{},"n":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"f":{"docs":{},"u":{"docs":{},"l":{"docs":{},"\"":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.002976190476190476}}}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"s":{"docs":{},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{},"\"":{"docs":{"Algorithms/BinarySearch.html":{"ref":"Algorithms/BinarySearch.html","tf":0.0017152658662092624}}}}}}}}},"s":{"docs":{},"o":{"docs":{},"l":{"docs":{},"u":{"docs":{},"t":{"docs":{"Algorithms/DynamicProgramming-II.html":{"ref":"Algorithms/DynamicProgramming-II.html","tf":0.002777777777777778}}}}}}},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"p":{"docs":{},"l":{"docs":{},"e":{"docs":{},"t":{"docs":{},"e":{"docs":{},"\"":{"docs":{"Algorithms/DynamicProgramming-III.html":{"ref":"Algorithms/DynamicProgramming-III.html","tf":0.0027548209366391185}}}}}}}}}}},"n":{"docs":{},"o":{"docs":{},"n":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}}}}},")":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.0013531799729364006},"Algorithms/DynamicProgramming-I.html":{"ref":"Algorithms/DynamicProgramming-I.html","tf":0.0015432098765432098},"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.003105590062111801}},",":{"docs":{"Miscellaneous/Parenthesis.html":{"ref":"Miscellaneous/Parenthesis.html","tf":0.0015527950310559005}}}},"‘":{"docs":{},"r":{"docs":{},"e":{"docs":{},"j":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"’":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.003205128205128205}}}}}}}}}},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703},"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.0009633911368015414}}},"}":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.002702702702702703}}},"^":{"docs":{},"=":{"docs":{"Algorithms/Bitwise.html":{"ref":"Algorithms/Bitwise.html","tf":0.003436426116838488}}}},".":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.002616088947024199}},".":{"docs":{},".":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995}},",":{"docs":{"Algorithms/DP/":{"ref":"Algorithms/DP/","tf":0.0013080444735120995}}}}}}},"length":9090},"corpusTokens":["!=","\"","\"\"","\"\"\"","\"\"\"decod","\"\"\"encod","\"\")","\"0\"","\"complete\"","\"insert\"","\"meaningful\"","\"non","\"solut","#","###","####","#(climb","#3","#return","$","%","&","&=","'","'#'","'#,'","''","'',","''.join(s_list)","''.join(stack)","'('","'(',","'(':","')","')'","')',","')':","')']:","'*'","'*':","'*']:","','","',')","'0'","'0',","'0000',","'1'","'1',","'1':","':'","'can'","'e',","'i',","'i':","'j':","'k':","'list[treenode]')","'next'","'node')","'node',","'node':","'o',","'pivot'","'quirky'","'treenode')","'treenode',","'treenode':","'u'])","'visited'","(","((","((i,","(0","(0,","(1","(1)","(1,","(10**9","(132","(2","(2,","(4,","(6,","(7,","(==r)","(_d","(_list.val,","(_x,","(a[p+1]","(abs(x),","(add","(arrays,","(bag_weight","(bits[i","(bottom","(c","(care","(check","(collections.deque)","(current","(d","(dist_t","(djikstra","(dp[pos]","(e","(easier","(eg.","(end","(end_index","(even","(float('","(h","(heada","(heap","(https://leetcode.com/contest/weekli","(i","(i)","(i,","(id","(ie","(if","(includ","(int","(j","(k","(k+1):","(kinda!)","(knight","(l","(l.val,","(l1_val","(last","(leetcod","(left_idx","(left_max","(len(nums)","(len(tickets)","(len(values)","(levelwis","(lists[list_idx].val,","(m,","(make","(math.max(i","(math.max(j,","(max_freq","(max_freq_count","(max_height","(merg","(n","(n+1)","(n+1)st","(n+1)th","(ncr)","(need","(no","(node,","(node.v","(not","(num","(nums[i]","(odd","(one","(ord(string[i","(out","(p[j]","(p[x]","(pay","(posit","(postorder).","(price","(priority,","(processing,","(recurs","(right","(right_min","(root.left","(secretli","(see","(some","(sort","(sorted)","(start","(start_index","(step","(steps,","(str(node.val)","(string,","(subarray)","(sum","(t","(target)","(the","(think","(time","(top","(total_sum","(tree/readme.md)","(trees,","(trees[left_index]","(tricks/ds)","(use","(valid","(veri","(we","(word","(x","(x*x","(x+1)","(x+1,y),","(x,","(x,i","(x,y+1),","(x,y+1)]","(x[0],","(x[1],","(x_found","(xi)]","(y","(y+1)","(y_found","(yi)]","(you'll",")","),","*","**","*=","+","+=",",",".","...","...,","/","//","//=","0","0)","0))","0),","0):","0)?","0)]","0)])","0,","0,1,...,i","0/1","0:","0}","0},","1","1)","1))","1)):","1)**i)","1),","1)/2","1):","1);","1)]","1)]:","1,","1,y),","1,y),(x,y+1),(x,i","1.","1/0","1/3286/","10","10)","10):","10)]","10**9","10.","10.classic","1035","11.dp","12.insert","13.graph","1383:","1390:","14.memoiz","14th/3328/","14th/3357/","15.binari","154","15th","16.math","18/","180/problems/lucki","180/problems/maximum","190/problems/pseudo","199/problems/numb","1:","1:current","1;","1]","1])","1]):","1],","1]:","1][","1][0]","1][0],","1][1]","1][1])","1][1]):","1][1],","1][2])","1][i","1][y]","1][y],","1`,","1d","1}","2","2)","2):","2,","2.","2.knapsack","2/","2021/582/week","21","21st/3330/","22nd","23:","252","253","26","26)","28th/3343/","28th/3612/","29th","2:","2:float('","2:float('inf'),","2;","2]","2])","2d","3","3),","3,","3.","3.multi","3/","3000","30th/3375/","31:","3:","3:float('","3:float('inf')}","3]:","3n","4","4)","4):","4)]","4.interv","4000","4208fed71aa3","435","439df7e5ea1f","4:","4]","4])","5","5)","5.bit","50","56","59:","5:","6)","6),","6,","6.digit","621:","7","7)","7),","7.dp","70),","8),","8.string","857:","8th","9","9),","9.probabl",":",":rtype:",":type","=","==","=>",">",">\"",">\")",">=","[","['(',","[')',","['jfk'])","[((","[(0,","[(4,","[(e,","[(x","[(x+1,","[(x+1,y),","[(x+1,y),(x","[.(c1","[..(]","[..1]","[.2*(c1+c2+c3)]","[0","[0,","[0]","[0][0])","[1","[1,","[1]","[[0","[[0]","[[]","[[fals","[[float('inf'),","[[i,","[[x,","[]","[])","[]):","[],","[_a,","[average(0,","[c","[c]","[candidates[i]],","[dm[i][q","[e]","[fals","[false]","[float('inf')","[float('inf')]","[i,","[i]","[look","[lower,","[max_start,","[n])","[new]","[node.parent,","[node.val]","[node.val])","[node.val],","[num],","[nums[j]])","[p.val,","[pid[i]]","[prev","[s,","[s]","[str(lower)","[str(lower)]","[string]","[target.val]","[treenode(int(val))","[x","[x[x]","[x][y]","[y","\\","^=","_","_,","__init__(self):","__init__(self,","_a","_b","_b,","_c):","_c]:","_d","_dir","_dir:","_helpercopypaste(self,","_imp:_","_inorder(node):","_inorder(node.left)","_inorder(node.right)","_inorder(root)","_inorder.sum","_left,","_list","_next","_right","_right):","_sum","_x","_x,","_y","_y)","_y))","_y,","`//","`0`","```","```pi","`deadends_set`","`math`","`o(n^2","`visited`","a):","a,","a.kadane'","a:","a[0]","a[1],","a[i]","a[i])","a[i].","a[len(a)","a[p+1]","a[p+2]","a[x][y]","a]","a],","a^n","abov","above.","abs(len(s)","abs(node.v","abs(squirrel[0]","abs(squirrel[1]","abs(state[b","abs(tree[0]","abs(tree[1]","absolut","absolve.","abstract","accept","accept,","achiev","action.","actual","actually.","add","add(_a,","add.","addbinary(self,","adding,","addit","addnums(node,","addnums(node.left,","addnums(node.right,","addnums(root,","addonerow(self,","address","addtoresult(start,","addtwonumbers(self,","adjac","adjacent/","adjust","afterwards,","afterwards.","ag","again","again)","again,","again.","against.","ahead","ahead.","aim","algo","algorithm","algorithms.","alien","all,","alloc","allow","allowed:","along","alpha","alreadi","also,","alter","altern","alway","always,","amaz","amount","amount)","amount/sum:","ancestor","and","anoth","another.","answer","answer.","answer:","anyon","anyth","anything,","anything.","apend","append","appl","apple_in_path","appli","approach","approaches:","appropri","arbitari","archives:","are:","area","arithmet","around","arr1:","arr1[index['i']]","arr1[index[x]]","arr2:","arr2[index['j']]","arr2[index[x]]","arr3:","arr3[index['k']]:","arr3[index[x]]","arr:","arr[0]","array","array,","array.","array/","array;","arrays/","arraysintersection(self,","arrival,","arrow","arsenal.","article:","ascii","ask","assign","atlant","atlantic]","atlantic_queu","atlantic_queue.append((x","atlantic_queue.append((x,","atleast","attend","attent","attr","attribut","augment","automat","aux_dp","aux_dp[0]","aux_dp[1]","aux_dp[2]","auxillari","averag","average(i+1,","average(x,","average.","averages/","avoid","away","b","b):","b,","b.lc","b/w","b:","b[len(b)","b]","b],","b_target:","back","backtrack","backtrack(0,","backtrack([])","backtrack([],","backtrack(bucket","backtrack(bucket):","backtrack(bucket,","backtrack(curr","backtrack(i","backtrack(i,","backtrack(j,","backtrack:","backward","backwards,","backwards.","bag_weight","bag_weight):","balanc","balancebst(self,","balanced.","ball","balloons/","base","basic","basically,","be","becom","becomes:","befor","before.","beforehand","begin","beginn","behavior","below","best","better","between","bf","bfs(i):","bfs(s):","bfs)","bfs:","bidirectional.","bifurc","bigger","billboard/","binari","binary/","binary_start_search(b_target):","binary_start_search(target)","binary_start_search(target+1)","binarytreepaths(self,","bipartite/","bipartition/","bit","bit:","bits.","bits/","bits[0]","bits[i","bits[i]","bitwis","block","bloomday:","bloomday[0]","blue","blue,","blue.","blue])","blue_edges:","board:","boat","boil","book","bookcas","bool:","boolean","border","both","bottom","bottom,","boundari","bounds):","bouquet","box","boxes/","bracket","braket","break","break)","break).","break,","break/","breaker","breaker.","brick","bricks:","bricks_left","bridge/","brilliant","bring","brokencalc(self,","browser","brute","bs","bst","bst/","bst:","bstfrompreorder(self,","bucket","bucket,","bucket.append(arr[k])","bucket.pop()","bucket[0:","bucket[2:","buckets,","build","build_bridge():","buildtree(self,","built","burst","buy","c","c,","c.left)","c.li","c.most_common(n)","c.right)","c2","c3]","c:","c_l","c_r","cach","cache/","cache:","cache[(x,","cache[course]","cake","calc_sum(mid):","calcul","calculations.","calculator/","calculator/discuss/236565/detail","call","call)","calls/","calm","cameras/","can't","can.","can_ship","can_ship(w):","candidates:","candidates[i])","canfinish(self,","canjump(self,","canjumpfromposition(int","canmeasurewater(self,","canvisitallrooms(self,","canwinnim(self,","cap","capac","car/","cards/","care","carri","carry)","carry:","case","case)","case,","case.","cases,","cases.","cases:","cash","cash,","cash.","catch:","caus","cc","cell","cell.","cell_column)","cells,","center","center.","certain","chain","chain/","challeng","challenge/528/week","challenge/535/week","challenge/536/week","challenge/537/week","challenge/540/week","challenge/543/week","chanc","chang","change,","change.","change/","change:","charact","character(not","character.","character/","characters/","characters/discuss/87768/4","cheat","check","checkifprerequisite(self,","checkout","checkpossibility(self,","checks:","chessboard/","child","child,","children","children)","children:","choices,","choices:","choos","chose","chunk","circular","citi","class","class,","classic","clean","climb","clone","clone;","cloned)","cloned:","close","closed_bracket","closest","closestkvalues(self,","code","code.","codec:","coin","coins,","coins:","coins[j])","coins[j]))","col","collect","collections.dequ","colleg","color","color)","color))","color,","color/","color:","color_left","color_left))","colors.pop()","colors.remove(color)","colors/","colors:","colors[i]","colors[n","column","comapar","combin","combination,","combinations:","combinationsum(self,","combinator","combo","come","comes,","comment","common","common,","compact","compact,","compact.","compar","comparator.","comparison","comparisons/","competit","complet","complex","complexity:","complic","compon","compress","comput","computation,","computations,","compute.","concaten","concept","concern","condit","conditionally:","conditions,","conenct","conflicts/","connect","conquer","consecut","consid","consist","consolid","constaint","constant","constraint","constraints,","constraints:","construct","construct(0,","construct(i_s,","construct(index","construct(index,","construct(l,","construct(max_index","construct(pivot","construct.postorder_index","construct_tree()","construct_tree(0,","construct_tree(middl","construct_tree(root_idx+1,","construct_tree(start,","construct_tree(start=0,","construct_tree.index","construction:","constructmaximumbinarytree(self,","constructtree(start,","contain","containsnearbyalmostduplicate(self,","contest","continu","contract","converg","convert","convertbst(self,","cooldown/","copi","copied))","copied,","copied:","corner","correct","correspond","cost","cost,","costs[i][0]","costs[i][1]","costs[i][2]","count","countbinarysubstrings(self,","countbits(self,","countcomponents(self,","counter","counter(list/string)","counter(nums)","counter)","counter):","counter:","counter[num]","counter[num]:","countpairs(self,","counts/","countsubtrees(self,","cours","course)","course_depth","course_depth)","courses/","courses:","cover","cpu/","creat","creation","criteria","criteria,","critic","crucial","cuboids/","cumul","curat","current","current)","current),","current):","current,","current.left","current.left:","current.next","current.right","current.right:","current.v","current.val))","current:","current[0]","current[s[start]]","current_count","current_dist","current_row","current_row.get(x,","current_row:","current_row[x]","current_sum","current_sum):","custom","customer?","cut","cuts/","cycl","cycle,","cycle/","d","d))","d)]","d)`","d,","d.2d","d1","d1,","d2","d2,","d:","data","data):","data.split(',')]","data:","day","day)","day,","day:","days/","days_left","deadends:","deadends_set","deadends_set:","deal","decent","decid","declar","decod","decomposition/","decor","decreas","decrease.","decreasing\")","decrement","deep","deepest","deepestleavessum(self,","def","default","default)","default),","defaultdict","defaultdict(int)","defaultdict(list)","defaultdict(set)","defaultdict,","definit","del","delay","delet","deleting/","deletion.","deletion/","deliv","deliveri","depend","depth","depth):","dequ","deque()","deque([(0,","deque,","descript","deseri","deserialize(self,","design","desir","desirable.","destination'","destinations;","determin","devid","df","dfs(0,","dfs(c))","dfs(course)","dfs(course):","dfs(d,","dfs(i)","dfs(i):","dfs(i,","dfs(index):","dfs(index,","dfs(j):","dfs(letter,","dfs(n)","dfs(self,","dfs(x","dfs(x,","dfs(x:","dfs.","dfs.visit","dfs.visited.add(index)","dfs.visited.remove(index)","dfs.visited:","dfs:","di","diagram","dialer)","dialer/","dice","dict","dict()","dict.","dict.get(key,","dict.get(node,","dict:","dictionari","dictionary)","dictionary.","dictionary/","didn't","diff","differ","differbyone(self,","difference,","difference.","difference/","difference:","different.","difficulti","digit","digits/","dimension","direct","direction(intenum):","direction)","direction,","directions:","directli","disconnect","discrep","discrepancy.","discussion/651719/how","discussion/655708/graph","discussion/691825/binari","discussion/786126/python","disguis","dishes/","displac","displacements.","dist_","dist_diff","dist_s)","dist_s[m_idx]","dist_t","dist_t[m_idx]","distanc","distance/","distance:","distancek(self,","distinct.","divid","divis","divisor","divisors.add(i)","divisors.add(num","divisors/","divisors:","djikstra","djikstra.","dm","dm=distanc","dm[i]","dm[i][col","dm[i][q","dm[n","do","do:","do?","docstr","doesn't","doll","domain","domain)","domino","dominoes/","dominoes:","dominoes[::","don't","done","done:","don’t","dot","doubl","down","down:","dp","dp'","dp,","dp.get(n","dp1","dp1[n]","dp:","dp;","dp[","dp[0]","dp[0][0]","dp[1]","dp[1])","dp[2]","dp[2])","dp[2],","dp[:]","dp[_x][_y],","dp[first_one]","dp[i","dp[i]","dp[i])","dp[i].append(match","dp[i].append(word)","dp[i][0]","dp[i][1]","dp[i][2]","dp[i][diff]","dp[j","dp[j]","dp[j])","dp[j]))","dp[j],","dp[j].get(diff,","dp[n","dp[n]","dp[n])","dp[prev2])","dp[small_amount]","dp[x","dp[x][i","dp[x][y]","dp[x][y])","drawn","drop","drop/","dry:","dst:","dummi","dummy.next","duplic","durat","duration)","duration,","duration:","duration]","dure","dynam","e","e,","e.cumul","e.g.","e:","e]","each","earlier","earn/","easi","easier","easier.","easili","easy!","eat","edg","edges:","edges[(current,","edges[(s,","effect","effici","efficiency.","effort/","eg.","eg:","egg","either:","elem","elem)","elem,","element","element,","element/","element:","elements,","elements/","elems)","elems:","elif","elif(weight","elimin","elimination/","else:","empti","encod","encount","end","end)","end):","end+1):","end+1]","end,","end:","end=len(inorder)","end])","ends,","enough","enough.","enum","enumerate(bloomday):","enumerate(costs[1:],","enumerate(dp[1:],","enumerate(h_sorted[1:],","enumerate(heights):","enumerate(heights[1:],","enumerate(inorder):","enumerate(inorder)}","enumerate(lists):","enumerate(mat):","enumerate(nums):","enumerate(nums[1:],","enumerate(nuts):","enumerate(order)}","enumerate(ppid):","enumerate(prefix):","enumerate(s):","enumerate(s_arr)}","enumerate(string[1:],","enumerate(tasks):","enumerate(tasks)])","enumerate(v_sorted[1:],","enumerate(words[:len(words)","envelopes/","equal","equal,","equal:","equality,","equality.","equality:","equat","equation:","equidist","equil","equival","eraseoverlapintervals(self,","error","especially)","especially,","especti","esqu","essenti","etc","etc)","even","event","events,","everyon","everyth","everytim","everywhere,","exact","exactli","exam/","exampl","example:","exceed","excel","except","exclud","exclude)","exhaust","exist","exist(self,","existance.","exists,","exists:","exit","exit\")","expand","expect","expected):","expected,","experience,","experience.","explaination\"","explaination:","explan","explanation:","express","extend","extra","extra)","extra,","extrem","f","f(dp[1],","f(dp[i","f(dp[small_amount","f(g(j,","f),","f,","f.hashmap","f==s,","f[i][j]","f[i][j]b","f[p][j","faced?","facilit","factor","factors/","factors/divisor","failur","fair","fall","fall/","fals","false))","false,","false:=","far,","far.","far;","farthest","fast","fast.next","fast.next.","fast.next:","faster","faulti","fed","fee","fee)","fee):","fee/","fetch","few","fewest","fg","fibonacci","figur","fill","filling:","filter","final","final_answ","find","find_first_greater(start","find_first_greater(start,","find_len(l,","findbestvalue(self,","findcheapestprice(self,","findduplicates(self,","findfrequenttreesum(self,","finditinerary(self,","findlongestword(self,","findmin(self,","findminarrowshots(self,","findmissingranges(self,","findorder(self,","findthelongestsubstring(self,","fingerprint","fingerprints.get(fingerprint,","fingerprints.values()","fingerprints[fingerprint]","fingers/","finish","first","first.","first:","fit","fix","flag","flat","flight","flights:","flip","float('","float('inf')","float('inf'))","float('inf'),","float('inf')]","float,","float:","floor(sqrt(num))","flow/","flower","flowers.pop()","flowers.remove(planted[n","flowers:","fo","follow","following:","follows:","followup","for,","forc","forget","form","forward","forward;","found","found,","freq","freq(x)","freq(x+1)","freq.get(t,","freq.items():","freq:","freq[(curr","freq[current]","freq[string]['0']","freq[string]['1']","freq[t]","freq[task]","freq[task]:","frequenc","frequency.","frequent","friend","fulli","function","function)","function.","function:","functool","functools.cmp_to_key(comparator)","functools.lru_cach","further","furthestbuilding(self,","furthestjump","g","g(i","g_queue","g_queue.popleft()","g_queue:","g_visit","g_visited.add(i)","g_visited:","game","game/","game/:","game/submissions/","garden/","gardennoadj(self,","geek","gener","generators:","get","get_smallest(x))]","get_smallest(x):","getallelements(self,","getintersectionnode(self,","getmaximumgold(self,","getorder(self,","gettargetcopy(self,","getter","git","gitbook","give","given","global","globally,","globals/","go","go:","goe","gold/","good","gotcha","gotcha:","graduat","graph","graph.","graph.get(e,","graph.get(index,","graph.get(p,","graph.get(parent,","graph.get(s,","graph/","graph:","graph[c].add(p)","graph[c].append(p)","graph[c]:","graph[current]:","graph[d].append(s)","graph[e]","graph[end].append(start)","graph[i]","graph[i]:","graph[index]:","graph[node.val].append(parent)","graph[node]:","graph[parent]","graph[parent].append(node.val)","graph[s]","graph[s].append([d,","graph[s].append(d)","graph[start].append(end)","graph[u].append((v,","graph[v]:","graphs,","great","greater","greater,","greedi","grid","grid/","grid:","grid[0][0]","grid[_x][_y]))","grid[i][j]","grid[x][y]","group","group'","group,","groups'","groupstrings(self,","guarante","guarate","h","h:","h_sort","h_sorted[","h_sorted[0],","h_sorted[i","habit","half","hand.","handl","handling.","happen.","happi","happiness/","hard","harmoni","hasapple:","hasapple[node]","hasapple[node]:","hascycle(self,","hash","hashing)","hasn't","hat","head","head.next","head:","heada","heada,","heada.next","heada.next:","heada:","headb","headb):","headb:","heap","heap)","heap,","heap.","heap.append((0,","heap:","heap[0][0]","heap[0][0]:","heap[0][distance])","heappush","heapq","heapq.heappop(heap)","heapq.heappush(heap,","height","height,","height.","height:","heights:","heights[i","heights[x][y]:","help","helper","helperncr(","helperncr(0,","helperncr(s,","helperncr(s:","helps.","here","here)","here,","here.","here:","heurist","higher","hint:","hire","histogram/","hit","hold","hold,","home/","hop","hop,","hop.","hops,","hops[pos]:","horizont","horizontalcuts:","horizontally.","hous","house/","https://blog.usejournal.com/top","https://github.com/varadghodake/gitbook","https://leetcode.com/contest/weekli","https://leetcode.com/discuss/gener","https://leetcode.com/discuss/interview","https://leetcode.com/explore/challenge/card/30","https://leetcode.com/explore/challenge/card/januari","https://leetcode.com/explore/challenge/card/jun","https://leetcode.com/explore/challenge/card/may","https://leetcode.com/problems/132","https://leetcode.com/problems/2","https://leetcode.com/problems/3sum/","https://leetcode.com/problems/add","https://leetcode.com/problems/airplan","https://leetcode.com/problems/al","https://leetcode.com/problems/alloc","https://leetcode.com/problems/arithmet","https://leetcode.com/problems/array","https://leetcode.com/problems/bal","https://leetcode.com/problems/best","https://leetcode.com/problems/binari","https://leetcode.com/problems/bitwis","https://leetcode.com/problems/boat","https://leetcode.com/problems/broken","https://leetcode.com/problems/build","https://leetcode.com/problems/burst","https://leetcode.com/problems/can","https://leetcode.com/problems/capac","https://leetcode.com/problems/champagn","https://leetcode.com/problems/cheapest","https://leetcode.com/problems/cherri","https://leetcode.com/problems/climb","https://leetcode.com/problems/closest","https://leetcode.com/problems/coin","https://leetcode.com/problems/combin","https://leetcode.com/problems/concaten","https://leetcode.com/problems/constrain","https://leetcode.com/problems/construct","https://leetcode.com/problems/contain","https://leetcode.com/problems/continu","https://leetcode.com/problems/convert","https://leetcode.com/problems/count","https://leetcode.com/problems/cours","https://leetcode.com/problems/cousin","https://leetcode.com/problems/cr","https://leetcode.com/problems/decod","https://leetcode.com/problems/deepest","https://leetcode.com/problems/delet","https://leetcode.com/problems/deliv","https://leetcode.com/problems/dic","https://leetcode.com/problems/distinct","https://leetcode.com/problems/distribut","https://leetcode.com/problems/divisor","https://leetcode.com/problems/domino","https://leetcode.com/problems/dungeon","https://leetcode.com/problems/edit","https://leetcode.com/problems/fil","https://leetcode.com/problems/find","https://leetcode.com/problems/flow","https://leetcode.com/problems/form","https://leetcode.com/problems/four","https://leetcode.com/problems/freedom","https://leetcode.com/problems/frog","https://leetcode.com/problems/furthest","https://leetcode.com/problems/gener","https://leetcode.com/problems/get","https://leetcode.com/problems/greatest","https://leetcode.com/problems/group","https://leetcode.com/problems/guess","https://leetcode.com/problems/hous","https://leetcode.com/problems/i","https://leetcode.com/problems/insert","https://leetcode.com/problems/integ","https://leetcode.com/problems/interleav","https://leetcode.com/problems/intersect","https://leetcode.com/problems/interv","https://leetcode.com/problems/jump","https://leetcode.com/problems/k","https://leetcode.com/problems/key","https://leetcode.com/problems/kil","https://leetcode.com/problems/knight","https://leetcode.com/problems/kth","https://leetcode.com/problems/largest","https://leetcode.com/problems/last","https://leetcode.com/problems/leaf","https://leetcode.com/problems/least","https://leetcode.com/problems/length","https://leetcode.com/problems/link","https://leetcode.com/problems/longest","https://leetcode.com/problems/lowest","https://leetcode.com/problems/lru","https://leetcode.com/problems/mak","https://leetcode.com/problems/matrix","https://leetcode.com/problems/max","https://leetcode.com/problems/maxim","https://leetcode.com/problems/maximum","https://leetcode.com/problems/meet","https://leetcode.com/problems/merg","https://leetcode.com/problems/middl","https://leetcode.com/problems/min","https://leetcode.com/problems/minimum","https://leetcode.com/problems/miss","https://leetcode.com/problems/most","https://leetcode.com/problems/mov","https://leetcode.com/problems/network","https://leetcode.com/problems/new","https://leetcode.com/problems/next","https://leetcode.com/problems/nim","https://leetcode.com/problems/non","https://leetcode.com/problems/numb","https://leetcode.com/problems/odd","https://leetcode.com/problems/on","https://leetcode.com/problems/onlin","https://leetcode.com/problems/open","https://leetcode.com/problems/out","https://leetcode.com/problems/pacif","https://leetcode.com/problems/paint","https://leetcode.com/problems/palindrom","https://leetcode.com/problems/parallel","https://leetcode.com/problems/partit","https://leetcode.com/problems/path","https://leetcode.com/problems/perfect","https://leetcode.com/problems/permut","https://leetcode.com/problems/permutations/","https://leetcode.com/problems/pizza","https://leetcode.com/problems/poss","https://leetcode.com/problems/pow","https://leetcode.com/problems/powx","https://leetcode.com/problems/predict","https://leetcode.com/problems/profit","https://leetcode.com/problems/push","https://leetcode.com/problems/rac","https://leetcode.com/problems/rang","https://leetcode.com/problems/reconstruct","https://leetcode.com/problems/reduc","https://leetcode.com/problems/regular","https://leetcode.com/problems/remov","https://leetcode.com/problems/restor","https://leetcode.com/problems/revers","https://leetcode.com/problems/russian","https://leetcode.com/problems/scor","https://leetcode.com/problems/scrambl","https://leetcode.com/problems/seri","https://leetcode.com/problems/shop","https://leetcode.com/problems/shortest","https://leetcode.com/problems/singl","https://leetcode.com/problems/slid","https://leetcode.com/problems/smallest","https://leetcode.com/problems/soup","https://leetcode.com/problems/split","https://leetcode.com/problems/sqrtx/","https://leetcode.com/problems/squirrel","https://leetcode.com/problems/stick","https://leetcode.com/problems/ston","https://leetcode.com/problems/str","https://leetcode.com/problems/strang","https://leetcode.com/problems/stud","https://leetcode.com/problems/subarray","https://leetcode.com/problems/sum","https://leetcode.com/problems/sup","https://leetcode.com/problems/tallest","https://leetcode.com/problems/target","https://leetcode.com/problems/task","https://leetcode.com/problems/th","https://leetcode.com/problems/til","https://leetcode.com/problems/triangle/","https://leetcode.com/problems/tripl","https://leetcode.com/problems/two","https://leetcode.com/problems/ugli","https://leetcode.com/problems/uniqu","https://leetcode.com/problems/valid","https://leetcode.com/problems/verifi","https://leetcode.com/problems/vert","https://leetcode.com/problems/video","https://leetcode.com/problems/wat","https://leetcode.com/problems/way","https://leetcode.com/problems/wher","https://leetcode.com/problems/wiggl","https://leetcode.com/problems/wildcard","https://leetcode.com/problems/word","https://medium.com/@codingfreak/binari","https://www.geeksforgeeks.org/maximum","https://www.geeksforgeeks.org/next","https://www.geeksforgeeks.org/numb","https://www.geeksforgeeks.org/partit","https://www.geeksforgeeks.org/stock","https://www.geeksforgeeks.org/tag/array","https://www.geeksforgeeks.org/tag/subset/","https://www.geeksforgeeks.org/xor","https://www.techiedelight.com/longest","i'v","i)","i))","i):","i+1","i+1)","i,","i.e.","i/","i:","i]","i],","i][col","i_","i_e)","i_e):","i_e:","id(head)","id(node)","idea","idea.","idea:","identifi","idl","ie","ie.","if(","if(curr","if(failure_base_case):","if(i","if(n","if(success_base_case):","ii","ii,","ii/","iii","iii/","illustr","imaginari","immediately.","immutable/","imp:","imperfect","implement","implementation:","impli","import","improv","includ","include/exclud","included[i]","included[i]:","incom","incoming[n].remove(c)","incoming[n]:","incoming[nei].remove(node)","incoming[nei]:","incoming[p].add(c)","increas","increasing/","independently.","index","index))","index,","index.get(s_arr[i]","index:","index['i']","index['j']","index['k']","index[i]","index[min(index,","index]","indic","inf')","inf'),","inf')}","influenc","info","info[l]","info[labels[node]]","ing","inherit","init","init(self,","init_st","init_state,","initi","initialization:","inject","inner","inord","inorder(node):","inorder(node,","inorder(node.left)","inorder(node.left,","inorder(node.right,","inorder(o.left,","inorder(o.right,","inorder(o:","inorder(original,","inorder(root1,","inorder(root2,","inorder:","input","insert","insert(self,","insid","inspir","instal","instant","instanti","instead","instead.","instruct","instructions/","instructions:","insur","int","int(bucket)","int(bucket[2:","int(bucket[2])","int(state[i])","int)","int,","int:","int[]","integ","integers/","intenum","interact","interchang","interest","interesting.","interpret","intersect","intersections/","interv","interval/","interval[i]","intervalintersection(self,","intervals.","intervals.values()","intervals/","intervals:","intervals[0]","intervals[1:]:","intervals[s]","intervals[s][end]","interview","intmax","intmin","introduct","intuit","invalid","invers","inwards.","irrespect","is,","isaliensorted(self,","isbipartite(self,","iscousins(self,","island","island/","islands/","isn't","isoneeditdistance(self,","issubsetsum(list,","issues.","isvalidbst(self,","it'","it(node):","it(node.left)","it(node.right)","it)","it,","it.","item","item))","item:","item[1:]","item[1])}","item])","items,","iter","iteration.","iterative(root,","iterative(root1)","iterative(root2,","iterative)","iterative.leav","iterative.leaves.append(current.val)","iterative.leaves.pop(0)","iterative.leaves[0]:","iterative.similar","iterative:","iterator(generator)","iterator,","ith","itinerary/","itself","iv","iv/","iv/discuss/54117/clean","j","j'","j)","j))","j)):","j),","j+1))","j,","j.","j:","j]","j]))","j])))","januari","java","job","jobs/","jug","jump","jump(self,","jump/","june","k","k)","k))","k)]","k,","k/","k:","k_left","k_left)","k_left))","k_left:","kadan","kadane'","kclosest(self,","keep","kept","key","key,","key=","key=lambda","keyboard","keyboard/","keyboard/submissions/","keyword,","kill:","killprocess(self,","kind","kinda","knapsack","knapsack(self,","knapsack,","knapsack.","knightdialer(self,","know","knuth","kweakestrows(self,","k’","l","l)","l))","l):","l,","l.append(node.val)","l.items():","l.next","l.next:","l1","l1)","l1,","l1.next","l1.val","l1:","l1_val","l2","l2)","l2.next","l2.val","l2:","l2_val","l:","l_h","l_h,","l_h:","l_lca","label/","labels/","labels:","ladders,","ladders:","lambda","lambda.","languag","larg","larger","largest","largestdivisiblesubset(self,","largestnumber(self,","largestrectanglearea(self,","largesttimefromdigits(self,","last","last.","last/last","last:","last_day","last_interval,","last_node.next","last_pow","last_power]","lc","lca","lcadeepestleaves(self,","lcs(len(text1),","lcs(m","lcs(m,","leaf","leafsimilar(self,","leastinterval(self,","leav","leave,","leaves,","leaves.","leaves/","leaves/)","leetcod","leetcode:","left","left,","left.","left/","left:","left=none,","left_idx","left_idx,","left_idxto","left_index","left_max,","left_min","len(a)","len(a):","len(a[0])","len(arr)","len(arr1)","len(arr2)","len(arr3):","len(b):","len(bloomday)","len(board)","len(board[0])","len(bucket)","len(candidates):","len(coins)):","len(coins).","len(colors)","len(dp)","len(dp)):","len(graph)):","len(graph))]","len(grid),","len(grid[0])","len(heap)","len(height)","len(heights)","len(heights),","len(heights[0])","len(inorder)","len(intervals)","len(iterative.leaves)","len(lists)","len(node_vals)","len(nums)","len(nums))","len(nums)):","len(nums))]","len(nums),","len(nums):","len(nuts)]","len(obstaclegrid)","len(obstaclegrid[0])","len(path)","len(postorder)","len(preorder)","len(prices)):","len(pushed)","len(queue)","len(rating)):","len(rating))]","len(result)","len(rooms)","len(s)","len(s):","len(s_arr)","len(s_arr)):","len(state)):","len(store[c])):","len(store[c]):","len(t))","len(target)","len(tasks)","len(text1)","len(text2)","len(text2))","len(topo)","len(values)+","len(visited)","len(weights):","len(word)","len(word):","len(word)]:","len(words[i+1]):","len(x),","length","length)","length):","less","letter","level","level.","level_sum","levelwis","levelwise,","lexograph","li","librari","life","lift","like.","like:","limit","limit,","limit/","line","linear","link","lis,","lis.","list","list);","list,","list.","list.insert(index,","list/","list2)","list:","list[bool])","list[bool]:","list[i","list[i]","list[int])","list[int],","list[int]:","list[list[int]])","list[list[int]],","list[list[int]]:","list[list[str]])","list[list[str]],","list[list[str]]:","list[listnode])","list[n","list[str])","list[str],","list[str]:","list_idx","list_idx))","listnode()","listnode(digit)","listnode(min_val)","listnode)","listnode,","listnode:","lists)","lists,","lists.","lists/","lists:","lists[list_idx]","lists[list_idx].next","list}","littl","ll","lo=last","local","localhost:4000","location)","lock","lock/","logic","lol","lol)","lol,","lol[c_l]","lol[col])","long","longer","longest","longestcommonsubsequence(self,","longestconsecutive(self,","longestpalindrome(self,","longestpalindromesubseq(self,","longeststrchain(self,","longestvalidparentheses(self,","longestzigzag(self,","look","loop","loop)","loop.","looping:","loops:","lor","lor[c_r]","lor[col]","lose","lot","lower","lower:","lower==len(nums)","lowestcommonancestor(self,","lps(0,","lps(m","lps(m,","lru","lsb","m","m,","m:","m_idx","m_refer","machines/","made","mailboxes/","main","maintain","maitain","make","mani","map","mark","mat:","match","match.","matched:","matching/","math","math.ceil","math.floor","math.max(dp[i],","math.min(posit","matrix","matrix/","matter","max","max(","max(1","max(cash,","max(chain,","max(dp[i],","max(dp[i].get(diff,","max(dp[x","max(end,","max(hold,","max(include,","max(lcs(m","max(length,","max(lps(m","max(max_depth,","max(max_end,","max(max_height,","max(max_len,","max(max_next,","max(max_rooms,","max(max_seq,","max(max_time,","max(max_w,","max(max_width,","max(memo[i","max(nums[0:2])","max(nums[0],","max(postorder.max_sum,","max(preorder.longest,","max(result[","max(self.dfs(i,","max(self.dfs(x,","max(self.max_count,","max(self.max_length,","max(t[x]","max(words_store[new_word],","max(x_max,","max,","max/min","max/min.","max/min:","max_count","max_depth","max_end","max_freq","max_freq,","max_freq_count","max_heap","max_heap,","max_height","max_index","max_index)","max_len","max_len:","max_next","max_room","max_seq","max_start","max_start,","max_tim","max_w","max_width","max_width)","max_x+1)].","max_x.","maxarea(self,","maxima","maximum","maximum,","maximum/","maximumsum","maximumsum)","maxnonoverlapping(self,","maxpathsum(self,","maxprofit(self,","maxslidingwindow(self,","maxval","meaning,","means,","meet","memo","memo:","memo[(i,","memo[(m,","memo[0]","memo[1]","memo[i","memo[i]","memo[n","memo[x","memo[x][i","memo[x][y]","memoiz","memori","mention","merg","merge(l1,","merge(list1,","merge(self,","mergeklists(self,","mergetrees(self,","mergetwolists(self,","messi","method","method:","methods,","metric","mid","mid+1","mid;","middl","min","min(2","min(dm[i],","min(dm[i][col","min(dm[n","min(dp[","min(dp[0],","min(dp[1],","min(dp[i","min(dp[prev1],","min(min_end,","min(min_steps,","min(result,","min(start,","min(x_min,","min.","min/max","min/max/sort","min_end","min_end:","min_heap","min_len","min_step","min_val,","min_x","minaddtomakevalid(self,","minavailableduration(self,","mind","mindays(self,","mindistance(self,","minim","minima","minimum","minimumeffortpath(self,","minimumsemesters(self,","minmeetingrooms(self,","minoperations(self,","minremovetomakevalid(self,","minsteps(self,","mintime(self,","minu","minval","minwindow(self,","miscellan","mismatch,","miss","mistak","mod","mod)","model","modif","modifi","modification?","modulo","monoqueu","monoton","more","mostcompetitive(self,","mountain","move","move:","moves+1))","movezeroes(self,","multi,","multipl","music","mutat","mypow(self,","myriad","mysqrt(self,","n","n)","n))","n),","n):","n)]","n)]:","n,","n/","n:","n[0]","n[1]","n_d","n_d,","n_e","n_s,","ncr","ncr.append(bucket[:])","necessari","necessarili","necessary,","necessary.","need","neg","negative,","negative.","nei","neigh","neigh:","neightbor","nesting/","net","net,","networkdelaytime(self,","never","new","new.left","new.right","new_path_sum","new_path_sum.append(new_sum)","new_sum","new_word","newinterv","newinterval:","next","next(self,","next.","next:","next=none):","next_stat","nextgreaterelement(self,","nextpermutation(self,","nextposit","nice","nice.","node","node'","node,","node.","node.left","node.left))","node.left,","node.left:","node.next:","node.right","node.right))","node.right:","node.right]","node.v","node.val)","node.val):","node.val,","node.val]","node.val])","node/","node1","node1.left","node1.right","node1.v","node1:","node2","node2):","node2.left)","node2.right)","node2.v","node2:","node:","node_before_revers","node_po","node_pos[root.val]","node_v","node_vals.append(node.val)","nodes.","nodes/","nodes:","nodes])","non","none","none,","none.","none:","normal","normalsubset(self,","not!","not)","not),","not,","not:","not;","note","note:","notes.git","notes:","noth","notic","now","now,","npm","nth","num","num)","num:","number","number/","numbers(a[0],","numbers/","numcours","numcourses))","numcourses):","numcourses:","numequivdominopairs(self,","numfactoredbinarytrees(self,","numislands(self,","nums)","nums.length","nums.reverse()","nums1:","nums2:","nums:","nums[","nums[0]","nums[1:]","nums[1])","nums[:","nums[abs(n)","nums[end]:","nums[i","nums[i+1]:","nums[i]","nums[i])","nums[i],","nums[i]:","nums[j]","nums[j])]","nums[j])])))","nums[j],","nums[left_idx]","nums[left_idx],","nums[lower]","nums[max_index]","nums[max_index]:","nums[p]","nums[p],","nums[pivot_idx]","nums[pivot_idx],","nums[position],","nums[runner]","nums[start]","nums[z]","nums[z],","numteams(self,","nuts:","o","o(2^n)","o(n)","o(n)?","o(n2)","o:","object","oblivi","observ","obstacl","obstaclegrid:","obstaclegrid[x][y]","obstruction.","obtain","obv)","obvious","obviously!","occur","occurrence,","odd","of.","of:","offers/","offset","offsets.get(c,","offsets[c]","older","on","onc","one!!","one,","one.","one:","one;","ones)","ones,","ones.","ones/","ones:","onto","oop:","open","open_bracket","open_brackets.append(i)","open_brackets:","openlock(self,","oper","operations,","opponent.","optim","optimally.","optimization:","option","options/","or","orang","oranges/","ord(c))","order","order.","order:","order;","origin","origin/","original:","other/","otherwis","otherwise)","otherwise,","out","out.","outermost","outsid","over","overcounting.","overflow.","overflow;","overflowing.","overflows,","overlap","overlap,","own","p","p)},","p,","p.append(p[","p1","p1,","p1.parent","p:","p[i]),","p[y])","pacif","pacific_queu","pacific_queue.append((0,","pacific_queue.append((x,","pacificatlantic(self,","packag","pages.","paint","paint_island(x,","pair","pairs/","palindrom","palindrome/","param","param,","paramet","parameter,","parent","parent)","parent),","parent):","parenthes","parentheses/","parenthesi","part","part.","partial","particular","particularli","partit","partition(_left,","partitioning/","partitionlabels(self,","partitions:","parts.","parts:","pass","past","path","path):","path,","path.","path.append(node.val)","path[:]","path_sum):","path_sum:","paths.","paths/","paths/discuss/102993/python","paths/submissions/","paths:","pathsum(self,","pattern","pattern)","pattern/dequ","peep","people/","perfect","perfectly:","perform","permut","permutation/","permutation/solution/","permute(bucket","permute(bucket)","permute(bucket):","permute(self,","permuteunique(self,","perspect","phase","phone","pickup","pickup/","pictur","picture!","pid","pid:","pid[i]","piec","piece,","ping(self,","pivot","pivot.","pivot_idx","pizza/","place","place.","places.","plant","planted[i","planted[n","play","playlists/","plu","plug","po","point","pointer","pointers:","points/","points:","polygon/","pop","pop.","popleft","popped:","popped[k]","popped[k],","port","ports/","posibl","posit","position,","positions.","positions[","positions[num].append(i)","possibilti","possibl","possible.","possible:","possible;","possible_target","possiblities.","post","postord","postorder(node):","postorder(node.left)","postorder(node.right)","postorder(root)","postorder.","postorder.max_sum","postorder:","power","power'","power.","power_v","power_val:","ppid:","practic","practice:","pre","pre[i]","pre[index]","pre[n]","pre[n].union(pre[c].union(set([c])))","pre[p]","prefer","preference.","prefix","prefix.append(prefix[","prefix_arr[0]","prefix_arr[1]","preorder","preorder(node,","preorder(node.left,","preorder(node.right,","preorder(node1,","preorder(node1.left,","preorder(node1.right,","preorder(root,","preorder(t1,","preorder.longest","preorder:","preorder[fg]","preorder[start])","prep","prepar","prereq","prereq.get(course,","prereq.get(p,","prereq[p]","prerequisites:","present","preserv","prev","prev)","prev,","prev;","prev_count","previou","previous,","price","price,","price:","prices,","prices[0]","prices[i]","prices[i])","print(\">>","printer/","priorit","prioriti","probability/","probabl","problem","problem,","problem.","problem:","problem;","problems)","problems,","problems.","problems:","problemset:","proceed.","process","process/","process:","processing,","produc","product","product,","profit","program","program:","programming)","programming/","programming:","project,","proof","proof:","prop","proper","properli","properly.","properti","properties,","properties;","property,","prune","public","push","pushed.","pushed:","py","python","q","q.val])","q.val]))","q1","q1.parent","q1:","q:","qualifi","quantiti","quantity.","queri","queries:","queries]","question","question!","question)","question,","question.","question/281470/","question/643158/googl","question:","questions*","questions,","questions.","questions:","queue","queue)","queue,","queue.","queue.append((","queue.append((0,","queue.append((_x,","queue.append((c","queue.append((current.left,","queue.append((current.right,","queue.append((d,","queue.append((i,","queue.append((init_state,","queue.append((next_state,","queue.append((pid[i],","queue.append((root,","queue.append((v,","queue.append((x","queue.append((x+1,","queue.append((x,","queue.append(0)","queue.append(current.left)","queue.append(current.right)","queue.append(n)","queue.append(nei)","queue.append(node)","queue.append(node.left)","queue.append(node.right)","queue.append(root)","queue.append(s)","queue.append(target.val)","queue.append(v)","queue.pop())","queue.popleft()","queue:","quicker","quickest","quicksort","r","r)","r):","r.items():","r:","r_h","r_h,","r_h:","r_lca","rang","range(0,","range(1,","range(2)]","range(2,","range(3,","range(_left,","range(i","range(i):","range(i,","range(k","range(l,","range(len(colors))]","range(len(dp)","range(len(dp)):","range(len(dp),","range(len(graph)):","range(len(nums2)","range(len(word)):","range(m))","range(min_x,","range(n)","range(n):","range(offset,","range(size):","range(start,","range(x):","range(x)]","range(x+1):","range(x+1)]","range(x,","range(x_min,","range(y):","range(y)]","range(y+1)]","range(y,","range.","ranges/","rating:","rating[i]","rating[j]:","rc","reach","reach/","read","read:","readabl","realiz","realli","recent","recentcounter:","record","record/upd","rectangl","rectangle/","recur","recurs","recurse(0,","recurse(curr","recurse(current,","recurse(current:","recurse(node.left)","recurse(node.right)","recurse(node:","recursion)","recursion,","recursion/","recursion:","recursive:","red","red,","red])","red_edges:","reduc","refer","reference.","reference:","references,","reflect","refuel","relat","relations:","remain","rememb","remember:","rememeb","remov","removal)","removals)","removals))","removals):","remove).","remove/add","removecoveredintervals(self,","removeduplicates(self,","removeinvalidparentheses(self,","removenthfromend(self,","removeouterparentheses(self,","reorder","repeat","repeat,","repeatit","repetit","repetition,","repetition.","repetitions.","repetitions/","replac","repo","repres","represent","req","requests/","requir","required.","reserv","reset","respect","rest","result","result.","result.add(string)","result.append('","result.append([start,","result.append([x,","result.append(arr1[index['i']])","result.append(bucket[:])","result.append(index)","result.append(key)","result.append(nei)","result.append(nums[index])","result.append(path","result.append(path)","result.append(stack[0][0])","result.append(str(start))","result.append(t)","result;","result[","result[:len(result)","result[last_interval][end]","result[node]","result_","result_s.add(tuple(sorted([nums[i],","result_s.pop()","result_s:","results,","return","revers","reverse;","reverse=true)","reversebetween(self,","reverselist(self,","revert","revisit","right","right,","right.","right:","right;","right=none):","right_index","right_max,","right_min","rob(self,","robber","robber/","roll","room","rooms)","rooms,","rooms/","rooms:","rooms[room]:","root","root))","root):","root.left","root.right","root.right):","root.right,","root.right:","root.val:","root1:","root2:","root:","root_idx","rotat","rotten","routes/","row","row:","row[i","row[i]","rule","run","run.","runner","runner),","runner.next","runtim","runtime:","runtimes:","s","s))","s),","s):","s)]","s,","s:","s[0]","s[1:]:","s[:i].endswith(word):","s[i]","s[index]","s[index],","s[j]","s[m]","s[n","s[n]:","s[start","s[start:","s[start]","s[x])","s]","s_arr","s_arr[i]","s_arr[j]","s_arr[j],","s_cours","s_courses:","s_list","s_list[i]","s_list[open_brackets.pop()]","s_set","s_set:","same","same,","same.","sampl","satisfi","save","say,","sc","scenario","scenarios:","schedul","schedule/","schedulecourse(self,","scheduler/","scheduling/","schemes/","score","score/","scoreofparentheses(self,","search","search;","searchrange(self,","seat","second","secondari","section","section)","sections.","see","seen","seen),","seen):","seen.add((i,","seen.add((node,","seen.discard((i,","seen:","segments/","select","select.","self._helpercopypaste(n,","self.itinerari","self.itinerary:","self.lca","self.lca:","self.left","self.max_count","self.max_length","self.next","self.recurse(k,","self.result","self.right","self.solution_function(case_one,","self.solution_function(case_two,","self.stack","self.stack[","self.t","self.t:","self.tot","self.val","self.valid","self.valid:","self.walk","self.window","self.window[0]","sell","sell/","sem","send","sense.","seq","seq[word[j]]","seq[words[i+1][j]]:","sequenc","sequence/","sequence:","serialize(self,","serv","server","servings/","set","set()","set())","set(['a',","set([1,","set([i.v","set([red,","set([something]","set(deadends)","set(range(0,","set(s)","set(word)","set)","set.","set/","set:","set_len","set_len[i]","set_len[i]:","set_len[j]","set_len[j])","sets,","sets:","setter","share","sheet","shelves/","shift","ship","shipwithindays(self,","shortest","shortestalternatingpaths(self,","shortestbridge(self,","shortestdistancecolor(self,","shortestpath(self,","shortesttochar(self,","shoudn't","shouldn't","showcas","sign","sign.","sign/","signific","similar","simpl","simple.","simple:","simplifi","simulation/","simulation/solution/","singl","singli","situat","situation,","situations,","size","size:","slice","slice+1;","slices/","slide","slightli","slots1","slots1:","slots1[i][1]:","slots2","slots2:","slots_avail","slow","slow.next","slow.next.next","slower","small","small_amount","small_target","smaller","smaller:","smallest","smart","smart:","snippet","so,","soldier","soldiers,","solut","solution(object):","solution,","solution.","solution:","solution_function(self,","solutions.","solutions:","solv","some;","somehow","somehow.","someth","something,","sometim","sometimes,","somewher","sort","sort.","sort:","sorted([[task[0],","sorted(a,","sorted(arr)","sorted(courses,","sorted(current_row[x])","sorted(graph[s])","sorted(horizontalcuts)","sorted(intervals,","sorted(list,","sorted(nums)","sorted(points,","sorted(slots1)","sorted(slots2)","sorted(verticalcuts)","sorted(words,","sorted(x)]","sorted(x.items(),","sorted;","sorting,","space","span/","specifics,","spell","spiral","split","spread","squar","square/","squares,","squares/","squirrel","squirrel:","src))","src,","src:","stack","stack)","stack)]","stack,","stack.append('(')","stack.append(1)","stack.append(c)","stack.append(curr","stack.append(current)","stack.append(i)","stack.append(n)","stack.append(s)","stack.pop()","stack/queu","stack:","stack[","stack[:k]","stack[last]","stacks:","stair","stair.","stairs/","stairs:","standard","start","start)","start,","start.","start:","start=1):","starts.remove(p)","starts:","state","state,","state:","state[:i]","state[i+1:]","state[nums[i","static","stay","step","step,","step.","step;","step?","steps/","stick/","stitching/","stock","stock,","stock.","stock/","stockspanner:","stone","stones/","stop","stops/","storag","store","store,","store.add(fingerprint)","store.get((f,","store.get((s,","store.get(c,","store.get(city,","store.get(s,","store:","store[(f,","store[c]","store[c][i]","store[nums2[i]]","store[s]","store_object_idx","str","str((wheel","str(d[i]))","str(diff","str(end))","str(node.val)","str(node.val))","str(upper)]","str)","str,","str:","straight","straightforward","streak","stream","stream/","stretch","strictli","string","string,","string.","string/","strings,","strings/","strings:","strs:","structur","structure:","structures.","student","stuff","stupid","style","sub","subarray","subarray.","subarray/","subarrays,","subarrays/","subarrays:","subarraysum(self,","submatric","subproblem","subsequ","subsequence,","subsequence/","subsequences.","subsequences/","subset","subset/","subset/discuss/84006/class","subsets/","subsets/subsqu","subsets:","substitut","substr","substract","substring/","substrings/","substructur","subtl","subtract","subtre","subtree.","success","such","suffici","sum","sum(dp)","sum(i","sum(nums)","sum(stack)","sum(xi","sum(yi","sum,","sum.","sum/","sum/amount","sum/amount:","sum/discuss/16510/python","sum/discuss/299049/dp","sum/discuss/455024/dp","sum:","sum_and_number_of_elements(x,","sum_po","sum_pos:","sum_pos[","sum_pos[p]","sum_w","sumnumbers(self,","sumofleftleaves(self,","sums.items():","sums:","sums[curr","sums[current]","sums[l","supersequence/","superstring/","support","suppos","sure","swap","swap.","t","t))","t,","t1:","t2)","t2:","t:","tabl","table[i][weight]","tag","tag))","tagging/mark","take","take.","taken","tap","target","target)","target):","target+1","target,","target.","target.get(c,","target/","target:","target[c]","target])","task","task[1],","task_idx","tasks.","tasks:","tasks_remain","tasks_sort","tasks_sorted[0][0]","tasks_sorted[task_idx]","tasks_sorted[task_idx][0]:","team","team/","team/discuss/539797/c%2b%2bpython","teams/","techniqu","tell","templat","template:","temporari","terminates.","text1:","text1[i","text1[m","text2:","text2[n","text2[x","th","that'","that'll","that).","that,","that.","them)","them?","then,","there'","these,","they'll","thing","thing;","things)","things,","things:","think","third","this.","this:","thoroughly.","those","thought","thread","three","three/","threesum(self,","through","throught","thumb:","tickets/","tickets:","tie","tiebreak","tiling/","till","time","time)","time,","time.","time/","times)","times,","times:","tip:","tips:","to_be_kil","to_be_killed.append(p)","toggl","tojgroups.","too/475462","tool","top","topo","topo.append(node)","topo[::","topolog","total","total_step","total_sum","tough","tower/","track","trail/","transact","transfer","transform","transit","travers","traversal,","traversal/","traversal/]","traverse('jfk',","traverse()","traverse(0)","traverse(atlantic_queue)","traverse(current,","traverse(n,","traverse(node):","traverse(node,","traverse(node.left)","traverse(node.left,","traverse(node.next)","traverse(node.right)","traverse(node.right,","traverse(node=head):","traverse(pacific_queue)","traverse(queue):","traverse(root)","traverse(root,","traverse(v)","traverse(v).items():","traverse(x,","treat","tree","tree,","tree.","tree/","tree/)","tree/discuss/537686/python","tree:","tree:lca","tree;","tree[e].append(s)","tree[node]:","tree[s].append(e)","treenod","treenode()","treenode(node_vals[middle])","treenode(object):","treenode(postorder[construct.postorder_index])","treenode(preorder[construct_tree.index])","treenode(preorder[start])","treenode(v)","treenode)","treenode):","treenode,","treenode:","trees/","trees[i]","trees[right_index])","tress","tri","tri_sum","triangul","trick","trick:","tricki","trie:","triplet","trivial","tromino","true","true,","true:","true:=","true;","turbul","twice/","twist.","twist;","two","two/","type","typic","u,","u_set","u_set.remove(p)","u_set:","ultim","unbalanc","unbound","under","understand","undirect","uniqu","uniquepaths(self,","uniquepathswithobstacles(self,","unless","unlik","unnecessari","until","unus","unvisit","up","up:","updat","upper","upper:","url","us","used:","useful:","user","usual.","usually,","util","v","v))","v,","v/","v:","v_sort","v_sorted[","v_sorted[0],","v_sorted[i","vagu","val","val,","val=0,","valid","valid/","validatestacksequences(self,","validation:","validation=false):","validation=true)","validpalindrome(self,","valu","value.","value:","values,","values/","variabl","variable.","variat","veri","verify(mid):","versa.","vertic","verticalcuts:","verticalorder(self,","verticaltraversal(self,","vice","vii/","visit","visited.add((string,","visited.add((x,","visited.add(course)","visited.add(fingerprint)","visited.add(i)","visited.add(id(node))","visited.add(index)","visited.add(next_state)","visited.add(node)","visited.add(room)","visited.add(v)","visited.remove(course)","visited.remove(i)","visited:","visited[c]","visited[index]","visited[j]","visited[j]:","visited[node]","visited[node]:","visited[s]:","visited[x][y]","visited[x][y]:","visual","vowel","vowel_set","vs","w","w)","w))","w,","w:","w]","want","wash","water","water/","way","ways/","we'd","we'll","we'r","we'v","weakest","weapon","wear","weekli","weight","weights,","weights:","weights[0]","weights[1:]:","well","well):","well,","well.","wg","what'","wheel","wheen","when?","where,","whether","whole","why?","width","width:","win","win/","window","window.","winner/","wise","with;","within","without","won't","word","word)","word,","word/","word:","word[:i]","word[i+1:]","wordbreak(self,","worddict","worddict:","words/","words:","words_sort","words_sort:","words_stor","words_store:","words_store[new_word]","words_store[new_word])","words_store[word]+1)","words}","work","work.","workers/","wraparound","write","wrt","x","x)","x))","x):","x)]","x+i","x,","x.","x.get(x,","x:","x;","x[0])","x[0]))","x[1]))","x[x]","x_dir,","x_found","x_max","x_max+1)]","x_min","x_min,","xi","xors/","xth","y","y)","y))","y))]","y),","y).","y):","y)]","y*y)","y+1),","y+x","y,","y:","y]","y_dir","y_found","y_found)","y_found):","yi","yield","you'd","yourself","z","z:","z]","z])","zero.","zero/","zeroes/","zeroes/submissions/","zigzag","zip","{","{'i':","{0","{0:","{0:1}","{1:","{1:float('","{1:float('inf'),","{64:","{c:","{f[p][j","{item[0]:","{k:","{labels[node]:","{num:","{v:","{word:","{}","{},","|","}","‘reject’"],"pipeline":["stopWordFilter","stemmer"]},"store":{"./":{"url":"./","title":"Introduction","keywords":"","body":"Introduction\nCompetitive coding notes\nInstructions:\n# Install gitbook globally\n$ npm install gitbook -g\n\n# clone this repo\n$ git clone https://github.com/VaradGhodake/Gitbook-Competitive-Coding-Notes.git\n\n### serve gitbook\n$ gitbook serve\nThis will start a server on port 4000 \nPoint your browser URL to localhost:4000\n"},"GeneralInstructions.html":{"url":"GeneralInstructions.html","title":"General Instructions","keywords":"","body":"General instructions\nProblem solving\n\nBrute-force approach first\nKeep on optimizing code\nRemember runtimes of python built-in functions and libraries\n\nCode writing\n\nOOP: use class, methods, and class variables\nUse docstrings if possible\nHelper functions to maintain some level of abstraction\nProperty, getters-setters to decorate code further\nUse brackets where ever possible: avoids stupid mistakes and improves code readability\n\nPython stuff\nEverything in python is pass-object reference by value \nBasically, pass by reference for end-user oblivious to the implementation of the language but this is implemented how pass-by-value way (kinda!)\nThis question! => (https://leetcode.com/contest/weekly-contest-190/problems/pseudo-palindromic-paths-in-a-binary-tree/) \nCreate a copy of the parameter somehow. list + [new] works well for lists. \nFor sets, set - set([something] creates a copy\n"},"DataStructures/":{"url":"DataStructures/","title":"Data Structures","keywords":"","body":"Data Structures & standard questions\n"},"DataStructures/StacksAndQueues/":{"url":"DataStructures/StacksAndQueues/","title":"Stacks and Queues","keywords":"","body":"Stacks and Queues\nSubtle tricks to be used:\nStacks: \nhttps://leetcode.com/problems/remove-all-adjacent-duplicates-in-string/\nclass Solution:\n    def removeDuplicates(self, S: str) -> str:\n        stack = []\n        LAST = -1\n\n        for i, s in enumerate(S):\n            if stack and stack[LAST] == s:\n                stack.pop()\n            else:\n                stack.append(s)\n\n        return ''.join(stack)\n\nWe can't pop anything that hasn't been pushed. If the top of the stack matches popped[k], we have to pop right away because if we don't and push something, there's no way we can pop that element again. Why? hint: the elements are distinct. \nSo the while base case just becomes if k  and we can return False if we reach at the end of pushed and the top doesn't match popped[k] or there's nothing to push\nclass Solution:\n    def validateStackSequences(self, pushed: List[int], popped: List[int]) -> bool:\n        j = k = 0\n        n = len(pushed)\n        stack = []\n\n        while k \n"},"DataStructures/Arrays/":{"url":"DataStructures/Arrays/","title":"Arrays","keywords":"","body":"Arrays\nGeneral instructions:\n\nFind 3 elements in array questions \nGenerally sort + hash or sort + Binary Search is a powerful weapon\n\nCheck if pre and post array can help \nhttps://www.geeksforgeeks.org/maximum-length-of-strictly-increasing-sub-array-after-removing-at-most-one-element/\n\n'Quirky' stack problems \nhttps://www.geeksforgeeks.org/next-greater-element/ : Position priority\n\nSimilar to stack problems (1) but value priority and then position \nhttps://leetcode.com/problems/next-permutation/solution/\n\n\n"},"DataStructures/Arrays/SlidingWindow.html":{"url":"DataStructures/Arrays/SlidingWindow.html","title":"Sliding Window","keywords":"","body":"Sliding Window\nhttps://leetcode.com/problems/minimum-window-substring/ \nWe know the target dict. We can easily maintain current window with sliding window. \nFor satisfy criteria, we need to know how many of the characters in target are in enough quantity. \nIf we hit the target count for current character(not greater, that comes by default), we found a possible solution. \nNow contract the window (start += 1) until found == required character count\nclass Solution:\n    def minWindow(self, s: str, t: str) -> str:\n        if not s or not t:\n            return ''\n\n        target, current = {}, {}\n        for c in t:\n            target[c] = target.get(c, 0) + 1\n\n        start, end, min_len = 0, 0, float('inf')\n        found, required = 0, len(target)\n        result = ''\n\n        while end  (end - start + 1):\n                    min_len = (end - start + 1)\n                    result = s[start: end+1]\n\n                if s[start] in current:\n                    current[s[start]] -= 1\n                    if current[s[start]] \n"},"DataStructures/Arrays/TwoPointers.html":{"url":"DataStructures/Arrays/TwoPointers.html","title":"Two Pointers","keywords":"","body":"2 Pointers technique\nhttps://leetcode.com/problems/two-sum/\nhttps://leetcode.com/problems/3sum/ \nhttps://leetcode.com/problems/boats-to-save-people/\nTwo pointers is really an easy and effective technique which is typically used for searching pairs in an array.\n Two pointers:\nAt either ends and decide which one to move\nOne faster and one slower\nMaintain subarray size of K’s props\nGeneral solution structure: \nhttps://leetcode.com/problems/container-with-most-water/ \nContainer height is limited by smaller one, move that forward\nclass Solution:\n    def maxArea(self, height: List[int]) -> int:\n        l, r = 0, len(height)-1\n        water = 0\n\n        while l \nhttps://leetcode.com/explore/challenge/card/30-day-leetcoding-challenge/528/week-1/3286/\nclass Solution:\n    def moveZeroes(self, nums: List[int]) -> None:\n        n = len(nums)\n        z = 0\n        p = 0\n\n        while (not p == (n - 1)):\n            while z = n or z >= n:\n                break\n\n            nums[z], nums[p] = nums[p], nums[z]\n\n        return nums\n\n"},"DataStructures/Arrays/Subarrays.html":{"url":"DataStructures/Arrays/Subarrays.html","title":"Subarrays","keywords":"","body":"Subarrays\nOptimization checks: \n\nTwo pointers \nSliding window with running values \nPre and Post arrays \nThere can be complex problems outside these as well\n\nFind subarray size K:\nhttps://leetcode.com/problems/subarray-sum-equals-k/ \nk = current - prev; so prev = current - k \nAdd all frequencies of prev to the total\nclass Solution:\n    def subarraySum(self, nums: List[int], k: int) -> int:\n        freq = {0:1}\n        current, total = 0, 0\n\n        for i, n in enumerate(nums):\n            current += n\n            if (current - k) in freq:\n                total += freq[(current - k)]\n\n            if current not in freq:\n                freq[current] = 1\n            else:\n                freq[current] += 1\n\n        return total\n\nRequires all subarrays of all sizes and find all where a constraint is matched: \nhttps://www.geeksforgeeks.org/number-subarrays-product-less-k/\nSliding window with two pointers \nLeft move: if product is more than the constraint \nRight move: everytime unless the product is more than the constraint \nCatch: Each addition of the element produces (end_index - (start_index - 1)) more subarrays \nCatch: Which implies -- subarray of size d produces d * (d + 1)/2 different subarrays\nhttps://leetcode.com/problems/minimum-operations-to-reduce-x-to-zero/ \nGreat question, instead of looking at the ends, find the max subarray with sum total - x \nCorner case would be when total == x. Use prefix array to find that\nclass Solution:\n    def minOperations(self, nums: List[int], x: int) -> int:\n        total = sum(nums)\n        target = total - x\n        sums = {0: -1}\n        current, length = 0, float('-inf')\n\n        if target == 0:\n            return len(nums)\n\n        for i, n in enumerate(nums):\n            current += n\n\n            if (current - target) in sums:\n                length = max(length, i - sums[current - target])\n\n            if current not in sums:\n                sums[current] = i\n\n        return (len(nums)-length) if length != float('-inf') else -1\n\nhttps://www.geeksforgeeks.org/maximum-subarray-size-subarrays-size-sum-less-k/\nPrefix array to store constraint related data (sorted) \nBinary search + two pointers to find ALL subarrays of that size satisfying the constraint\nhttps://www.geeksforgeeks.org/number-of-subarrays-with-odd-sum/\nPrefix array but instead of sum, store sum modulo 2 \nfinal_answer = prefix_arr[0] * prefix_arr[1]\nOperation on all of subarrays:\nhttps://www.geeksforgeeks.org/xor-subarray-xors/\nCatch: ith element frequency in all subarrays: (i + 1) * (n - i) \nDesired quantity at the end of the whole domain traversal \nhttps://leetcode.com/problems/maximum-subarray/\nKeep current value running and max/min: \n\nIncluding the element \nExcluding the element: basically new subsequence start \n\nLooks like DP question but we don’t have to refer older values as we are dealing subarrays, not subsequences. Answer till  previous is stored in the comparison step of current and absolute max/min.\nhttps://www.geeksforgeeks.org/maximum-product-subarray-set-3/\nmaxVal and minVal at each value during iteration. If negative, swap them before multi, other things similar to maximum subarray sum\nPre and post array\nhttps://www.geeksforgeeks.org/maximum-length-of-strictly-increasing-sub-array-after-removing-at-most-one-element/\ncomplex subarray problems\nhttps://leetcode.com/problems/longest-continuous-subarray-with-absolute-diff-less-than-or-equal-to-limit/ \nhttps://leetcode.com/problems/longest-substring-with-at-least-k-repeating-characters/discuss/87768/4-lines-Python \nhttps://leetcode.com/problems/maximum-number-of-non-overlapping-subarrays-with-sum-equals-target/\nclass Solution:\n    def maxNonOverlapping(self, nums: List[int], target: int) -> int:\n        prefix = [0]\n        sum_pos = {0: 0}\n        intervals = 0\n\n        for i, n in enumerate(nums):\n            prefix.append(prefix[-1] + n)\n\n        for i, p in enumerate(prefix):\n            if i == 0: continue\n\n            if p - target in sum_pos:\n                intervals += 1\n                sum_pos = {}\n\n            sum_pos[p] = i\n\n        return intervals\n\n"},"DataStructures/Arrays/Subsets.html":{"url":"DataStructures/Arrays/Subsets.html","title":"Subsets","keywords":"","body":"Subsets/subsquence\nGeeks for Geeks archives: https://www.geeksforgeeks.org/tag/subset/ \nOptimization checks:\n\nSorting the whole array\nPriority queues (check Miscellaneous Problems section)\n\nFor each element, there are 2 choices: Take or leave \nTwo ways to implement this: \n\nRecursion\nDP\n\nStandard questions\nhttps://www.geeksforgeeks.org/partition-problem-dp-18/\n\nisSubsetSum(list, n, sum / 2) = isSubsetSum(list, n - 1, sum / 2) or isSubsetSum(list, n - 1, sum / 2 - list[n - 1])\n\n \n\n\n\nDP\nProblems like: \n\nLIS\nhttps://leetcode.com/problems/largest-divisible-subset/\n\nBase DP method is LIS.  \nSmart implementation: https://leetcode.com/problems/largest-divisible-subset/discuss/84006/Classic-DP-solution-similar-to-LIS-O(n2)\nclass Solution:\n    def largestDivisibleSubset(self, nums: List[int]) -> List[int]:\n        nums = sorted(nums)\n        set_len = [1] * len(nums)\n        pre = [-1] * len(nums)\n        max_len = 0\n        index = -1\n\n        for i, target in enumerate(nums):\n            for j in range(0, i):\n                if target % nums[j] == 0:\n                    if (1 + set_len[j]) > set_len[i]:\n                        pre[i] = j\n                        set_len[i] = 1 + set_len[j]\n\n            if set_len[i] > max_len:\n                index = i\n                max_len = set_len[i]\n\n        result = []\n        while index != -1:\n            result.append(nums[index])\n            index = pre[index]\n\n        return result\n\nhttps://leetcode.com/problems/longest-harmonious-subsequence/\nIt's a subsequence, meaning, you can drop elements you don't like. \nThe gotcha here is that the max length of subsequence is just freq(x) + freq(x+1) | x E array\n\n\n\n"},"DataStructures/Arrays/Triplets.html":{"url":"DataStructures/Arrays/Triplets.html","title":"Triplets","keywords":"","body":"Triplets\nhttps://leetcode.com/problems/count-number-of-teams/\nclass Solution:\n    def numTeams(self, rating: List[int]) -> int:\n        s = [0 for i in range(0, len(rating))]\n        g = [0 for i in range(0, len(rating))]\n        total = 0\n\n        for i in range(1, len(rating)):\n            for j in range(0, i):\n                if rating[i] > rating[j]:\n                    total += s[j]\n                    s[i] += 1\n\n                if rating[i] \nOptimization step by step\nhttps://leetcode.com/problems/3sum/ \nThis is modified 2 sum. We fix 2 elements and need to find the third one. \nSets are used to avoid repetition. \nWays to find the third one: \n\nBinary Search \nSave positions in a dictionary. Check the last position of that element, if that's greater than the second elem, we have found a possible set\n\nfrom collections import defaultdict\n\nclass Solution:\n    def threeSum(self, nums: List[int]) -> List[List[int]]:\n        n = len(nums)\n        result_s = set()\n        result = []\n        positions = defaultdict(list)\n\n        for i, num in enumerate(nums):\n            positions[num].append(i)\n\n        for i in range(0, n - 2):\n            for j in range(i + 1, n - 1):\n                sum_pos = positions[-(nums[i] + nums[j])]\n                if sum_pos:\n                    if sum_pos[-1] > j:\n                        result_s.add(tuple(sorted([nums[i], nums[j], \\\n                                      -(nums[i] + nums[j])])))\n\n        while result_s:\n            x, y, z = result_s.pop()\n            result.append([x, y, z])\n\n        return result\n\nBetter approach with sorting\nclass Solution:\n    def threeSum(self, nums: List[int]) -> List[List[int]]:\n        nums = sorted(nums)\n        n = len(nums)\n        result = set()\n        i, j, k = 0, 1, n - 1\n\n        for i in range(0, n - 2):\n            # This kind of pruning is very important\n            if i > 0 and nums[i] == nums[i - 1]: \n                continue\n\n            j = (i + 1)\n            k = (n - 1)\n\n            while j  0:\n                    k -= 1\n\n                if tri_sum \n"},"DataStructures/Arrays/StackTricks.html":{"url":"DataStructures/Arrays/StackTricks.html","title":"Stack Tricks","keywords":"","body":"Stacks / Deque trick / monoqueue technique\nMain concepts here:\nKnuth stack-sorting (132 pattern)\n\nhttps://leetcode.com/problems/132-pattern/deque trick\n\nhttps://leetcode.com/problems/next-greater-element-i/\nhttps://leetcode.com/problems/online-stock-span/\nhttps://leetcode.com/problems/sliding-window-maximum/\nhttps://leetcode.com/explore/challenge/card/may-leetcoding-challenge/536/week-3-may-15th-may-21st/3330/\n\nThe idea is to maitain a queue or stack based on our requirements that has this structure: \n \nWe might want to add some more info (eg. location) \nEach incoming element will be compared with the last element: \n\nKeep on popping if stack/queue and the last element is smaller than the current one\nGo ahead and append it to the stack/queue\nThe element that displaces stack element is the next greater for the elem that got displaced\nThe stack elements at the end have no next greaters\n\nIt's all a game of displacing elements in the stack and interpretation of the ones that are left in it. \nScenarios: \n\nA bigger element comes next: will displace and add their displacements.\nEqual: will displace some; we take their displacements and add.\nSmaller: didn't displace anything. \nGeneral solution: \nclass StockSpanner:\n\n  def __init__(self):\n      self.stack = []\n\n  def next(self, price: int) -> int:\n      displaced = 1\n      while self.stack and self.stack[-1][0] \nGreat question:\nhttps://leetcode.com/problems/find-the-most-competitive-subsequence/ \nWe need to select k smallest nums one after another. \nadditional is the key here.\nclass Solution:\n  def mostCompetitive(self, nums: List[int], k: int) -> List[int]:\n      stack = []\n      additional = len(nums)-k\n\n      for i, n in enumerate(nums):\n          while stack and stack[-1] > n and additional > 0:\n              stack.pop()\n              additional -= 1\n\n          stack.append(n)\n\n      return stack[:k]\n\nNext greater\n```py\nfrom collections import defaultdict\n\n\nclass Solution:\n    def nextGreaterElement(self, nums1: List[int], nums2: List[int]) -> List[int]:\n        store = defaultdict(int)\n        stack = []\n        result = []\n    for i in range(len(nums2) - 1, -1, -1):\n        store[nums2[i]] = -1\n\n        while stack and stack[-1] Sliding window solution:  \nA simple question first- \nOur target is very similar here: \nhttps://leetcode.com/problems/number-of-recent-calls/\n```py\nfrom collections import deque\n\nclass RecentCounter:\n\n    def __init__(self):\n        self.window = deque()\n\n    def ping(self, t: int) -> int:\n        while self.window and self.window[0] Now the original question with sliding window \nAlways remember: \n\nDRY: Don't Repeat Yourself\nAugmentation here: pop the first elem if it's out of the window\n```py\nfrom collections import deque\n\nclass Solution:\n    def maxSlidingWindow(self, nums: List[int], k: int) -> List[int]:\n        stack = deque()\n        result = []\n    if len(nums) = (k - 1):\n            result.append(stack[0][0])\n\n    return result\nhttps://leetcode.com/problems/largest-rectangle-in-histogram/\n```py\nfrom collections import deque\nfrom enum import IntEnum\n\nclass Solution:\n    def largestRectangleArea(self, heights: List[int]) -> int:\n        class Direction(IntEnum):\n            L = 0\n            R = 1\n\n        n = len(heights)\n\n        smaller = [[i, i] for i in range(0, n)]\n        queue = deque()\n        queue.append((-1, -1))\n\n        for i, h in enumerate(heights):\n            while queue and h "},"DataStructures/Arrays/MultipleArrays.html":{"url":"DataStructures/Arrays/MultipleArrays.html","title":"Multiple Arrays","keywords":"","body":"Multiple arrays\nNOTE: \nkey in min/max/sorted should get a function. You can create a lambda if required. \nMake a comparison function and use it with lambda.\nhttps://leetcode.com/problems/intersection-of-three-sorted-arrays/ \nWe try to maintain a state where all pointers point to the minimum of each array; if all equal, push it to result otherwise forward the pointer that points to the min of 3.\nclass Solution:\n    def arraysIntersection(self, arr1: List[int], arr2: List[int], arr3: List[int]) -> List[int]:\n        index = {'i': 0, 'j': 0, 'k': 0}\n        result = []\n\n        def get_smallest(x):\n            if x == 'i':\n                return arr1[index[x]]\n            if x == 'j':\n                return arr2[index[x]]\n            if x == 'k':\n                return arr3[index[x]]\n\n        while True:\n            if arr1[index['i']] == arr2[index['j']] == arr3[index['k']]:\n                result.append(arr1[index['i']])\n                for i in index:\n                    index[i] += 1\n            else:\n                index[min(index, key=lambda x: get_smallest(x))] += 1\n\n            if index['i'] >= len(arr1) \\\n               or index['j'] >= len(arr2) \\\n               or index['k'] >= len(arr3):\n                break\n\n        return result\n\n"},"DataStructures/Arrays/LeftAndRight.html":{"url":"DataStructures/Arrays/LeftAndRight.html","title":"Left and right","keywords":"","body":"Left and right computations\nDevide and conquer-esque\nhttps://leetcode.com/problems/shortest-distance-to-target-color/ \nGood question. LO=Last Occurrence, DM=Distance Matrix \nCheck earlier accepted solution. The answer is index distance from last occurence of that color on the left and then on the right. \nI've combined both of the loops here:\nclass Solution:\n    def shortestDistanceColor(self, colors: List[int], queries: List[List[int]]) -> List[int]:\n        n = len(colors)\n\n        LOL = {1:float('-inf'), 2:float('-inf'), 3:float('-inf')}\n        LOR = {1:float('inf'), 2:float('inf'), 3:float('inf')}\n\n        DM = [[float('inf'), float('inf'), float('inf')] for _ in range(len(colors))]\n\n        for i in range(0, n):\n            c_l = colors[i]\n            c_r = colors[n-1-i]\n\n            LOL[c_l] = i\n            LOR[c_r] = n-1-i\n            for col in [1, 2, 3]:\n                DM[i][col-1] = min(DM[i][col-1], i-LOL[col])\n                DM[n-1-i][col-1] = min(DM[n-1-i][col-1], LOR[col]-(n-1-i))\n\n        return [DM[i][q-1] if DM[i][q-1] != float('inf') else -1 for i, q in queries]\n\nhttps://leetcode.com/problems/shortest-distance-to-a-character/ \nSame thing; last observed left and last observed right\nclass Solution:\n    def shortestToChar(self, s: str, c: str) -> List[int]:\n        DM = [float('inf')] * len(s)\n        LOL, LOR = float('-inf'), float('inf')\n        n = len(s)\n\n        for i, sc in enumerate(s):\n            if s[i] == c:\n                LOL = i\n\n            if s[n-1-i] == c:\n                LOR = n-1-i\n\n            DM[i] = min(DM[i], i-LOL)\n            DM[n-1-i] = min(DM[n-1-i], LOR - (n-1-i))\n\n        return DM\n\n"},"DataStructures/Strings/":{"url":"DataStructures/Strings/","title":"Strings","keywords":"","body":"Strings\n"},"DataStructures/Strings/StandardQuestions.html":{"url":"DataStructures/Strings/StandardQuestions.html","title":"Standard Questions","keywords":"","body":"Standard Questions\nBrute -> Sliding Window -> Set\nhttps://leetcode.com/problems/longest-substring-without-repeating-characters/\nSubsequence\nhttps://leetcode.com/problems/longest-word-in-dictionary-through-deleting/ \nVisualize the problem. Occurence of each letter in s should be after the last one and the last occurence of the same letter (we store these in offsets dictionary) \nIf the number of matched letters is the same as the length of the word, we compare with the result. \nPeep the min function with key=lambda\nclass Solution:\n    def findLongestWord(self, s: str, d: List[str]) -> str:\n        store = {}\n        result = ''\n        for i, c in enumerate(s):\n            store[c] = store.get(c, []) + [i]\n\n        for word in d:\n            offsets = {}\n            last = -1\n            matched = 0\n\n            for c in word:\n                if c not in store:\n                    break\n\n                offset = offsets.get(c, 0)\n\n                if offset == len(store[c]):\n                    break\n\n                for i in range(offset, len(store[c])):\n                    if store[c][i] > last:\n                        offsets[c] = i + 1\n                        last = store[c][i]\n                        matched += 1\n                        break\n\n            if matched == len(word):\n                result = min(result, word, key= lambda x: (-len(x), x))\n\n        return result\n\nstring rotation\nhttps://leetcode.com/problems/group-shifted-strings/ \n% 26 for circular rotation\nclass Solution:\n    def groupStrings(self, strings: List[str]) -> List[List[str]]:\n        fingerprints = {}\n\n        for string in strings:\n            fingerprint = ''\n            for i, c in enumerate(string[1:], start=1):\n                diff = (ord(string[i-1]) - ord(c))\n                fingerprint += str(diff % 26)\n\n            fingerprints[fingerprint] = fingerprints.get(fingerprint, []) + [string]\n\n        return fingerprints.values()\n\nhttps://leetcode.com/problems/count-binary-substrings/ \nModelling question. Keep it simple. Run the loop from second elem so the current and prev handling is easier.\nclass Solution:\n    def countBinarySubstrings(self, s: str) -> int:\n        prev_count = 0 \n\n        current = s[0]\n        current_count = 1\n\n        total = 0\n\n        for c in s[1:]:\n            if c == current:\n                current_count += 1\n            else:\n                current = c\n                prev_count = current_count\n                current_count = 1    \n\n            if current_count \nRemove/add one character\nhttps://leetcode.com/problems/strings-differ-by-one-character/ \nGood question. We generate possible matches as we traverse along the dict. \nEach character will be replaced with * so that we just have to check if the fingerprint exists\nclass Solution:\n    def differByOne(self, dict: List[str]) -> bool:\n        store = set()\n\n        for word in dict:\n            for i in range(len(word)):\n                fingerprint = word[:i] + '*' + word[i+1:]\n                if fingerprint in store:\n                    return True\n\n                store.add(fingerprint)\n\n        return False\n\nhttps://leetcode.com/problems/longest-string-chain/ \nGood question. Go backwards from the final answer. Build a store, sort based on certain criteria \nNow, go backwards, update store\nclass Solution:\n    def longestStrChain(self, words: List[str]) -> int:\n        words_store = {word: 1 for word in words}\n        words_sort = sorted(words, key=lambda x: len(x), reverse=True)\n        chain = 1\n\n        for word in words_sort:\n            for i in range(len(word)):\n                new_word = word[:i] + word[i+1:]\n                if new_word in words_store:\n                    words_store[new_word] = max(words_store[new_word], words_store[word]+1)\n                    chain = max(chain, words_store[new_word])\n\n        return chain\n\n"},"DataStructures/LinkedLists/":{"url":"DataStructures/LinkedLists/","title":"Linked Lists","keywords":"","body":"Linked List\nSequence:\n\nhttps://leetcode.com/problems/delete-node-in-a-linked-list/\nhttps://leetcode.com/problems/middle-of-the-linked-list/\n\nhttps://leetcode.com/problems/reverse-linked-list/ also practice recursive\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def reverseList(self, head: ListNode) -> ListNode:\n        prev, current = None, head\n\n        while current:\n            # avoid reserved keyword, next.\n            # loop runs till there is current, next = current.next \n            # in the prep phase can overflow. We shouldn't have a situation where\n            # we are checking the next elem of None.\n            _next = current.next\n\n            # swap elements here\n            current.next = prev\n\n            # prepare for the next iteration\n            prev = current\n            current = _next\n\n        return prev\n\nhttps://leetcode.com/problems/linked-list-cycle/ \nIterative:\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        visited = set()\n\n        while head:\n            fingerprint = id(head)\n            if fingerprint in visited:\n                return True\n\n            visited.add(fingerprint)\n            head = head.next\n\n        return False\n\nRecursive: \nTreat this as a graph problem asking for the cycle existance. We just need local visited set in this case. Also, there is not guaratee node values are different. We use their addresses to comapare (id function)\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        visited = set()\n\n        def traverse(node=head):\n            if not node or not node.next:\n                return False\n\n            if id(node) in visited:\n                return True\n\n            visited.add(id(node))\n            return traverse(node.next)\n\n        return traverse()\n\nhttps://leetcode.com/problems/merge-two-sorted-lists/\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def mergeTwoLists(self, l1: ListNode, l2: ListNode) -> ListNode:\n        # dummy node to instantiate things\n        head = runner = ListNode()\n\n        while l1 and l2:\n            if l1.val \nhttps://leetcode.com/problems/merge-k-sorted-lists/ \nGreat heap question.\nimport heapq\n\nclass Solution:\n    def mergeKLists(self, lists: List[ListNode]) -> ListNode:\n        head = runner = ListNode()\n        heap = []\n\n        for i, _list in enumerate(lists):\n            # important corner-case\n            if _list is not None:\n                heapq.heappush(heap, (_list.val, i))\n\n        while heap:\n            # we don't care about the value\n            _, list_idx = heapq.heappop(heap)\n\n            runner.next = lists[list_idx]\n\n            runner = runner.next\n            lists[list_idx] = lists[list_idx].next\n\n            if lists[list_idx] is not None:\n                # avoid pushing if the list at that index is None\n                heapq.heappush(heap, (lists[list_idx].val, list_idx))\n\n        return head.next\n\nhttps://leetcode.com/problems/remove-nth-node-from-end-of-list/ \nWe need to reach to the (n+1)th from the last element => fast should run n first \nEdge case being fast == last_node.next ie. None\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def removeNthFromEnd(self, head: ListNode, n: int) -> ListNode:\n        \"\"\"\n        We need a pointer to the node before target (the one we've \n        been asked to remove).\n\n        When the fast pointer reaches the end of the list, slow points\n        to the target node. So, when slow points to the one just before\n        that, fast one points to the last node that has 'next' ie. the \n        one before last.\n\n        So, move the fast one n place and then move both until fast.next.\n        Then perform deletion.\n        \"\"\"                                          \n        fast = slow = head\n\n        for _ in range(n):\n            fast = fast.next\n\n        if fast is None:\n            # important edge case where\n            # there are only n nodes in the list\n            return head.next\n\n        while fast.next:\n            fast = fast.next\n            slow = slow.next\n\n        slow.next = slow.next.next\n        return head\n\nhttps://leetcode.com/problems/add-two-numbers/\nclass Solution:\n    def addTwoNumbers(self, l1: ListNode, l2: ListNode) -> ListNode:\n        dummy = runner = ListNode()\n        carry = 0\n\n        while l1 or l2 or carry:\n            l1_val = l1.val if l1 else 0\n            l2_val = l2.val if l2 else 0\n\n            _sum = (l1_val + l2_val + carry)\n            digit = _sum % 10\n            carry = _sum // 10\n\n            runner.next = ListNode(digit)\n            runner = runner.next\n\n            if l1:\n                l1 = l1.next\n\n            if l2:\n                l2 = l2.next            \n\n        return dummy.next\n\nTough ones:\n\nhttps://leetcode.com/problems/reverse-linked-list-ii\nAdjusting connections after the reversal is probably the most crucial step \n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n  def reverseBetween(self, head: ListNode, m: int, n: int) -> ListNode:\n      if not head or not head.next or m == n:\n          return head\n\n      # need these variables for post-reverse conenction adjustments\n      node_before_reverse = m_reference = None\n      prev = _next = None\n      current = head\n\n      count = 1\n\n      while count \nhttps://leetcode.com/problems/intersection-of-two-linked-lists/ \nGreat question. There's a similar question for Tree:LCA (Tree/README.md) \n```py\nDefinition for singly-linked list.\nclass ListNode:\ndef init(self, x):\nself.val = x\nself.next = None\n\n\nclass Solution:\n    def getIntersectionNode(self, headA: ListNode, headB: ListNode) -> ListNode:\n        if not headA or not headB:\n            return None\n    A, B = headA, headB\n    resets = 2\n\n    while not (headA is headB):\n        if headA.next:\n            headA = headA.next\n        else:\n            resets -= 1\n            if resets ```\n"},"DataStructures/LinkedLists/Instructions.html":{"url":"DataStructures/LinkedLists/Instructions.html","title":"Instructions","keywords":"","body":"Instructions\n \n\nImportant thing is to understand how long the loop should run. That is, until the end node or None after the end node. \nUsing multiple pointers is common, check if that helps. Also, be sure which one of these should be your point of reference. That might make a difference. (Check reverse linked list question)  \nTo avoid many if conditions, you can declare a None node and use it as dummy or prev (merge sorted linked lists)\nCan treat a linked list as a graph: linked list cycle\n\n"},"DataStructures/Trees/":{"url":"DataStructures/Trees/","title":"Trees","keywords":"","body":"Trees\nDecent curated list: https://medium.com/@codingfreak/binary-tree-interview-questions-and-practice-problems-439df7e5ea1f\nTraversals\n\nInorder (Recursive and Iterative)\nPreorder (Recursive and Iterative)\nPostorder (Recursive and Iterative)\nLevelwise\nVertical order (Levelwise + Hashing)\n\nFinding a solution\n\nSee if you want to pass data down the tree or up the tree\n\nIf up the tree, postorder for recursive solution.\nIf down the tree, preorder for recursive solution, keep globals to record and update answer.  return for no node/ no left/ no right tree cases. If you don't want to encounter no left or no right situations, check before passing down the value.\n\n\nFor levelwise, make sure you check if the left node or right node is present before pushing to the queue. Do it level by level not node by node. popleft and append combo (collections.deque)\n\n\nGotcha questions\nhttps://leetcode.com/problems/lowest-common-ancestor-of-a-binary-tree-iii/ \nBased on a similar question for linked lists (check if they merge or not) \nThe trick is to eliminate distance discrepancy.\n\nGo up and up through parent pointer\nIf one of them hits root (no parent), reset it to the other node and do the same thing again, this will remove distance discrepancy\nIf they are equidistant from the LCA (step 2 takes care of it if there are not), they'll converge there\n\n\nclass Solution:\n    def lowestCommonAncestor(self, p: 'Node', q: 'Node') -> 'Node':\n        p1, q1 = p, q\n\n        while p1 != q1:\n            p1 = p1.parent if p1.parent else q\n            q1 = q1.parent if q1.parent else p\n\n        return p1\n\n"},"DataStructures/Trees/Inorder.html":{"url":"DataStructures/Trees/Inorder.html","title":"Inorder Traversal","keywords":"","body":"Inorder Traversal\nIt is useful when you just want to traverse the tree, if you find what you are looking for, set up a flag to make sure you don't recur unnecessary paths. Just return in the case of iterative \nParticularly useful in the case of BST as inorder will give you a sorted list\nIterative\nhttps://leetcode.com/problems/sum-of-left-leaves/\nclass Solution:\n    def sumOfLeftLeaves(self, root: TreeNode) -> int:\n        if not root:\n            return 0\n\n        stack = []\n        current = root\n        total_sum = 0\n\n        while stack or current:\n            while current:\n                stack.append(current)\n                current = current.left\n                if current and not current.left and not current.right:\n                    total_sum += current.val\n\n            current = stack.pop()\n            current = current.right\n\n        return total_sum\n\nAnother iterative: \nwe use to exit the loop right after we find the discrepancy \nhttps://leetcode.com/problems/leaf-similar-trees/\nclass Solution:\n    def leafSimilar(self, root1: TreeNode, root2: TreeNode) -> bool:\n\n        def iterative(root, validation=False):\n            \"\"\"\n            validation true:= add elems to leaves attr\n            validation false:= remove elems from the attr and exit if not match\n            \"\"\"\n            current = root\n            stack = []\n\n            while stack or current:\n                while current:\n                    stack.append(current)\n                    current = current.left\n\n                current = stack.pop()\n\n                if not current.left and not current.right:\n                    if not validation:\n                        iterative.leaves.append(current.val)\n                    else:\n                        if iterative.leaves and \\\n                        current.val == iterative.leaves[0]:\n                            iterative.leaves.pop(0)\n                        else:\n                            iterative.similar = False\n                            return\n\n                current = current.right\n\n        iterative.leaves = []\n        iterative.similar = True\n        iterative(root1)\n        iterative(root2, validation=True)\n\n        return iterative.similar and len(iterative.leaves) == 0\n\nRecursive\nhttps://leetcode.com/problems/binary-tree-paths/ \nReturn False only in the case of not satisfying the criteria, do not return True until the base case\nclass Solution:\n    def binaryTreePaths(self, root: TreeNode) -> List[str]:\n        result = []\n\n        def traverse(node, path):\n            if not node:\n                return\n\n            if not node.left and not node.right:\n                result.append(path + str(node.val))\n                return            \n\n            traverse(node.left, path + str(node.val) + \"->\")\n            traverse(node.right, path + str(node.val) + \"->\")\n\n        traverse(root, \"\")\n        return result\n\nhttps://leetcode.com/problems/convert-bst-to-greater-tree/ \nAugmented inorder search; right first. DO NOT EVEN THINK ABOUT USING POSTORDER HERE. \nUse a static variable to keep track of the cumulative sum\nclass Solution:\n    def convertBST(self, root: TreeNode) -> TreeNode:\n        if not root or not (root.left or root.right):\n            return root\n\n        def _inorder(node):\n            if not node:\n                return None\n\n            _inorder(node.right)\n\n            node.val += _inorder.sum\n            _inorder.sum = node.val\n\n            _inorder(node.left)\n\n            return node\n\n        _inorder.sum = 0\n        return _inorder(root)\n\n"},"DataStructures/Trees/Preorder.html":{"url":"DataStructures/Trees/Preorder.html","title":"Preorder Traversal","keywords":"","body":"Preorder traversal\nPerfect for process node and pass value down the tree. \nSometimes replacement for levelwise (NOT ALWAYS, OF COURSE) \nIf we do not want to cover not root.left or not root.right, check if they exist and go down the tree. \nGeneral solution:\nhttps://leetcode.com/problems/sum-root-to-leaf-numbers/\nclass Solution:\n    def sumNumbers(self, root: TreeNode) -> int:\n        self.total = 0\n\n        if not root:\n            return 0\n\n        def addNums(node, current):\n            if not node.left and not node.right:\n                self.total += (current * 10 + node.val)\n                return\n\n            if node.left:\n                addNums(node.left, current * 10 + node.val)\n\n            if node.right:\n                addNums(node.right, current * 10 + node.val)\n\n        addNums(root, 0)\n        return self.total\n\nhttps://leetcode.com/problems/binary-tree-zigzag-level-order-traversal/\nclass Solution:\n    def longestZigZag(self, root: TreeNode) -> int:\n        if not root:\n            return 0\n\n        self.max_length = 0\n        left = -1\n        right = 1\n\n        def traverse(node, direction, length):\n            if not node:\n                return\n\n            self.max_length  = max(self.max_length, length)\n\n            if direction == left:\n                traverse(node.left, left, 1)\n                traverse(node.right, right, length + 1)\n\n            elif direction == right:\n                traverse(node.left, left, length + 1)\n                traverse(node.right, right, 1)\n\n            else:\n                traverse(node.left, left, 1)\n                traverse(node.right, right, 1)\n\n        traverse(root, 0, 0)\n        return self.max_length\n\nhttps://leetcode.com/problems/path-sum-ii/\nclass Solution:\n    def pathSum(self, root: TreeNode, sum: int) -> List[List[int]]:\n        result = []\n\n        def traverse(node, path, current_sum):\n            if not node:\n                return\n\n            if not node.left and not node.right:\n                if current_sum == (sum - node.val):\n                    path.append(node.val)\n                    result.append(path)\n                return\n\n            traverse(node.left, path + [node.val], current_sum + node.val)\n            traverse(node.right, path + [node.val], current_sum + node.val)\n\n        traverse(root, [], 0)\n        return result\n\nhttps://leetcode.com/problems/path-sum-iii/\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def pathSum(self, root: TreeNode, sum: int) -> int:\n        self.result = 0\n\n        def traverse(node, path_sum):\n            if not node:\n                return \n\n            if node.val == sum:\n                self.result += 1\n\n            new_path_sum = []\n            for s in path_sum:\n                new_sum = s + node.val\n\n                if new_sum == sum:\n                    self.result += 1\n\n                new_path_sum.append(new_sum)\n\n            traverse(node.left, new_path_sum + [node.val])\n            traverse(node.right, new_path_sum + [node.val])            \n\n        traverse(root, [])\n        return self.result\n\nhttps://leetcode.com/problems/add-one-row-to-tree/ \nDecent question, almost like a linked list question\nclass Solution:\n    def addOneRow(self, root: TreeNode, v: int, d: int) -> TreeNode:\n        if d == 1:\n            new = TreeNode(v)\n            new.left = root\n            return new\n\n        def preorder(node, depth):\n            if not node or depth == d:\n                return None\n\n            if depth == (d - 1):\n                new = TreeNode(v)\n                new.left = node.left\n                node.left = new\n\n                new = TreeNode(v)\n                new.right = node.right\n                node.right = new\n\n            preorder(node.left, depth + 1)\n            preorder(node.right, depth + 1)\n\n            return node\n\n        return preorder(root, 1)\n\nhttps://leetcode.com/problems/binary-tree-longest-consecutive-sequence/ \nJust be concerned about the state at the current node. Default start should be 1 since a single node satisfies the requirement \nAdjust based on the current node and then think about global max length \nclass Solution:\n    def longestConsecutive(self, root: TreeNode) -> int:\n        if not root:\n            return 0\n\n        def preorder(node, prev, length):\n            if not node:\n                return\n\n            if (node.val - prev) == 1:\n                length += 1\n            else:\n                length = 1\n\n            preorder.longest = max(preorder.longest, length)\n\n            preorder(node.left, node.val, length)\n            preorder(node.right, node.val, length)\n\n            return\n\n        preorder.longest = 0\n        preorder(root, float('-inf'), 0)\n        return preorder.longest\n\n"},"DataStructures/Trees/Postorder.html":{"url":"DataStructures/Trees/Postorder.html","title":"Postorder Traversal","keywords":"","body":"Postorder traversal\nSometimes we need to pass some values back up the tree. \ne.g. node's position from the bottom, max from right and left, check if the node exists in the left or right subtree. sum of the left subtree and right subtree \nBased on these properties, we need to find values of some other properties; use globals/ class attributes to record/update their value.\nOptimization for BST: \nCheck if the target value is greater than current, go right; no need to go left. Vice versa. \nAlso need to do the same sometimes to handle the nodes that don't have either left child or the right one. Don't forget to initialize L or R before calling postorder. Look at the solution of good leaf nodes.\nSometimes, you'd need to go down the tree and then come back up with height related data (eg. https://leetcode.com/problems/lowest-common-ancestor-of-deepest-leaves/)\nGeneral solution:\nhttps://leetcode.com/problems/binary-tree-maximum-path-sum/\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def maxPathSum(self, root: TreeNode) -> int:\n        def postorder(node):\n            if not node:\n                # if every node has a negative val, we'd want to return \n                # the max negative val so returning `0` doesn't really work here\n                return float('-inf')\n\n            current = node.val\n            L = postorder(node.left)\n            R = postorder(node.right)\n\n            # don't include if it's negative\n            if L >= 0:\n                current += L\n\n            if R >= 0:\n                current += R\n\n            postorder.max_sum = max(postorder.max_sum, current)\n\n            # we can return either left, right or the node itself\n            # it won't be a path otherwise\n            return max(\n                        node.val,\n                        node.val + L,\n                        node.val + R\n                   )\n\n        # static variable to store max\n        postorder.max_sum = float('-inf')\n        postorder(root)\n\n        return postorder.max_sum\n\nhttps://leetcode.com/problems/lowest-common-ancestor-of-a-binary-tree/\nclass Solution:\n    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':\n        self.lca = None\n\n        def traverse(node):\n            if not node:\n                return False\n\n            L = traverse(node.left)\n            R = traverse(node.right)\n\n            if (L + R + (node.val in [p.val, q.val])) == 2:\n                self.lca = node\n\n            return L or R or (node.val in [p.val, q.val])\n\n        traverse(root)\n        return self.lca\n\nhttps://leetcode.com/problems/most-frequent-subtree-sum/ \nNote: Recording max_count while inserting so that finding max will be easier afterwards.\nfrom collections import deque, defaultdict\n\nclass Solution:\n    def findFrequentTreeSum(self, root: TreeNode) -> List[int]:\n        if not root:\n            return []\n\n        sums = defaultdict(int)\n        self.max_count = 0\n\n        def traverse(node):\n            if not node:\n                return 0\n\n            L = traverse(node.left)\n            R = traverse(node.right)\n\n            sums[L + R + node.val] += 1\n            self.max_count = max(self.max_count, sums[L + R + node.val])\n\n            return (L + R + node.val)\n\n        traverse(root)\n        result = []\n\n        for key, value in sums.items():\n            if self.max_count == value:\n                result.append(key)\n\n        return result\n\nhttps://leetcode.com/problems/validate-binary-search-tree/\nclass Solution:\n    def isValidBST(self, root: TreeNode) -> bool:\n        self.valid = True\n\n        if not root:\n            return self.valid\n\n        if not root.left and not root.right:\n            return self.valid\n\n        def recurse(node: TreeNode) -> int:\n            if not node:\n                return (float('-inf'), float('inf'))\n\n            left_max, left_min = recurse(node.left)\n            right_max, right_min = recurse(node.right)\n\n            if (left_max >= node.val) or (right_min \nhttps://leetcode.com/problems/minimum-time-to-collect-all-apples-in-a-tree/\nfrom collections import defaultdict\n\nclass Solution:\n    def minTime(self, n: int, edges: List[List[int]], hasApple: List[bool]) -> int:\n        tree = defaultdict(list)\n        self.walk = 0\n        visited = set()\n        for s, e in edges:\n            tree[s].append(e)\n            tree[e].append(s)\n\n        def traverse(node):\n            visited.add(node)\n\n            if not tree[node]:\n                if hasApple[node]:\n                    self.walk += 2\n                return hasApple[node]\n\n            apple_in_path = hasApple[node]\n            for v in tree[node]:\n                if v not in visited:\n                    apple_in_path = traverse(v) or apple_in_path\n\n            if apple_in_path and node:\n                self.walk += 2\n\n            return apple_in_path\n\n\n        traverse(0)\n        return self.walk\n\nhttps://leetcode.com/contest/weekly-contest-199/problems/number-of-good-leaf-nodes-pairs/ \nWe send to send consolidated data up the tree; kinda of tricky and complex\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nfrom collections import defaultdict\n\nclass Solution:\n    def countPairs(self, root: TreeNode, distance: int) -> int:\n        self.total = 0\n\n        def postorder(node):\n            if not node.left and not node.right:\n                return {1: 1}\n\n            L, R = {0 : 0}, {0: 0}\n            if node.left:\n                L = postorder(node.left)\n            if node.right:\n                R = postorder(node.right)\n\n            for d1, lc in L.items():\n                for d2, rc in R.items():\n                    if d1 + d2 \nhttps://leetcode.com/problems/lowest-common-ancestor-of-deepest-leaves/ \nWe even treat None nodes as leaves. Other leave nodes would obviously lower than the None node. \nIf the left and right leaves are at the same height, just return the current node as LCA otherwise just pass it on with the adjusted height.\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def lcaDeepestLeaves(self, root: TreeNode) -> TreeNode:\n        def postorder(node):\n            if not node:\n                return 0, None\n\n            if not node.left and not node.right:\n                return 1, node\n\n            L_H, L_lca = postorder(node.left)\n            R_H, R_lca = postorder(node.right)\n\n            if L_H > R_H:\n                return L_H + 1, L_lca\n\n            if R_H > L_H:\n                return R_H + 1, R_lca\n\n            return L_H + 1, node\n\n        _, lca = postorder(root)\n        return lca\n\nA slightly similar problem: \nhttps://leetcode.com/problems/lowest-common-ancestor-of-a-binary-tree-iv/\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def lowestCommonAncestor(self, root: 'TreeNode', nodes: 'List[TreeNode]') -> 'TreeNode':\n        target = set([i.val for i in nodes])\n        self.lca = None\n\n        def postorder(node):\n            if not node:\n                return 0\n\n            L = postorder(node.left)\n            R = postorder(node.right)\n\n            found = L + R + (node.val in target)\n            if found == len(target) and not self.lca:\n                self.lca = node\n\n            return found\n\n        postorder(root)\n        return self.lca\n\n"},"DataStructures/Trees/LevelWise.html":{"url":"DataStructures/Trees/LevelWise.html","title":"Level-wise Traversal","keywords":"","body":"Levelwise traversals\n-also useful for vertical order traversal\nGeneral solution: \nhttps://leetcode.com/problems/deepest-leaves-sum/\nfrom collections import deque\n\nclass Solution:\n    def deepestLeavesSum(self, root: TreeNode) -> int:\n        if not root:\n            return 0\n\n        queue = deque()\n        queue.append(root)\n        current = root\n        level_sum = 0\n\n        while queue:\n            size = len(queue)\n            level_sum = 0\n\n            while size:\n                current = queue.popleft()\n                level_sum += current.val\n\n                if current.left:\n                    queue.append(current.left)\n\n                if current.right:\n                    queue.append(current.right)\n\n                size -= 1\n\n        return level_sum\n\nAppend more values into the queue node \nhttps://leetcode.com/problems/cousins-in-binary-tree/\nfrom collections import deque\n\n\nclass Solution:\n    def isCousins(self, root: TreeNode, x: int, y: int) -> bool:\n        if not root:\n            return False\n\n        queue = deque()\n        queue.append((root, -1))\n        current = root\n\n\n        while queue:\n            size = len(queue)\n\n            x_found = -1\n            y_found = -1\n\n            while size:\n\n                current, parent = queue.popleft()\n\n                if current.val == x:\n                    x_found = parent\n\n                if current.val == y:\n                    y_found = parent\n\n                if (x_found != -1) and (y_found != -1) and (x_found != y_found):\n                    return True\n\n                if (x_found == y_found) and (x_found != -1):\n                    return False\n\n                if current.left:\n                    queue.append((current.left, current.val))\n\n                if current.right:\n                    queue.append((current.right, current.val))\n\n                size -= 1\n\n        return False\n\nhttps://leetcode.com/problems/binary-tree-vertical-order-traversal/ \nLevel order traversal guarantees vertical sorting, just need to sort horizontally. \nAnother brilliant idea is to store min_x and max_x. Then just return [X[x] for x in range(min_x, max_x+1)].\nThis works because every x in that range will have atleast one node. (think about it)\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nfrom collections import deque\n\nclass Solution:\n    def verticalOrder(self, root: TreeNode) -> List[List[int]]:\n        if not root:\n            return []\n\n        X = {}\n        queue = deque()\n        queue.append((0, root))\n\n        while queue:\n            size = len(queue)\n\n            for _ in range(size):\n                x, node = queue.popleft()\n                X[x] = X.get(x, []) + [node.val]\n\n                if node.left:\n                    queue.append((x-1, node.left))\n\n                if node.right:\n                    queue.append((x+1, node.right))\n\n        return [X[x] for x in sorted(X)]\n\nhttps://leetcode.com/problems/vertical-order-traversal-of-a-binary-tree/\nSimilar but slightly complicated because nodes at the same position have to be sorted by value. \nLevel order traversal guarantees vertical sort and left to right. For sorting, we just need to care about nodes in the same level. Create another store for each level and sort before extending the original store\nfrom collections import deque\n\nclass Solution:\n    def verticalTraversal(self, root: TreeNode) -> List[List[int]]:\n        X = {}\n        queue = deque()\n        queue.append((0, root))\n        x_min, x_max = float('inf'), float('-inf')\n\n        while queue:\n            size = len(queue)\n            current_row = {}\n\n            for _ in range(size):\n                x, node = queue.popleft()\n                x_min = min(x_min, x)\n                x_max = max(x_max, x)\n\n                current_row[x] = current_row.get(x, []) + [node.val]\n\n                if node.left:\n                    queue.append((x-1, node.left))\n\n                if node.right:\n                    queue.append((x+1, node.right))\n\n            for x in current_row:\n                X[x] = X.get(x, []) + sorted(current_row[x])\n\n        return [X[x] for x in range(x_min, x_max+1)]\n\n"},"Datastructures/Trees/TreeToGraph.html":{"url":"Datastructures/Trees/TreeToGraph.html","title":"Tree to Graph","keywords":"","body":"Tree to graph\nSometimes, we need to convert a tree into a graph. \nEspecially, if we want to traverse starting from an arbitary node.\nTwo approaches: \n\nMemory efficient but altering the input data: \nMark every node (add a new attribute to TreeNode object parent) \nPerform level-wise traversal from the target node where the neightbor loop will have [node.parent, node.left, node.right]\n\nConvert you tree into a graph: \nWill require additional O(n) space to store the whole thing \nPerform level-wise traversal starting from the target node\n\n\nhttps://leetcode.com/problems/all-nodes-distance-k-in-binary-tree/ \nNote the graph construction step; keep in mind we have to filter out -1 from the iteration.\nmake sure there's a proper K value handling.\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nfrom collections import defaultdict, deque\n\nclass Solution:\n    def distanceK(self, root: TreeNode, target: TreeNode, K: int) -> List[int]:\n        if K == 0:\n            return [target.val]\n\n        graph = defaultdict(list)\n\n        def traverse(node, parent):\n            if not node:\n                return\n\n            graph[parent].append(node.val)\n            graph[node.val].append(parent)\n            traverse(node.left, node.val)\n            traverse(node.right, node.val)\n\n        traverse(root, -1)\n\n        queue = deque()\n        queue.append(target.val)\n        visited = set()\n        result = []\n        K -= 1\n\n        while queue:\n            size = len(queue)\n\n            for i in range(size):\n                v = queue.popleft()\n                visited.add(v)\n\n                for nei in graph[v]:\n                    if nei not in visited and nei != -1: \n                        if K != 0:\n                            queue.append(nei)\n\n                        if K == 0:\n                            result.append(nei)\n            if K == 0:\n                return result\n            K -= 1\n\n        return []\n\n"},"DataStructures/Trees/TwoTrees.html":{"url":"DataStructures/Trees/TwoTrees.html","title":"Two Trees","keywords":"","body":"Two trees\nhttps://leetcode.com/problems/find-a-corresponding-node-of-a-binary-tree-in-a-clone-of-that-tree/ \nPython reference equality: is \nCompare it to the original one rather than the clone; the algorithm will take care of the result\nclass Solution:\n    def getTargetCopy(self, original: TreeNode, cloned: TreeNode, target: TreeNode) -> TreeNode:\n        self.result = None\n\n        def inorder(o: TreeNode, c: TreeNode):\n            if not o:\n                return None\n\n            inorder(o.left, c.left)\n            if o is target:\n                self.result = c\n            inorder(o.right, c.right)\n\n        inorder(original, cloned)\n        return self.result\n\nhttps://leetcode.com/problems/merge-two-binary-trees/\nclass Solution:\n    def mergeTrees(self, t1: TreeNode, t2: TreeNode) -> TreeNode:\n        def preorder(node1, node2):\n            if not node2:\n                return node1\n\n            if not node1:\n                return node2\n\n            node1.val += node2.val\n            node1.left = preorder(node1.left, node2.left)\n            node1.right = preorder(node1.right, node2.right)\n            return node1\n\n        return preorder(t1, t2)\n\nKeep things simple:\nhttps://leetcode.com/problems/all-elements-in-two-binary-search-trees/\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\nfrom heapq import merge\n\nclass Solution:\n    def getAllElements(self, root1: TreeNode, root2: TreeNode) -> List[int]:\n\n        def inorder(node, l):\n            if not node:\n                return\n\n            inorder(node.left, l)\n            l.append(node.val)\n            inorder(node.right, l)\n\n        l1, l2 = [], []\n        inorder(root1, l1)\n        inorder(root2, l2)\n\n        return merge(l1, l2)\n\nAn interesting use of generators: \nhttps://leetcode.com/problems/find-a-corresponding-node-of-a-binary-tree-in-a-clone-of-that-tree/discuss/537686/Python-Clean-and-Pythonic-way-using-iterator(generator)-solving-followup-too \nExplaination: https://leetcode.com/problems/find-a-corresponding-node-of-a-binary-tree-in-a-clone-of-that-tree/discuss/537686/Python-Clean-and-Pythonic-way-using-iterator(generator)-solving-followup-too/475462\ndef it(node):\n    if node:\n        yield node\n        yield from it(node.left)\n        yield from it(node.right)\n\n    # can directly iterate over this tree now\n\n"},"DataStructures/Trees/ConstructTree.html":{"url":"DataStructures/Trees/ConstructTree.html","title":"Construct Trees","keywords":"","body":"Tree construction questions\nConstruct a tree from the input\nThis is for leetcode style input\nhttps://leetcode.com/problems/serialize-and-deserialize-binary-tree/\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nfrom collections import deque\n\nclass Codec:\n\n    def serialize(self, root):\n        \"\"\"Encodes a tree to a single string.\n\n        :type root: TreeNode\n        :rtype: str\n        \"\"\"\n        result = ''\n        queue = deque()\n        queue.append(root)\n\n        while queue:\n            size = len(queue)\n\n            for _ in range(size):\n                node = queue.popleft()\n\n                if not node:\n                    result += '#,'\n                    continue\n\n                result += (str(node.val) + ',')\n\n                queue.append(node.left)\n                queue.append(node.right)\n\n        # ends with ','\n        return result[:len(result)-1]\n\n    def deserialize(self, data):\n        \"\"\"Decodes your encoded data to tree.\n\n        :type data: str\n        :rtype: TreeNode\n        \"\"\"\n        nodes = [TreeNode(int(val)) if val != '#' else None for val in data.split(',')]\n\n        child, parent = 1, 0\n        while child \nFrom preorder and inorder\nhttps://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/ \nUse a static variable for preorder indexing and keep an inorder map \nroot divides the inorder array into left and right subtree\nclass Solution:\n    def buildTree(self, preorder: List[int], inorder: List[int]) -> TreeNode:\n\n        def construct_tree(start=0, end=len(inorder)-1):\n            if start > end:\n                return None\n\n            root = TreeNode(preorder[construct_tree.index])\n            root_idx = node_pos[root.val]\n            construct_tree.index += 1\n\n            root.left = construct_tree(start, root_idx-1)\n            root.right = construct_tree(root_idx+1, end)\n\n            return root\n\n        construct_tree.index = 0\n        node_pos = {v: i for i, v in enumerate(inorder)}\n        return construct_tree()\n\nBalanced tree construction\nhttps://leetcode.com/problems/balance-a-binary-search-tree/\nclass Solution:\n    def balanceBST(self, root: TreeNode) -> TreeNode:\n        node_vals = []\n\n        def traverse(node):\n            if not node:\n                return \n\n            traverse(node.left)\n            node_vals.append(node.val)\n            traverse(node.right) \n\n        def construct_tree(start, end):\n            if start > end:\n                return None\n\n            middle = start + (end - start) // 2\n\n            current = TreeNode(node_vals[middle])\n            current.left = construct_tree(start, middle - 1)\n            current.right = construct_tree(middle + 1, end)\n\n            return current            \n\n        traverse(root)\n        return construct_tree(0, len(node_vals) - 1)\n\nConstruction from preorder\nhttps://leetcode.com/problems/construct-binary-search-tree-from-preorder-traversal/\nclass Solution:\n    def bstFromPreorder(self, preorder: List[int]) -> TreeNode:\n\n        def find_first_greater(start, end, target):\n            while start  target:\n                    end = mid\n                else:\n                    start = mid+1\n            return start\n\n        def constructTree(start, end):\n            if start > end:\n                return None\n\n            current = TreeNode(preorder[start])\n            fg = find_first_greater(start + 1, end, preorder[start])\n\n            # there is no greater element\n            if fg >= len(preorder) or preorder[fg] \nSome other constructions\nhttps://leetcode.com/problems/maximum-binary-tree/\nclass Solution:\n    def constructMaximumBinaryTree(self, nums: List[int]) -> TreeNode:\n        if not nums:\n            return None\n\n        def construct(l, r):\n            if l >= r:\n                return None\n\n            max_index = l\n            for i in range(l, r):\n                if nums[i] > nums[max_index]:\n                    max_index = i\n\n            node = TreeNode()\n            node.val = nums[max_index]\n\n            node.left = construct(l, max_index)\n            node.right = construct(max_index + 1, r)\n\n            return node\n\n        return construct(0, len(nums))\n\nImportant questions: \nhttps://leetcode.com/problems/construct-binary-tree-from-inorder-and-postorder-traversal/ \nNotice how we're using a static variable for construct function. \nRoot is always the last unused element present in the postorder array. This element divides the inorder array in 2 parts. \nMake sure you construct the right subtree before the left one!!\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def buildTree(self, inorder: List[int], postorder: List[int]) -> TreeNode:\n\n        def construct(i_s, i_e):\n            if i_s > i_e:\n                return None\n\n            root = TreeNode(postorder[construct.postorder_index])\n            construct.postorder_index -= 1\n\n            pivot = 0\n            for i, e in enumerate(inorder):\n                if e == root.val:\n                    pivot = i\n                    break\n\n            root.right = construct(pivot + 1, i_e)\n            root.left = construct(i_s, pivot - 1)\n\n            return root\n\n        construct.postorder_index = len(postorder) - 1\n        return construct(0, len(inorder) - 1)\n\n"},"DataStructures/Trees/NumTrees.html":{"url":"DataStructures/Trees/NumTrees.html","title":"Number of Trees","keywords":"","body":"Number of Trees\nhttps://leetcode.com/problems/binary-trees-with-factors/ \nClassic DP problem. Which means, find answers based on previous computations \nnumber of tress that can be constructed from a node == amount from a smaller num * original num // possible factor \nSorting beforehand solves a lot of issues. We go in increasing order. DP takes care of 2 trees if nums are diffs or if the original num is a square\nclass Solution:\n    def numFactoredBinaryTrees(self, arr: List[int]) -> int:\n        s_arr = sorted(arr)\n        index = {num: i for i, num in enumerate(s_arr)}\n        MOD = (10**9 + 7)\n\n        trees = [1] * len(s_arr)\n        total = len(s_arr)\n\n        for i in range(1, len(s_arr)):\n            for j in range(0, i):\n                if s_arr[i] % s_arr[j] == 0:\n                    left_index = j\n                    right_index = index.get(s_arr[i] // s_arr[j], -1)\n\n                    if right_index == -1:\n                        continue\n\n                    trees[i] += (trees[left_index] * trees[right_index])\n                    total += (trees[left_index] * trees[right_index])\n\n        return total % MOD\n\n"},"DataStructures/Graphs/":{"url":"DataStructures/Graphs/","title":"Graphs","keywords":"","body":"Graphs\nDecent problemset: https://leetcode.com/discuss/general-discussion/655708/graph-problems-for-beginners-practice-problems-and-sample-solutions\n\nhttps://leetcode.com/problems/array-nesting/\n\nCourse schedule IV\n\n\nGood question: \nhttps://leetcode.com/problems/kill-process/ \nPoints to note: \nUsing graph vs tree (easier to construct and multiple children) \nTagging/marking the target node: crucial step. Let everyone inherit parent tag if target found, \ntag it to be True, its subtree will automatically be the only set of nodes to have True tag \nNodes that do not have children: children append step should have a dict.get(node, []) call \nfrom collections import deque\n\nclass Solution:\n    def killProcess(self, pid: List[int], ppid: List[int], kill: int) -> List[int]:\n        graph = {}\n        queue = deque()\n        to_be_killed = []\n        # 1\n        for i, parent in enumerate(ppid):\n            graph[parent] = graph.get(parent, []) + [pid[i]]\n\n            if parent == 0:\n                if pid[i] == kill:\n                    return pid\n                queue.append((pid[i], False))\n\n        while queue:\n            size = len(queue)\n\n            for _ in range(size):\n                p, tag = queue.popleft()\n\n                if p == kill:\n                    tag = True\n\n                # 2\n                if tag == True:\n                    to_be_killed.append(p)\n\n                #3\n                for d in graph.get(p, []):\n                    queue.append((d, tag))\n\n        return to_be_killed\n\n"},"DataStructures/Graphs/Coloring.html":{"url":"DataStructures/Graphs/Coloring.html","title":"Coloring","keywords":"","body":"Graph coloring\nBasically, bifurcation problems\n\nhttps://leetcode.com/problems/flower-planting-with-no-adjacent/ \nThese set of problems are extremely similar with a code-changing difference \nThe first one is solved with keeping in mind that the solution exists, we just have to find it \nFor the these, we want to see if the solution exists: (use BFS)\nhttps://leetcode.com/problems/is-graph-bipartite/\nhttps://leetcode.com/problems/shortest-path-with-alternating-colors/\nhttps://leetcode.com/problems/possible-bipartition/  \n\nTips: \nMake sure you have a proper representation of graph \nRun the first loop over all vertices so that you don't miss disconnected sections. \nJust validate the coloring\nhttps://leetcode.com/problems/is-graph-bipartite/\nclass Solution:\n    def isBipartite(self, graph: List[List[int]]) -> bool:\n        visited = {}\n        A, B = True, False\n\n        def dfs(index, s):\n            if index in visited:\n                return visited[index] == s\n\n            visited[index] = s\n\n            valid = True\n            for d in graph[index]:\n                valid = (valid and dfs(d, not s))\n\n            return valid\n\n        for i in range(len(graph)):\n            if i not in visited and not dfs(i, A):\n                return False\n\n        return True\n\nfrom collections import deque\n\nclass Solution:\n    def isBipartite(self, graph: List[List[int]]) -> bool:\n        visited = [0 for i in range(0, len(graph))]\n\n        def bfs(i):\n            queue = deque()\n            queue.append((i, 1))\n\n            while queue:\n                node, color = queue.popleft()\n\n                if visited[node] and visited[node] != color:\n                    return False\n\n                if visited[node]:\n                    continue\n\n                visited[node] = color\n\n                colors = set([1, 2])\n                colors.remove(color)\n                color_left = colors.pop()\n\n                for v in graph[node]:\n                    queue.append((v, color_left))\n\n            return True\n\n        for s in range(0, len(graph)):\n            if not visited[s]:\n                if not bfs(s):\n                    return False\n\n        return True\n\nEdge coloring \nThe key is to store color-node pairing in the seen set -> Allows us to traverse only \"meaningful\" cycles\nfrom collections import defaultdict, deque\n\nclass Solution:\n    def shortestAlternatingPaths(self, n: int, red_edges: List[List[int]], blue_edges: List[List[int]]) -> List[int]:\n        graph = defaultdict(list)\n        red = 1\n        blue = 2\n        queue = deque()\n        seen = set()\n        result = [-1 for i in range(0, n)]\n\n        for s, d in red_edges:\n            graph[s].append([d, red])\n\n        for s, d in blue_edges:\n            graph[s].append([d, blue])\n\n        queue.append((0, red, 0))\n        queue.append((0, blue, 0))\n        while queue:\n            node, color, length = queue.popleft()\n\n            if (node, color) in seen:\n                continue\n            seen.add((node, color))\n\n            if result[node] == -1:\n                result[node] = length\n\n            for v, c in graph[node]:\n                colors = set([red, blue])\n                colors.remove(color)\n                expected = colors.pop()\n                if (c == expected):\n                    queue.append((v, expected, length + 1))\n\n        return result\n\nSolution for the first one: \nJust filling up colors\nfrom collections import defaultdict\n\nclass Solution:\n    def gardenNoAdj(self, N: int, paths: List[List[int]]) -> List[int]:\n        graph = defaultdict(list)\n\n        for start, end in paths:\n            graph[start].append(end)\n            graph[end].append(start)\n\n        planted = [0 for i in range(0, N)]\n\n        for i in range(1, N + 1):\n            neigh = graph[i]\n            if planted[i - 1]:\n                continue\n\n            flowers = set([1, 2, 3, 4])\n            for n in neigh:\n                if planted[n - 1] in flowers:\n                    flowers.remove(planted[n - 1])\n\n            planted[i - 1] = flowers.pop()\n\n        return planted\n\n"},"DataStructures/Graphs/GraphBFS.html":{"url":"DataStructures/Graphs/GraphBFS.html","title":"Graph BFS","keywords":"","body":"Graph BFS\nExtremely powerful tool to have in the arsenal. \nUseful for a myriad of optimization problems. \nQuickest way to reach to X; even optimize cost function (Djikstra substitute using Priority Queue) \nhttps://leetcode.com/problems/keys-and-rooms/\nfrom collections import deque\n\nclass Solution:\n    def canVisitAllRooms(self, rooms: List[List[int]]) -> bool:\n        if not rooms:\n            return True\n\n        queue = deque()\n        visited = set()\n\n        queue.append(0)\n\n        while queue:\n            room = queue.popleft()\n            visited.add(room)\n\n            for v in rooms[room]:\n                if v not in visited:\n                    queue.append(v)\n\n        return True if len(visited) == len(rooms) else False\n\nAmazing priority queue method: \nhttps://leetcode.com/problems/network-delay-time/\nimport heapq\nfrom collections import deque, defaultdict\n\nclass Solution:\n    def networkDelayTime(self, times: List[List[int]], N: int, K: int) -> int:\n        graph = defaultdict(list)\n        heap = []\n        visited = {}\n\n        if not N:\n            return 0\n\n        if K > N:\n            return -1\n\n        for u, v, w in times:\n            graph[u].append((v, w))\n\n        heap.append((0, K))\n        max_time = 0\n\n        while heap:\n            time, node = heapq.heappop(heap)\n\n            if node in visited:\n                continue\n\n            visited[node] = time\n            max_time = max(max_time, time)\n\n            for v, w in graph[node]:\n                if v not in visited:\n                    heapq.heappush(heap, (time + w, v))\n\n        return max_time if len(visited) == N else -1\n\nhttps://leetcode.com/problems/cheapest-flights-within-k-stops/ \nTwo variables at play here. There's similar question for grid as well.\nimport heapq\nfrom collections import defaultdict\n\nclass Solution:\n    def findCheapestPrice(self, n: int, flights: List[List[int]], src: int, dst: int, K: int) -> int:\n        graph = defaultdict(list)\n        visited = [float('inf') for i in range(0, n)]\n        heap = []\n\n        for u, v, w in flights:\n            graph[u].append((v, w))\n\n        heapq.heappush(heap, (0, src, 0))\n\n        while heap:\n            d, c, k = heapq.heappop(heap)\n\n            if k >= visited[c] or k > (K + 1):\n                continue\n\n            if c == dst:\n                return d\n\n            visited[c] = d\n\n            for n, n_d in graph[c]:\n                heapq.heappush(heap, (d + n_d, n, k + 1))\n\n        return -1\n\n"},"DataStructures/Graphs/GraphDFS.html":{"url":"DataStructures/Graphs/GraphDFS.html","title":"Graph DFS","keywords":"","body":"Graph DFS\nOne path at a time type questions eg. Course Scheduling \nVisit the node -> process children -> unvisit it \nIf there's a cycle, we visit the already locally visited node again \nIf we have visited the node before globally, just exit with True as we have already checked and didn't find any cycle \nhttps://leetcode.com/problems/number-of-connected-components-in-an-undirected-graph/ \nGlobal visited and local dfs.visited sets to not revisit nodes. \nGotcha: make sure compare an incoming node to visited instead of dfs.visited to save time\nclass Solution:\n    def countComponents(self, n: int, edges: List[List[int]]) -> int:\n        visited = set()\n        connected = 0\n        graph = {}\n\n\n        for s, e in edges:\n            graph[s] = graph.get(s, []) + [e]\n            graph[e] = graph.get(e, []) + [s]\n\n        def dfs(index):\n            # gotcha\n            if index in visited:\n                return\n\n            visited.add(index)\n            dfs.visited.add(index)\n            for n in graph.get(index, []):\n                if n not in dfs.visited:\n                    dfs(n)\n\n            dfs.visited.remove(index)\n            return\n\n        dfs.visited = set()\n        for i in range(n):\n            if i not in visited:\n                dfs(i)\n                connected += 1\n\n        return connected\n\nhttps://leetcode.com/problems/course-schedule/\nfrom collections import defaultdict\n\nclass Solution:\n    def canFinish(self, numCourses: int, prerequisites: List[List[int]]) -> bool:\n        graph = defaultdict(list)\n        g_visited = set()\n\n        for c, p in prerequisites:\n            graph[c].append(p)\n\n        def dfs(i):\n            if i in visited:\n                return False\n\n            if i in g_visited:\n                return True\n\n            if i not in g_visited:\n                g_visited.add(i)\n\n            visited.add(i)\n\n            for j in graph[i]:\n                if not dfs(j):\n                    return False\n\n            visited.remove(i)\n            return True\n\n        for i in range(0, numCourses):\n            if i not in g_visited:\n                visited = set()\n                if not dfs(i):\n                    return False\n\n        return True\n\nhttps://leetcode.com/problems/parallel-courses/ \nThe important thing to understand is that the deepest path will require the longest sem \nThe question then boils down to finding this path. \nWe return max depth including the current node\nNote: Do not do normal DFS and depth tracking with a static variable. cache approach is efficient\nFollow up: try to simplify cycle finding and returning method\nclass Solution:\n    def minimumSemesters(self, n: int, relations: List[List[int]]) -> int:\n        self.valid = True\n        visited = set()\n        prereq = {}\n\n        for p, c in relations:\n            prereq[p] = prereq.get(p, []) + [c]\n\n        def dfs(course):\n            if not self.valid:\n                return -1\n\n            if course in visited:\n                self.valid = False\n                return -1\n\n            if course in cache:\n                return cache[course]\n\n            visited.add(course)\n\n            max_next = 0\n            for c in prereq.get(course, []):\n                max_next = max(max_next, dfs(c))\n\n            visited.remove(course)\n            cache[course] = max_next + 1\n            return cache[course]\n\n        cache = {}\n        max_depth = 0\n        for course in range(1, n + 1):\n            course_depth = dfs(course)\n\n            if not self.valid:\n                return -1\n\n            max_depth = max(max_depth, course_depth)\n\n        return max_depth\n\nhttps://leetcode.com/problems/reconstruct-itinerary/ \nWe need to store visited edges instead of visited nodes. \nEdges are stored as defaultdicts because the possibility of them repeating \nEdges are sorted because we need to return the result that comes first lexographically\nfrom collections import defaultdict\n\nclass Solution:\n    def findItinerary(self, tickets: List[List[str]]) -> List[str]:\n        graph = defaultdict(list)\n        edges = defaultdict(int)\n\n        self.itinerary = []\n\n        for s, d in tickets:\n            graph[s].append(d)\n            edges[(s, d)] += 1\n\n        for s in graph:\n            graph[s] = sorted(graph[s])\n\n        def traverse(current, path):\n            if self.itinerary:\n                return\n\n            if len(path) == (len(tickets) + 1):\n                self.itinerary = path[:]\n\n            for n in graph[current]:\n                if edges[(current, n)]:\n                    edges[(current, n)] -= 1\n                    traverse(n, path + [n])\n                    edges[(current, n)] += 1\n\n        traverse('JFK', ['JFK'])\n        return self.itinerary\n\nGreat question: Looks like a tree question but it's not! \nRealized that the edges can be bidirectional. Just needed to add visited array and augment the graph init loop \nTrees are just graphs minus the posibility of looping \nThought process similar to that of tree DFS. Fetch consolidated data from the leaves and calculate the current one (postorder). \nhttps://leetcode.com/problems/number-of-nodes-in-the-sub-tree-with-the-same-label/\nfrom collections import defaultdict\n\nclass Solution:\n    def countSubTrees(self, n: int, edges: List[List[int]], labels: str) -> List[int]:\n        result = [1] * n\n        graph = defaultdict(list)\n        visited = set()\n\n        for s, d in edges:\n            graph[s].append(d)\n            graph[d].append(s)\n\n        def traverse(node):\n            if node in visited:\n                return {}\n\n            visited.add(node)\n\n            if not graph[node]:\n                return {labels[node]: 1}\n\n            info = defaultdict(int)\n            for v in graph[node]:\n                for L, F in traverse(v).items():\n                    info[L] += F\n\n            info[labels[node]] += 1\n            result[node] = info[labels[node]]\n            return info\n\n        traverse(0)\n        return result\n\n"},"DataStructures/Graphs/TopologySort.html":{"url":"DataStructures/Graphs/TopologySort.html","title":"Topology Sort","keywords":"","body":"Topology Sort\n \nhttps://leetcode.com/problems/course-schedule-ii/\nfrom collections import deque, defaultdict\n\nclass Solution:\n    def findOrder(self, numCourses: int, prerequisites: List[List[int]]) -> List[int]:\n        graph = defaultdict(set)\n        incoming = defaultdict(set)\n        queue = deque()\n        u_set = set(range(0, numCourses))\n        topo = []\n\n        for c, p in prerequisites:\n            graph[c].add(p)\n            incoming[p].add(c)\n\n            if p in u_set:\n                u_set.remove(p)\n\n        for node in u_set:\n            queue.append(node)\n\n        while queue:\n            node = queue.popleft()\n            topo.append(node)\n\n            for nei in graph[node]:\n                incoming[nei].remove(node)\n\n                if not incoming[nei]:\n                    queue.append(nei)\n\n        return topo[::-1] if len(topo) == numCourses else []\n\nhttps://leetcode.com/problems/course-schedule-iv/\nfrom collections import defaultdict, deque\n\nclass Solution:\n    def checkIfPrerequisite(self, n: int, prerequisites: List[List[int]], queries: List[List[int]]) -> List[bool]:\n        graph = defaultdict(list)\n        incoming = defaultdict(set)\n        pre = defaultdict(set)\n\n        starts = set(range(0, n))\n        queue = deque()\n\n        for p, c in prerequisites:\n            graph[c].append(p)\n            incoming[p].add(c)\n\n            if p in starts:\n                starts.remove(p)\n\n        for s in starts:\n            queue.append(s)\n\n        while queue:\n            c = queue.popleft()\n\n            for n in graph[c]:\n                incoming[n].remove(c)\n                pre[n] = pre[n].union(pre[c].union(set([c])))\n\n                if not incoming[n]:\n                    queue.append(n)\n\n        return [c in pre[p] for p, c in queries]\n\n"},"DataStructures/Heap.html":{"url":"DataStructures/Heap.html","title":"Heap","keywords":"","body":"Heap questions:\nMin/Max k based on some metric\nIf you want to find min k, use max_heap, otherwise min_heap since you want to compare the incoming element with the top of heap \nOnly use the heap size of required number of elems: k \nIf it overflows, pop. Be careful about the signs in case of max_heap \nhttps://leetcode.com/problems/course-schedule-iii/ \nAmazing question. We push if a new course from courses (sorted by end times) if able to be pushed. \nIf not, our aim to make selections as compact as possible; so we displace the one with max duration (heap comes into picture here) and update T\nimport heapq\n\nclass Solution:\n    def scheduleCourse(self, courses: List[List[int]]) -> int:\n        T = 0\n        heap = []\n        s_courses = sorted(courses, key=lambda x: (x[1], x[0]))\n\n        for duration, last_day in s_courses:\n            t = T + duration\n\n            if t  duration:\n                    _d = -heapq.heappop(heap)\n                    heapq.heappush(heap, -duration)\n                    T -= (_d - duration)\n\n        return len(heap)\n\nhttps://leetcode.com/problems/closest-binary-search-tree-value-ii/\nif the length of heap == k, pop if the top of max_heap is greater than key\nimport heapq\n\nclass Solution:\n    def closestKValues(self, root: TreeNode, target: float, k: int) -> List[int]:\n        heap = []\n\n        def inorder(node):\n            if not node:\n                return\n\n            inorder(node.left)\n\n            if len(heap) == k and -heap[0][0] > abs(node.val - target):\n                heapq.heappop(heap)\n\n            if len(heap) \nhttps://leetcode.com/problems/furthest-building-you-can-reach/ \nGreat question! We allocate most diff b/w heights to ladders, obviously! (need heap to maintain that). \nWe only substract bricks only if heap is overflowing.\nimport heapq\n\nclass Solution:\n    def furthestBuilding(self, heights: List[int], bricks: int, ladders: int) -> int:\n        total = 0\n        heap, TOP = [], 0\n        bricks_left = bricks\n\n        for i, h in enumerate(heights[1:], start=1):\n            diff = (h - heights[i-1])\n            if diff  ladders:\n                bricks_left -= heapq.heappop(heap)\n\n            if bricks_left \nhttps://leetcode.com/problems/the-k-weakest-rows-in-a-matrix/ \nimport heapq\n\nclass Solution:\n    def kWeakestRows(self, mat: List[List[int]], k: int) -> List[int]:\n        heap = []\n        result = []\n\n        for index, row in enumerate(mat):\n            soldiers = 0\n            for p in row:\n                if p == 0:\n                    break\n                soldiers += 1\n\n            if len(heap) == k and soldiers >= -heap[0][0]:\n                continue\n\n            heapq.heappush(heap, (-soldiers, -index))\n\n            if len(heap) == k + 1:\n                heapq.heappop(heap)\n\n        while heap:\n            s, i = heapq.heappop(heap)\n            result = [-i] + result\n\n        return result\n\nhttps://leetcode.com/problems/k-closest-points-to-origin/ \nMaintain a heap of size K\nimport heapq\n\nclass Solution:\n    def kClosest(self, points: List[List[int]], K: int) -> List[List[int]]:\n        heap, result = [], []\n        DISTANCE = 0\n\n        for x, y in points:\n            current_distance = (x*x + y*y)\n\n            if len(heap) == K and ((-1) * heap[0][DISTANCE]) \nDjikstra\nhttps://leetcode.com/problems/path-with-minimum-effort/ \nDjikstra. Note where we're checking the existance in visited set. \nWe'll always traverse min heuristic path because heap. (pay attention to the heappush call)\nimport heapq\n\nclass Solution:\n    def minimumEffortPath(self, heights: List[List[int]]) -> int:\n        X, Y = len(heights), len(heights[0])\n        heap = [(0, 0, 0)] # d, x, y\n        visited = set()\n\n        while heap:\n            d, x, y = heapq.heappop(heap)\n\n            if (x, y) in visited:\n                continue\n\n            if x == (X-1) and y == (Y-1):\n                return d\n\n            visited.add((x, y))\n\n            for _x, _y in [(x+1,y),(x-1,y),(x,y+1),(x,y-1)]:\n                if not (0 \nhttps://leetcode.com/problems/merge-k-sorted-lists/\nimport heapq\n\nclass Solution:\n    def mergeKLists(self, lists: List[ListNode]) -> ListNode:\n        head = HEAD = None\n        heap, iterator = [], len(lists) + 1\n\n        for i, l in enumerate(lists):\n            if l:\n                heapq.heappush(heap, (l.val, i, l))\n\n        while heap:\n            min_val, _, l = heapq.heappop(heap)\n\n            if HEAD is None:\n                HEAD = ListNode(min_val)\n                head = HEAD\n            else:\n                HEAD.next = ListNode(min_val)\n                HEAD = HEAD.next\n\n            if l.next:\n                l = l.next\n                heapq.heappush(heap, (l.val, iterator, l))\n                iterator += 1\n\n        return head\n\nhttps://leetcode.com/problems/cheapest-flights-within-k-stops/\nimport heapq\n\nclass Solution:\n    def findCheapestPrice(self, n: int, flights: List[List[int]], src: int, dst: int, K: int) -> int:\n        heap = []\n        store = {}\n\n        for s, e, d in flights:\n            store[s] = store.get(s, []) + [(e, d)]\n\n        heapq.heappush(heap, (0, 0, src))\n\n        while heap:\n            price, hops, city = heapq.heappop(heap)\n\n            # we don't need `visited` array because of this constaint\n            if hops > (K+1):\n                continue\n\n            if city == dst:\n                return price\n\n            for d, cost in store.get(city, []):\n                heapq.heappush(heap, (price + cost, hops + 1, d))\n\n        return -1\n\nhttps://leetcode.com/problems/single-threaded-cpu/ \nExcellent question. Selecting min-heap is trivial but that gotcha here is that we need to sort them in an alternate array as well, injecting original indices into respective tasks. Based on T, push only that qualify into the heap. If the heap is empty and T is smaller than task_idx (the runner), prepare it for the next loop by assigning its starting value to T\nimport heapq\n\nclass Solution:\n    def getOrder(self, tasks: List[List[int]]) -> List[int]:\n        tasks_sorted = sorted([[task[0], task[1], index] for index, task in enumerate(tasks)])\n        task_idx = 0\n        heap, result = [], []\n\n        T = tasks_sorted[0][0]\n\n        while len(result) = tasks_sorted[task_idx][0]:\n                arrival, processing, index = tasks_sorted[task_idx]\n                heapq.heappush(heap, (processing, index))\n                task_idx += 1\n\n            if heap:\n                processing, index = heapq.heappop(heap)\n                result.append(index)\n                T += processing\n            elif not heap and task_idx \n"},"DataStructures/Grid.html":{"url":"DataStructures/Grid.html","title":"Grid","keywords":"","body":"Grid questions\nRight-down problems are generally DP \nThey follow overlapping substructures by default and optimal substructure trivially\nDFS:\n\nhttps://leetcode.com/problems/path-with-maximum-gold/\nhttps://leetcode.com/problems/longest-increasing-path-in-a-matrix/\nhttps://leetcode.com/problems/max-area-of-island/\n\nThings that need to be taken care of:\n\ndirections\nvisited set and its implementation: sets or grid modification? Boundaries and visited check\nCache: depends on the problem e.g. checkout longest increasing path in a matrix question above\nsometimes cache can be used for visited tracking\n\n\n\nLogic construction: \nKeep calm and think thoroughly. \nWhat's the sequence at each step? Do we start at an imaginary position before (0, 0) or on (0, 0)? \nWe the solution can start on any of the indices in the grid (ie we are running 2 loops: on X and Y), we do following:\ninclude current node -> dfs on children satisfying certain criteria -> return value to reflect the current node\n\nDFS should directly return the answer.\nBFS:\n\nRotten oranges \nTip: \nIn such problems, implied visited through input modification is faster than visited set and step through queue element is faster than looping over queue size \neg. https://leetcode.com/problems/shortest-path-in-binary-matrix/ \n\nhttps://leetcode.com/problems/shortest-path-in-a-grid-with-obstacles-elimination/\nfrom collections import deque\n\nclass Solution:\n    def shortestPath(self, grid: List[List[int]], k: int) -> int:\n        queue = deque()\n        k_left = k if grid[0][0] == 0 else k - 1\n        X, Y = len(grid), len(grid[0])\n\n        cache = {}\n        queue.append((0, 0, k_left))\n\n        steps = 0\n        while queue:\n            size = len(queue)\n\n            for _ in range(size):\n                x, y, k_left = queue.popleft()\n\n                if k_left = k_left:\n                    continue\n                cache[(x, y)] = (steps, k_left)\n\n                # directions\n                directions = [(x+1,y), (x-1,y), (x,y+1), (x,y-1)]\n                for _x, _y in directions:\n                    if not (0 = 0:\n                        queue.append((_x, _y, k_left - grid[_x][_y]))\n\n            steps += 1\n\n        return -1\n\nhttps://leetcode.com/problems/number-of-islands/\nclass Solution:\n    def numIslands(self, grid: List[List[str]]) -> int:\n        islands = 0\n        X, Y = len(grid), len(grid[0])\n\n        def traverse(x, y):\n            grid[x][y] = \"0\"\n\n            directions = [(x+1,y), (x,y+1), (x-1,y), (x,y-1)]\n            for x_dir, y_dir in directions:\n                if not (0 \nhttps://leetcode.com/problems/shortest-bridge/ \nPaint first island negative and then perform BFS to find the first positive integer \\\nAs always, one check before pushing onto the queue and one check after popleft-ing\nfrom collections import deque\n\nclass Solution:\n    def shortestBridge(self, A: List[List[int]]) -> int:\n        X = len(A)\n        Y = len(A[0])\n        self.result = X + Y\n        g_queue = deque()\n\n        def paint_island(x, y):\n            queue = deque()\n            queue.append((x, y))\n\n            while queue:\n                x, y = queue.popleft()\n\n                if A[x][y]  0:\n                            queue.append((_x, _y))\n\n\n        def build_bridge():\n            while g_queue:\n                x, y, converted = g_queue.popleft()\n\n                if A[x][y] == 2:\n                    continue\n\n                if A[x][y] == 0:\n                    A[x][y] = 2\n\n                directions = [(x-1,y), (x,y-1), (x+1,y), (x,y+1)]\n                for _x, _y in directions:\n                    if 0 \n"},"Algorithms/":{"url":"Algorithms/","title":"Algorithms","keywords":"","body":"Algorithms\nTo Do:\nRuntimes: why heap is O(n)?\nAddition questions-> strings, lists, linked lists\nFactors/divisors questions\nstocks\nBitwise\nPalindrome questions, Linked lists\nMemoization to DP jump\nString questions: Alien dictionary\nTrie: https://leetcode.com/discuss/interview-question/643158/google-phone-faulty-keyboard\nhttps://leetcode.com/discuss/interview-question/281470/\nKadane questions* \nMay weekly contest \nK repetition maximum sum \nMatrix traversal questions \nhttps://leetcode.com/contest/weekly-contest-180/problems/lucky-numbers-in-a-matrix \nUnderstand zip function \nspiral order\nhttps://leetcode.com/explore/challenge/card/may-leetcoding-challenge/535/week-2-may-8th-may-14th/3328/ \nDesign input class (Trees, LL especially) or think about inputs (arrays, graphs, etc) \nHabit of dict.get(key, default)\nStreaming data questions: https://www.geeksforgeeks.org/tag/array-stream/\n"},"Algorithms/TrickySorting.html":{"url":"Algorithms/TrickySorting.html","title":"Tricky Sorting","keywords":"","body":"Tricky Sorting\npython sorted function can be fed a custom comparator. \nComing up with a comparator is the most important part.\nfunctools.cmp_to_key(comparator) can be used as a key to make this work.\nhttps://leetcode.com/problems/largest-number/\nimport functools\n\nclass Solution:\n    def largestNumber(self, nums: List[int]) -> str:\n        comparator = lambda x, y: 1 if x+y > y+x else -1 if x+y \n"},"Algorithms/DFSandBFS.html":{"url":"Algorithms/DFSandBFS.html","title":"DFS and BFS","keywords":"","body":"DFS and BFS\nFew notes:\n\nUse BFS if there's a need to go somewhere optimally. \neg. Minimum steps required to reach from A to B type questions, jump game questions\n\n\nUse DFS for exhaustive search in the grid where you have search everywhere, not optimal condition \neg. Find if you can create word X from the grid \n\n\nDo not forget the visited grid\n\nGeneral solutions:\nBFS\n\ncollections.deque is extremely useful: use apend and popleft for queue operations\nRun operations as long as the queue is not empty\nvisited array is an important part of the solution to avoid repetition\n\nExcellent questions:\n\nhttps://leetcode.com/problems/jump-game/ \nDFS is a little bit slower but gets the job done \nBeing greedy from the end to start works well \nhttps://leetcode.com/problems/jump-game-ii/ \nWater and jug problem\nhttps://leetcode.com/problems/water-and-jug-problem\n```py\nfrom collections import deque\n\nclass Solution:\n    def canMeasureWater(self, x: int, y: int, z: int) -> bool:\n        queue = deque([(0, 0)])\n        seen = set()\n    if (x + y) https://leetcode.com/problems/open-the-lock/ \nRuntime: `O(N^2 * A^N + D)` \n1. N = length of lock combination, and substring operations on that string = N * N\n2. A = value each wheen can take. Here, A == 10. There are A * N combinations possible\n3. `deadends_set` creation\n\n```py\nfrom collections import deque\n\nclass Solution:\n    def openLock(self, deadends: List[str], target: str) -> int:\n        deadends_set = set(deadends)\n        INIT_STATE, moves = '0000', 0\n        visited = set()\n\n        if INIT_STATE in deadends_set:\n            return -1\n        elif INIT_STATE == target:\n            return 0\n\n        queue = deque()\n        queue.append((INIT_STATE, 0))\n\n        while queue:\n            state, moves = queue.popleft()\n\n            for i in range(0, len(state)):\n                for direction in [1, -1]:\n                    wheel = int(state[i])\n                    next_state = state[:i] + str((wheel + direction) % 10) + state[i+1:]\n\n                    if next_state == target:\n                        return moves + 1\n\n                    if next_state not in deadends_set and next_state not in visited:\n                        visited.add(next_state)\n                        queue.append((next_state, moves+1))\n\n        return -1\nDFS\n\nDo not forget the visited array (you'll end up with stack limit exceeded error otherwise)\n\nhttps://leetcode.com/problems/word-search\nclass Solution:\n    def exist(self, board: List[List[str]], word: str) -> bool:\n        X = len(board)\n        Y = len(board[0])\n\n        visited = [[False for y in range(0, Y))] for x in range(X)]\n\n        def dfs(letter, x, y) -> bool:\n        # base case should be first\n            if letter == len(word):\n                return True\n\n            if x >= X or x = Y or y \nhttps://leetcode.com/problems/pacific-atlantic-water-flow/ \nNice question, we traverse reverse; from the ends to BFS inwards. >= to proceed. \nWe send init queues to the traverse function: this can get messy if not careful\nfrom collections import deque\n\nclass Solution:\n    def pacificAtlantic(self, heights: List[List[int]]) -> List[List[int]]:\n        X = len(heights)\n        Y = len(heights[0])\n\n        def traverse(queue):\n            visited = set()\n\n            while queue:\n                x, y = queue.popleft()\n\n                if (x, y) in visited:\n                    continue\n\n                visited.add((x, y))\n\n                _dir = [(x+1, y), (x-1, y), (x, y+1), (x, y-1)]\n                for _x, _y in _dir:\n                    if 0 = heights[x][y]:\n                            if (_x, _y) not in visited:\n                                queue.append((_x, _y))\n\n            return visited\n\n        pacific_queue = deque()\n        atlantic_queue = deque()\n\n        for x in range(X):\n            pacific_queue.append((x, 0))\n            atlantic_queue.append((x, Y-1))\n\n        for y in range(Y):\n            pacific_queue.append((0, y))\n            atlantic_queue.append((X-1, y))\n\n        pacific = traverse(pacific_queue)\n        atlantic = traverse(atlantic_queue)\n\n        return [[x, y] for x, y in pacific if (x, y) in atlantic]\n\n"},"Algorithms/Combinatorics.html":{"url":"Algorithms/Combinatorics.html","title":"Combinatorics","keywords":"","body":"Combinatorics\nSubsets\nReference: CC Cheat sheet book \nNote the number of recursive calls made\nCombinations: select r out of n (nCr)\n\nRecursion base case change (==r)\nParams of recursion: s: number of selected so far; k: array item index to be processed in that call\nSimilar to normal combinations\n\nclass T:\n    def normalSubset(self, arr: list, r: int) -> list:\n        nCr = []\n        bucket = []\n        n = len(arr)\n\n        def helperNCR(s: int, k: int) -> None:\n            if(s == r):\n                nCr.append(bucket[:])\n                return\n\n            if(s > r or k == n):\n                return\n\n            helperNCR(s, k + 1)\n            bucket.append(arr[k])\n            helperNCR(s + 1, k + 1)\n            bucket.pop()\n\n        helperNCR(0, 0)\n        return nCr\n\nPermutations\nRecursive calls for every element in the loop \nNo need to add a ‘reject’ scenario \nAccept, make changes and revert after going a level deep \nFilter right after the loop using a helper array used for tracking \nhttps://leetcode.com/problems/permutations/\nclass Solution:\n    def permute(self, nums: List[int]) -> List[List[int]]:\n        if not nums:\n            return []\n\n        result = []\n        visited = [False for i in range(0, len(nums))]\n\n        def backtrack(bucket):\n            if len(bucket) == len(nums):\n                result.append(bucket[:])\n                return \n\n            for j in range(0, len(nums)):\n                if visited[j]:\n                    continue\n\n                visited[j] = True\n                backtrack(bucket + [nums[j]])\n                visited[j] = False\n\n\n        backtrack([])\n        return result\n\nhttps://leetcode.com/problems/largest-time-for-given-digits/\nclass Solution:\n    def largestTimeFromDigits(self, A: List[int]) -> str:\n        D = sorted(A, reverse=True)\n        included = [False] * 4\n        bucket = \"\"\n        self.T = \"\"\n\n        def permute(bucket):\n            if self.T:\n                return\n\n            n = len(bucket)\n            if n == 1 and int(bucket) > 2:\n                return\n\n            if n == 2 and int(bucket) > 23:\n                return\n\n            if n == 3 and int(bucket[2]) > 5:\n                return\n\n            if n == 4 and int(bucket[2: 4]) > 59:\n                return \n\n            if n == 4:\n                self.T = bucket[0: 2] + ':' + bucket[2: 4]\n\n            for i in range(0, 4):\n                if included[i]:\n                    continue\n\n                included[i] = True\n                permute(bucket + str(D[i]))\n                included[i] = False\n\n        permute(bucket)\n        return self.T\n\nAdditional questions:\nhttps://leetcode.com/problems/combination-sum/discuss/16510/Python-dfs-solution.\nTo allow repetition, go to the same node after select. \nself.recurse(k, domain)\nUnique permutations\nhttps://leetcode.com/problems/permutations-ii/\nfrom collections import Counter\n\nclass Solution:\n    def permuteUnique(self, nums: List[int]) -> List[List[int]]:\n        counter = Counter(nums)\n        result = []\n\n        def backtrack(bucket, counter):\n            if len(bucket) == len(nums):\n                result.append(bucket[:])\n                return\n\n            for num in counter:\n                if not counter[num]:\n                    continue\n\n                counter[num] -= 1\n                backtrack(bucket + [num], counter)\n                counter[num] += 1\n\n        backtrack([], counter)\n        return result\n\n"},"Algorithms/Backtracking.html":{"url":"Algorithms/Backtracking.html","title":"Backtracking and Complete Search","keywords":"","body":"Backtracking and Complete Search\nBasic questions: \nTwo choices:\n\nDon't choose the element: Just make a recursive call for the next element\nChoose the element and stay on the same if repeatition is allowed otherwise, go ahead. \nhttps://leetcode.com/problems/combination-sum/\nclass Solution:\n  def combinationSum(self, candidates: List[int], target: int) -> List[List[int]]:\n      result = []\n\n      def backtrack(i, bucket, current):\n          if current == target:\n              result.append(bucket[:])\n              return \n\n          if current > target or i == len(candidates):\n              return\n\n          backtrack(i + 1, bucket, current)\n          backtrack(i, bucket + [candidates[i]], current + candidates[i])\n\n      backtrack(0, [], 0)\n      return result\n\n\n\nExhaustive search for an answer:\nCheck every possible option and see if a solution exists: (very similar to permutation problems) \nhttps://leetcode.com/problems/jump-game \nAccept one of the options at each step \nEmptying the bucket is not necessary \npublic class Solution {\n    public boolean canJumpFromPosition(int position, int[] nums) {\n        if (position == nums.length - 1) {\n            return true;\n        }\n\n        int furthestJump = Math.min(position + nums[position], nums.length - 1);\n        for (int nextPosition = position + 1; nextPosition \nGrid DFS\nSolution of https://leetcode.com/problems/path-with-maximum-gold/ :\ndef dfs(self, i: int, j: int, sum: int, seen: set) -> int:\n    # constraints\n    if(i = m or j = n or not grid[i][j] or (i, j) in seen):\n        return sum\n    # add to the 'visited' set\n    seen.add((i, j))\n    # update current target\n    sum += grid[i][j]\n    # set maximum target\n    maximumSum = 0\n\n    # directions to move in\n    for x, y in ((i, j + 1), (i , j - 1), (i + 1, j), (i - 1, j)):\n    # The actual recursion step\n        maximumSum = max(self.dfs(x, y, sum, seen), maximumSum)\n    # remove from the 'visited' set after recursion \n    seen.discard((i, j))\n    return maximumSum\n\ndef getMaximumGold(self, grid: List[List[int]]) -> int:\n    m, n = len(grid), len(grid[0])\n    return max(self.dfs(i, j, 0, set()) for j in range(n) for i in range(m))\n\nhttps://leetcode.com/problems/2-keys-keyboard/submissions/ \nReturn types should be taken care of. \n\nBase condition\nLimiting condition if required (Use INTMAX for min recursion, INTMIN for max recursion)\nActual recursion\n\nclass Solution:\n    def _helperCopyPaste(self, n: int, current: int, copied: int) -> int:\n        if(current == n):\n            return 0\n        if(current > n):\n            return 3000\n        return min(2 + self._helperCopyPaste(n, current + current, current),\n                   1 + self._helperCopyPaste(n, current + copied, copied))\n\n    def minSteps(self, n: int) -> int:\n        if(n == 1):\n            return 0\n        return 1 + self._helperCopyPaste(n, 1, 1)\n\nhttps://leetcode.com/problems/number-of-ways-to-wear-different-hats-to-each-other/ \nFor selected param, we can use bits. For memo array, we can use functools.lru_cache \nGenerate parentheses\nKeep a count of open and closed ones. \nSuccess cases: string length 2  n and stack == 0 \nFailure cases: string length 2  n and stack != 0 OR stack  n \nWe just backtrack:\n            backtrack(current + '(', stack + 1)\n            backtrack(current + ')', stack - 1)\n\n"},"Algorithms/BinarySearch.html":{"url":"Algorithms/BinarySearch.html","title":"Binary Search","keywords":"","body":"Binary Search\nGood article: https://leetcode.com/discuss/general-discussion/786126/python-powerful-ultimate-binary-search-template-solved-many-problems\nIterative solutions are quicker than the recursive ones. \nMonotonous function questions are interesting. You have to find the optimal value of a variable between min and max, not an array eg: bouquet and boat capacity questions below\nIt's necessary to understand where BS terminates. This can answer a lot of questions. It's the start when you want to check the appropriate place for a num in sorted array \nDecide what direction we have to go in case of equality. Minimum of such solutions or maximum, etc \nOne of these things should be done: \nRemember: we should never have a case where start  and somehow start or end do not change.\n\n(start  loop) include mid in the next iteration. i.e. use end = mid; DO NOT do the same thing for start. Try to find the element after pivot. [Look at https://leetcode.com/problems/construct-binary-search-tree-from-preorder-traversal/]\n(start  loop) somehow get the equality thing sorted; decrement end or start: LeetCode 154\n\nGood problem set:\n\nhttps://leetcode.com/discuss/general-discussion/691825/binary-search-for-beginners-problems-patterns-sample-solutions\n\nhttps://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array/ \nFind \"insert\" position for the target and then for target+1 \nEdge cases:\n\nTarget insert position does not have target, return [-1, -1]\nTarget insert position is len(nums), return [-1, -1]\n```py\nclass Solution:\n def searchRange(self, nums: List[int], target: int) -> List[int]:\n default = [-1, -1]\n\n if not nums:\n     return default\n\n def binary_start_search(b_target):\n     start = 0\n     end = len(nums)\n\n     while start  b_target:\n             end = mid - 1\n         else:\n             start = mid + 1\n\n     return start\n\n lower = binary_start_search(target)\n if lower==len(nums) or nums[lower] != target:\n     return default\n\n return [lower, binary_start_search(target+1)-1]\n\n\nhttps://leetcode.com/problems/minimum-number-of-days-to-make-m-bouquets\n```py\nclass Solution:\n    def minDays(self, bloomDay: List[int], m: int, k: int) -> int:\n        n = len(bloomDay)\n        start = bloomDay[0]\n        end = bloomDay[0]\n\n        if m * k > n:\n            return -1\n\n        for day in bloomDay:\n            start = min(start, day)\n            end = max(end, day)\n\n        def verify(mid):\n            streak = 0\n            req = m\n\n            for i, day in enumerate(bloomDay):\n                if mid >= day:\n                    streak += 1\n\n                if mid https://leetcode.com/problems/capacity-to-ship-packages-within-d-days/ \nmin = max from array \nmax = sum of array \ncan_ship function is crucial\nclass Solution:\n    def shipWithinDays(self, weights: List[int], D: int) -> int:\n        max_w = float('-inf')\n        sum_w = 0\n        for w in weights:\n            sum_w += w\n            max_w = max(max_w, w)\n\n        if D == 1:\n            return sum_w\n\n        if D == len(weights):\n            return max_w\n\n        def can_ship(w):\n            days_left = D - 1\n            current = weights[0]\n\n            for wg in weights[1:]:\n                if current + wg \nhttps://leetcode.com/problems/sum-of-mutated-array-closest-to-target/\nclass Solution:\n    def findBestValue(self, arr: List[int], target: int) -> int:\n        start = 0\n        end = arr[0]\n        diff = float('inf')\n        result = float('inf')\n\n        for num in arr:\n            end = max(end, num)\n\n        def calc_sum(mid):\n            return sum(i if i = 0:\n                end = mid - 1\n            else:\n                start = mid + 1\n\n        return result\n\nhttps://leetcode.com/problems/construct-binary-search-tree-from-preorder-traversal/\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def bstFromPreorder(self, preorder: List[int]) -> TreeNode:        \n        def find_first_greater(start, end, target):\n            while start  target:\n                    end = mid\n                else:\n                    start = mid+1\n            return start\n\n        def constructTree(start, end):\n            if start > end:\n                return None\n\n            current = TreeNode(preorder[start])\n            fg = find_first_greater(start + 1, end, preorder[start])\n\n            # there is no greater element\n            # this step is important\n            if fg >= len(preorder) or preorder[fg] \nhttps://leetcode.com/problems/find-minimum-in-rotated-sorted-array/\nclass Solution:\n    def findMin(self, nums: List[int]) -> int:\n        start = 0\n        end = len(nums) - 1\n\n        while start  nums[end]:\n                start = mid + 1\n\n        return nums[start]\n\nhttps://leetcode.com/problems/find-minimum-in-rotated-sorted-array-ii/ \nUnlike the (i) problem, in case of equality, we need to reduce the end by 1.\nclass Solution:\n    def findMin(self, nums: List[int]) -> int:\n        start = 0\n        end = len(nums) - 1\n        result = nums[0]\n\n        if nums[start]  nums[end]:\n                start = mid + 1\n            else:\n                end -= 1\n\n        return nums[start]\n\nhttps://leetcode.com/problems/sqrtx/ \nBinary Search will take us to the closest point of the answer\nclass Solution:\n    def mySqrt(self, x: int) -> int:\n        start = 0\n        end = x\n\n        while start  x:\n                end = mid - 1\n            else:\n                start = mid + 1\n\n        return start if start * start \n"},"Algorithms/BucketTrick.html":{"url":"Algorithms/BucketTrick.html","title":"Bucket Trick","keywords":"","body":"Bucket Trick\nThis is inspired from bucket sort. Hashes are good for equalities but not for comparison or range operations, unless we want our search code to run in linear time.\nThis problem illustrates its use perfectly: \nWe use sliding window + buckets here. t buckets to facilitate this. \nIf two numbers are in the same bucket, we have found our solution. If they are in the neightboring buckets, they 'can' a possible solution.\nhttps://leetcode.com/problems/contains-duplicate-iii/\nclass Solution:\n    def containsNearbyAlmostDuplicate(self, nums: List[int], k: int, t: int) -> bool:\n        state = {}\n        w = k + 1\n\n        for i, n in enumerate(nums):\n            b = n // (t + 1)\n\n            # maintain sliding window\n            if i >= w:\n                del state[nums[i - w] // (t + 1)]\n\n            if b in state:\n                return True\n\n            if b - 1 in state and abs(state[b - 1] - n) \n"},"Algorithms/Games.html":{"url":"Algorithms/Games.html","title":"Games","keywords":"","body":"Games\n\nhttps://leetcode.com/problems/nim-game/\nhttps://leetcode.com/problems/divisor-game/\nhttps://leetcode.com/problems/stone-game/\n\nhttps://leetcode.com/problems/nim-game/submissions/ \nThere are winning positions and losing positions. We need to bring current position to a losing one so that the friend starts from the losing position i.e. numbers divisible by 4 in this case \nclass Solution:\n    def canWinNim(self, n: int) -> bool:\n        return not (n % 4 == 0)\n\nhttps://leetcode.com/problems/divisor-game/ \nNeeds double loops \nSame idea as above. We try to bring current situation into a losing one for the opponent. Use DP for that. Calculate one by one. Iterate over 0  in the inner loop for search for divisibles and try to find at least one false value\n"},"Algorithms/Bitwise.html":{"url":"Algorithms/Bitwise.html","title":"Bitwise","keywords":"","body":"Bitwise\nToggle j-th bit: vowel_set ^= (1  \nWe can use this to store all even or imperfect dict of a set (See longest substring vowel question) \nCheck LSB 1 or not: n & 1 \nANDing the two numbers n and n - 1 always flips the least significant 1-bit in n to 0, and keeps all other bits the same.\nhttps://leetcode.com/explore/challenge/card/may-leetcoding-challenge/537/week-4-may-22nd-may-28th/3343/\nclass Solution:\n    def countBits(self, num: int) -> List[int]:\n        bits = [0] * (num + 1)\n\n        bits[0] = 0\n        last_power = 0\n        power_val = 1\n\n        for i in range(1, num + 1):\n            if i == power_val:\n                last_power = power_val\n                power_val *= 2\n                bits[i] = 1\n                continue\n\n            if power_val > i:\n                bits[i] = (bits[i - last_power] + 1)\n\n        return bits\n\nhttps://leetcode.com/problems/find-the-longest-substring-containing-vowels-in-even-counts/\nclass Solution:\n    def findTheLongestSubstring(self, s: str) -> int:\n        P = []\n        imperfect = {64: -1}\n        max_len = 0\n\n        if not len(s):\n            return 0\n\n        vowels = set(['a', 'e', 'i', 'o', 'u'])\n        vowel_set = 1 \nhttps://leetcode.com/problems/power-of-two/\nTrick: If a number is a power of 2, n & (n - 1) == 0\nhttps://leetcode.com/problems/add-binary/ \nKeep a smaller by check and swap. Write a rule function. \nOne small check after the main loop.\nclass Solution:\n    def addBinary(self, a: str, b: str) -> str:\n        extra = 0\n        result = ''\n\n        def add(_a, _b, _c):\n            one = 0\n\n            for n in [_a, _b, _c]:\n                if n == '1':\n                    one += 1\n\n            if one == 3:\n                return '1', '1'\n            if one == 2:\n                return '1', '0'\n            if one == 1:\n                return '0', '1'\n            if one == 0:\n                return '0', '0'\n\n        if len(a) > len(b):\n            a, b = b, a\n\n        i = 0\n        while i = len(a):\n                _a = '0'\n            else:\n                _a = a[len(a) - 1 - i]\n\n            _b = b[len(b) - 1 - i]\n\n            extra, num = add(_a, _b, extra)\n            result = num + result\n\n            i += 1\n\n        if extra == '1':\n            return '1' + result\n\n        return result\n\nhttps://leetcode.com/problems/number-of-1-bits/ \nn &= (n - 1) trick \nANDing the two numbers n and n - 1 always flips the least significant 1-bit in n to 0, and keeps all other bits the same.\n"},"Algorithms/DP/":{"url":"Algorithms/DP/","title":"DP","keywords":"","body":"Dynamic Programming\nhttps://leetcode.com/problems/target-sum/discuss/455024/DP-IS-EASY!-5-Steps-to-Think-Through-DP-Questions.\n1. 0/1 Knapsack\nInclude/exclude the element at hand. \nItem first and dp in reverse\nItem repetition isn't allowed:\nfor item in item:\n    # next reverse step is extremely important to remove repetitions.\n    # visualize it, the first one would only update dp[first_one] since dp[0] = positive\n    # the next one will build up on that, the next on top of that.\n    for small_amount in range(len(dp), num-1, -1):\n        dp[small_amount] = f(dp[small_amount-item])\n\n\nhttps://leetcode.com/problems/partition-equal-subset-sum/\nNOTE: Make sure we don't overflow; inner loop must be capped at (num-1)\nhttps://leetcode.com/problems/ones-and-zeroes/\nSimilar question, but with 2 constraints, ie 2D DP\n\n2. Unbounded Knapsack\ndp[i] = f(dp[i-a] + A . nums[i-a], dp[i-b] + B . nums[i-b], ..., dp[i-z] + C . nums[i-z])\n\nDP first: Loops are flipped wrt 1/0 knapsack\nIf it just depends on last/last two elements, ie a = b = 1 type of situation, we can get use variables instead of the whole array. Example: https://leetcode.com/problems/house-robber-ii/\nDon't over complicate things: len(dp) == (n+1) because we want to reach (n+1)st stair. \n\nhttps://leetcode.com/problems/climbing-stairs/\nhttps://leetcode.com/problems/min-cost-climbing-stairs/\n\nhttps://leetcode.com/problems/house-robber/\n\nhttps://leetcode.com/problems/house-robber-ii/ \nThe trick here is to solve for nums[1:] and nums[:-1] then add\n\nhttps://leetcode.com/problems/delete-and-earn/ \nExtremely similar questions. Forget about next ones, if we take care of previous, everything automatically falls into place. dp[i] gives a solution for array that ends at i\n\nhttps://leetcode.com/problems/coin-change/ \nSimilar questions \nDifference: dp array initialization: dp[0] = nums[0] and dp[1] = max(nums[0:2]) \nNOTE: BFS is a valid solution for coin-change: generate solutions \n\nhttps://leetcode.com/problems/decode-ways/ \nGreat twist. Current character influences dp values of previous ones, not desirable. We traverse backwards. Rest of the things same as climbing-stairs (some checks obv)\n\nhttps://leetcode.com/problems/longest-arithmetic-subsequence-of-given-difference/ \nGood twist; dp has to be a dict instead of array.\n          dp[n] = dp.get(n-difference, 0) + 1\n          max_seq = max(max_seq, dp[n])\n\n\nhttps://leetcode.com/problems/counting-bits/ \nTricky to figure out. \nNumber of bits[i] = number of bits in the previous power of 2 ie. (1) + bits[i - previous power of 2] \ni - previous power of 2 is obviously smaller than the previous power of 2. \nKeep on generating powers of 2.\n\n\ndp[i] = f(dp[1], dp[2], ..., dp[i-1] or dp[i])\n\nHere, rather than going to the previous computation, we traverse previous computations, check where we satisfy the constraint and then update dp[i]\n\nhttps://leetcode.com/problems/divisor-game/: Noted in the Games section \nSecond loop to check whether a number less than i is a divisor\n\nhttps://leetcode.com/problems/perfect-squares/ \nSecond loop to subtract j's square from i and update dp[i] based on dp[i-j] \nNOTE: BFS is also a valid solution\n\nhttps://leetcode.com/problems/maximum-length-of-pair-chain/ \nSimilar idea. Sorting by the first element is the key\n\nhttps://leetcode.com/problems/partition-array-for-maximum-sum/ \nGood explanation: https://leetcode.com/problems/partition-array-for-maximum-sum/discuss/299049/DP-python-commented-code. The only difference being we traverse dp array from i backwards with j. dp[i] stores the solution for array ending with i as usual.\n\nhttps://leetcode.com/problems/best-team-with-no-conflicts/ \nThe important thing to rememeber would be to sort based on age and scores as well. If scores is not kept a secondary parameter, we encounter a situation where, we append (2, 4) to the chain of say, (2, 7) which includes (1, 5)\n\nhttps://leetcode.com/problems/longest-arithmetic-subsequence/ \nLIS with a twist. DP needs to be a dict.\n\n\n        for i in range(len(dp)):\n            for j in range(i):\n                diff = nums[i] - nums[j]\n                dp[i][diff] = max(dp[i].get(diff, 0), dp[j].get(diff, 0) + 1)\n\ndp[i] = f(g(j, dp[j]) * g(i-j, dp[i-j])) j E (1 \n\nhttps://leetcode.com/problems/unique-binary-search-trees/ \ndp[i] = number of trees possible with i nodes. \nNo of trees with root i becomes: trees possible with i nodes for left * with (i-j) nodes for right \nSum for every dp[i]\n\ndp[i] += dp[j-1] * dp[i-j]\n\n\nhttps://leetcode.com/problems/integer-break/ \nGreat question. We can break down number i around j (E 1 . \nNow, we can chose to either: keep j as it is, break down to the best possible product, ie. dp[j], same thing for the other piece, (i-j) \n\ndp[i] = Math.max(dp[i], (Math.max(j, dp[j])) * (Math.max(i - j, dp[i - j])))\n\nExhaustive solution generation\n\nhttps://leetcode.com/problems/knight-dialer/\nhttps://leetcode.com/problems/greatest-sum-divisible-by-three/\nhttps://leetcode.com/problems/out-of-boundary-paths/ \nThis is a great example on how to generate exhaustive solutions in DP grid: https://leetcode.com/problems/out-of-boundary-paths/discuss/102993/Python-Straightforward-with-Explanation \nBFS can solve this but it's extremely slow compared to DP, we'd have to traverse every single path\nhttps://leetcode.com/problems/knight-probability-in-chessboard/\n\nDFS + Memoization\n\nhttps://leetcode.com/problems/target-sum/\nhttps://leetcode.com/problems/2-keys-keyboard/\n\nDivide into at most K groups\n\nhttps://leetcode.com/problems/largest-sum-of-averages/ \nGreat example showcasing DP's power.\n// Let f[i][j]be the largest sum of averages for first i + 1 numbers(A[0], A[1], ... , A[i]) tojgroups. f[i][j]  consists of two parts: first j-1 groups' averages and the last group' s average. Considering the last group, its  last number must be A[i] and its first number can be from A[0] to A[i]. Suppose the last group starts from A[p+1] , we can easily get the average form A[p+1] to A[i]. The sum of first j-1 groups' average is f[p][j-1] which we  have got before. So now we can write the DP equation:\n// f[i][j] = max {f[p][j-1] + (A[p+1] + A[p+2] + ... + A[i]) / (i - p)}, p = 0,1,...,i-1\n\n      for (int j = 2; j \nThis is convertable into 1D DP with bottom-up approach if you understand the concepts well enough\n      P = [0]\n      for num in nums: P.append(P[-1] + num)\n\n      def average(x, y):\n          return (P[x] - P[y]) / (x - y)\n\n      dp = [average(0, i+1) for i in range(0, len(nums))]\n\n      for K in range(k-1):\n          for i in range(len(dp)-1, -1, -1):\n              for j in range(i):\n                  dp[i] = max(dp[i], dp[j] + average(i+1, j+1))\n\n      return dp[-1]\n\n\n\nKadane's algorithm\nStraight-forward; not really dp; plug-in possibilties\n\nhttps://leetcode.com/problems/minimum-cost-for-tickets/\nhttps://leetcode.com/problems/paint-house/ \n      for i, house in enumerate(dp[1:], start=1):\n          dp[i][0] = costs[i][0]  + min(dp[i-1][1], dp[i-1][2])\n          dp[i][1] = costs[i][1]  + min(dp[i-1][0], dp[i-1][2])\n          dp[i][2] = costs[i][2]  + min(dp[i-1][0], dp[i-1][1])\n\n      return min(dp[-1])\n\nSpace optimization:\n\n\n        for i, house in enumerate(costs[1:], start=1):\n            aux_dp = dp[:]\n\n            aux_dp[0] = costs[i][0]  + min(dp[1], dp[2])\n            aux_dp[1] = costs[i][1]  + min(dp[0], dp[2])\n            aux_dp[2] = costs[i][2]  + min(dp[0], dp[1])\n\n            dp = aux_dp\n\n\nhttps://leetcode.com/problems/minimum-swaps-to-make-sequences-increasing/\nhttps://leetcode.com/problems/domino-and-tromino-tiling/\n\nHARD\n\n\nhttps://leetcode.com/problems/count-all-valid-pickup-and-delivery-options/\nhttps://leetcode.com/problems/stone-game-iii/\nhttps://leetcode.com/problems/form-largest-integer-with-digits-that-add-up-to-target/\nhttps://leetcode.com/problems/stone-game-iv/\nhttps://leetcode.com/problems/coin-change-2/\nhttps://leetcode.com/problems/wiggle-subsequence/\nhttps://leetcode.com/problems/filling-bookcase-shelves/\nhttps://leetcode.com/problems/student-attendance-record-ii/\nhttps://leetcode.com/problems/decode-ways-ii/\nhttps://leetcode.com/problems/triples-with-bitwise-and-equal-to-zero/\nhttps://leetcode.com/problems/maximum-profit-in-job-scheduling/\nhttps://leetcode.com/problems/minimum-number-of-taps-to-open-to-water-a-garden/\nhttps://leetcode.com/problems/restore-the-array/\n\nhttps://leetcode.com/problems/profitable-schemes/\n\nhttps://leetcode.com/problems/tallest-billboard/\nhttps://leetcode.com/problems/pizza-with-3n-slices/\nhttps://leetcode.com/problems/reducing-dishes/\n\n\n2.Knapsack \n\nhttps://leetcode.com/problems/shopping-offers/\n\n3.Multi Dimensional DP\n\nhttps://leetcode.com/problems/triangle/\nhttps://leetcode.com/problems/minimum-falling-path-sum/\n\nhttps://leetcode.com/problems/combination-sum-iv/ \nUnbounded knapsack.\n for small_target in range(1, len(dp)):\n          for num in nums:\n              possible_target = small_target - num\n              if possible_target \n\nhttps://leetcode.com/problems/knight-probability-in-chessboard/\n\nhttps://leetcode.com/problems/minimum-number-of-refueling-stops/\n\nhttps://leetcode.com/problems/champagne-tower/\n\nhttps://leetcode.com/problems/video-stitching/\nhttps://leetcode.com/problems/stone-game-ii/\nhttps://leetcode.com/problems/number-of-dice-rolls-with-target-sum/\nhttps://leetcode.com/problems/dice-roll-simulation/\nhttps://leetcode.com/problems/number-of-sets-of-k-non-overlapping-line-segments/\nhttps://leetcode.com/problems/best-time-to-buy-and-sell-stock-iv/\nhttps://leetcode.com/problems/create-maximum-number/\nhttps://leetcode.com/problems/frog-jump/\nhttps://leetcode.com/problems/split-array-largest-sum/\nhttps://leetcode.com/problems/freedom-trail/\nhttps://leetcode.com/problems/number-of-music-playlists/\nhttps://leetcode.com/problems/count-vowels-permutation/\nhttps://leetcode.com/problems/minimum-falling-path-sum-ii/\nhttps://leetcode.com/problems/minimum-distance-to-type-a-word-using-two-fingers/\nhttps://leetcode.com/problems/minimum-difficulty-of-a-job-schedule/\nhttps://leetcode.com/problems/number-of-ways-to-paint-n-3-grid/\nhttps://leetcode.com/problems/build-array-where-you-can-find-the-maximum-exactly-k-comparisons/\nhttps://leetcode.com/problems/number-of-ways-of-cutting-a-pizza/\nhttps://leetcode.com/problems/paint-house-iii/\nhttps://leetcode.com/problems/count-all-possible-routes/\n\n4.Interval DP \nhttps://leetcode.com/problems/guess-number-higher-or-lower-ii/\nhttps://leetcode.com/problems/arithmetic-slices/\nhttps://leetcode.com/problems/predict-the-winner/\nhttps://leetcode.com/problems/palindromic-substrings/\nhttps://leetcode.com/problems/stone-game/\nhttps://leetcode.com/problems/minimum-score-triangulation-of-polygon/\nhttps://leetcode.com/problems/last-stone-weight-ii/\nhttps://leetcode.com/problems/minimum-cost-tree-from-leaf-values/\nhttps://leetcode.com/problems/stone-game-vii/\nhttps://leetcode.com/problems/burst-balloons/\nhttps://leetcode.com/problems/remove-boxes/\nhttps://leetcode.com/problems/strange-printer/\nhttps://leetcode.com/problems/valid-permutations-for-di-sequence/\nhttps://leetcode.com/problems/minimum-cost-to-merge-stones/\nhttps://leetcode.com/problems/allocate-mailboxes/\nhttps://leetcode.com/problems/minimum-cost-to-cut-a-stick/\nhttps://leetcode.com/problems/stone-game-v/\n5.bit DP\nhttps://leetcode.com/problems/can-i-win/\nhttps://leetcode.com/problems/partition-to-k-equal-sum-subsets/\nhttps://leetcode.com/problems/stickers-to-spell-word/\nhttps://leetcode.com/problems/shortest-path-visiting-all-nodes/\nhttps://leetcode.com/problems/smallest-sufficient-team/\nhttps://leetcode.com/problems/maximum-students-taking-exam/\nhttps://leetcode.com/problems/number-of-ways-to-wear-different-hats-to-each-other/\nhttps://leetcode.com/problems/minimum-cost-to-connect-two-groups-of-points/\nhttps://leetcode.com/problems/maximum-number-of-achievable-transfer-requests/\nhttps://leetcode.com/problems/distribute-repeating-integers/\nhttps://leetcode.com/problems/maximize-grid-happiness/\nhttps://leetcode.com/problems/find-minimum-time-to-finish-all-jobs/\n6.Digit DP\nhttps://leetcode.com/problems/non-negative-integers-without-consecutive-ones/\nhttps://leetcode.com/problems/numbers-at-most-n-given-digit-set/\nhttps://leetcode.com/problems/numbers-with-repeated-digits/\n7.DP on Trees\nhttps://leetcode.com/problems/unique-binary-search-trees-ii/\nhttps://leetcode.com/problems/house-robber-iii/\nhttps://leetcode.com/problems/maximum-product-of-splitted-binary-tree/\nhttps://leetcode.com/problems/linked-list-in-binary-tree/\nhttps://leetcode.com/problems/longest-zigzag-path-in-a-binary-tree/\nhttps://leetcode.com/problems/binary-tree-cameras/\nhttps://leetcode.com/problems/maximum-sum-bst-in-binary-tree/\nhttps://leetcode.com/problems/number-of-ways-to-reorder-array-to-get-same-bst/\n8.String DP \nhttps://leetcode.com/problems/is-subsequence/\nhttps://leetcode.com/problems/palindrome-partitioning/\nhttps://leetcode.com/problems/palindrome-partitioning-ii/\nhttps://leetcode.com/problems/word-break/\nhttps://leetcode.com/problems/unique-substrings-in-wraparound-string/\nhttps://leetcode.com/problems/minimum-ascii-delete-sum-for-two-strings/\nhttps://leetcode.com/problems/longest-string-chain/\nhttps://leetcode.com/problems/longest-happy-string/\nhttps://leetcode.com/problems/longest-valid-parentheses/\nhttps://leetcode.com/problems/distinct-subsequences/\nhttps://leetcode.com/problems/word-break-ii/\nhttps://leetcode.com/problems/count-the-repetitions/\nhttps://leetcode.com/problems/concatenated-words/\nhttps://leetcode.com/problems/count-different-palindromic-subsequences/\nhttps://leetcode.com/problems/distinct-subsequences-ii/\nhttps://leetcode.com/problems/longest-chunked-palindrome-decomposition/\nhttps://leetcode.com/problems/palindrome-partitioning-iii/\nhttps://leetcode.com/problems/find-all-good-strings/\nhttps://leetcode.com/problems/string-compression-ii/\nhttps://leetcode.com/problems/number-of-ways-to-form-a-target-string-given-a-dictionary/\n9.Probability DP\nhttps://leetcode.com/problems/soup-servings/\nhttps://leetcode.com/problems/new-21-game/\nhttps://leetcode.com/problems/airplane-seat-assignment-probability/\n10.Classic DPs\nA.Kadane's Algorithm\nhttps://leetcode.com/problems/maximum-subarray/\nhttps://leetcode.com/problems/maximum-product-subarray/\nhttps://leetcode.com/problems/bitwise-ors-of-subarrays/\nhttps://leetcode.com/problems/longest-turbulent-subarray/\nhttps://leetcode.com/problems/maximum-subarray-sum-with-one-deletion/\nhttps://leetcode.com/problems/k-concatenation-maximum-sum/\nhttps://leetcode.com/problems/largest-divisible-subset/\nhttps://leetcode.com/problems/length-of-longest-fibonacci-subsequence/\nhttps://leetcode.com/problems/best-time-to-buy-and-sell-stock/\nhttps://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/\nhttps://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/\nhttps://leetcode.com/problems/best-time-to-buy-and-sell-stock-iii/\nB.LCS\nhttps://leetcode.com/problems/longest-palindromic-substring/\nhttps://leetcode.com/problems/longest-palindromic-subsequence/\nhttps://leetcode.com/problems/maximum-length-of-repeated-subarray/\nhttps://leetcode.com/problems/longest-common-subsequence/\nhttps://leetcode.com/problems/regular-expression-matching/\nhttps://leetcode.com/problems/wildcard-matching/\nhttps://leetcode.com/problems/edit-distance/\nhttps://leetcode.com/problems/interleaving-string/\nhttps://leetcode.com/problems/shortest-common-supersequence/\nhttps://leetcode.com/problems/minimum-insertion-steps-to-make-a-string-palindrome/\nhttps://leetcode.com/problems/max-dot-product-of-two-subsequences/\nC.LIS\nhttps://leetcode.com/problems/longest-increasing-subsequence/\nhttps://leetcode.com/problems/number-of-longest-increasing-subsequence/\nhttps://leetcode.com/problems/russian-doll-envelopes/\nhttps://leetcode.com/problems/delete-columns-to-make-sorted-iii/\nhttps://leetcode.com/problems/minimum-number-of-removals-to-make-mountain-array/\nhttps://leetcode.com/problems/maximum-height-by-stacking-cuboids/\nhttps://leetcode.com/problems/make-array-strictly-increasing/\nD.2D Grid Traversal\nhttps://leetcode.com/problems/unique-paths/\nhttps://leetcode.com/problems/unique-paths-ii/\nhttps://leetcode.com/problems/minimum-path-sum/\nhttps://leetcode.com/problems/maximum-non-negative-product-in-a-matrix/\nhttps://leetcode.com/problems/where-will-the-ball-fall/\nhttps://leetcode.com/problems/dungeon-game/\nhttps://leetcode.com/problems/cherry-pickup/\nhttps://leetcode.com/problems/number-of-paths-with-max-score/\nhttps://leetcode.com/problems/cherry-pickup-ii/\nhttps://leetcode.com/problems/kth-smallest-instructions/\nE.Cumulative Sum\nhttps://leetcode.com/problems/range-sum-query-immutable/\nhttps://leetcode.com/problems/maximal-square/\nhttps://leetcode.com/problems/range-sum-query-2d-immutable/\nhttps://leetcode.com/problems/largest-plus-sign/\nhttps://leetcode.com/problems/push-dominoes/\nhttps://leetcode.com/problems/largest-1-bordered-square/\nhttps://leetcode.com/problems/count-square-submatrices-with-all-ones/\nhttps://leetcode.com/problems/matrix-block-sum/\nhttps://leetcode.com/problems/maximum-points-you-can-obtain-from-cards/\nhttps://leetcode.com/problems/count-submatrices-with-all-ones/\nhttps://leetcode.com/problems/ways-to-make-a-fair-array/\nhttps://leetcode.com/problems/maximal-rectangle/\nhttps://leetcode.com/problems/max-sum-of-rectangle-no-larger-than-k/\nhttps://leetcode.com/problems/super-washing-machines/\nhttps://leetcode.com/problems/maximum-sum-of-3-non-overlapping-subarrays/\nhttps://leetcode.com/problems/number-of-submatrices-that-sum-to-target/\nhttps://leetcode.com/problems/get-the-maximum-score/\nF.Hashmap (SubArray)\nhttps://leetcode.com/problems/continuous-subarray-sum/\nhttps://leetcode.com/problems/find-two-non-overlapping-sub-arrays-each-with-target-sum/\nhttps://leetcode.com/problems/maximum-number-of-non-overlapping-subarrays-with-sum-equals-target/\n11.DP + Alpha (Tricks/DS)\nhttps://leetcode.com/problems/arithmetic-slices-ii-subsequence/\nhttps://leetcode.com/problems/odd-even-jump/\nhttps://leetcode.com/problems/constrained-subsequence-sum/\nhttps://leetcode.com/problems/delivering-boxes-from-storage-to-ports/\n12.Insertion DP\nhttps://leetcode.com/problems/k-inverse-pairs-array/\n13.Graph DP\nhttps://leetcode.com/problems/cheapest-flights-within-k-stops/\nhttps://leetcode.com/problems/find-the-shortest-superstring/\n14.Memoization\nhttps://leetcode.com/problems/minimum-jumps-to-reach-home/\nhttps://leetcode.com/problems/scramble-string/\nhttps://leetcode.com/problems/tiling-a-rectangle-with-the-fewest-squares/\nhttps://leetcode.com/problems/number-of-ways-to-stay-in-the-same-place-after-some-steps/\nhttps://leetcode.com/problems/jump-game-v/\nhttps://leetcode.com/problems/minimum-number-of-days-to-eat-n-oranges/\n15.Binary Lifting\nhttps://leetcode.com/problems/kth-ancestor-of-a-tree-node/\n16.Math\nhttps://leetcode.com/problems/ugly-number-ii/\nhttps://leetcode.com/problems/count-sorted-vowel-strings/\nhttps://leetcode.com/problems/race-car/\nhttps://leetcode.com/problems/super-egg-drop/\nhttps://leetcode.com/problems/least-operators-to-express-number/\nhttps://leetcode.com/problems/largest-multiple-of-three/\nhttps://leetcode.com/problems/minimum-one-bit-operations-to-make-integers-zero/\n"},"Algorithms/DP/Knapsack.html":{"url":"Algorithms/DP/Knapsack.html","title":"Knapsack","keywords":"","body":"Knapsack\nMust do problems:\n\nhttps://leetcode.com/problems/ones-and-zeroes/\nhttps://leetcode.com/problems/coin-change/\nhttps://leetcode.com/problems/word-break/\n\nWhen?\nGenerally we have to include/exclude an element and go ahead \nIf we can repeat an element, we'd have to accept it a certain number of times in the answer and move ahead\nWe've been given a list of things with some attributes (x, y). Select max/min things we can select so that sum(xi for thing in things)  and sum(yi for thing in things)  \nSometimes, it's disguised under fitting things in a set (word-break). In that case, attributes of that target set are params to optimize against. Sometimes, it's true or false that one has to compute from previous results (word-break again)\nRecursion\nMemoization\nDP\n1. Check if we can repeat an element or not; that determines a lot of things, espectially the DP loop\nDP array should be (X+1) * (Y+1) (one place for none selected i.e. [0][0]) with Xi and Yi representing the case if the optimization criteria is Xi * Yi \nExample: dp = [[0 for _ in range(Y+1)] for _ in range(X+1)] \nBe smart: try to simplify the checks inside main loops for (if it can fit here: eg. word-break) \nIf we shoudn't repeat, first loop should be the one of items, second should be over DP array. Otherwise, reverse order; Think about it, makes perfect sense.\nhttps://leetcode.com/problems/ones-and-zeroes/\n        for string in strs:\n            for x in range(X, -1, -1):\n                for y in range(Y, -1, -1):\n\nhttps://leetcode.com/problems/coin-change/\n        for i in range(1, amount + 1):\n            for coin in coins:\n\nhttps://leetcode.com/problems/word-break/\n        for x in range(X+1):\n            for y in range(x):\n\n2. Table filling: Top-down and bottom-up\nNow, this is interesting. We do not want overcounting. \nIn a non-repetition case, prefer bottom-up because we don't want to include the same element again. \nWe always compute the result for [x][y] based on _x = [x-(xi)] and _y = [y-(yi)] \nNote: During traversal, make sure _x and _y are within the boundaries of the DP table \nBottom-up: https://leetcode.com/problems/ones-and-zeroes/\n        for string in strs:\n            for x in range(X, -1, -1):\n                for y in range(Y, -1, -1):\n\n                    _x = x - freq[string]['0']\n                    _y = y - freq[string]['1']\n\n                    if _x >= 0 and _y >= 0:\n                        dp[x][y] = max(1 + dp[_x][_y], dp[x][y])\n\nTop-down: https://leetcode.com/problems/coin-change/ \n        for i in range(1, amount + 1):\n            for coin in coins:\n                if i \n"},"Algorithms/DP/NumSol.html":{"url":"Algorithms/DP/NumSol.html","title":"Number of Solutions","keywords":"","body":"Number of solutions\nThe key here is to add dp values of previous computations instead of doing 1 + min(dp[prev1], dp[prev2]) for other ones.\n\nhttps://leetcode.com/problems/unique-paths-ii/\nclass Solution:\n  def uniquePathsWithObstacles(self, obstacleGrid: List[List[int]]) -> int:\n      X = len(obstacleGrid)\n      Y = len(obstacleGrid[0])\n\n      dp = [[0 for _ in range(Y)] for _ in range(X)]\n      dp[0][0] = 1\n\n      for x in range(X):\n          for y in range(Y):\n              if obstacleGrid[x][y] == 1:\n                  dp[x][y] = 0\n                  continue\n\n              if x > 0:\n                  dp[x][y] += dp[x-1][y]\n\n              if y > 0:\n                  dp[x][y] += dp[x][y-1]\n\n      return dp[-1][-1]\n\n\n\n"},"Algorithms/DynamicProgramming-I.html":{"url":"Algorithms/DynamicProgramming-I.html","title":"Dynamic Programming I","keywords":"","body":"Dynamic Programming\nDynamic programming is a technique that combines the correctness of complete search and the efficiency of greedy algorithms. Dynamic programming can be applied if the problem can be divided into overlapping subproblems that can be solved independently.\nWe should always go: recursive solution -> memoization -> Dynamic Programming \nThere are a lot of memoization solved problems in leetcode -> Top interview questions -> DP \nMemoization basically insures that we solve a particular subproblem only once to improve runtime\nRecursive solution: For problems with structure of take or leave, check how it depends on previous values and recurse conditionally: make except and include cases and take max or min. eg. coin-change, LIS, perfect squares, word break, etc  \nHalf the problem is solved once you figure out that the problem is a DP one\nTemplate: https://leetcode.com/discuss/general-discussion/651719/how-to-solve-dp-string-template-and-4-steps-to-be-followed\nThere are two uses for dynamic programming:\n\nFinding an optimal solution: We want to find a solution that is as large as possible or as small as possible.\nCounting the number of solutions: We want to calculate the total number of possible solutions.\n\n1. Optimal Solution\neg. 0/1 Knapsack, partitions: exact sum, minimum sum difference, leetcode 1035\nKnapsack program:\nclass Solution:\n    def knapsack(self, weights, values, bag_weight):\n        table = [[0] * (bag_weight + 1)] for _ in (len(values) + 1)]\n\n        for i in range(0, len(values)+ 1):\n            for weight in range(0, bag_weight + 1):\n                if(i == 0 or weight == 0):\n                    table[i][weight] = 0\n                elif(weight \nSimilar problem for a 1D array\nhttps://leetcode.com/problems/house-robber/ \nRecursive solution is intuitive\nclass Solution:\n    def rob(self, nums: List[int]) -> int:\n        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return nums[0]\n\n        def recurse(current: int, i: int) -> int:\n            if i >= n:\n                return current\n\n            return max(\n                recurse(current, i + 1),\n                recurse(current + nums[i], i + 2)\n            )\n\n        return recurse(0, 0)\n\nSolution using DP:\nclass Solution:\n    def rob(self, nums: List[int]) -> int:\n        n = len(nums)\n\n        if n == 0:\n            return 0\n        if n == 1:\n            return nums[0]\n\n        memo = [0] * n\n        memo[0] = nums[0]\n        memo[1] = max(nums[0], nums[1])\n\n        for i in range(2, n):\n            memo[i] = max(memo[i - 1], memo[i - 2] + nums[i])\n\n        return memo[n - 1]\n\nFor exact sum subsets and minimum difference subsets: \nTrue or False for each cell. Use or instead of max(include, exclude)\nNeed to have another loop over the table to find the 'pivot'\nFor minimum difference, find a True cell and that causes the least difference \n(total_sum - 2 * cell_column)\nFor the minimum number of squares required to get the sum, similar to the exact sum subarray. Rather than True or False, maintain the number of squares required for the sum\n2. Number of solutions\neg. Climbing stairs (LeetCode 70), unique-paths \nhttps://leetcode.com/problems/unique-paths/submissions/ \nRecursive solution: \nclass Solution:\n    def uniquePaths(self, m: int, n: int) -> int:\n        X = n\n        Y = m\n        visited = [[False for i in range(0, Y)] for j in range(0, X)]\n\n        def dfs(x: int, y: int) -> int:\n            if x = X or y = Y:\n                return 0\n\n            if visited[x][y]:\n                return 0\n\n            if x == (X - 1) and y == (Y - 1):\n                return 1\n\n            visited[x][y] = True\n\n            total = dfs(x + 1, y) + \\\n                    dfs(x, y + 1) \n\n            visited[x][y] = False\n\n            return total\n\n        return dfs(0, 0)\n\nDP Solution: \nclass Solution:\n    def uniquePaths(self, m: int, n: int) -> int:\n        X = n\n        Y = m\n\n        if X == 0 and Y == 0:\n            return 0\n\n        if X == 1 and Y == 1:\n            return 1\n\n        if X == 1:\n            return 1\n\n        if Y == 1:\n            return 1\n\n        memo = [[0 for y in range(0, Y)] for x in range(0, X)]\n\n        for x in range(0, X):\n            for y in range(0, Y):\n                if x == 0 and y == 0:\n                    memo[x][y] = 1\n                    continue\n\n                if x == 0 or y == 0:\n                    memo[x][y] = 1\n                    continue\n\n                memo[x][y] = memo[x - 1][y] + memo[x][y - 1]\n\n        return memo[X - 1][Y - 1]\n\nUnique paths II is similar but we set count to 0 in case there is an obstruction. \nFor row and column cells, row[i] = row[i - 1] and similar to columns \nRest is similar\nSimilar problem for a 1D array\nClimbing stairs: \nFor each step, there are multiple choices, generally 2. \nBrute force solution goes something like this:\nclass Solution:\n    def solution_function(self, n):\n        if(success_base_case):\n           return 1\n        if(failure_base_case):\n           return 0\n\n    return self.solution_function(case_one, n) + self.solution_function(case_two, n)\n\nTime Complexity: O(2^n) - tree size\nCheck if the problem satisfies Optimal Substructure Property \nFind an equation for the answer \nHere,\ndp[n] = dp[n  -  1] + dp[n - 2] #(climb stairs case)\n\ndp = [0] * (n + 1)\ndp[0] = 0\ndp[1] = 1\ndp[2] = 2\n\nfor i in range(3, n):\n            dp[i] = dp[i - 1] + dp[i - 2]\nreturn dp[n]\n\nFrom Leetcode:\n\nUsually, solving and fully understanding a dynamic programming problem is a 4 step process: \n\nStart with the recursive backtracking solution\nOptimize by using a memoization table (top-down dynamic programming)\nRemove the need for recursion (bottom-up dynamic programming)\nApply final tricks to reduce the time / memory complexity\n\n\n"},"Algorithms/DynamicProgramming-II.html":{"url":"Algorithms/DynamicProgramming-II.html","title":"Dynamic Programming II","keywords":"","body":"Step-by-step solved DP problems\nEssential leetcode questions for practice:\nDecode Ways \nWord Break \nPerfect Squares \nCoin-change \nLIS \nLCS  \nDecent problemset: https://blog.usejournal.com/top-50-dynamic-programming-practice-problems-4208fed71aa3 \nVisualize the overlap with the recursion tree diagram given on the \"Solution explaination\" pages. \nLongest Common Subsequence\nhttps://leetcode.com/problems/longest-common-subsequence/ \nSolution explaination: https://www.techiedelight.com/longest-common-subsequence/ \nRecursion:\nclass Solution:\n    def longestCommonSubsequence(self, text1: str, text2: str) -> int:\n        def LCS(m, n):\n            if not m or not n:\n                return 0\n\n            if text1[m - 1] == text2[n - 1]:\n                return LCS(m - 1, n - 1) + 1\n\n            return max(LCS(m - 1, n), \\\n                       LCS(m, n - 1))\n\n        return LCS(len(text1), len(text2))\n\nRecursion + Memoization\nclass Solution:\n    def longestCommonSubsequence(self, text1: str, text2: str) -> int:\n        memo = dict()\n\n        def LCS(m, n):\n            if (m, n) in memo:\n                return memo[(m, n)]\n\n            if not m or not n:\n                memo[(m, n)] = 0\n                return memo[(m, n)]\n\n            if text1[m - 1] == text2[n - 1]:\n                memo[(m, n)] = LCS(m - 1, n - 1) + 1\n            else:\n                memo[(m, n)] =  max(LCS(m - 1, n), \\\n                                    LCS(m, n - 1))\n\n            return memo[(m, n)]\n\n        return LCS(len(text1), len(text2))\n\nDP\nclass Solution:\n    def longestCommonSubsequence(self, text1: str, text2: str) -> int:\n        X = len(text2)\n        Y = len(text1)\n\n        dp = [[0 if x == 0 or y == 0 else -1 for y in range(0, Y + 1)] \\\n              for x in range(0, X + 1)]\n\n        for x in range(1, X + 1):\n            for y in range(1, Y + 1):\n                if text1[y - 1] == text2[x - 1]:\n                    dp[x][y] = 1 + dp[x - 1][y - 1]\n                else:\n                    dp[x][y] = max(dp[x - 1][y], dp[x][y - 1])\n\n        return dp[X][Y]\n\nLongest Palindromic Subsequence\nhttps://leetcode.com/problems/longest-palindromic-subsequence/ \nSolution explaination: https://www.techiedelight.com/longest-palindromic-subsequence-using-dynamic-programming/ \nRecursion:\nclass Solution:\n    def longestPalindromeSubseq(self, s: str) -> int:\n        n = len(s)\n\n        def LPS(m, n):\n            if m > n:\n                return 0\n\n            if m == n:\n                return 1\n\n            if s[m] == s[n]:\n                return LPS(m + 1, n - 1) + 2\n            else:\n                return max(LPS(m + 1, n), \\\n                           LPS(m, n - 1))\n\n        return LPS(0, n - 1)\n\nRecursion + Memoization\nclass Solution:\n    def longestPalindromeSubseq(self, s: str) -> int:\n        n = len(s)\n        memo = dict()\n\n        def LPS(m, n):\n            if m > n:\n                return 0\n\n            if (m, n) in memo:\n                return memo[(m, n)]\n\n            if m == n:\n                memo[(m, n)] = 1\n                return memo[(m, n)]\n\n            if s[m] == s[n]:\n                memo[(m, n)] = LPS(m + 1, n - 1) + 2\n            else:\n                memo[(m, n)] = max(LPS(m + 1, n), \\\n                                   LPS(m, n - 1))\n\n            return memo[(m, n)]\n\n        return LPS(0, n - 1)\n\n"},"Algorithms/DynamicProgramming-III.html":{"url":"Algorithms/DynamicProgramming-III.html","title":"Dynamic Programming III","keywords":"","body":"Combination sum and coin-change problems\nMultiple combinations possible: \nAll the possible ways to reach at the sum/amount: \n    Unique sets: https://leetcode.com/problems/combination-sum/ (Check combinatorics section)  \n    Unique combinations: https://leetcode.com/problems/combination-sum-iv/ \n    Unique combinations (including unique values at indices as well): https://leetcode.com/problems/combination-sum-ii/ \nFind min steps to reach at the sum/amount: https://leetcode.com/problems/coin-change/ \nFind total number of ways to reach at the sum/amount https://leetcode.com/problems/coin-change-2/\nDifferent constraints: https://leetcode.com/problems/combination-sum-iii/ \nThere is no other way than backtracking for finding the actual sets\n\nRecursive solution:\nRule of thumb: \n\nIf you want to check the min number of steps necessary, recursive call should read: \nmin_steps = float('inf')\nfor j in range(i, len(coins)):\n    min_steps = min(min_steps, 1 + backtrack(j, current + coins[j]))\n\nSuccess cases should return 0 \nFailure cases (out of bounds): (i == n or current > amount) should return float('inf')  \nIf you want to know the total number of ways to reach at the amount/sum: \ntotal_steps = 0\nfor j in range(i, len(coins)):\n    total_steps += backtrack(j, current + coins[j])\n\nSuccess cases should return 1 \nFailure cases (out of bounds): (i == n or current > amount) should return 0  \nNotice how j runs from i to len(coins). This is if we don't want (1, 6, 1) again if (1, 1, 6) is already included\nTop-down recursion/ memoization\nThis is an intuitive step \nDeclare memo dict and store results\nDP\nThink from the perspective of constant amount \nfor all the coins, we want to take min or add \n        for i in range(1, amount + 1):\n            for coin in coins:\n                if i \nFor coin change 2, we need to run these loops in the reverse order as we have to eliminate duplicate combinations and we don't necessarily need to find a \"complete\" answer for a previous target.\nSimilar idea: \nhttps://leetcode.com/problems/word-break-ii/ \nclass Solution:\n    def wordBreak(self, s: str, wordDict: List[str]) -> List[str]:\n        dp = [[] for i in range(0, len(s) + 1)]\n\n        # check of there's any character in the \n        # string that's just \n        # not present in wordDict\n        s_set = set(s)\n        for word in wordDict:\n            s_set -= set(word)\n\n        if s_set:\n            return []\n\n        for i in range(0, len(dp)):\n            for word in wordDict:\n                if not s[:i].endswith(word):\n                    continue\n\n                if len(word) == i:\n                    dp[i].append(word)\n                    continue\n\n                for match in dp[i - len(word)]:\n                    dp[i].append(match + \" \" + word)\n\n        return dp[-1]\n\nhttps://leetcode.com/problems/knight-dialer/ \nWe need to store current dp; which represents the state after given hop. \nFor a given hop, we jump to the possible destinations; this value needs to be preserved as the updated one will change destination's calculations. So, we save that state and compute.\nclass Solution:\n    def knightDialer(self, N: int) -> int:\n        dp = [1 for i in range(0, 10)]\n        hops = [(4, 6), (6, 8), (7, 9), (4, 8), \\\n                (0, 3, 9), [], (0, 1, 7), (2, 6), (1, 3), (2, 4)]\n\n        mod = 10 ** 9 + 7\n\n        for hop in range(0, (N - 1)):\n            dp1 = [0] * 10\n\n            for pos in range(0, 10):\n                for n in hops[pos]:\n                    dp1[n] += (dp[pos] % mod)\n            dp = dp1\n\n        return sum(dp) % mod\n\n"},"Algorithms/DynamicProgramming-IV.html":{"url":"Algorithms/DynamicProgramming-IV.html","title":"Dynamic Programming IV","keywords":"","body":"Dynamic Programming IV\nTwo properties of DP problems: \n\nOptimal substructure \nOverlapping subproblems\n\nThis about how can we reach to the current positions from different other places. \nNeed to use and auxillary array sometimes (knight dialer) \nOtherwise, if it depends only on the past results, just the current one if enough. \nhttps://leetcode.com/explore/challenge/card/june-leetcoding-challenge/543/week-5-june-29th-june-30th/3375/\nclass Solution:\n    def uniquePaths(self, m: int, n: int) -> int:\n        X = n\n        Y = m\n\n        dp = [[0 for y in range(Y)] for x in range(X)]\n        dp[0][0] = 1\n\n        for x in range(X):\n            for y in range(Y):\n                if x == 0 and y == 0:\n                    continue\n\n                if x == 0:\n                    dp[x][y] = dp[x][y - 1]\n                    continue\n\n                if y == 0:\n                    dp[x][y] = dp[x - 1][y]\n                    continue\n\n                dp[x][y] = dp[x - 1][y] + dp[x][y - 1]\n\n        return dp[-1][-1]\n\n"},"Miscellaneous/":{"url":"Miscellaneous/","title":"Miscellaneous","keywords":"","body":"Miscellaneous\n"},"Miscellaneous/Palindrome.html":{"url":"Miscellaneous/Palindrome.html","title":"Palindrome","keywords":"","body":"Palindrome\nhttps://leetcode.com/problems/longest-palindromic-substring/ \nExpand from the center.  \nFor every index, 2 palindromes possible: \n\nThat character being a center (odd length) \nThat character being a left center (even length) \nNow, write a util function and expand with l and r until string end and as \nlong as the characters match. \nmax function also supports key like sorted function\nclass Solution:\n def longestPalindrome(self, s: str) -> str:\n     result = \"\"\n\n     def find_len(l, r):\n         while l >= 0 and r \n\n\nhttps://leetcode.com/problems/valid-palindrome-ii/ \nCheck characters one by one, if they are same, adjust start and end \nIf they mismatch, direct check with string slices\nclass Solution:\n    def validPalindrome(self, s: str) -> bool:\n        start, end = 0, len(s)-1\n\n        while start \n"},"Miscellaneous/Stocks.html":{"url":"Miscellaneous/Stocks.html","title":"Stocks","keywords":"","body":"Stocks\n1 transaction\nhttps://www.geeksforgeeks.org/maximum-difference-between-two-elements/ \nKeep track of the minimum element found so far, calculate the difference between the current and minimum found so far. \nUpdate the maximum difference if necessary.\nAt most 2 transactions\nhttps://www.geeksforgeeks.org/maximum-profit-by-buying-and-selling-a-share-at-most-twice/ \nA similar approach to one transaction limit, maintain the minimum till that element and similar for i + 1 and till the end of the List.\nAny number of transactions\nhttps://www.geeksforgeeks.org/stock-buy-sell/ \nLocal minima List[i] = List[i + 1]\nBuy at local minima and sell at local maxima\nAny number of transactions with transaction fee\n\nCan use this for any number of transactions with fee == 0 \nhttps://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/ \nAt the end of the i-th day, we maintain cash, the maximum profit we could have if we did not have a share of stock, and hold, the maximum profit we could have if we owned a share of stock.\n\nTo transition from the i-th day to the i+1-th day, we either sell our stock \ncash = max(cash, hold + prices[i] - fee) or \nbuy a stock \nhold = max(hold, cash - prices[i]) \nAt the end, we want to return cash. We can transform cash first without using temporary variables because selling and buying on the same day can't be better than just continuing to hold the stock.\nclass Solution(object):\n    def maxProfit(self, prices, fee):\n        cash, hold = 0, -prices[0]\n        for i in range(1, len(prices)):\n            cash = max(cash, hold + prices[i] - fee)\n            hold = max(hold, cash - prices[i])\n        return cash\n\nK number of transactions\nhttps://leetcode.com/problems/best-time-to-buy-and-sell-stock-iv/discuss/54117/Clean-Java-DP-solution-with-comment \nDynamic programming\n"},"Miscellaneous/Intervals.html":{"url":"Miscellaneous/Intervals.html","title":"Intervals","keywords":"","body":"Interval problems\nTemplate for simple questions like: \n\n435 Non-overlapping Intervals \n56 Merge Intervals \n252 Meeting Rooms\n253 Meeting Rooms II \nhttps://leetcode.com/problems/interval-list-intersections/\nhttps://leetcode.com/problems/meeting-scheduler/\nhttps://leetcode.com/problems/partition-labels/ (secretly an interval problem; intervals are sorted automatically once you create because of the way we do them)\n\nFor trivial questions, we sort based on the starting time. \nhttps://leetcode.com/problems/non-overlapping-intervals/\nclass Solution:\n    def eraseOverlapIntervals(self, intervals: List[List[int]]) -> int:\n        intervals = sorted(intervals, key = lambda x: x[0])\n        min_end = float('-inf')\n        removed = 0\n\n        for start, end in intervals:\n            if start >= min_end:\n                min_end = end \n            else:\n                removed += 1\n                min_end = min(min_end, end)\n\n        return removed\n\nhttps://leetcode.com/problems/minimum-number-of-arrows-to-burst-balloons/\nclass Solution:\n    def findMinArrowShots(self, points: List[List[int]]) -> int:\n        intervals = sorted(points, key = lambda x: x[0])\n        min_end = float('-inf')\n        arrows = 0\n\n        for start, end in intervals:\n            if start \nhttps://leetcode.com/problems/meeting-rooms-ii/ \nWe just need events actually. If one comes, need a room if anyone leaves, required rooms decrease. \nConvert into a flat list, closing times should be changed into negative. IMP: for sorting to get the events, sort based on absolute vals and tiebreaker should be a sign. \nNegatives should be given a preference.\nclass Solution:\n    def minMeetingRooms(self, intervals: List[List[int]]) -> int:\n        n = len(intervals)\n\n        intervals = [((-1)**i) * interval[i] for interval in intervals for i in range(2)]\n        intervals = sorted(intervals, key=lambda x: (abs(x), x))\n\n        rooms, max_rooms = 0, 1\n\n        for event in intervals:\n            if event >= 0:\n                rooms += 1\n            else:\n                rooms -= 1\n\n            max_rooms = max(max_rooms, rooms)\n\n        return max_rooms\n```s\nAnother variation of this problem: \nhttps://leetcode.com/problems/remove-covered-intervals/\n```py\nclass Solution:\n    def removeCoveredIntervals(self, intervals: List[List[int]]) -> int:\n        # sort based on the start time and prioritize the longer interval\n        intervals = sorted(intervals, key = lambda x: (x[0], -x[1]))\n        current = intervals[0]\n        covered = 0\n\n        for s, e in intervals[1:]:\n                if current[0] = e:\n                    covered += 1\n                else:\n                    current = [s, e]\n\n        return len(intervals) - covered\n\nhttps://leetcode.com/problems/merge-intervals/ \nIn case of overlap, stretch the previous one (last one in the intervals list); do not push\nclass Solution:\n    def merge(self, intervals: List[List[int]]) -> List[List[int]]:\n        if not intervals:\n            return intervals\n\n        intervals = sorted(intervals, key = lambda x: x[0])\n        result = []\n\n        for start, end in intervals:\n            if not result or (start > result[-1][1]):\n                result.append([start, end])\n            else:\n                result[-1][1] = max(result[-1][1], end)\n\n        return result\n\nhttps://leetcode.com/problems/interval-list-intersections/\nclass Solution:\n    def intervalIntersection(self, A, B):\n        i, j, START, END = 0, 0, 0, 1\n        max_start, min_end = float('-inf'), float('inf')\n        result = []\n\n        while i \nhttps://leetcode.com/problems/insert-interval/ \nVery similar to merge intervals. In case of overlap, do not push to the result; stretch the newInterval\nclass Solution:\n    def insert(self, intervals: List[List[int]], newInterval: List[int]) -> List[List[int]]:\n        result = []\n        n_s, n_e = newInterval\n        pushed = False\n\n        for s, e in intervals:\n            if e \nhttps://leetcode.com/problems/course-schedule-iii/ \nSorting + max_heap \nSort based on ending times, accept courses if possible \nIf we can't check if we can remove something from the accepted set and select the one which makes our time compact\nhttps://leetcode.com/problems/partition-labels/\nclass Solution:\n    def partitionLabels(self, S: str) -> List[int]:\n        # find intervals\n        # merge intersecting intervals\n        intervals = {}\n        LAST_INTERVAL, END = -1, 1\n        result = []\n\n        for i, s in enumerate(S):\n            if s in intervals:\n                intervals[s][END] = i\n            else:\n                intervals[s] = [i, i]\n\n        intervals = intervals.values()\n\n        for s, e in intervals:\n            if not result or result[LAST_INTERVAL][END] \nhttps://leetcode.com/problems/missing-ranges/ \nInteresting question. Iterate over array and compare to the prev elem, [prev + 1:current - 1] is the missing range. Be careful about the edge case of empty input\nclass Solution:\n    def findMissingRanges(self, nums: List[int], lower: int, upper: int) -> List[str]:\n        if not nums:\n            return [str(lower)] if lower == upper else [str(lower) + \"->\" + str(upper)]\n\n\n        def addToResult(start, end):\n            if start == end:\n                result.append(str(start))\n            elif start ' + str(end))\n\n        result = []\n        for i, n in enumerate(nums):\n            if i == 0:\n                start = lower\n                end = nums[0] - 1\n                addToResult(start, end)\n                continue\n\n            start = nums[i-1] + 1\n            end = n - 1\n\n            addToResult(start, end)\n\n        start = nums[-1] + 1\n        end = upper\n\n        addToResult(start, end)\n\n        return result\n\nhttps://leetcode.com/problems/meeting-scheduler/ \nJust find the first intersection with enough duration width \nHeap solution is also nice. Check LeetCode solutions\nclass Solution:\n    def minAvailableDuration(self, slots1: List[List[int]], slots2: List[List[int]], duration: int) -> List[int]:\n        i = j = 0\n        slots1 = sorted(slots1)\n        slots2 = sorted(slots2)\n\n        while i = duration:\n                    return [max_start, max_start + duration]\n\n            if min_end == slots1[i][1]:\n                i += 1\n            else:\n                j += 1\n\n        return []\n\n"},"Miscellaneous/Parenthesis.html":{"url":"Miscellaneous/Parenthesis.html","title":"Parenthesis","keywords":"","body":"Parenthesis questions\n\nhttps://leetcode.com/problems/valid-parentheses/\nhttps://leetcode.com/problems/generate-parentheses/\nhttps://leetcode.com/problems/valid-parenthesis-string/\nhttps://leetcode.com/problems/minimum-remove-to-make-valid-parentheses/\nhttps://leetcode.com/problems/minimum-add-to-make-parentheses-valid/\nhttps://leetcode.com/problems/remove-outermost-parentheses/\n\nValid parenthesis \nSimple idea. Push to the stack if it's an open one; pop if it's a matching closing one. \nIf the stack is empty and we encounter a closed one, that's an instant False\nGenerate parentheses\nKeep a count of open and closed ones. \nSuccess cases: string length 2  n and stack == 0 \nFailure cases: string length 2  n and stack != 0 OR stack  n \nWe just backtrack:\n            backtrack(current + '(', stack + 1)\n            backtrack(current + ')', stack - 1)\n\nValid parenthesis string\nBacktrack different possibilities \n'*' comes in every backtrack call based on character \nTop-down backtrack is very intuitive\n\n            memo[(i, stack)] = False\n\n            if s[i] in ['(', '*']:\n                memo[(i, stack)] = memo[(i, stack)] or \\\n                                   backtrack(i + 1, stack + 1)\n\n            if s[i] == '*':\n                memo[(i, stack)] = memo[(i, stack)] or \\\n                                   backtrack(i + 1, stack)\n\n            if s[i] in [')', '*']:\n                if not stack:\n                    return memo[(i, stack)]\n\n                memo[(i, stack)] = memo[(i, stack)] or \\\n                                   backtrack(i + 1, stack - 1)\n\nhttps://leetcode.com/problems/minimum-remove-to-make-valid-parentheses/ \nThe ones that need to be removed are:\n\nclose brakets that come when there was no open one before it \nopen ones that don't have a close one after them\nJust need to find them and replace with an empty string.\nSet is interchangable with list here because we don't care what open bracket a close one matches with; we'd just pop\nclass Solution:\n def minRemoveToMakeValid(self, s: str) -> str:\n     open_brackets = []\n     s_list = [c for c in s]\n\n     for i, c in enumerate(s):\n         if c == '(':\n             open_brackets.append(i)\n             s_list[i] = ''\n         elif c == ')':\n             if open_brackets:\n                 s_list[open_brackets.pop()] = '('\n                 s_list[i] = ')'\n             else:\n                 s_list[i] = ''\n\n     return ''.join(s_list)\n\nhttps://leetcode.com/problems/minimum-add-to-make-parentheses-valid/ \nA closed bracket without a corresponding opening one, can never to balanced afterwards, irrespective of what comes after \nAn open bracket can be matched by a closed one immediately.\nclass Solution:\n def minAddToMakeValid(self, S: str) -> int:\n     open_brackets = 0\n     closed_brackets = 0\n\n     for i, s in enumerate(S):\n         if s == '(':\n             open_brackets += 1\n         else:\n             if not open_brackets:\n                 closed_brackets += 1\n             else:\n                 open_brackets -= 1\n\n     return open_brackets + closed_brackets\n\n\n\nhttps://leetcode.com/problems/remove-outermost-parentheses/\nclass Solution:\n    def removeOuterParentheses(self, S: str) -> str:\n        stack = []\n        start = 0\n        result = \"\"\n\n        for i, c in enumerate(S):\n            if not stack:\n                start = i\n\n            if c == '(':\n                stack.append(c)\n            else:\n                stack.pop()\n\n            if not stack:\n                result += S[start + 1: i]\n\n        return result\n\nhttps://leetcode.com/problems/remove-invalid-parentheses/ \nThis is a combination of two problems: first identify the number of removals required and then generate strings with backtracking \nnet is basically number of open brackets - number of closed brackets \nThen it is just a matter of pruning the tree and finding the optimal solution\nclass Solution:\n    def removeInvalidParentheses(self, s: str) -> List[str]:\n        net, removal = 0, 0\n        result = set()\n        visited = set()\n\n        for c in s:\n            # find the minimum number of removals to be made\n            if c == '(':\n                net += 1\n            elif c == ')':\n                net -= 1\n\n            if net == -1:\n                net = 0\n                removal += 1\n        removal += net\n\n        def construct(index, net, string, removals):\n            if (string, removals) in visited:\n                return \n            else:\n                visited.add((string, removals))\n\n            if removals == -1:\n                return\n\n            if index == len(s):\n                # we found the solution\n                if net == 0 and removals == 0:\n                    result.add(string)\n                return\n\n            if s[index] == '(':\n                # include open bracket\n                construct(index + 1, net + 1, string + '(', removals)\n\n            if s[index] == ')':\n                # include \n                if net > 0:\n                    construct(index + 1, net - 1, string + ')', removals)\n\n            if s[index] in ['(', ')']:\n                # exclude brackets\n                construct(index + 1, net, string, removals - 1)\n            else:\n                # normal character\n                construct(index + 1, net, string + s[index], removals)\n\n        construct(0, 0, '', removal)\n        return result\n\nhttps://leetcode.com/problems/longest-valid-parentheses/ \nstart from this state: [-1] \nOnly unbalanced state will empty the stack, push that index to be the boundary \nclass Solution:\n    def longestValidParentheses(self, s: str) -> int:\n        stack = [-1]\n        max_len = 0\n\n        for i, c in enumerate(s):\n            if c == '(':\n                stack.append(i)\n                continue\n\n            stack.pop()\n            if stack:\n                max_len = max(max_len, i - stack[-1])\n            else:\n                stack.append(i)\n\n        return max_len\n\nhttps://leetcode.com/problems/score-of-parentheses/ \nIt's given that it's balanced. So, if we encounter ), there will always be an opening bracket corresponding to it. We try to find that. Until we find it, just keep on popping and adding, then pop the opening bracket and substitute with (2 * sum of all popped ones) or 1 if the sum if zero.\nclass Solution:\n    def scoreOfParentheses(self, S: str) -> int:\n        # [..(] )  = [..1]\n        # [.(c1 c2 c3] )  = [.2*(c1+c2+c3)]\n\n        stack = []\n\n        for i, c in enumerate(S):\n            if c == '(':\n                stack.append('(')\n                continue\n\n            current = 0\n            while stack[-1] != '(':\n                val = stack.pop()\n                current += val\n\n            stack.pop()\n            if current == 0:\n                stack.append(1)\n            else:\n                stack.append(current * 2)\n\n        return sum(stack)\n\n"},"Miscellaneous/AlienDictionary.html":{"url":"Miscellaneous/AlienDictionary.html","title":"Alien Dictionary","keywords":"","body":"Alien Dictionary\nhttps://leetcode.com/problems/verifying-an-alien-dictionary/ \nReturn True at the end, just look for an out-of-order case\nclass Solution:\n    def isAlienSorted(self, words: List[str], order: str) -> bool:\n        seq = {c: i for i, c in enumerate(order)}\n\n        for i, word in enumerate(words[:len(words)-1]):\n            j = 0\n            while j  seq[words[i+1][j]]:\n                    return False\n                elif seq[word[j]]  len(words[i+1]):\n                    return False\n\n        return True\n\n"},"Miscellaneous/InterestingMiscellaneous.html":{"url":"Miscellaneous/InterestingMiscellaneous.html","title":"Interesting Miscellaneous","keywords":"","body":"Need to find nth smallest or largest\nUse max or min-heap or partial sort: quicksort variation \nA better way to achieve this is to create a heap of size k (target) first. For finding max k, use min-heap and vice-versa. \nhttps://leetcode.com/problems/kth-largest-element-in-an-array/\nLRU cache:   https://leetcode.com/problems/lru-cache/ \nSimple dict py-3\nhttps://leetcode.com/problems/maximum-area-of-a-piece-of-cake-after-horizontal-and-vertical-cuts/\n# just return max height * max width\nclass Solution:\n    def maxArea(self, h: int, w: int, horizontalCuts: List[int], verticalCuts: List[int]) -> int:\n        h_sorted = sorted(horizontalCuts)\n        v_sorted = sorted(verticalCuts)\n\n        mod = 10**9 + 7\n\n        max_height = 0\n        for i, height in enumerate(h_sorted[1:], start=1):\n            max_height = max(max_height, height - h_sorted[i-1])\n\n        # first and last boundary cut \n        max_height = max(max_height, h_sorted[0], h - h_sorted[-1])\n\n        max_width = 0\n        for i, width in enumerate(v_sorted[1:], start=1):\n            max_width = max(max_width, width - v_sorted[i-1])\n\n        # first and last boundary cut\n        max_width = max(max_width, v_sorted[0], w - v_sorted[-1])\n\n        return (max_height * max_width) % mod\n\nLooks simple but greedy\nhttps://leetcode.com/problems/non-decreasing-array/ \n3 cases: (make sure to handle equality condition properly since it's \"non-decreasing\") \nI chance to minimize something, minimize it to absolute best you can. (i-2) also comes into picture!\nclass Solution:\n    def checkPossibility(self, nums: List[int]) -> bool:\n        changes = 1\n\n        for i, n in enumerate(nums[1:], start=1):\n            if nums[i-1] > nums[i]:\n\n                if changes == 0:\n                    return False\n\n                if (i-2) \nPriority queues\n1383: https://leetcode.com/contest/weekly-contest-180/problems/maximum-performance-of-a-team/ \nSolution: https://leetcode.com/problems/maximum-performance-of-a-team/discuss/539797/C%2B%2BPython-Priority-Queue\n857: https://leetcode.com/problems/minimum-cost-to-hire-k-workers/\n1390: https://leetcode.com/problems/four-divisors/  \nSnippet to find all divisors: floor(sqrt(num)) + 1 part is important\ndivisors = set()\nfor i in range(1, floor(sqrt(num)) + 1):\n    if num % i == 0:\n        divisors.add(i)\n        divisors.add(num // i)\n\n31: https://leetcode.com/problems/next-permutation/ \nFind the next just greater element, swap elements and reverse the remaining array \nVisualize the whole array and our case\nclass Solution:\n    def nextPermutation(self, nums: List[int]) -> None:\n        \"\"\"\n        Do not return anything, modify nums in-place instead.\n        \"\"\"\n        n = len(nums)\n        i = n - 2\n\n        while i >= 0 and nums[i] >= nums[i+1]:\n            i -= 1\n\n        # non-increasing array\n        if i == -1:\n            nums.reverse()\n            return 1\n\n        j = i + 1\n        while j  nums[i]:\n            j += 1\n        j -= 1\n\n        nums[i], nums[j] = nums[j], nums[i]\n\n        l = i + 1\n        r = n - 1\n        while l \n621: https://leetcode.com/problems/task-scheduler/ \nMake it compact. Consider all most frequency elems as a single character. \nDistance b/w them? of course n from the first one to make it as compact as possible. \nIMP: If it's completely compact, we would never need any idle one. Just open up and absolve. \nNow just try to find the number of idle ones.\nCount\nclass Solution:\n    def leastInterval(self, tasks: List[str], n: int) -> int:\n        freq = {}\n        max_freq, max_freq_count = 0, 0\n\n        for i, task in enumerate(tasks):\n            if task in freq:\n                freq[task] += 1\n            else:\n                freq[task] = 1\n\n            if max_freq == freq[task]:\n                max_freq_count += 1\n            elif max_freq = n:\n            # completely compact\n            return len(tasks)\n\n        slots_available = (n - (max_freq_count - 1)) * (max_freq - 1)\n        tasks_remaining = len(tasks) - max_freq * max_freq_count\n\n        if slots_available \nFinding the actual order:\nA really good question. Used 3 different data structures. \nFirst of all, we need an always sorted list of tasks and their remaining frequency. \ndict + max-heap is the best combo here \nThen, the general algo for each cycle of steps (n + 1) is as follows: \n\nPop from the heap and schedule it.\nPush this to queue if it's remaining freq is > 1 (careful with the negative sign as it's a max-heap)\nIncrease the count by 1\nIf there's nothing in the heap AND the queue, return the result count\n\nimport heapq\n\nclass Solution:\n    def leastInterval(self, tasks: List[str], n: int) -> int:\n        freq = dict()\n        heap = []\n        queue = []\n        count = 0\n        result = []\n\n        for T in tasks:\n            if freq.get(T, 0):\n                freq[T] += 1\n            else:\n                freq[T] = 1\n\n        for t, c in freq.items():\n            heapq.heappush(heap, (-c, t))\n\n        while heap:\n            for i in range(0, n + 1):\n                if heap:\n                    c, t = heapq.heappop(heap)\n                    result.append(t)\n\n                    if c != -1:    \n                        queue.append((c + 1, t))\n                    count += 1\n\n                    if not heap and not queue:\n                        print(\">> loop exit\")\n                        return count\n                else:\n                    count += 1\n                    result.append('-')\n\n            while queue:\n                heapq.heappush(heap, queue.pop())\n\n        return count\n\nSort colors\nhttps://leetcode.com/explore/challenge/card/june-leetcoding-challenge/540/week-2-june-8th-june-14th/3357/ \nThe trick is to maintain all-red pointer on its left, all-blue on its right and an iterator to just swap with red one if it's red and same for blue. Stop if you encounter the blue one.\nSimilar \nhttps://leetcode.com/problems/move-zeroes/submissions/\nclass Solution:\n    def moveZeroes(self, nums: List[int]) -> None:\n        \"\"\"\n        Do not return anything, modify nums in-place instead.\n        \"\"\"\n        n = len(nums)\n        i = 0\n        non = 0\n\n        while i \nhttps://leetcode.com/problems/find-all-duplicates-in-an-array/ \nOne of those questions where you'd have to read question description properly.\nclass Solution:\n    def findDuplicates(self, nums: List[int]) -> List[int]:\n        result = []\n\n        for i, n in enumerate(nums):\n            if nums[abs(n) - 1] \nhttps://leetcode.com/explore/challenge/card/january-leetcoding-challenge-2021/582/week-4-january-22nd-january-28th/3612/ \nOnly 3 possiblities. If length diff > 1, not able to equilize using one change. \nTwo loops for length diff == 1 and 0\nclass Solution:\n    def isOneEditDistance(self, s: str, t: str) -> bool:\n        if abs(len(s)-len(t)) > 1:\n            return False\n\n        if abs(len(s)-len(t)) == 1:\n            i = 0\n            while i \nhttps://leetcode.com/problems/squirrel-simulation/solution/ \nGreat question. Distance finding is simple. Visualize how that'll happen. \nThe first visit should be to the node closest to squirrel and farthest to tree \ntotal - dist_t[m_idx] + dist_s[m_idx] == total - m \nclass Solution:\n    def minDistance(self, height: int, width: int, tree: List[int], squirrel: List[int], nuts: List[List[int]]) -> int:\n        # distances from squirrel\n        # distances from tree\n        # max(t[x]-s[x])\n\n        s, t = [[0] * len(nuts)] * 2\n        m, m_idx = float('-inf'), 0\n        total = 0\n\n        for i, n in enumerate(nuts):\n            x = n[0]\n            y = n[1]\n\n            dist_t = abs(tree[0] - x) + abs(tree[1] - y)\n            dist_s = abs(squirrel[0] - x) + abs(squirrel[1] - y)\n\n            total += 2 * dist_t\n            dist_diff = (dist_t-dist_s)\n            if m \nRecursion\nhttps://leetcode.com/problems/powx-n/ \nCalculate only half and based on power's divisibility by 2, take action. \nStop when power is 0\nclass Solution:\n    def myPow(self, x: float, n: int) -> float:\n        if n \nhttps://leetcode.com/problems/broken-calculator/ \nProof: https://leetcode.com/problems/broken-calculator/discuss/236565/Detailed-Proof-Of-Correctness-Greedy-Algorithm\nclass Solution:\n    def brokenCalc(self, X: int, Y: int) -> int:\n        steps = 0\n\n        while Y > X:\n            if Y % 2:\n                Y += 1\n            else:\n                Y //= 2\n\n            steps += 1\n\n        return steps + (X-Y)\n\nhttps://leetcode.com/problems/jump-game-ii/ \nCheck the spread after each step. Start should be the beginning of the spread and end should be the max one can go after taking xth step.\nclass Solution:\n    def jump(self, nums: List[int]) -> int:\n        n = len(nums)\n        start = end = 0\n        steps = 0\n\n        while end \nhttps://leetcode.com/problems/jump-game/ \nSimilar idea to jump-game-ii, if max_end == end at the end of our cycle, return False\nclass Solution:\n    def canJump(self, nums: List[int]) -> bool:\n        start = 0\n        end = 0\n        n = len(nums)\n\n        if n in [0, 1]:\n            return True\n\n        while True:\n            max_end = end\n\n            for i in range(start, end+1):\n                max_end = max(max_end, i + nums[i])\n\n            if max_end == end:\n                return False\n            elif max_end >= (n-1):\n                return True\n\n            start = end + 1\n            end = max_end\n\n        return True\n\nhttps://leetcode.com/problems/number-of-equivalent-domino-pairs/ \nIn such cases, instead of traversing the store backwards to stop at store_object_idx , run the loop backwards for efficiency. Makes life a lot easier. \nAlso, one critical edge case here is that f==s, one can miss that\nclass Solution:\n    def numEquivDominoPairs(self, dominoes: List[List[int]]) -> int:\n        store = {}\n        pairs = 0\n\n        for f, s in dominoes[::-1]:\n            pairs += store.get((f, s), 0)\n\n            if f != s:\n                pairs += store.get((s, f), 0)\n\n            store[(f, s)]  = store.get((f, s), 0) + 1\n\n        return pairs\n\n"},"Tricks/":{"url":"Tricks/","title":"Tricks","keywords":"","body":"Tricks\nPrefix array and sum calculation\n        P = [0]\n\n        for x in A: P.append(P[-1] + x)\n        def sum_and_number_of_elements(x, y):\n            # _IMP:_ x should be the start of slice+1; same for y\n            return (P[j] - P[i]), (j - i)\n\nPartitioning\n\nSelect last element as a pivot and first element as the left_idx\nAdd a runner to loop from left to (right-1)\nleft_idxto keep smaller elements at the correct places. Swap (left_idx - runner elems) if runner pointed elem is smaller than the pivot\n```py\n def partition(_left, _right):\n     left_idx, pivot_idx = _left, _right\n\n     for runner in range(_left, _right):\n         if nums[runner] \n\n        nums[pivot_idx], nums[left_idx] = nums[left_idx], nums[pivot_idx]\n        return left_idx\n\n#### Rather than doing all sorts of complicated stuff with `// +- 1`, just use `math` \n```py\nimport math\n\nmath.ceil\nmath.floor\nTo compare references, do it with is \nkey in min/max/sorted should get a function. You can create a lambda if required. \nMake a comparison function and use it with lambda. (check Multiple Arrays section)\nSort list with a tie-breaker\nExample: https://leetcode.com/problems/remove-covered-intervals/\nAlso look at tricky sorting in Algorithms section\nsorted(list, key = lambda x: (x[0], -x[1]))\n\nSecond element is a tie-breaker. \nConvert list into a dictionary\n{item[0]: item[1:] for item in list}\n\nSort dictionary by value\n{k: v fo r k, v in sorted(x.items(), key=lambda item: item[1])}\n\nMost frequent in an array or a string\nfrom collections import Counter\nC = Counter(list/string)\nC.most_common(n) #returns a list of top n\n\nOr we can just keep track of the most frequent element while going throught the list\nheapq insert with priority\nimport heapq\nheap = []\nheapq.heappush(heap, (priority, item))\n\nheapq also has a merge function\nWe can use this to merge sorted lists\nfrom heapq import merge\nmerge(list1, list2)\n\nEfficient looping:\ns can be a list or a string\nfor i, c in enumerate(s):\n    # i is index\n    # c is s[i]\n\nlist.insert(index, elem)\nThe last one gets the priority\n"},"BehavioralQuestions.html":{"url":"BehavioralQuestions.html","title":"Behavioral Questions","keywords":"","body":"Behavioral Questions\n\nWhat was a challenge or problem that you faced?\nTell me about a time when you were not able to deliver on time and what did you do?\nIs it better to have direct interaction with the customer?\nAnd some follow up questions based on my answers \n\n\nAll my answers were drawn from experience, I made sure I mentioned specifics, not just a vague answer. One answer from my recent graduate college project, two from my previous work experience.\n\n"}}}