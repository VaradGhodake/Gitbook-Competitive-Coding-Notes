{"index":{"version":"0.5.12","fields":[{"name":"title","boost":10},{"name":"keywords","boost":15},{"name":"body","boost":1}],"ref":"url","documentStore":{"store":{"./":["code","competit","introduct","note"],"GeneralInstructions.html":["abstract","approach","brute","built","class","class,","code","decor","docstr","first","forc","function","further","gener","getter","helper","instruct","keep","level","librari","maintain","methods,","oop:","optim","possibl","problem","property,","python","rememb","runtim","setter","solv","us","variabl","write"],"DataStructures/":["&","data","question","standard","structur"],"DataStructures/Arrays/":["'quirky'","(1)",":","array","check","element/","gener","greater","help","https://leetcode.com/problems/next","https://www.geeksforgeeks.org/maximum","https://www.geeksforgeeks.org/next","increas","instructions:","length","on","permutation/solution/","posit","post","pre","prioriti","problem","remov","similar","stack","strictli","sub","valu"],"DataStructures/Arrays/TwoPointers.html":["2","array.","decid","easi","effect","end","faster","https://leetcode.com/problems/3sum/","https://leetcode.com/problems/contain","https://leetcode.com/problems/two","k’","maintain","move","on","pair","pointer","pointers:","prop","realli","search","size","slower","subarray","sum/","techniqu","two","typic","us","water/"],"DataStructures/Arrays/Subarrays.html":["(d","(end_index","(i","(n","(sorted)","(start_index","*","+","1)","1))","1)/2","2","3/","=","absolut","addit","answer","appli","array","array:","basic","befor","binari","brute","catch:","checks:","comparison","constraint","current","d","data","deal","desir","differ","domain","don’t","dp","dure","each","element","element:","end","everytim","exclud","final_answ","find","forc","frequenc","https://leetcode.com/problems/maximum","https://www.geeksforgeeks.org/maximum","https://www.geeksforgeeks.org/numb","https://www.geeksforgeeks.org/xor","i)","impli","includ","instead","iteration.","ith","k/","k:","keep","left","less","look","matched:","max/min.","max/min:","maximum","maxval","minval","modulo","more","move:","multi,","need","negative,","new","odd","older","oper","optim","point","pointer","post","pre","prefix","prefix_arr[0]","prefix_arr[1]","previou","produc","product","quantiti","question","refer","relat","requir","right","run","satisfi","search","set","similar","size","slide","start","step","store","subarray","subarray/","subarrays,","subarrays:","subsequ","subsequences.","sum","sum,","sum/","swap","thing","till","travers","two","unless","valu","whole","window","xors/"],"DataStructures/Arrays/Subsets.html":["/","1,","18/","1])","2","2)","=","archives:","array","checks:","choices:","dp","each","element,","geek","https://www.geeksforgeeks.org/partit","https://www.geeksforgeeks.org/tag/subset/","implement","issubsetsum(list,","leav","list[n","n","n,","optim","problem","question","recurs","sort","standard","subset","sum","take","this:","two","way","whole"],"DataStructures/Strings/":["string"],"DataStructures/Strings/StandardQuestions.html":[">","brute","characters/","https://leetcode.com/problems/longest","question","repeat","set","slide","standard","substr","window","without"],"DataStructures/Trees/":["alway","answer","append","best.","bfs.","brave","check","child","crux","df","don’t","easier.","find","first.","function","gener","go","helper","here","imagin","innovative:","inord","jump","kind","left","level","life","make","need","node","pattern","recursion.","right","root","simpl","simple.","simplest","solut","there,","tips:","travers","tree","tweak","veri","wise"],"DataStructures/Trees/DepthFirst.html":["#","(leaves[i]","(len(leaves)","=","==",">","[]","__init__(self,","binari","bool:","class","code","def","definit","depth","fals","first","gener","https://leetcode.com/problems/leaf","inord","inorder(root.left)","inorder(root.right)","inorder(root:","leaf","leafsimilar(self,","leav","leaves.append(root.val)","leaves1","leaves1[i]):","leaves[0:]","len(leaves)):","len(leaves1)):","node.","none","none:","print(root.value)","problems:","range(0,","relat","return","root.left","root.right","root1:","root2:","root:","self.left","self.right","self.val","seqbuilder(root):","seqbuilder(root.left)","seqbuilder(root.right)","seqbuilder(root1)","seqbuilder(root2)","similar","solut","solution:","travers","tree","treenode)","treenode,","treenode:","trees/submissions/","true","varient","x","x):"],"DataStructures/Trees/LevelWise.html":["(especi","(i.e.","+","+=","0))","1","1))","=",">","__init__(self):","_helpermaxlevelsum(self)","bottom","class","collect","collections.deque)","continu","data","def","defaultdict","defaultdict(int)","depth","deque()","deque,","eg.","etc","function","gener","help","helper","if(not","import","int:","key=self.level_sum.get)","left","level","maintain","max(self.level_sum,","maxlevelsum(self,","node","node):","node,","node.v","none:","problem","relat","retriev","return","right","root:","self._helpermaxlevelsum()","self.level_sum","self.level_sum[level]","self.queu","self.queue.append((node.left,","self.queue.append((node.right,","self.queue.append((root,","self.queue.popleft()","solut","solution:","structur","template:","thick","top","transfer","travers","tree,","treenode)","valu","value)","view,","while(len(self.queue)):","width","wise"],"DataStructures/Trees/DivideAndConquer.html":["#addit","#if","#imagin","#node","#return","#some","#updat","(distinguish","=","==",">","__init__(self):","actual_solver(root.left)","actual_solver(root.right)","actual_solver(self,","answer","base","basic","binari","call","care","characterist","class","conquer","def","depth","divid","down","eg.","found:","gener","give","global/loc","go.","helper","here","kth","lca","left","left_solut","list","look","maintain","need","node,","none:","on","order","param","particular","pass","per","pivot","point)","principl","process","prop","recurs","recursion.","remember:","result","return","right","right.","right_solut","root","root):","smallest,","solut","solution:","sort","stack","taken","template:","those","travers","tree","us","valu","want","whole"],"Algorithms/":["algorithm"],"Algorithms/DFS.html":["\"\"\"","#","'subordinates':","+=",":","=",">","\\","__init__(self,","children","class","current","def","df","dict,","direct","each","employe","employee:","employee_data","employee_data:","employee_data[id][\"importance\"]","employee_data[id][\"subordinates\"]:","employees:","employees}","getimportance(self,","https://leetcode.com/problems/employe","id","id)","id:","import","importance/","importance:","info","int)","int,","int:","it'","item","item.importance,","item.subordinates}","list['employee'],","list[int]):","node","node.","process","recursiveimportance(self,","return","self.id","self.import","self.recursiveimportance(employee_data,","self.subordin","solution:","subordin","subordinate)","subordinates:","uniqu","valu","{'importance':","{item.id"],"Algorithms/Combinatorics.html":["#","(==r)","(k","(ncr)","(should","(with","*","+","+=","0","0)","0):","0:","1","1)","1):","1,","10):","2):","4","4):","6","6):",":","=","==",">","[]","[false]","\\","__init__(self):","_helper(self,","_helper_generator(self,","_helperbinaryhours(self,","_helperbinarymins(self,","accept,","add","addit","allow","array","backtracker([],","backtracker(bucket,","backtracker(bucket:","base","book","bucket","bucket.append('(')","bucket.append(')')","bucket.pop()","call","case","cc","chang","cheat","choices:","choos","class","combinations:","combinator","continu","de","deep","def","depth","df","domain)","domain:","don't","each","element","element:","fals","filter","finit","function","generateparenthesis(self,","go","helper","https://leetcode.com/problems/binari","https://leetcode.com/problems/combin","https://leetcode.com/problems/gener","i,","if((len(bucket)","if(k","if(len(bucket)","if(num","if(opencount","if(self.accepted[i]):","incomplet","insid","instanti","int)","int,","int:","k","len(domain)","level","limit","list)","list,","list:","loop","made","make","n","n:","need","next","node","none:","normal","note","num","num:","number","on","opencount","opencount)","opencount:","option","out","over","parentheses/","perm_recur(self,","permut","permutation:","pop","print(\"\\n\")","print(self.hoursaccepted)","print(self.minsaccepted)","questions:","r","rang","range(0,","range(start,","readbinary(self,","recurs","reference:","repeatition)","repetition,","return","revert","right","same","scenario","select","select.","self._helperbinaryhours(num","self._helperbinarymins(i,","self._helperbinarymins(num","self.accept","self.accepted[i]","self.bucket","self.bucket.append(domain[i])","self.bucket.pop()","self.hour","self.hoursaccept","self.hoursaccepted[i]","self.hoursaccepted[i]:","self.min","self.minsaccept","self.minsaccepted[i]","self.minsaccepted[i]:","self.n","self.n):","self.perm_recur(0,","self.perm_recur(k","self.permut","self.permutations.append(''.join(bucket))","self.permutations.append(self.bucket[:])","self.powerset","self.powerset.append(self.subset[:])","self.recurse(k,","self.solution_search(0,","self.solution_search(k","self.subset","self.subset.append(domain[k])","self.subset.pop()","set","sheet","similar","solut","solution.","solution:","solution_search(self,","solutiongenerator:","start","start:","step","subset","sum/discuss/16510/python","t:","total_permut","track","true","two","us","valu","watch/","‘reject’"],"Algorithms/Backtracking.html":["#","'visited'","((i,","(i","(i,","(int","(posit","(use","(veri","+","+=",",","0","0,","1","1)","1),","1):","1);","1,","1;","3000",":","=","==",">","_helpercopypaste(self,","accept","actual","add","answer:","backtrack","base","boolean","bucket","canjumpfromposition(int","care","check","class","complet","condit","constraint","copied))","copied,","copied:","current","current),","current,","current:","def","df","dfs(self,","direct","each","empti","exhaust","exists:","furthestjump","game","getmaximumgold(self,","gold/","grid","grid:","grid[i][j]","https://leetcode.com/problems/2","https://leetcode.com/problems/jump","https://leetcode.com/problems/path","i:","if(curr","if(i","if(n","int","int)","int,","int:","int[]","intmax","intmin","j","j)","j))","j)):","j),","j,","j:","key","keyboard/submissions/","len(grid),","len(grid[0])","limit","list[list[int]])","m","m,","math.min(posit","max","max(self.dfs(i,","max(self.dfs(x,","maximum","maximumsum","maximumsum)","min","min(2","minsteps(self,","move","n","n):","n:","necessari","nextposit","nums)","nums.length","nums[position],","of.","on","option","permut","posit","position,","possibl","problems)","public","range(m))","range(n)","recurs","recursion)","recursion,","remov","requir","return","search","see","seen),","seen):","seen.add((i,","seen.discard((i,","seen:","self._helpercopypaste(n,","set","set())","set)","similar","solut","solution:","step","sum","sum,","sum:","taken","target","true;","type","updat","x,","y","y,","{","}"],"Algorithms/DynamicProgramming.html":["!=","#(climb","'pivot'","(bag_weight","(bottom","(int","(leetcod","(len(values)","(memo[position]","(n","(top","(total_sum",")","*","+","/","0","0):","0/1","0;","1","1)","1):","1);","1)]","1;","1]","2","2.","2]","3.","4","70)",":","=","==","?","[0]","[[0]","_","achiev","again.","algorithms.","anoth","answer","appli","approach.","backtrack","backtracking.","bad,","bag_weight","bag_weight):","benefit","better","boolean","bottom","brute","caching.","calcul","canjump(int[]","canjumpfromposition(int","case)","caus","cell","cell.","cell_column)","certain","change.","check","choices,","class","climb","combin","complet","complex","complexity:","convers","correct","count","def","determin","differ","difference,","divid","done","down","dp","dp[0]","dp[1]","dp[2]","dp[i","dp[i]","dp[n","dp[n]","dynam","each","effici","eg.","elif(weight","elimin","enum","equat","even","exact","exclude)","fals","false,","false;","final","find","forc","fulli","furthestjump","futur","game","gener","goe","good,","greedi","here,","https://leetcode.com/problems/jump","if(failure_base_case):","if(i","if(success_base_case):","importantly,","independently.","index","index.good","index.unknown)","index[]","index[nums.length];","instead","int","int[]","j","knapsack","knapsack(self,","knapsack,","known,","larg","leetcode:","len(values)+","longer","loop","maintain","math.min(i","math.min(posit","max(include,","memo","memo;","memo[position]","memoiz","memori","method","minimum","more","multipl","n)","n):","need","never","new","nextposit","number","nums)","nums.length","nums[i],","nums[position],","o(2^n)","observ","onc","open","optim","optimization.","order","over","overhead","overlap","partitions:","perform","posit","position,","possibl","possible.","practice,","problem","process:","program","program:","programming)","programming:","properti","public","range(0,","range(3,","recurs","recursion.","reduc","refer","reli","remov","requir","result","return","revers","satisfi","search","self.solution_function(case_one,","self.solution_function(case_two,","similar","size","small","solut","solution,","solution:","solution_function(self,","solutions.","solutions:","solv","someth","squar","stack","stair","start","step","step,","subarray.","subproblem","subset","subsets:","substructur","sum","sum,","tabl","table[i][weight]","techniqu","this:","thought","time","top","total","tree","tri","trick","true","two","understand","unknown","up","us","usual","usually,","values,","want","weight","weights,","{","}"],"Miscellaneous/":["miscellan"],"Miscellaneous/Stocks.html":["+","0","0,","1","1]","2","=","==","approach","better","between","buy","calcul","can't","cash","cash,","cash.","class","comment","continu","current","day","day,","def","differ","dp","dynam","element","elements/","end","end,","far,","far.","fee","fee)","fee):","fee/","first","found","hold","hold,","https://leetcode.com/problems/best","https://www.geeksforgeeks.org/maximum","https://www.geeksforgeeks.org/stock","i+1","iv/discuss/54117/clean","java","k","keep","len(prices)):","limit,","list.","list[i","list[i]","local","maintain","max(cash,","max(hold,","maxima","maximum","maxprofit(self,","minima","minimum","necessary.","number","on","own","prices,","prices[0]","prices[i]","prices[i])","profit","program","range(1,","return","same","sell","sell/","share","similar","solut","solution(object):","stock","stock,","stock.","temporari","th","till","time","track","transact","transform","transit","twice/","two","updat","us","variabl","want","without"],"Miscellaneous/Intervals.html":["base","count","https://leetcode.com/discuss/interview","https://www.geeksforgeeks.org/merg","interv","intervals/","keep","merg","number","on","overlap","problem","question/356520","run","sort","start","time"],"Miscellaneous/InterestingMiscellaneous.html":["find","heap","interest","largest","max","min","miscellan","need","nth","partial","quicksort","smallest","sort:","us","variat"],"PythonicTricks/":["#return","=","array","c","c.most_common(n)","collect","convert","counter","counter(list/string)","dictionari","frequent","import","item","item:","item[1:]","item[1])}","k,","key=lambda","list","list}","n","python","sort","sorted(x.items(),","string","top","trick","v","valu","{item[0]:","{k:"],"BehavioralQuestions.html":["answer","answer.","base","behavior","better","challeng","colleg","customer?","deliv","direct","do?","drawn","experience,","experience.","faced?","follow","graduat","interact","made","mention","on","previou","problem","project,","question","recent","specifics,","sure","tell","time","two","up","vagu","work"]},"length":24},"tokenStore":{"root":{"0":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.019464720194647202},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.012096774193548387},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.009259259259259259},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}},")":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0072992700729927005}},")":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.011235955056179775}}},":":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.004866180048661801},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}}}},":":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0024330900243309003}}},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}},"/":{"1":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}}},"docs":{}},";":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.004629629629629629}}}},"1":{"0":{"docs":{},")":{"docs":{},":":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.004866180048661801}}}}},"8":{"docs":{},"/":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.020833333333333332}}}},"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.011235955056179775},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0072992700729927005},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.008064516129032258},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.004629629629629629},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.01098901098901099}},")":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.005235602094240838},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.009732360097323601},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.008064516129032258},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}},")":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.005235602094240838},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.02247191011235955}}},"/":{"2":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.005235602094240838}}},"docs":{}},":":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0024330900243309003},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.004629629629629629}}},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.008064516129032258}}},";":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.004629629629629629}}},"]":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.004629629629629629}}}},",":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.041666666666666664},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.012165450121654502},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.012096774193548387}}},"]":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.004629629629629629},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}},")":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.020833333333333332}}}},";":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.004629629629629629}}}},"2":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.029411764705882353},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.005235602094240838},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.041666666666666664},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.004629629629629629},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}},")":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.041666666666666664}},":":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0024330900243309003}}}},".":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.004629629629629629}}},"]":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.004629629629629629}}}},"3":{"0":{"0":{"0":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}},"docs":{}},"docs":{}},"docs":{},"/":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.005235602094240838}}},".":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}}}},"4":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0024330900243309003},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}},")":{"docs":{},":":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0024330900243309003}}}}},"6":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0024330900243309003}},")":{"docs":{},":":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0024330900243309003}}}}},"7":{"0":{"docs":{},")":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}}}},"docs":{}},"docs":{},"c":{"docs":{"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.029411764705882353}},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{"./":{"ref":"./","tf":0.25},"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.07692307692307693},"DataStructures/Trees/DepthFirst.html":{"ref":"DataStructures/Trees/DepthFirst.html","tf":0.010526315789473684}}}},"m":{"docs":{},"p":{"docs":{},"e":{"docs":{},"t":{"docs":{},"i":{"docs":{},"t":{"docs":{"./":{"ref":"./","tf":0.25}}}}}},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{},"s":{"docs":{},"o":{"docs":{},"n":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.005235602094240838}}}}}}}},"l":{"docs":{},"e":{"docs":{},"t":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":3.337365591397849},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}}},"x":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}},"i":{"docs":{},"t":{"docs":{},"y":{"docs":{},":":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}}}}}}}}}},"b":{"docs":{},"i":{"docs":{},"n":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},":":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0024330900243309003}}}}}}},"o":{"docs":{},"r":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":10.002433090024331}}}}}}}}},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}}}}},"n":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.02617801047120419},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}}}}}}}},"t":{"docs":{},"i":{"docs":{},"n":{"docs":{},"u":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.011235955056179775},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0072992700729927005},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}}}},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"r":{"docs":{"DataStructures/Trees/DivideAndConquer.html":{"ref":"DataStructures/Trees/DivideAndConquer.html","tf":5.009615384615385}}}}}},"d":{"docs":{},"i":{"docs":{},"t":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.008064516129032258}}}}},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}}},"t":{"docs":{"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.029411764705882353}}}}}}},"l":{"docs":{},"l":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.011235955056179775},"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.029411764705882353}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},".":{"docs":{},"d":{"docs":{},"e":{"docs":{},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},")":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.011235955056179775}}}}}}}}}}}}}}},"g":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.02631578947368421}}}}}},"p":{"docs":{},"i":{"docs":{},"e":{"docs":{},"d":{"docs":{},")":{"docs":{},")":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}}},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}},":":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}}}}}},"r":{"docs":{},"r":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}}}}}}},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.05263157894736842}},"e":{"docs":{},"r":{"docs":{"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.029411764705882353}},"(":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"/":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},")":{"docs":{"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.029411764705882353}}}}}}}}}}}}}}}}}}}}},"l":{"docs":{},"a":{"docs":{},"s":{"docs":{},"s":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.02564102564102564},"DataStructures/Trees/DepthFirst.html":{"ref":"DataStructures/Trees/DepthFirst.html","tf":0.021052631578947368},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.011235955056179775},"DataStructures/Trees/DivideAndConquer.html":{"ref":"DataStructures/Trees/DivideAndConquer.html","tf":0.009615384615384616},"Algorithms/DFS.html":{"ref":"Algorithms/DFS.html","tf":0.021052631578947368},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.009732360097323601},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.008064516129032258},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.009259259259259259},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}},",":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.02564102564102564}}}}}},"i":{"docs":{},"m":{"docs":{},"b":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}}}}}},"h":{"docs":{},"e":{"docs":{},"c":{"docs":{},"k":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02857142857142857},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.04},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}},"s":{"docs":{},":":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.005235602094240838},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.020833333333333332}}}}}},"a":{"docs":{},"t":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0024330900243309003}}}}},"o":{"docs":{},"i":{"docs":{},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},":":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.020833333333333332},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0024330900243309003}}},",":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}}}}}}},"o":{"docs":{},"s":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.004866180048661801}}}}},"a":{"docs":{},"r":{"docs":{},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"/":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.07692307692307693}}}},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{"DataStructures/Trees/DivideAndConquer.html":{"ref":"DataStructures/Trees/DivideAndConquer.html","tf":0.009615384615384616}}}}}}}}}}},"n":{"docs":{},"g":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.004866180048661801}},"e":{"docs":{},".":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}}}}}},"l":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.02631578947368421}}}}}}}},"i":{"docs":{},"l":{"docs":{},"d":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.02}},"r":{"docs":{},"e":{"docs":{},"n":{"docs":{"Algorithms/DFS.html":{"ref":"Algorithms/DFS.html","tf":0.010526315789473684}}}}}}}}},"a":{"docs":{},"t":{"docs":{},"c":{"docs":{},"h":{"docs":{},":":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.015706806282722512}}}}}},"l":{"docs":{},"l":{"docs":{"DataStructures/Trees/DivideAndConquer.html":{"ref":"DataStructures/Trees/DivideAndConquer.html","tf":0.019230769230769232},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0072992700729927005}}},"c":{"docs":{},"u":{"docs":{},"l":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}}}},"r":{"docs":{},"e":{"docs":{"DataStructures/Trees/DivideAndConquer.html":{"ref":"DataStructures/Trees/DivideAndConquer.html","tf":0.009615384615384616},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}}},"s":{"docs":{},"e":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0024330900243309003}},")":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}}}},"h":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.03296703296703297}},",":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.01098901098901099}}},".":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}}},"n":{"docs":{},"j":{"docs":{},"u":{"docs":{},"m":{"docs":{},"p":{"docs":{},"f":{"docs":{},"r":{"docs":{},"o":{"docs":{},"m":{"docs":{},"p":{"docs":{},"o":{"docs":{},"s":{"docs":{},"i":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}}}}}}}}}}}}}}}}}},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}}}}}}}}}}}},"'":{"docs":{},"t":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}}},"c":{"docs":{},"h":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},".":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}}}}}}}},"u":{"docs":{},"s":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}}}}},"u":{"docs":{},"r":{"docs":{},"r":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.010471204188481676},"Algorithms/DFS.html":{"ref":"Algorithms/DFS.html","tf":0.042105263157894736},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.012096774193548387},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}},")":{"docs":{},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}}},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}},":":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}}}}}}},"s":{"docs":{},"t":{"docs":{},"o":{"docs":{},"m":{"docs":{},"e":{"docs":{},"r":{"docs":{},"?":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.02631578947368421}}}}}}}}}},"r":{"docs":{},"u":{"docs":{},"x":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.02}}}}},"c":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0024330900243309003}}},"e":{"docs":{},"l":{"docs":{},"l":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}},".":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}}},"_":{"docs":{},"c":{"docs":{},"o":{"docs":{},"l":{"docs":{},"u":{"docs":{},"m":{"docs":{},"n":{"docs":{},")":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}}}}}}}}}}}},"r":{"docs":{},"t":{"docs":{},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}}}}}}}},".":{"docs":{},"m":{"docs":{},"o":{"docs":{},"s":{"docs":{},"t":{"docs":{},"_":{"docs":{},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"m":{"docs":{},"o":{"docs":{},"n":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.029411764705882353}}}}}}}}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.004629629629629629}},"r":{"docs":{},"o":{"docs":{},"d":{"docs":{},"u":{"docs":{},"c":{"docs":{},"t":{"docs":{"./":{"ref":"./","tf":10.25}}}}}}}},":":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.011235955056179775},"Algorithms/DFS.html":{"ref":"Algorithms/DFS.html","tf":0.021052631578947368},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.004866180048661801},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.016129032258064516}}},")":{"docs":{"Algorithms/DFS.html":{"ref":"Algorithms/DFS.html","tf":0.021052631578947368},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.012165450121654502},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.008064516129032258}}},",":{"docs":{"Algorithms/DFS.html":{"ref":"Algorithms/DFS.html","tf":0.021052631578947368},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.009732360097323601},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.020161290322580645}}},"[":{"docs":{},"]":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}}}},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}}},"i":{"docs":{},"n":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}}}},"e":{"docs":{},"r":{"docs":{},"v":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":10.105263157894736}},"a":{"docs":{},"l":{"docs":{},"s":{"docs":{},"/":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.05263157894736842}}}}}}},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":5}}}}},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.02631578947368421}}}}}}}},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"u":{"docs":{},"c":{"docs":{},"t":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":5.0256410256410255}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},":":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02857142857142857}}}}}}}}}}},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.005235602094240838},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}}}}},"a":{"docs":{},"n":{"docs":{},"t":{"docs":{},"i":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0024330900243309003}}}}}}},"i":{"docs":{},"d":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0024330900243309003}}}}},"c":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"s":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02857142857142857}}}}}},"l":{"docs":{},"u":{"docs":{},"d":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.005235602094240838}}}}},"o":{"docs":{},"m":{"docs":{},"p":{"docs":{},"l":{"docs":{},"e":{"docs":{},"t":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0024330900243309003}}}}}}}}},"n":{"docs":{},"o":{"docs":{},"v":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"v":{"docs":{},"e":{"docs":{},":":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.02}}}}}}}}}}},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.02},"DataStructures/Trees/DepthFirst.html":{"ref":"DataStructures/Trees/DepthFirst.html","tf":0.021052631578947368}},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},")":{"docs":{"DataStructures/Trees/DepthFirst.html":{"ref":"DataStructures/Trees/DepthFirst.html","tf":0.010526315789473684}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},")":{"docs":{"DataStructures/Trees/DepthFirst.html":{"ref":"DataStructures/Trees/DepthFirst.html","tf":0.010526315789473684}}}}}}}}},":":{"docs":{"DataStructures/Trees/DepthFirst.html":{"ref":"DataStructures/Trees/DepthFirst.html","tf":0.010526315789473684}}}}}}}}}}}}},"f":{"docs":{},"o":{"docs":{"Algorithms/DFS.html":{"ref":"Algorithms/DFS.html","tf":0.010526315789473684}}}},"d":{"docs":{},"e":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"l":{"docs":{},"y":{"docs":{},".":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}}}}}}}}}}}},"x":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.004629629629629629}},".":{"docs":{},"g":{"docs":{},"o":{"docs":{},"o":{"docs":{},"d":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}}}}}},"u":{"docs":{},"n":{"docs":{},"k":{"docs":{},"n":{"docs":{},"o":{"docs":{},"w":{"docs":{},"n":{"docs":{},")":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}}}}}}}}}}},"[":{"docs":{},"]":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.004629629629629629}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},"]":{"docs":{},";":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}}}}}}}}}}}}}}}}}}}},")":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.005235602094240838}}},"m":{"docs":{},"p":{"docs":{},"l":{"docs":{},"i":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.005235602094240838}}},"e":{"docs":{},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.020833333333333332}}}}}}}},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.011235955056179775},"Algorithms/DFS.html":{"ref":"Algorithms/DFS.html","tf":0.021052631578947368},"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.029411764705882353}},"a":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},"/":{"docs":{"Algorithms/DFS.html":{"ref":"Algorithms/DFS.html","tf":0.010526315789473684}}},":":{"docs":{"Algorithms/DFS.html":{"ref":"Algorithms/DFS.html","tf":0.010526315789473684}}}}},"t":{"docs":{},"l":{"docs":{},"y":{"docs":{},",":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}}}}}}}}}}}},"a":{"docs":{},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.02}}}}}}},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},".":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.005235602094240838}}}}}}}}},"m":{"docs":{"Algorithms/DFS.html":{"ref":"Algorithms/DFS.html","tf":0.010526315789473684},"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.029411764705882353}},".":{"docs":{},"i":{"docs":{},"m":{"docs":{},"p":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{},"a":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},",":{"docs":{"Algorithms/DFS.html":{"ref":"Algorithms/DFS.html","tf":0.010526315789473684}}}}}}}}}}}}},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"i":{"docs":{},"n":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"s":{"docs":{},"}":{"docs":{"Algorithms/DFS.html":{"ref":"Algorithms/DFS.html","tf":0.010526315789473684}}}}}}}}}}}}}}}},":":{"docs":{"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.029411764705882353}}},"[":{"1":{"docs":{},":":{"docs":{},"]":{"docs":{"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.029411764705882353}}}},"]":{"docs":{},")":{"docs":{},"}":{"docs":{"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.029411764705882353}}}}}},"docs":{}}}},"h":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.005235602094240838}}},"'":{"docs":{"Algorithms/DFS.html":{"ref":"Algorithms/DFS.html","tf":0.010526315789473684}}}},"s":{"docs":{},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},"(":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},",":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.0625}}}}}}}}}}}}}}}}}},"f":{"docs":{},"(":{"docs":{},"n":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}},"o":{"docs":{},"t":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.011235955056179775}}}},"u":{"docs":{},"m":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.009732360097323601}}}}},"(":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"(":{"docs":{},"b":{"docs":{},"u":{"docs":{},"c":{"docs":{},"k":{"docs":{},"e":{"docs":{},"t":{"docs":{},")":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0024330900243309003}}}}}}}}}}}}}},"k":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0024330900243309003}}},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"(":{"docs":{},"b":{"docs":{},"u":{"docs":{},"c":{"docs":{},"k":{"docs":{},"e":{"docs":{},"t":{"docs":{},")":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0024330900243309003}}}}}}}}}}}}},"o":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0024330900243309003}}}}}}}}}}},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},".":{"docs":{},"a":{"docs":{},"c":{"docs":{},"c":{"docs":{},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{},"e":{"docs":{},"d":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},")":{"docs":{},":":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0024330900243309003}}}}}}}}}}}}}}}}}}},"u":{"docs":{},"c":{"docs":{},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{},"_":{"docs":{},"b":{"docs":{},"a":{"docs":{},"s":{"docs":{},"e":{"docs":{},"_":{"docs":{},"c":{"docs":{},"a":{"docs":{},"s":{"docs":{},"e":{"docs":{},")":{"docs":{},":":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}}}}}}}}}}}}}}}}}}}}},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{},"r":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.008064516129032258}}}}}},"i":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}}},"f":{"docs":{},"a":{"docs":{},"i":{"docs":{},"l":{"docs":{},"u":{"docs":{},"r":{"docs":{},"e":{"docs":{},"_":{"docs":{},"b":{"docs":{},"a":{"docs":{},"s":{"docs":{},"e":{"docs":{},"_":{"docs":{},"c":{"docs":{},"a":{"docs":{},"s":{"docs":{},"e":{"docs":{},")":{"docs":{},":":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}}}}}}}}}}}}}}}}}}}}}}},"d":{"docs":{"Algorithms/DFS.html":{"ref":"Algorithms/DFS.html","tf":0.042105263157894736}},")":{"docs":{"Algorithms/DFS.html":{"ref":"Algorithms/DFS.html","tf":0.010526315789473684}}},":":{"docs":{"Algorithms/DFS.html":{"ref":"Algorithms/DFS.html","tf":0.031578947368421054}}}},",":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0024330900243309003}}},":":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}},"+":{"1":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}},"docs":{}},"v":{"docs":{},"/":{"docs":{},"d":{"docs":{},"i":{"docs":{},"s":{"docs":{},"c":{"docs":{},"u":{"docs":{},"s":{"docs":{},"s":{"docs":{},"/":{"5":{"4":{"1":{"1":{"7":{"docs":{},"/":{"docs":{},"c":{"docs":{},"l":{"docs":{},"e":{"docs":{},"a":{"docs":{},"n":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}}}}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}}}},"n":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.041666666666666664},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.009732360097323601},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.008064516129032258},"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.029411764705882353}},"o":{"docs":{},"t":{"docs":{},"e":{"docs":{"./":{"ref":"./","tf":0.25},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0024330900243309003}}}},"d":{"docs":{},"e":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.02},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.02247191011235955},"Algorithms/DFS.html":{"ref":"Algorithms/DFS.html","tf":0.010526315789473684},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0024330900243309003}},".":{"docs":{"DataStructures/Trees/DepthFirst.html":{"ref":"DataStructures/Trees/DepthFirst.html","tf":0.010526315789473684},"Algorithms/DFS.html":{"ref":"Algorithms/DFS.html","tf":0.010526315789473684}},"v":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.011235955056179775}}}},")":{"docs":{},":":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.011235955056179775}}}},",":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.011235955056179775},"DataStructures/Trees/DivideAndConquer.html":{"ref":"DataStructures/Trees/DivideAndConquer.html","tf":0.009615384615384616}}}}},"n":{"docs":{},"e":{"docs":{"DataStructures/Trees/DepthFirst.html":{"ref":"DataStructures/Trees/DepthFirst.html","tf":0.031578947368421054}},":":{"docs":{"DataStructures/Trees/DepthFirst.html":{"ref":"DataStructures/Trees/DepthFirst.html","tf":0.021052631578947368},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.011235955056179775},"DataStructures/Trees/DivideAndConquer.html":{"ref":"DataStructures/Trees/DivideAndConquer.html","tf":0.009615384615384616},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.012165450121654502}}}}},"r":{"docs":{},"m":{"docs":{},"a":{"docs":{},"l":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0024330900243309003}}}}}}},"e":{"docs":{},"e":{"docs":{},"d":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.005235602094240838},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.02},"DataStructures/Trees/DivideAndConquer.html":{"ref":"DataStructures/Trees/DivideAndConquer.html","tf":0.038461538461538464},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0024330900243309003},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.004629629629629629},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.07692307692307693}}}},"g":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"v":{"docs":{},"e":{"docs":{},",":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.005235602094240838}}}}}}}}},"w":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.005235602094240838},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}}},"x":{"docs":{},"t":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0024330900243309003}},"p":{"docs":{},"o":{"docs":{},"s":{"docs":{},"i":{"docs":{},"t":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.008064516129032258},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.004629629629629629}}}}}}}}},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}},"y":{"docs":{},".":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}}}}}}}},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}}}}}},",":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.020833333333333332}}},":":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0024330900243309003},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.008064516129032258}}},"u":{"docs":{},"m":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.004866180048661801}},":":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0072992700729927005}}},"b":{"docs":{},"e":{"docs":{},"r":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.004866180048661801},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.011574074074074073},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.02197802197802198},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.05263157894736842}}}}},"s":{"docs":{},")":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.004629629629629629}}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.008064516129032258},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.004629629629629629}}}}}}}}},"[":{"docs":{},"p":{"docs":{},"o":{"docs":{},"s":{"docs":{},"i":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"]":{"docs":{},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}}}}}}}}}}}},"i":{"docs":{},"]":{"docs":{},",":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}}}}}}}}},")":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.004629629629629629}},":":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.008064516129032258},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.004629629629629629}}}},"t":{"docs":{},"h":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.07692307692307693}}}}},"a":{"docs":{},"b":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.02564102564102564}}}}}}},"o":{"docs":{},"l":{"docs":{},"u":{"docs":{},"t":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.005235602094240838}}}}}}}},"p":{"docs":{},"p":{"docs":{},"r":{"docs":{},"o":{"docs":{},"a":{"docs":{},"c":{"docs":{},"h":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.02564102564102564},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}},".":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}}}}}}}},"l":{"docs":{},"i":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.005235602094240838},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.004629629629629629}}}},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.02}}}}}}},"r":{"docs":{},"r":{"docs":{},"a":{"docs":{},"y":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":10.085714285714285},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.015706806282722512},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.020833333333333332},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0024330900243309003},"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.029411764705882353}},".":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.029411764705882353}}},":":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.005235602094240838}}}}}},"c":{"docs":{},"h":{"docs":{},"i":{"docs":{},"v":{"docs":{},"e":{"docs":{},"s":{"docs":{},":":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.020833333333333332}}}}}}}}}},"d":{"docs":{},"d":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0024330900243309003},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}},"i":{"docs":{},"t":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.005235602094240838},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0024330900243309003}}}}}},"n":{"docs":{},"s":{"docs":{},"w":{"docs":{},"e":{"docs":{},"r":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.005235602094240838},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.02},"DataStructures/Trees/DivideAndConquer.html":{"ref":"DataStructures/Trees/DivideAndConquer.html","tf":0.019230769230769232},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.07894736842105263}},":":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}},".":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.02631578947368421}}}}}}},"o":{"docs":{},"t":{"docs":{},"h":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}}}}}},"l":{"docs":{},"w":{"docs":{},"a":{"docs":{},"y":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.02}}}}},"g":{"docs":{},"o":{"docs":{},"r":{"docs":{},"i":{"docs":{},"t":{"docs":{},"h":{"docs":{},"m":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":11}},"s":{"docs":{},".":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}}}}}}}}}}},"l":{"docs":{},"o":{"docs":{},"w":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0024330900243309003}}}}}},"c":{"docs":{},"t":{"docs":{},"u":{"docs":{},"a":{"docs":{},"l":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.008064516129032258}},"_":{"docs":{},"s":{"docs":{},"o":{"docs":{},"l":{"docs":{},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},")":{"docs":{"DataStructures/Trees/DivideAndConquer.html":{"ref":"DataStructures/Trees/DivideAndConquer.html","tf":0.009615384615384616}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},")":{"docs":{"DataStructures/Trees/DivideAndConquer.html":{"ref":"DataStructures/Trees/DivideAndConquer.html","tf":0.009615384615384616}}}}}}}}}}}}},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Trees/DivideAndConquer.html":{"ref":"DataStructures/Trees/DivideAndConquer.html","tf":0.009615384615384616}}}}}}}}}}}}}}}}}}},"c":{"docs":{},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}},",":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0024330900243309003}}}}}}},"h":{"docs":{},"i":{"docs":{},"e":{"docs":{},"v":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}}}}}}},"g":{"docs":{},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{},".":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}}}}}}}},"b":{"docs":{},"r":{"docs":{},"u":{"docs":{},"t":{"docs":{},"e":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.02564102564102564},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.005235602094240838},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.07692307692307693},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}}}}},"a":{"docs":{},"v":{"docs":{},"e":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.02}}}}}},"u":{"docs":{},"i":{"docs":{},"l":{"docs":{},"t":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.02564102564102564}}}}},"c":{"docs":{},"k":{"docs":{},"e":{"docs":{},"t":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0024330900243309003},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"'":{"docs":{},"(":{"docs":{},"'":{"docs":{},")":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0024330900243309003}}}}},")":{"docs":{},"'":{"docs":{},")":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0024330900243309003}}}}}}}}}}}}},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.004866180048661801}}}}}}}}}}}},"y":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.038461538461538464}}}},"a":{"docs":{},"s":{"docs":{},"i":{"docs":{},"c":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.005235602094240838},"DataStructures/Trees/DivideAndConquer.html":{"ref":"DataStructures/Trees/DivideAndConquer.html","tf":0.009615384615384616}}}},"e":{"docs":{"DataStructures/Trees/DivideAndConquer.html":{"ref":"DataStructures/Trees/DivideAndConquer.html","tf":0.009615384615384616},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.004866180048661801},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.05263157894736842},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.02631578947368421}}}},"c":{"docs":{},"k":{"docs":{},"t":{"docs":{},"r":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":3.337365591397849},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.006944444444444444}},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"[":{"docs":{},"]":{"docs":{},",":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0024330900243309003}}}}},"b":{"docs":{},"u":{"docs":{},"c":{"docs":{},"k":{"docs":{},"e":{"docs":{},"t":{"docs":{},",":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.004866180048661801}}},":":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0024330900243309003}}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},".":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}}}}}}}}}}}}},"d":{"docs":{},",":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.004629629629629629}}}},"g":{"docs":{},"_":{"docs":{},"w":{"docs":{},"e":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}},")":{"docs":{},":":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}}}}}}}}}}}}},"e":{"docs":{},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.005235602094240838}}}}},"s":{"docs":{},"t":{"docs":{},".":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.02}}}}},"n":{"docs":{},"e":{"docs":{},"f":{"docs":{},"i":{"docs":{},"t":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}}}}}}},"t":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.02631578947368421}}}}},"w":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.01098901098901099}}}}}}},"h":{"docs":{},"a":{"docs":{},"v":{"docs":{},"i":{"docs":{},"o":{"docs":{},"r":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":5.026315789473684}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.005235602094240838},"DataStructures/Trees/DepthFirst.html":{"ref":"DataStructures/Trees/DepthFirst.html","tf":0.010526315789473684},"DataStructures/Trees/DivideAndConquer.html":{"ref":"DataStructures/Trees/DivideAndConquer.html","tf":0.009615384615384616}}}}}}},"f":{"docs":{},"s":{"docs":{},".":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.02}}}}},"o":{"docs":{},"o":{"docs":{},"l":{"docs":{},":":{"docs":{"DataStructures/Trees/DepthFirst.html":{"ref":"DataStructures/Trees/DepthFirst.html","tf":0.010526315789473684}}},"e":{"docs":{},"a":{"docs":{},"n":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.004629629629629629}}}}}},"k":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0024330900243309003}}}},"t":{"docs":{},"t":{"docs":{},"o":{"docs":{},"m":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.011235955056179775},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.004629629629629629}}}}}}}},"d":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.010471204188481676}},"e":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0024330900243309003}},"c":{"docs":{},"o":{"docs":{},"r":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.02564102564102564}}}},"i":{"docs":{},"d":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.029411764705882353}}}}},"a":{"docs":{},"l":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.005235602094240838}}}},"s":{"docs":{},"i":{"docs":{},"r":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.005235602094240838}}}}},"f":{"docs":{"DataStructures/Trees/DepthFirst.html":{"ref":"DataStructures/Trees/DepthFirst.html","tf":0.042105263157894736},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.033707865168539325},"DataStructures/Trees/DivideAndConquer.html":{"ref":"DataStructures/Trees/DivideAndConquer.html","tf":0.019230769230769232},"Algorithms/DFS.html":{"ref":"Algorithms/DFS.html","tf":0.031578947368421054},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.024330900243309004},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.016129032258064516},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.004629629629629629},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}},"i":{"docs":{},"n":{"docs":{},"i":{"docs":{},"t":{"docs":{"DataStructures/Trees/DepthFirst.html":{"ref":"DataStructures/Trees/DepthFirst.html","tf":0.010526315789473684}}}}}},"a":{"docs":{},"u":{"docs":{},"l":{"docs":{},"t":{"docs":{},"d":{"docs":{},"i":{"docs":{},"c":{"docs":{},"t":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.011235955056179775}},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},")":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.011235955056179775}}}}}}}}}}}}}}}},"p":{"docs":{},"t":{"docs":{},"h":{"docs":{"DataStructures/Trees/DepthFirst.html":{"ref":"DataStructures/Trees/DepthFirst.html","tf":5.010526315789473},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.011235955056179775},"DataStructures/Trees/DivideAndConquer.html":{"ref":"DataStructures/Trees/DivideAndConquer.html","tf":0.009615384615384616},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0024330900243309003}}}}},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.011235955056179775}}}},",":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.011235955056179775}}}}}},"e":{"docs":{},"p":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0024330900243309003}}}},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}}}}}}}},"l":{"docs":{},"i":{"docs":{},"v":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.02631578947368421}}}}}},"o":{"docs":{},"c":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.02564102564102564}}}}}},"m":{"docs":{},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.005235602094240838}},")":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.014598540145985401}}},":":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.009732360097323601}}}}}}},"n":{"docs":{},"’":{"docs":{},"t":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.005235602094240838},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.02}}}},"'":{"docs":{},"t":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.004866180048661801}}}},"e":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}}}},"w":{"docs":{},"n":{"docs":{"DataStructures/Trees/DivideAndConquer.html":{"ref":"DataStructures/Trees/DivideAndConquer.html","tf":0.009615384615384616},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.011574074074074073}}}},"?":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.02631578947368421}}}},"a":{"docs":{},"t":{"docs":{},"a":{"docs":{"DataStructures/":{"ref":"DataStructures/","tf":5.2},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.005235602094240838},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.033707865168539325}}}},"y":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.01098901098901099}},",":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.01098901098901099}}}}},"i":{"docs":{},"f":{"docs":{},"f":{"docs":{},"e":{"docs":{},"r":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.005235602094240838},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.006944444444444444},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.016483516483516484}},"e":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},",":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}}}}}}}}}}},"v":{"docs":{},"i":{"docs":{},"d":{"docs":{"DataStructures/Trees/DivideAndConquer.html":{"ref":"DataStructures/Trees/DivideAndConquer.html","tf":5.009615384615385},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}}}}},"c":{"docs":{},"t":{"docs":{},",":{"docs":{"Algorithms/DFS.html":{"ref":"Algorithms/DFS.html","tf":0.010526315789473684}}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.058823529411764705}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"Algorithms/DFS.html":{"ref":"Algorithms/DFS.html","tf":0.010526315789473684},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.02631578947368421}}}}}}},"p":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.005235602094240838},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.041666666666666664},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}},"[":{"0":{"docs":{},"]":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}}}},"1":{"docs":{},"]":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}}}},"2":{"docs":{},"]":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}}}},"docs":{},"i":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.004629629629629629}},"]":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}}}},"n":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.004629629629629629}},"]":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.004629629629629629}}}}}},"u":{"docs":{},"r":{"docs":{},"e":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.005235602094240838}}}}},"f":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.02},"Algorithms/DFS.html":{"ref":"Algorithms/DFS.html","tf":10.010526315789473},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0024330900243309003},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}}}}}}}}},"y":{"docs":{},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":5.023148148148148},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}}}},"r":{"docs":{},"a":{"docs":{},"w":{"docs":{},"n":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.02631578947368421}}}}}}},"f":{"docs":{},"i":{"docs":{},"r":{"docs":{},"s":{"docs":{},"t":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.02564102564102564},"DataStructures/Trees/DepthFirst.html":{"ref":"DataStructures/Trees/DepthFirst.html","tf":5.010526315789473},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}},".":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.02}}}}}},"n":{"docs":{},"a":{"docs":{},"l":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}},"_":{"docs":{},"a":{"docs":{},"n":{"docs":{},"s":{"docs":{},"w":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.005235602094240838}}}}}}}}},"d":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.015706806282722512},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.02},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.011574074074074073},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.07692307692307693}}},"i":{"docs":{},"t":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0024330900243309003}}}}},"l":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0024330900243309003}}}}}}},"o":{"docs":{},"r":{"docs":{},"c":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.02564102564102564},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.005235602094240838},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}}}},"u":{"docs":{},"n":{"docs":{},"d":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.01098901098901099}},":":{"docs":{"DataStructures/Trees/DivideAndConquer.html":{"ref":"DataStructures/Trees/DivideAndConquer.html","tf":0.009615384615384616}}}}}},"l":{"docs":{},"l":{"docs":{},"o":{"docs":{},"w":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.02631578947368421}}}}}}},"u":{"docs":{},"n":{"docs":{},"c":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.05128205128205128},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.02},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.011235955056179775},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0024330900243309003}}}}}}}},"r":{"docs":{},"t":{"docs":{},"h":{"docs":{},"e":{"docs":{},"r":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.02564102564102564}}},"s":{"docs":{},"t":{"docs":{},"j":{"docs":{},"u":{"docs":{},"m":{"docs":{},"p":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.004629629629629629}}}}}}}}}}}},"l":{"docs":{},"l":{"docs":{},"i":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}}}}},"t":{"docs":{},"u":{"docs":{},"r":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}}}}}},"a":{"docs":{},"s":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.029411764705882353}}}}}},"l":{"docs":{},"s":{"docs":{"DataStructures/Trees/DepthFirst.html":{"ref":"DataStructures/Trees/DepthFirst.html","tf":0.021052631578947368},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0072992700729927005},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}},"e":{"docs":{},",":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}}},";":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}}}}}},"r":{"docs":{},",":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}},".":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}},"c":{"docs":{},"e":{"docs":{},"d":{"docs":{},"?":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.02631578947368421}}}}}}},"r":{"docs":{},"e":{"docs":{},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"n":{"docs":{},"c":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.005235602094240838}}},"t":{"docs":{"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.029411764705882353}}}}}}}}},"e":{"docs":{},"e":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.01098901098901099}},")":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.01098901098901099}},":":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}},"/":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}}}},"g":{"docs":{},"e":{"docs":{},"n":{"docs":{},"e":{"docs":{},"r":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":5.0256410256410255},"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02857142857142857},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.02},"DataStructures/Trees/DepthFirst.html":{"ref":"DataStructures/Trees/DepthFirst.html","tf":0.010526315789473684},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.011235955056179775},"DataStructures/Trees/DivideAndConquer.html":{"ref":"DataStructures/Trees/DivideAndConquer.html","tf":0.009615384615384616},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"h":{"docs":{},"e":{"docs":{},"s":{"docs":{},"i":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0024330900243309003}}}}}}}}}}}}}}}}}}}}}}}}},"t":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.02564102564102564}}}}},"i":{"docs":{},"m":{"docs":{},"p":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{},"a":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Algorithms/DFS.html":{"ref":"Algorithms/DFS.html","tf":0.010526315789473684}}}}}}}}}}}}}}}}}},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"i":{"docs":{},"m":{"docs":{},"u":{"docs":{},"m":{"docs":{},"g":{"docs":{},"o":{"docs":{},"l":{"docs":{},"d":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}}}}}}}}}}}}}}}}}}},"e":{"docs":{},"k":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.041666666666666664}}}}},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02857142857142857}}}}}},"e":{"docs":{},"d":{"docs":{},"i":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}}}}}},"i":{"docs":{},"d":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}},":":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"[":{"docs":{},"j":{"docs":{},"]":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.008064516129032258}}}}}}}}}},"a":{"docs":{},"d":{"docs":{},"u":{"docs":{},"a":{"docs":{},"t":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.02631578947368421}}}}}}}},"o":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.02},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.009732360097323601}},".":{"docs":{"DataStructures/Trees/DivideAndConquer.html":{"ref":"DataStructures/Trees/DivideAndConquer.html","tf":0.009615384615384616}}},"l":{"docs":{},"d":{"docs":{},"/":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}}}},"e":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}}},"o":{"docs":{},"d":{"docs":{},",":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.004629629629629629}}}}}},"i":{"docs":{},"v":{"docs":{},"e":{"docs":{"DataStructures/Trees/DivideAndConquer.html":{"ref":"DataStructures/Trees/DivideAndConquer.html","tf":0.009615384615384616}}}}},"l":{"docs":{},"o":{"docs":{},"b":{"docs":{},"a":{"docs":{},"l":{"docs":{},"/":{"docs":{},"l":{"docs":{},"o":{"docs":{},"c":{"docs":{"DataStructures/Trees/DivideAndConquer.html":{"ref":"DataStructures/Trees/DivideAndConquer.html","tf":0.019230769230769232}}}}}}}}}}},"a":{"docs":{},"m":{"docs":{},"e":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}}}}}},"h":{"docs":{},"e":{"docs":{},"l":{"docs":{},"p":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02857142857142857},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.011235955056179775}},"e":{"docs":{},"r":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.02564102564102564},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.02},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.02247191011235955},"DataStructures/Trees/DivideAndConquer.html":{"ref":"DataStructures/Trees/DivideAndConquer.html","tf":0.019230769230769232},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0024330900243309003}}}}}},"r":{"docs":{},"e":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.02},"DataStructures/Trees/DivideAndConquer.html":{"ref":"DataStructures/Trees/DivideAndConquer.html","tf":0.009615384615384616}},",":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}}}}},"a":{"docs":{},"p":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.07692307692307693}}}}},"t":{"docs":{},"t":{"docs":{},"p":{"docs":{},"s":{"docs":{},":":{"docs":{},"/":{"docs":{},"/":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},".":{"docs":{},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"/":{"docs":{},"p":{"docs":{},"r":{"docs":{},"o":{"docs":{},"b":{"docs":{},"l":{"docs":{},"e":{"docs":{},"m":{"docs":{},"s":{"docs":{},"/":{"2":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}},"3":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},"/":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.029411764705882353}}}}}}},"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02857142857142857}}}}}},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"t":{"docs":{},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.029411764705882353}}}}}}},"m":{"docs":{},"b":{"docs":{},"i":{"docs":{},"n":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0024330900243309003}}}}}}}},"t":{"docs":{},"w":{"docs":{},"o":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.029411764705882353}}}}},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"i":{"docs":{},"m":{"docs":{},"u":{"docs":{},"m":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.005235602094240838}}}}}}}}},"l":{"docs":{},"o":{"docs":{},"n":{"docs":{},"g":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.07692307692307693}}}}}}}},"e":{"docs":{},"a":{"docs":{},"f":{"docs":{"DataStructures/Trees/DepthFirst.html":{"ref":"DataStructures/Trees/DepthFirst.html","tf":0.010526315789473684}}}}}},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"l":{"docs":{},"o":{"docs":{},"y":{"docs":{},"e":{"docs":{"Algorithms/DFS.html":{"ref":"Algorithms/DFS.html","tf":0.010526315789473684}}}}}}}}},"b":{"docs":{},"i":{"docs":{},"n":{"docs":{},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0024330900243309003}}}}}}},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.01098901098901099}}}}}},"g":{"docs":{},"e":{"docs":{},"n":{"docs":{},"e":{"docs":{},"r":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0024330900243309003}}}}}}},"j":{"docs":{},"u":{"docs":{},"m":{"docs":{},"p":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}}}}}},"p":{"docs":{},"a":{"docs":{},"t":{"docs":{},"h":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}}}}}}}}}}}}}},"d":{"docs":{},"i":{"docs":{},"s":{"docs":{},"c":{"docs":{},"u":{"docs":{},"s":{"docs":{},"s":{"docs":{},"/":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"v":{"docs":{},"i":{"docs":{},"e":{"docs":{},"w":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.05263157894736842}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"w":{"docs":{},"w":{"docs":{},"w":{"docs":{},".":{"docs":{},"g":{"docs":{},"e":{"docs":{},"e":{"docs":{},"k":{"docs":{},"s":{"docs":{},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"e":{"docs":{},"k":{"docs":{},"s":{"docs":{},".":{"docs":{},"o":{"docs":{},"r":{"docs":{},"g":{"docs":{},"/":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"i":{"docs":{},"m":{"docs":{},"u":{"docs":{},"m":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02857142857142857},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.010471204188481676},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.01098901098901099}}}}}}}},"e":{"docs":{},"r":{"docs":{},"g":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.05263157894736842}}}}}},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02857142857142857}}}}},"u":{"docs":{},"m":{"docs":{},"b":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.010471204188481676}}}}}},"x":{"docs":{},"o":{"docs":{},"r":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.005235602094240838}}}}},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},"i":{"docs":{},"t":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.020833333333333332}}}}}}}},"t":{"docs":{},"a":{"docs":{},"g":{"docs":{},"/":{"docs":{},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{},"/":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.020833333333333332}}}}}}}}}}}}},"s":{"docs":{},"t":{"docs":{},"o":{"docs":{},"c":{"docs":{},"k":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"o":{"docs":{},"l":{"docs":{},"d":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.03296703296703297}},",":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}}}}},"k":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.004866180048661801},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}},"e":{"docs":{},"e":{"docs":{},"p":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.02564102564102564},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.005235602094240838},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.05263157894736842}}}},"y":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}},"=":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"v":{"docs":{},"e":{"docs":{},"l":{"docs":{},"_":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},".":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},")":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.011235955056179775}}}}}}}}}}}}}}}}}}}}},"l":{"docs":{},"a":{"docs":{},"m":{"docs":{},"b":{"docs":{},"d":{"docs":{},"a":{"docs":{"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.029411764705882353}}}}}}}}},"b":{"docs":{},"o":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{},"/":{"docs":{},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"m":{"docs":{},"i":{"docs":{},"s":{"docs":{},"s":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"/":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}}}}}}}}}}}}}}}}}}}}},"’":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.029411764705882353}}},"/":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.010471204188481676}}},":":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.005235602094240838}}},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.02}}}}},"t":{"docs":{},"h":{"docs":{"DataStructures/Trees/DivideAndConquer.html":{"ref":"DataStructures/Trees/DivideAndConquer.html","tf":0.009615384615384616}}}},"n":{"docs":{},"a":{"docs":{},"p":{"docs":{},"s":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}}}}}}}},",":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}}}}}}}}},"o":{"docs":{},"w":{"docs":{},"n":{"docs":{},",":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}}}}}}},",":{"docs":{"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.029411764705882353}}}},"l":{"docs":{},"e":{"docs":{},"v":{"docs":{},"e":{"docs":{},"l":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.02564102564102564},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.02},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":3.3782771535580522},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0024330900243309003}}}}},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02857142857142857}}}}},"(":{"docs":{},"l":{"docs":{},"e":{"docs":{},"a":{"docs":{},"v":{"docs":{},"e":{"docs":{},"s":{"1":{"docs":{},")":{"docs":{},")":{"docs":{},":":{"docs":{"DataStructures/Trees/DepthFirst.html":{"ref":"DataStructures/Trees/DepthFirst.html","tf":0.010526315789473684}}}}}},"docs":{},")":{"docs":{},")":{"docs":{},":":{"docs":{"DataStructures/Trees/DepthFirst.html":{"ref":"DataStructures/Trees/DepthFirst.html","tf":0.010526315789473684}}}}}}}}}}},"d":{"docs":{},"o":{"docs":{},"m":{"docs":{},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{},")":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.004866180048661801}}}}}}}}},"g":{"docs":{},"r":{"docs":{},"i":{"docs":{},"d":{"docs":{},")":{"docs":{},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}}},"[":{"0":{"docs":{},"]":{"docs":{},")":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}}}},"docs":{}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{},"e":{"docs":{},"s":{"docs":{},")":{"docs":{},"+":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}}}}}}}}}},"p":{"docs":{},"r":{"docs":{},"i":{"docs":{},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},")":{"docs":{},")":{"docs":{},":":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}}}}}}}}}}},"f":{"docs":{},"t":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.005235602094240838},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.02},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.011235955056179775},"DataStructures/Trees/DivideAndConquer.html":{"ref":"DataStructures/Trees/DivideAndConquer.html","tf":0.019230769230769232}},"_":{"docs":{},"s":{"docs":{},"o":{"docs":{},"l":{"docs":{},"u":{"docs":{},"t":{"docs":{"DataStructures/Trees/DivideAndConquer.html":{"ref":"DataStructures/Trees/DivideAndConquer.html","tf":0.019230769230769232}}}}}}}}}},"s":{"docs":{},"s":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.010471204188481676}}}},"a":{"docs":{},"v":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.020833333333333332},"DataStructures/Trees/DepthFirst.html":{"ref":"DataStructures/Trees/DepthFirst.html","tf":0.021052631578947368}},"e":{"docs":{},"s":{"1":{"docs":{"DataStructures/Trees/DepthFirst.html":{"ref":"DataStructures/Trees/DepthFirst.html","tf":0.010526315789473684}},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},")":{"docs":{},":":{"docs":{"DataStructures/Trees/DepthFirst.html":{"ref":"DataStructures/Trees/DepthFirst.html","tf":0.010526315789473684}}}}}}}},"docs":{},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},".":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},")":{"docs":{"DataStructures/Trees/DepthFirst.html":{"ref":"DataStructures/Trees/DepthFirst.html","tf":0.010526315789473684}}}}}}}}}}}}}}}}}}},"[":{"0":{"docs":{},":":{"docs":{},"]":{"docs":{"DataStructures/Trees/DepthFirst.html":{"ref":"DataStructures/Trees/DepthFirst.html","tf":0.010526315789473684}}}}},"docs":{}}}}},"f":{"docs":{"DataStructures/Trees/DepthFirst.html":{"ref":"DataStructures/Trees/DepthFirst.html","tf":0.010526315789473684}},"s":{"docs":{},"i":{"docs":{},"m":{"docs":{},"i":{"docs":{},"l":{"docs":{},"a":{"docs":{},"r":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Trees/DepthFirst.html":{"ref":"DataStructures/Trees/DepthFirst.html","tf":0.010526315789473684}}}}}}}}}}}}}}}}},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},":":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}}}}}}}}}},"i":{"docs":{},"b":{"docs":{},"r":{"docs":{},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.02564102564102564}}}}}}},"s":{"docs":{},"t":{"docs":{"DataStructures/Trees/DivideAndConquer.html":{"ref":"DataStructures/Trees/DivideAndConquer.html","tf":0.009615384615384616},"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.058823529411764705}},"[":{"docs":{},"n":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.020833333333333332}}},"'":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"l":{"docs":{},"o":{"docs":{},"y":{"docs":{},"e":{"docs":{},"e":{"docs":{},"'":{"docs":{},"]":{"docs":{},",":{"docs":{"Algorithms/DFS.html":{"ref":"Algorithms/DFS.html","tf":0.010526315789473684}}}}}}}}}}}}}},"i":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}},"n":{"docs":{},"t":{"docs":{},"]":{"docs":{},")":{"docs":{},":":{"docs":{"Algorithms/DFS.html":{"ref":"Algorithms/DFS.html","tf":0.010526315789473684}}}}}}},"]":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"[":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"]":{"docs":{},"]":{"docs":{},")":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}}}}}}}}}}}}},")":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.009732360097323601}}},",":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0024330900243309003}}},":":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.004866180048661801}}},".":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}},"}":{"docs":{"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.029411764705882353}}}}},"f":{"docs":{},"e":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.02}}}},"m":{"docs":{},"i":{"docs":{},"t":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0024330900243309003},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}},",":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}}}}},"o":{"docs":{},"o":{"docs":{},"k":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.005235602094240838},"DataStructures/Trees/DivideAndConquer.html":{"ref":"DataStructures/Trees/DivideAndConquer.html","tf":0.009615384615384616}}},"p":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.004866180048661801},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}}}},"n":{"docs":{},"g":{"docs":{},"e":{"docs":{},"r":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}}}}}},"c":{"docs":{},"a":{"docs":{},"l":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.016483516483516484}}}}}},"c":{"docs":{},"a":{"docs":{"DataStructures/Trees/DivideAndConquer.html":{"ref":"DataStructures/Trees/DivideAndConquer.html","tf":0.009615384615384616}}}},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.07692307692307693}}}}}}}}},"m":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.02564102564102564},"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.029411764705882353},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.011235955056179775},"DataStructures/Trees/DivideAndConquer.html":{"ref":"DataStructures/Trees/DivideAndConquer.html","tf":0.009615384615384616},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.01098901098901099}}}}}}}},"t":{"docs":{},"c":{"docs":{},"h":{"docs":{},"e":{"docs":{},"d":{"docs":{},":":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.005235602094240838}}}}}}},"h":{"docs":{},".":{"docs":{},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},"p":{"docs":{},"o":{"docs":{},"s":{"docs":{},"i":{"docs":{},"t":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}}}}}}},"i":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}}}}}}}}}},"x":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.07692307692307693}},"/":{"docs":{},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{},".":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.005235602094240838}}},":":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.005235602094240838}}}}}}},"i":{"docs":{},"m":{"docs":{},"u":{"docs":{},"m":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.005235602094240838},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.008064516129032258},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.016483516483516484}},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.012096774193548387}},")":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}}}}}}},"a":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.005235602094240838}}}}},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"v":{"docs":{},"e":{"docs":{},"l":{"docs":{},"_":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},",":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.011235955056179775}}}}}}}}}}}},"d":{"docs":{},"f":{"docs":{},"s":{"docs":{},"(":{"docs":{},"i":{"docs":{},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}}},"x":{"docs":{},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"c":{"docs":{},"l":{"docs":{},"u":{"docs":{},"d":{"docs":{},"e":{"docs":{},",":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}}}}}}}}}},"c":{"docs":{},"a":{"docs":{},"s":{"docs":{},"h":{"docs":{},",":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.01098901098901099}}}}}}},"h":{"docs":{},"o":{"docs":{},"l":{"docs":{},"d":{"docs":{},",":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.01098901098901099}}}}}}}},"l":{"docs":{},"e":{"docs":{},"v":{"docs":{},"e":{"docs":{},"l":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.011235955056179775}}}}}}}}}}}}}}}},"p":{"docs":{},"r":{"docs":{},"o":{"docs":{},"f":{"docs":{},"i":{"docs":{},"t":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}}}}}}}}}}}}},"k":{"docs":{},"e":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.02},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.004866180048661801}}}},"d":{"docs":{},"e":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0024330900243309003},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.02631578947368421}}}}},"e":{"docs":{},"t":{"docs":{},"h":{"docs":{},"o":{"docs":{},"d":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}},"s":{"docs":{},",":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.02564102564102564}}}}}}}},"m":{"docs":{},"o":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}},";":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}}},"[":{"docs":{},"p":{"docs":{},"o":{"docs":{},"s":{"docs":{},"i":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"]":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}}}}}}}}}}}},"i":{"docs":{},"z":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}}}},"r":{"docs":{},"i":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}}}}}},"r":{"docs":{},"g":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.05263157894736842}}}},"n":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.02631578947368421}}}}}}}},"o":{"docs":{},"v":{"docs":{},"e":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.029411764705882353},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}},":":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.010471204188481676}}}}},"d":{"docs":{},"u":{"docs":{},"l":{"docs":{},"o":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.005235602094240838}}}}}},"r":{"docs":{},"e":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.015706806282722512},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}}}}},"i":{"docs":{},"n":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.07692307692307693}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.005235602094240838}}}}},"(":{"2":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}},"docs":{}},"s":{"docs":{},"t":{"docs":{},"e":{"docs":{},"p":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}}}}}}}}}}}},"i":{"docs":{},"m":{"docs":{},"u":{"docs":{},"m":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.009259259259259259},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.016483516483516484}}}},"a":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.01098901098901099}}}}}},"s":{"docs":{},"c":{"docs":{},"e":{"docs":{},"l":{"docs":{},"l":{"docs":{},"a":{"docs":{},"n":{"docs":{"Miscellaneous/":{"ref":"Miscellaneous/","tf":11},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":5}}}}}}}}}},"u":{"docs":{},"l":{"docs":{},"t":{"docs":{},"i":{"docs":{},",":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.005235602094240838}}},"p":{"docs":{},"l":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}}}}}}}},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}}},"o":{"docs":{},"o":{"docs":{},"p":{"docs":{},":":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.02564102564102564}}}}},"p":{"docs":{},"t":{"docs":{},"i":{"docs":{},"m":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.02564102564102564},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.005235602094240838},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.020833333333333332},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.011574074074074073}},"i":{"docs":{},"z":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},".":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}}}}}}}}}}},"o":{"docs":{},"n":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0072992700729927005},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.008064516129032258}}}}}},"e":{"docs":{},"r":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.005235602094240838}}},"n":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0072992700729927005}},")":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.004866180048661801}}},":":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0024330900243309003}}}}}}}}}}},"n":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02857142857142857},"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.08823529411764706},"DataStructures/Trees/DivideAndConquer.html":{"ref":"DataStructures/Trees/DivideAndConquer.html","tf":0.009615384615384616},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0024330900243309003},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.10526315789473684},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.02631578947368421}},"c":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}}}},"d":{"docs":{},"d":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.005235602094240838}}}},"l":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.005235602094240838}}}}}},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{"DataStructures/Trees/DivideAndConquer.html":{"ref":"DataStructures/Trees/DivideAndConquer.html","tf":0.009615384615384616},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}}}}}},"u":{"docs":{},"t":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.004866180048661801}}}},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.004866180048661801},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}}}}}},"l":{"docs":{},"a":{"docs":{},"p":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.05263157894736842}}}}}}}},"f":{"docs":{},".":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}}},"(":{"2":{"docs":{},"^":{"docs":{},"n":{"docs":{},")":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}}}}}},"docs":{}},"b":{"docs":{},"s":{"docs":{},"e":{"docs":{},"r":{"docs":{},"v":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}}}}}}},"w":{"docs":{},"n":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}}},"p":{"docs":{},"o":{"docs":{},"s":{"docs":{},"s":{"docs":{},"i":{"docs":{},"b":{"docs":{},"l":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.02564102564102564},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.006944444444444444}},"e":{"docs":{},".":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}}}}}}}},"i":{"docs":{},"t":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.05714285714285714},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}}}}}}}},"t":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02857142857142857},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.005235602094240838}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.005235602094240838}},"e":{"docs":{},"r":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":5.0588235294117645},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.015706806282722512}},"s":{"docs":{},":":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.029411764705882353}}}}}},")":{"docs":{"DataStructures/Trees/DivideAndConquer.html":{"ref":"DataStructures/Trees/DivideAndConquer.html","tf":0.009615384615384616}}}}}},"p":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0024330900243309003}}}},"r":{"docs":{},"o":{"docs":{},"b":{"docs":{},"l":{"docs":{},"e":{"docs":{},"m":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.02564102564102564},"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.05714285714285714},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.020833333333333332},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.011235955056179775},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.006944444444444444},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.05263157894736842},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.02631578947368421}},"s":{"docs":{},":":{"docs":{"DataStructures/Trees/DepthFirst.html":{"ref":"DataStructures/Trees/DepthFirst.html","tf":0.010526315789473684}}},")":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}}}}}}},"p":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.029411764705882353},"DataStructures/Trees/DivideAndConquer.html":{"ref":"DataStructures/Trees/DivideAndConquer.html","tf":0.028846153846153848}},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{},"y":{"docs":{},",":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.02564102564102564}}}},"i":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}}}}}}},"d":{"docs":{},"u":{"docs":{},"c":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.010471204188481676}},"t":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.020942408376963352}}}}}},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{"DataStructures/Trees/DivideAndConquer.html":{"ref":"DataStructures/Trees/DivideAndConquer.html","tf":0.009615384615384616},"Algorithms/DFS.html":{"ref":"Algorithms/DFS.html","tf":0.021052631578947368}},":":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}}}}}}},"g":{"docs":{},"r":{"docs":{},"a":{"docs":{},"m":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":5.016203703703703},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}},":":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}}},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},")":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.004629629629629629}}},":":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}}}}}}}}}}},"f":{"docs":{},"i":{"docs":{},"t":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.016483516483516484}}}}},"j":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},",":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.02631578947368421}}}}}}}},"e":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02857142857142857},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.005235602094240838}},"f":{"docs":{},"i":{"docs":{},"x":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.015706806282722512}},"_":{"docs":{},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.005235602094240838}}}},"1":{"docs":{},"]":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.005235602094240838}}}},"docs":{}}}}}}}}},"v":{"docs":{},"i":{"docs":{},"o":{"docs":{},"u":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.005235602094240838},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.02631578947368421}}}}}}},"i":{"docs":{},"o":{"docs":{},"r":{"docs":{},"i":{"docs":{},"t":{"docs":{},"i":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.05714285714285714}}}}}}},"n":{"docs":{},"t":{"docs":{},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},".":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{},"e":{"docs":{},")":{"docs":{"DataStructures/Trees/DepthFirst.html":{"ref":"DataStructures/Trees/DepthFirst.html","tf":0.010526315789473684}}}}}}}}}}}}},"\"":{"docs":{},"\\":{"docs":{},"n":{"docs":{},"\"":{"docs":{},")":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0024330900243309003}}}}}}},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},".":{"docs":{},"h":{"docs":{},"o":{"docs":{},"u":{"docs":{},"r":{"docs":{},"s":{"docs":{},"a":{"docs":{},"c":{"docs":{},"c":{"docs":{},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{},"e":{"docs":{},"d":{"docs":{},")":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0024330900243309003}}}}}}}}}}}}}}}},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{},"s":{"docs":{},"a":{"docs":{},"c":{"docs":{},"c":{"docs":{},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{},"e":{"docs":{},"d":{"docs":{},")":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0024330900243309003}}}}}}}}}}}}}}}}}}}}}},"c":{"docs":{},"i":{"docs":{},"p":{"docs":{},"l":{"docs":{"DataStructures/Trees/DivideAndConquer.html":{"ref":"DataStructures/Trees/DivideAndConquer.html","tf":0.009615384615384616}}}}}}},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},",":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}},"[":{"0":{"docs":{},"]":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}},"docs":{},"i":{"docs":{},"]":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.01098901098901099}},")":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.01098901098901099}}}}}}}}}},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{},"i":{"docs":{},"c":{"docs":{},"e":{"docs":{},",":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}}}}}}}}}},"y":{"docs":{},"t":{"docs":{},"h":{"docs":{},"o":{"docs":{},"n":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.02564102564102564},"PythonicTricks/":{"ref":"PythonicTricks/","tf":5.029411764705882}}}}}}},"e":{"docs":{},"r":{"docs":{"DataStructures/Trees/DivideAndConquer.html":{"ref":"DataStructures/Trees/DivideAndConquer.html","tf":0.009615384615384616}},"m":{"docs":{},"u":{"docs":{},"t":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0072992700729927005},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"/":{"docs":{},"s":{"docs":{},"o":{"docs":{},"l":{"docs":{},"u":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"/":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02857142857142857}}}}}}}}}}}},":":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0024330900243309003}}}}}}}}}},"_":{"docs":{},"r":{"docs":{},"e":{"docs":{},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0024330900243309003}}}}}}}}}}}}}}},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"m":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.004629629629629629}}}}}}}},"a":{"docs":{},"i":{"docs":{},"r":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.029411764705882353}}}},"t":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"n":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.02}}}}}}},"r":{"docs":{},"a":{"docs":{},"m":{"docs":{"DataStructures/Trees/DivideAndConquer.html":{"ref":"DataStructures/Trees/DivideAndConquer.html","tf":0.009615384615384616}}}},"t":{"docs":{},"i":{"docs":{},"c":{"docs":{},"u":{"docs":{},"l":{"docs":{},"a":{"docs":{},"r":{"docs":{"DataStructures/Trees/DivideAndConquer.html":{"ref":"DataStructures/Trees/DivideAndConquer.html","tf":0.009615384615384616}}}}}}},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},":":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}}}}}}}},"a":{"docs":{},"l":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.07692307692307693}}}}}},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"h":{"docs":{},"e":{"docs":{},"s":{"docs":{},"e":{"docs":{},"s":{"docs":{},"/":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0024330900243309003}}}}}}}}}}}},"s":{"docs":{},"s":{"docs":{"DataStructures/Trees/DivideAndConquer.html":{"ref":"DataStructures/Trees/DivideAndConquer.html","tf":0.028846153846153848}}}}},"i":{"docs":{},"v":{"docs":{},"o":{"docs":{},"t":{"docs":{"DataStructures/Trees/DivideAndConquer.html":{"ref":"DataStructures/Trees/DivideAndConquer.html","tf":0.009615384615384616}}}}}},"u":{"docs":{},"b":{"docs":{},"l":{"docs":{},"i":{"docs":{},"c":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.008064516129032258},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.009259259259259259}}}}}}}},"r":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0024330900243309003}},"e":{"docs":{},"m":{"docs":{},"e":{"docs":{},"m":{"docs":{},"b":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.02564102564102564}},"e":{"docs":{},"r":{"docs":{},":":{"docs":{"DataStructures/Trees/DivideAndConquer.html":{"ref":"DataStructures/Trees/DivideAndConquer.html","tf":0.009615384615384616}}}}}}}},"o":{"docs":{},"v":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02857142857142857},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}}}}},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{},"i":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.029411764705882353}}}}},"d":{"docs":{},"b":{"docs":{},"i":{"docs":{},"n":{"docs":{},"a":{"docs":{},"r":{"docs":{},"y":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0024330900243309003}}}}}}}}}}}}}}}},"f":{"docs":{},"e":{"docs":{},"r":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.005235602094240838},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}},"e":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},":":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0024330900243309003}}}}}}}}}},"l":{"docs":{},"a":{"docs":{},"t":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.005235602094240838},"DataStructures/Trees/DepthFirst.html":{"ref":"DataStructures/Trees/DepthFirst.html","tf":0.010526315789473684},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.011235955056179775}}}},"i":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}}}},"q":{"docs":{},"u":{"docs":{},"i":{"docs":{},"r":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.005235602094240838},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.004629629629629629}}}}}},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{},"s":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.020833333333333332},"DataStructures/Trees/DivideAndConquer.html":{"ref":"DataStructures/Trees/DivideAndConquer.html","tf":0.019230769230769232},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.014598540145985401},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.012096774193548387},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.006944444444444444}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},".":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.08},"DataStructures/Trees/DivideAndConquer.html":{"ref":"DataStructures/Trees/DivideAndConquer.html","tf":0.009615384615384616},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}}},")":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}}}},"v":{"docs":{},"e":{"docs":{},"i":{"docs":{},"m":{"docs":{},"p":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{},"a":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Algorithms/DFS.html":{"ref":"Algorithms/DFS.html","tf":0.010526315789473684}}}}}}}}}}}}}}}}}}}}}}}},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.02631578947368421}}}}}},"p":{"docs":{},"e":{"docs":{},"a":{"docs":{},"t":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.07692307692307693}},"i":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},")":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0024330900243309003}}}}}}}}}},"t":{"docs":{},"i":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},",":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0024330900243309003}}}}}}}}}}},"t":{"docs":{},"u":{"docs":{},"r":{"docs":{},"n":{"docs":{"DataStructures/Trees/DepthFirst.html":{"ref":"DataStructures/Trees/DepthFirst.html","tf":0.031578947368421054},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.011235955056179775},"DataStructures/Trees/DivideAndConquer.html":{"ref":"DataStructures/Trees/DivideAndConquer.html","tf":0.019230769230769232},"Algorithms/DFS.html":{"ref":"Algorithms/DFS.html","tf":0.021052631578947368},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.031630170316301706},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.04032258064516129},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.011574074074074073},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.01098901098901099}}}}},"r":{"docs":{},"i":{"docs":{},"e":{"docs":{},"v":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.011235955056179775}}}}}}},"s":{"docs":{},"u":{"docs":{},"l":{"docs":{},"t":{"docs":{"DataStructures/Trees/DivideAndConquer.html":{"ref":"DataStructures/Trees/DivideAndConquer.html","tf":0.009615384615384616},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}}}}}},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0024330900243309003}}},"s":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}}}}}},"d":{"docs":{},"u":{"docs":{},"c":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}}}}}},"u":{"docs":{},"n":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.010471204188481676},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.05263157894736842}},"t":{"docs":{},"i":{"docs":{},"m":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.02564102564102564}}}}}}},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.005235602094240838},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.02},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.011235955056179775},"DataStructures/Trees/DivideAndConquer.html":{"ref":"DataStructures/Trees/DivideAndConquer.html","tf":0.009615384615384616},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0024330900243309003}},".":{"docs":{"DataStructures/Trees/DivideAndConquer.html":{"ref":"DataStructures/Trees/DivideAndConquer.html","tf":0.009615384615384616}}},"_":{"docs":{},"s":{"docs":{},"o":{"docs":{},"l":{"docs":{},"u":{"docs":{},"t":{"docs":{"DataStructures/Trees/DivideAndConquer.html":{"ref":"DataStructures/Trees/DivideAndConquer.html","tf":0.019230769230769232}}}}}}}}}}}},"o":{"docs":{},"o":{"docs":{},"t":{"1":{"docs":{},":":{"docs":{"DataStructures/Trees/DepthFirst.html":{"ref":"DataStructures/Trees/DepthFirst.html","tf":0.010526315789473684}}}},"2":{"docs":{},":":{"docs":{"DataStructures/Trees/DepthFirst.html":{"ref":"DataStructures/Trees/DepthFirst.html","tf":0.010526315789473684}}}},"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.02},"DataStructures/Trees/DivideAndConquer.html":{"ref":"DataStructures/Trees/DivideAndConquer.html","tf":0.009615384615384616}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{"DataStructures/Trees/DepthFirst.html":{"ref":"DataStructures/Trees/DepthFirst.html","tf":0.010526315789473684}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"DataStructures/Trees/DepthFirst.html":{"ref":"DataStructures/Trees/DepthFirst.html","tf":0.010526315789473684}}}}}}}},":":{"docs":{"DataStructures/Trees/DepthFirst.html":{"ref":"DataStructures/Trees/DepthFirst.html","tf":0.021052631578947368},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.011235955056179775}}},")":{"docs":{},":":{"docs":{"DataStructures/Trees/DivideAndConquer.html":{"ref":"DataStructures/Trees/DivideAndConquer.html","tf":0.009615384615384616}}}}}}},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0024330900243309003}},"e":{"docs":{},"(":{"0":{"docs":{},",":{"docs":{"DataStructures/Trees/DepthFirst.html":{"ref":"DataStructures/Trees/DepthFirst.html","tf":0.010526315789473684},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.004866180048661801},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.004629629629629629}}}},"1":{"docs":{},",":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}},"3":{"docs":{},",":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}}}},"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},",":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.004866180048661801}}}}}}}},"m":{"docs":{},")":{"docs":{},")":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}}}},"n":{"docs":{},")":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}}}}}}}}},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.005235602094240838},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.07692307692307693},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0024330900243309003},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.012096774193548387}},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.02564102564102564}}}}},"(":{"docs":{},")":{"docs":{},")":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}}}},")":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}}},"a":{"docs":{},"r":{"docs":{},"c":{"docs":{},"h":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.029411764705882353},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.005235602094240838},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":3.3413978494623655},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}}}}}},"l":{"docs":{},"f":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{"DataStructures/Trees/DepthFirst.html":{"ref":"DataStructures/Trees/DepthFirst.html","tf":0.010526315789473684}}}},"v":{"docs":{},"e":{"docs":{},"l":{"docs":{},"_":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.011235955056179775}},"[":{"docs":{},"l":{"docs":{},"e":{"docs":{},"v":{"docs":{},"e":{"docs":{},"l":{"docs":{},"]":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.011235955056179775}}}}}}}}}}}}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"DataStructures/Trees/DepthFirst.html":{"ref":"DataStructures/Trees/DepthFirst.html","tf":0.010526315789473684}}}}}},"e":{"docs":{},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{},"s":{"docs":{},"i":{"docs":{},"v":{"docs":{},"e":{"docs":{},"i":{"docs":{},"m":{"docs":{},"p":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{},"a":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},"(":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"l":{"docs":{},"o":{"docs":{},"y":{"docs":{},"e":{"docs":{},"e":{"docs":{},"_":{"docs":{},"d":{"docs":{},"a":{"docs":{},"t":{"docs":{},"a":{"docs":{},",":{"docs":{"Algorithms/DFS.html":{"ref":"Algorithms/DFS.html","tf":0.021052631578947368}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"e":{"docs":{},"(":{"docs":{},"k":{"docs":{},",":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0024330900243309003}}}}}}}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{"DataStructures/Trees/DepthFirst.html":{"ref":"DataStructures/Trees/DepthFirst.html","tf":0.010526315789473684}}}}},"_":{"docs":{},"h":{"docs":{},"e":{"docs":{},"l":{"docs":{},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"l":{"docs":{},"e":{"docs":{},"v":{"docs":{},"e":{"docs":{},"l":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},"(":{"docs":{},")":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.011235955056179775}}}}}}}}}}}}}}},"b":{"docs":{},"i":{"docs":{},"n":{"docs":{},"a":{"docs":{},"r":{"docs":{},"y":{"docs":{},"h":{"docs":{},"o":{"docs":{},"u":{"docs":{},"r":{"docs":{},"s":{"docs":{},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.004866180048661801}}}}}}}}}}},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{},"s":{"docs":{},"(":{"docs":{},"i":{"docs":{},",":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0024330900243309003}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0024330900243309003}}}}}}}}}}}}}}}},"c":{"docs":{},"o":{"docs":{},"p":{"docs":{},"y":{"docs":{},"p":{"docs":{},"a":{"docs":{},"s":{"docs":{},"t":{"docs":{},"e":{"docs":{},"(":{"docs":{},"n":{"docs":{},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.012096774193548387}}}}}}}}}}}}}}}}}}}}},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"u":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.011235955056179775}},"e":{"docs":{},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"(":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},",":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.011235955056179775}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},",":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.011235955056179775}}}}}}}}}}}}},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},",":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.011235955056179775}}}}}}}}}}}}}}},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.011235955056179775}}}}}}}}}}}}}}}}},"i":{"docs":{},"d":{"docs":{"Algorithms/DFS.html":{"ref":"Algorithms/DFS.html","tf":0.010526315789473684}}},"m":{"docs":{},"p":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{"Algorithms/DFS.html":{"ref":"Algorithms/DFS.html","tf":0.010526315789473684}}}}}}}},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"i":{"docs":{},"n":{"docs":{"Algorithms/DFS.html":{"ref":"Algorithms/DFS.html","tf":0.010526315789473684}}}}}}},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0024330900243309003}},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"d":{"docs":{},"o":{"docs":{},"m":{"docs":{},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{},"[":{"docs":{},"k":{"docs":{},"]":{"docs":{},")":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0024330900243309003}}}}}}}}}}}}}}}}}}},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0024330900243309003}}}}}}}}}}}}},"o":{"docs":{},"l":{"docs":{},"u":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"_":{"docs":{},"s":{"docs":{},"e":{"docs":{},"a":{"docs":{},"r":{"docs":{},"c":{"docs":{},"h":{"docs":{},"(":{"0":{"docs":{},",":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0024330900243309003}}}},"docs":{},"k":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.004866180048661801}}}}}}}}}},"f":{"docs":{},"u":{"docs":{},"n":{"docs":{},"c":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"(":{"docs":{},"c":{"docs":{},"a":{"docs":{},"s":{"docs":{},"e":{"docs":{},"_":{"docs":{},"o":{"docs":{},"n":{"docs":{},"e":{"docs":{},",":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}}}}}},"t":{"docs":{},"w":{"docs":{},"o":{"docs":{},",":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"a":{"docs":{},"c":{"docs":{},"c":{"docs":{},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0024330900243309003}},"e":{"docs":{},"d":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.004866180048661801}}}}}}}}}}}}},"b":{"docs":{},"u":{"docs":{},"c":{"docs":{},"k":{"docs":{},"e":{"docs":{},"t":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0024330900243309003}},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"d":{"docs":{},"o":{"docs":{},"m":{"docs":{},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},")":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0024330900243309003}}}}}}}}}}}}}}}}}}},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0024330900243309003}}}}}}}}}}}}}},"h":{"docs":{},"o":{"docs":{},"u":{"docs":{},"r":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.009732360097323601}},"s":{"docs":{},"a":{"docs":{},"c":{"docs":{},"c":{"docs":{},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0024330900243309003}},"e":{"docs":{},"d":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.004866180048661801}},":":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0024330900243309003}}}}}}}}}}}}}}}}}}},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.009732360097323601}},"s":{"docs":{},"a":{"docs":{},"c":{"docs":{},"c":{"docs":{},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0024330900243309003}},"e":{"docs":{},"d":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.004866180048661801}},":":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0024330900243309003}}}}}}}}}}}}}}}}}},"n":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.012165450121654502}},")":{"docs":{},":":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.012165450121654502}}}}},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{},"m":{"docs":{},"_":{"docs":{},"r":{"docs":{},"e":{"docs":{},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{},"(":{"0":{"docs":{},",":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0024330900243309003}}}},"docs":{},"k":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0024330900243309003}}}}}}}}}},"u":{"docs":{},"t":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.009732360097323601}},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"'":{"docs":{},"'":{"docs":{},".":{"docs":{},"j":{"docs":{},"o":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},"b":{"docs":{},"u":{"docs":{},"c":{"docs":{},"k":{"docs":{},"e":{"docs":{},"t":{"docs":{},")":{"docs":{},")":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0024330900243309003}}}}}}}}}}}}}}}}}},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},".":{"docs":{},"b":{"docs":{},"u":{"docs":{},"c":{"docs":{},"k":{"docs":{},"e":{"docs":{},"t":{"docs":{},"[":{"docs":{},":":{"docs":{},"]":{"docs":{},")":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0024330900243309003}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"o":{"docs":{},"w":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.004866180048661801}},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},".":{"docs":{},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{},"[":{"docs":{},":":{"docs":{},"]":{"docs":{},")":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0024330900243309003}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.012165450121654502}},".":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0024330900243309003}}}}}},"l":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.03296703296703297}},"/":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}}},"q":{"docs":{},"b":{"docs":{},"u":{"docs":{},"i":{"docs":{},"l":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"1":{"docs":{},")":{"docs":{"DataStructures/Trees/DepthFirst.html":{"ref":"DataStructures/Trees/DepthFirst.html","tf":0.010526315789473684}}}},"2":{"docs":{},")":{"docs":{"DataStructures/Trees/DepthFirst.html":{"ref":"DataStructures/Trees/DepthFirst.html","tf":0.010526315789473684}}}},"docs":{},")":{"docs":{},":":{"docs":{"DataStructures/Trees/DepthFirst.html":{"ref":"DataStructures/Trees/DepthFirst.html","tf":0.010526315789473684}}}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},")":{"docs":{"DataStructures/Trees/DepthFirst.html":{"ref":"DataStructures/Trees/DepthFirst.html","tf":0.010526315789473684}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},")":{"docs":{"DataStructures/Trees/DepthFirst.html":{"ref":"DataStructures/Trees/DepthFirst.html","tf":0.010526315789473684}}}}}}}}}}}}}}}}}}}}}},"e":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}},"n":{"docs":{},")":{"docs":{},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}},":":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}}},".":{"docs":{},"a":{"docs":{},"d":{"docs":{},"d":{"docs":{},"(":{"docs":{},"(":{"docs":{},"i":{"docs":{},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}}}}}}}},"d":{"docs":{},"i":{"docs":{},"s":{"docs":{},"c":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{},"(":{"docs":{},"(":{"docs":{},"i":{"docs":{},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}}}}}}}}}}}}},":":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}}}}},"o":{"docs":{},"l":{"docs":{},"v":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.02564102564102564},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.004629629629629629}}},"u":{"docs":{},"t":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.02},"DataStructures/Trees/DepthFirst.html":{"ref":"DataStructures/Trees/DepthFirst.html","tf":0.010526315789473684},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.011235955056179775},"DataStructures/Trees/DivideAndConquer.html":{"ref":"DataStructures/Trees/DivideAndConquer.html","tf":0.009615384615384616},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0024330900243309003},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.012096774193548387},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.020833333333333332},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},":":{"docs":{"DataStructures/Trees/DepthFirst.html":{"ref":"DataStructures/Trees/DepthFirst.html","tf":0.010526315789473684},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.011235955056179775},"DataStructures/Trees/DivideAndConquer.html":{"ref":"DataStructures/Trees/DivideAndConquer.html","tf":0.009615384615384616},"Algorithms/DFS.html":{"ref":"Algorithms/DFS.html","tf":0.010526315789473684},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0024330900243309003},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.006944444444444444}}},".":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0024330900243309003}}},"_":{"docs":{},"s":{"docs":{},"e":{"docs":{},"a":{"docs":{},"r":{"docs":{},"c":{"docs":{},"h":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0024330900243309003}}}}}}}}}}}}}},"f":{"docs":{},"u":{"docs":{},"n":{"docs":{},"c":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}}}}}}}}}}}}}}}}},"g":{"docs":{},"e":{"docs":{},"n":{"docs":{},"e":{"docs":{},"r":{"docs":{},"a":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},":":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0024330900243309003}}}}}}}}}}}},",":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}}},"s":{"docs":{},".":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}}},":":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}}}},"(":{"docs":{},"o":{"docs":{},"b":{"docs":{},"j":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},")":{"docs":{},":":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}}}}}}}}}}}}}}},"r":{"docs":{},"t":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.020833333333333332},"DataStructures/Trees/DivideAndConquer.html":{"ref":"DataStructures/Trees/DivideAndConquer.html","tf":0.009615384615384616},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.05263157894736842},"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.029411764705882353}},":":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.07692307692307693}}},"e":{"docs":{},"d":{"docs":{},"(":{"docs":{},"x":{"docs":{},".":{"docs":{},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{},"m":{"docs":{},"s":{"docs":{},"(":{"docs":{},")":{"docs":{},",":{"docs":{"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.029411764705882353}}}}}}}}}}}}}}}}},"m":{"docs":{},"e":{"docs":{},"t":{"docs":{},"h":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}}}}}}},"t":{"docs":{},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{"DataStructures/":{"ref":"DataStructures/","tf":0.2},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.020833333333333332},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":5.076923076923077}}}}}}},"c":{"docs":{},"k":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.05714285714285714},"DataStructures/Trees/DivideAndConquer.html":{"ref":"DataStructures/Trees/DivideAndConquer.html","tf":0.009615384615384616},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}}}},"r":{"docs":{},"t":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.005235602094240838},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0024330900243309003},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.05263157894736842}},":":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.004866180048661801}}}}},"i":{"docs":{},"r":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.004629629629629629}}}}},"r":{"docs":{},"u":{"docs":{},"c":{"docs":{},"t":{"docs":{},"u":{"docs":{},"r":{"docs":{"DataStructures/":{"ref":"DataStructures/","tf":5.2},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.011235955056179775}}}}}}},"i":{"docs":{},"c":{"docs":{},"t":{"docs":{},"l":{"docs":{},"i":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02857142857142857}}}}}},"n":{"docs":{},"g":{"docs":{"DataStructures/Strings/":{"ref":"DataStructures/Strings/","tf":11},"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.029411764705882353}}}}}},"e":{"docs":{},"p":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.005235602094240838},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.004866180048661801},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.008064516129032258},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.006944444444444444}},",":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}}}}},"o":{"docs":{},"r":{"docs":{},"e":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.015706806282722512}}}},"c":{"docs":{},"k":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":10.027472527472527}},",":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}},".":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.01098901098901099}}}}}}},"i":{"docs":{},"m":{"docs":{},"i":{"docs":{},"l":{"docs":{},"a":{"docs":{},"r":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02857142857142857},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.005235602094240838},"DataStructures/Trees/DepthFirst.html":{"ref":"DataStructures/Trees/DepthFirst.html","tf":0.010526315789473684},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.004866180048661801},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.01098901098901099}}}}}},"p":{"docs":{},"l":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.02}},"e":{"docs":{},".":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.02}}},"s":{"docs":{},"t":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.02}}}}}}}},"z":{"docs":{},"e":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.029411764705882353},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.031413612565445025},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}}}}},"u":{"docs":{},"b":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02857142857142857}},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},"a":{"docs":{},"y":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.029411764705882353},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":10.073298429319372}},"/":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.005235602094240838}}},"s":{"docs":{},",":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.005235602094240838}}},":":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.010471204188481676}}}},".":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}}}}}}}},"s":{"docs":{},"e":{"docs":{},"q":{"docs":{},"u":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.005235602094240838}},"e":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},".":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.005235602094240838}}}}}}}}}},"t":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":10.020833333333334},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0024330900243309003},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}},"s":{"docs":{},":":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}}}}}},"t":{"docs":{},"r":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.07692307692307693}},"u":{"docs":{},"c":{"docs":{},"t":{"docs":{},"u":{"docs":{},"r":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}}}}}}}}}},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"i":{"docs":{},"n":{"docs":{"Algorithms/DFS.html":{"ref":"Algorithms/DFS.html","tf":0.031578947368421054}},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},")":{"docs":{"Algorithms/DFS.html":{"ref":"Algorithms/DFS.html","tf":0.010526315789473684}}},"s":{"docs":{},":":{"docs":{"Algorithms/DFS.html":{"ref":"Algorithms/DFS.html","tf":0.010526315789473684}}}}}}}}}}}},"p":{"docs":{},"r":{"docs":{},"o":{"docs":{},"b":{"docs":{},"l":{"docs":{},"e":{"docs":{},"m":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.004629629629629629}}}}}}}}}},"m":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.015706806282722512},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.0625},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.008064516129032258},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.009259259259259259}},"/":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.029411764705882353},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.005235602094240838}},"d":{"docs":{},"i":{"docs":{},"s":{"docs":{},"c":{"docs":{},"u":{"docs":{},"s":{"docs":{},"s":{"docs":{},"/":{"1":{"6":{"5":{"1":{"0":{"docs":{},"/":{"docs":{},"p":{"docs":{},"y":{"docs":{},"t":{"docs":{},"h":{"docs":{},"o":{"docs":{},"n":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0024330900243309003}}}}}}}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}},",":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.005235602094240838},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.004629629629629629}}},":":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}}},"r":{"docs":{},"e":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.02631578947368421}}}}},"l":{"docs":{},"o":{"docs":{},"w":{"docs":{},"e":{"docs":{},"r":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.029411764705882353}}}}}},"i":{"docs":{},"d":{"docs":{},"e":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.010471204188481676},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.07692307692307693}}}}}},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"s":{"docs":{},"f":{"docs":{},"i":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.005235602094240838},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}}}}}}},"m":{"docs":{},"e":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0024330900243309003},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}}},"w":{"docs":{},"a":{"docs":{},"p":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.005235602094240838}}}}},"m":{"docs":{},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.07692307692307693}},",":{"docs":{"DataStructures/Trees/DivideAndConquer.html":{"ref":"DataStructures/Trees/DivideAndConquer.html","tf":0.009615384615384616}}}}}}}}}},"c":{"docs":{},"e":{"docs":{},"n":{"docs":{},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{},"o":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0024330900243309003}}}}}}}}},"h":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0024330900243309003}}}}},"a":{"docs":{},"r":{"docs":{},"e":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.016483516483516484}}}}}},"q":{"docs":{},"u":{"docs":{},"a":{"docs":{},"r":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.004629629629629629}}}}}},"p":{"docs":{},"e":{"docs":{},"c":{"docs":{},"i":{"docs":{},"f":{"docs":{},"i":{"docs":{},"c":{"docs":{},"s":{"docs":{},",":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.02631578947368421}}}}}}}}}}}},"u":{"docs":{},"s":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.05128205128205128},"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.029411764705882353},"DataStructures/Trees/DivideAndConquer.html":{"ref":"DataStructures/Trees/DivideAndConquer.html","tf":0.019230769230769232},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.004866180048661801},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.006944444444444444},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.01098901098901099},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.07692307692307693}},"u":{"docs":{},"a":{"docs":{},"l":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}},"l":{"docs":{},"y":{"docs":{},",":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}}}}}}}}},"n":{"docs":{},"l":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.005235602094240838}}}}}},"i":{"docs":{},"q":{"docs":{},"u":{"docs":{"Algorithms/DFS.html":{"ref":"Algorithms/DFS.html","tf":0.021052631578947368}}}}},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}}}}}}}}}},"k":{"docs":{},"n":{"docs":{},"o":{"docs":{},"w":{"docs":{},"n":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.004629629629629629}}}}}}}},"p":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.009259259259259259},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.02631578947368421}},"d":{"docs":{},"a":{"docs":{},"t":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}}}}},"v":{"docs":{"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.058823529411764705}},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{},"a":{"docs":{},"b":{"docs":{},"l":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.02564102564102564},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}},"t":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.07692307692307693}}}},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"DataStructures/Trees/DepthFirst.html":{"ref":"DataStructures/Trees/DepthFirst.html","tf":0.010526315789473684}}}}}}},"l":{"docs":{},"u":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02857142857142857},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.020942408376963352},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.011235955056179775},"DataStructures/Trees/DivideAndConquer.html":{"ref":"DataStructures/Trees/DivideAndConquer.html","tf":0.028846153846153848},"Algorithms/DFS.html":{"ref":"Algorithms/DFS.html","tf":0.010526315789473684},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0024330900243309003},"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.029411764705882353}},"e":{"docs":{},")":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.011235955056179775}}},"s":{"docs":{},",":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}}}}}}},"g":{"docs":{},"u":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.02631578947368421}}}}},"e":{"docs":{},"r":{"docs":{},"i":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.02}}}}},"i":{"docs":{},"e":{"docs":{},"w":{"docs":{},",":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.02247191011235955}}}}}}},"w":{"docs":{},"r":{"docs":{},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.02564102564102564}}}}}},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"/":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.029411764705882353}}}}},"c":{"docs":{},"h":{"docs":{},"/":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0024330900243309003}}}}}},"y":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.020833333333333332}}},"n":{"docs":{},"t":{"docs":{"DataStructures/Trees/DivideAndConquer.html":{"ref":"DataStructures/Trees/DivideAndConquer.html","tf":0.009615384615384616},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.004629629629629629},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}}},"h":{"docs":{},"o":{"docs":{},"l":{"docs":{},"e":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.005235602094240838},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.020833333333333332},"DataStructures/Trees/DivideAndConquer.html":{"ref":"DataStructures/Trees/DivideAndConquer.html","tf":0.009615384615384616}}}}},"i":{"docs":{},"l":{"docs":{},"e":{"docs":{},"(":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},".":{"docs":{},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"u":{"docs":{},"e":{"docs":{},")":{"docs":{},")":{"docs":{},":":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.011235955056179775}}}}}}}}}}}}}}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"o":{"docs":{},"w":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.010471204188481676},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.07692307692307693}}}}}},"t":{"docs":{},"h":{"docs":{},"o":{"docs":{},"u":{"docs":{},"t":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.07692307692307693},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}}}}},"s":{"docs":{},"e":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.02},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":3.3445692883895126}}}},"d":{"docs":{},"t":{"docs":{},"h":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.011235955056179775}}}}}},"e":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.004629629629629629}},"s":{"docs":{},",":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}}}}}}}}},"o":{"docs":{},"r":{"docs":{},"k":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.02631578947368421}}}}}},"&":{"docs":{"DataStructures/":{"ref":"DataStructures/","tf":0.2}}},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{"DataStructures/":{"ref":"DataStructures/","tf":0.2},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.005235602094240838},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.020833333333333332},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":5.076923076923077},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":5.052631578947368}},"s":{"docs":{},":":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0024330900243309003}}}},"/":{"3":{"5":{"6":{"5":{"2":{"0":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.05263157894736842}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}}}}}}},"a":{"docs":{},"n":{"docs":{},"t":{"docs":{},"i":{"docs":{},"t":{"docs":{},"i":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.005235602094240838}}}}}}}},"i":{"docs":{},"c":{"docs":{},"k":{"docs":{},"s":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.07692307692307693}}}}}}}}}}},"'":{"docs":{},"q":{"docs":{},"u":{"docs":{},"i":{"docs":{},"r":{"docs":{},"k":{"docs":{},"y":{"docs":{},"'":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02857142857142857}}}}}}}}},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"i":{"docs":{},"n":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"s":{"docs":{},"'":{"docs":{},":":{"docs":{"Algorithms/DFS.html":{"ref":"Algorithms/DFS.html","tf":0.010526315789473684}}}}}}}}}}}}}}}},"v":{"docs":{},"i":{"docs":{},"s":{"docs":{},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{},"d":{"docs":{},"'":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.008064516129032258}}}}}}}}}},"p":{"docs":{},"i":{"docs":{},"v":{"docs":{},"o":{"docs":{},"t":{"docs":{},"'":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}}}}}}}}},"(":{"1":{"docs":{},")":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02857142857142857}}}},"docs":{},"d":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.005235602094240838}},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"u":{"docs":{},"i":{"docs":{},"s":{"docs":{},"h":{"docs":{"DataStructures/Trees/DivideAndConquer.html":{"ref":"DataStructures/Trees/DivideAndConquer.html","tf":0.009615384615384616}}}}}}}}}}}}},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"_":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.005235602094240838}}}}}}}}}},"s":{"docs":{},"p":{"docs":{},"e":{"docs":{},"c":{"docs":{},"i":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.011235955056179775}}}}}}}},"i":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.005235602094240838},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.012096774193548387}},".":{"docs":{},"e":{"docs":{},".":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.011235955056179775}}}}},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}},"n":{"docs":{},"t":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.006944444444444444}}}}},"n":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.005235602094240838},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}},"c":{"docs":{},"r":{"docs":{},")":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0024330900243309003}}}}}},"s":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{},"e":{"docs":{},"d":{"docs":{},")":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.005235602094240838}}}}}}}},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},"_":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.005235602094240838}}}}}}}}}}}},"h":{"docs":{},"o":{"docs":{},"u":{"docs":{},"l":{"docs":{},"d":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0024330900243309003}}}}}}}},"l":{"docs":{},"e":{"docs":{},"a":{"docs":{},"v":{"docs":{},"e":{"docs":{},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{"DataStructures/Trees/DepthFirst.html":{"ref":"DataStructures/Trees/DepthFirst.html","tf":0.010526315789473684}}}}}}}}},"n":{"docs":{},"(":{"docs":{},"l":{"docs":{},"e":{"docs":{},"a":{"docs":{},"v":{"docs":{},"e":{"docs":{},"s":{"docs":{},")":{"docs":{"DataStructures/Trees/DepthFirst.html":{"ref":"DataStructures/Trees/DepthFirst.html","tf":0.010526315789473684}}}}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{},"e":{"docs":{},"s":{"docs":{},")":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}}}}}}}}}}},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}}}}}}}}},"=":{"docs":{},"=":{"docs":{},"r":{"docs":{},")":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0024330900243309003}}}}}},"k":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0024330900243309003}}},"w":{"docs":{},"i":{"docs":{},"t":{"docs":{},"h":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0024330900243309003}}}}}},"(":{"docs":{},"i":{"docs":{},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}}}},"p":{"docs":{},"o":{"docs":{},"s":{"docs":{},"i":{"docs":{},"t":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}}}}}},"u":{"docs":{},"s":{"docs":{},"e":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}}}},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"i":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}}}}},"b":{"docs":{},"a":{"docs":{},"g":{"docs":{},"_":{"docs":{},"w":{"docs":{},"e":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}}}}}}}}}}},"o":{"docs":{},"t":{"docs":{},"t":{"docs":{},"o":{"docs":{},"m":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}}}}}}}},"m":{"docs":{},"e":{"docs":{},"m":{"docs":{},"o":{"docs":{},"[":{"docs":{},"p":{"docs":{},"o":{"docs":{},"s":{"docs":{},"i":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"]":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}}}}}}}}}}}}}}}},"t":{"docs":{},"o":{"docs":{},"p":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}}},"t":{"docs":{},"a":{"docs":{},"l":{"docs":{},"_":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}}}}}}}}}}}},":":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02857142857142857},"Algorithms/DFS.html":{"ref":"Algorithms/DFS.html","tf":0.010526315789473684},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0072992700729927005},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}}},"e":{"docs":{},"l":{"docs":{},"e":{"docs":{},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.015706806282722512},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.004866180048661801},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.01098901098901099}},"/":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.05714285714285714}}},":":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.005235602094240838},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0024330900243309003}}},",":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.020833333333333332}}},"s":{"docs":{},"/":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}}}}}}},"i":{"docs":{},"f":{"docs":{},"(":{"docs":{},"w":{"docs":{},"e":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}}}}}}}}}},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.004629629629629629}}}}}}},"a":{"docs":{},"s":{"docs":{},"i":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.029411764705882353}},"e":{"docs":{},"r":{"docs":{},".":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.02}}}}}}},"c":{"docs":{},"h":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.010471204188481676},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.020833333333333332},"Algorithms/DFS.html":{"ref":"Algorithms/DFS.html","tf":0.010526315789473684},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0024330900243309003},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.004629629629629629}}}}},"f":{"docs":{},"f":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.029411764705882353}}}}},"i":{"docs":{},"c":{"docs":{},"i":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}}}}}}},"n":{"docs":{},"d":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.029411764705882353},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.005235602094240838},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.01098901098901099}},",":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}},"u":{"docs":{},"m":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.004629629629629629}}}}},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"y":{"docs":{},"t":{"docs":{},"i":{"docs":{},"m":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.005235602094240838}}}}}}},"n":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}}}}},"x":{"docs":{},"c":{"docs":{},"l":{"docs":{},"u":{"docs":{},"d":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.005235602094240838}},"e":{"docs":{},")":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}}}}}}}},"h":{"docs":{},"a":{"docs":{},"u":{"docs":{},"s":{"docs":{},"t":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}}}}}},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"s":{"docs":{},":":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}}}}}},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.006944444444444444}}}}},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{},"i":{"docs":{},"e":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},",":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.02631578947368421}}},".":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.02631578947368421}}}}}}}}}}}},"g":{"docs":{},".":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.011235955056179775},"DataStructures/Trees/DivideAndConquer.html":{"ref":"DataStructures/Trees/DivideAndConquer.html","tf":0.009615384615384616},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.006944444444444444}}}},"t":{"docs":{},"c":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.011235955056179775}}}},"m":{"docs":{},"p":{"docs":{},"l":{"docs":{},"o":{"docs":{},"y":{"docs":{},"e":{"docs":{"Algorithms/DFS.html":{"ref":"Algorithms/DFS.html","tf":0.031578947368421054}},"e":{"docs":{},":":{"docs":{"Algorithms/DFS.html":{"ref":"Algorithms/DFS.html","tf":0.010526315789473684}}},"_":{"docs":{},"d":{"docs":{},"a":{"docs":{},"t":{"docs":{},"a":{"docs":{"Algorithms/DFS.html":{"ref":"Algorithms/DFS.html","tf":0.010526315789473684}},":":{"docs":{"Algorithms/DFS.html":{"ref":"Algorithms/DFS.html","tf":0.010526315789473684}}},"[":{"docs":{},"i":{"docs":{},"d":{"docs":{},"]":{"docs":{},"[":{"docs":{},"\"":{"docs":{},"i":{"docs":{},"m":{"docs":{},"p":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{},"a":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},"\"":{"docs":{},"]":{"docs":{"Algorithms/DFS.html":{"ref":"Algorithms/DFS.html","tf":0.010526315789473684}}}}}}}}}}}}}},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"i":{"docs":{},"n":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"s":{"docs":{},"\"":{"docs":{},"]":{"docs":{},":":{"docs":{"Algorithms/DFS.html":{"ref":"Algorithms/DFS.html","tf":0.010526315789473684}}}}}}}}}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},":":{"docs":{"Algorithms/DFS.html":{"ref":"Algorithms/DFS.html","tf":0.010526315789473684}}},"}":{"docs":{"Algorithms/DFS.html":{"ref":"Algorithms/DFS.html","tf":0.010526315789473684}}}}}}}}},"t":{"docs":{},"i":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}}}}},"q":{"docs":{},"u":{"docs":{},"a":{"docs":{},"t":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}}}}}}},"t":{"docs":{},"e":{"docs":{},"c":{"docs":{},"h":{"docs":{},"n":{"docs":{},"i":{"docs":{},"q":{"docs":{},"u":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.058823529411764705},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}}}}}}}},"m":{"docs":{},"p":{"docs":{},"l":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},":":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.011235955056179775},"DataStructures/Trees/DivideAndConquer.html":{"ref":"DataStructures/Trees/DivideAndConquer.html","tf":0.009615384615384616}}}}}}},"o":{"docs":{},"r":{"docs":{},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}}}}}}},"l":{"docs":{},"l":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.02631578947368421}}}}},"w":{"docs":{},"o":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":5.0588235294117645},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.015706806282722512},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.020833333333333332},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0024330900243309003},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.02631578947368421}}},"e":{"docs":{},"a":{"docs":{},"k":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.02}}}}},"i":{"docs":{},"c":{"docs":{},"e":{"docs":{},"/":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}}}}},"y":{"docs":{},"p":{"docs":{},"i":{"docs":{},"c":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.029411764705882353}}}},"e":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}}}},"h":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.016483516483516484}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.005235602094240838}}}},"s":{"docs":{},":":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.020833333333333332},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}}}},"c":{"docs":{},"k":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.011235955056179775}}}}},"e":{"docs":{},"r":{"docs":{},"e":{"docs":{},",":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.02}}}}}},"o":{"docs":{},"s":{"docs":{},"e":{"docs":{"DataStructures/Trees/DivideAndConquer.html":{"ref":"DataStructures/Trees/DivideAndConquer.html","tf":0.009615384615384616}}}},"u":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}}}}}}}},"i":{"docs":{},"l":{"docs":{},"l":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.005235602094240838},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.01098901098901099}}}},"p":{"docs":{},"s":{"docs":{},":":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.02}}}}},"m":{"docs":{},"e":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.004629629629629629},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.01098901098901099},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.05263157894736842},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.05263157894736842}}}}},"r":{"docs":{},"a":{"docs":{},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.005235602094240838},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.02},"DataStructures/Trees/DepthFirst.html":{"ref":"DataStructures/Trees/DepthFirst.html","tf":0.010526315789473684},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":3.3445692883895126},"DataStructures/Trees/DivideAndConquer.html":{"ref":"DataStructures/Trees/DivideAndConquer.html","tf":0.009615384615384616}}}}}},"n":{"docs":{},"s":{"docs":{},"f":{"docs":{},"e":{"docs":{},"r":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.011235955056179775}}}},"o":{"docs":{},"r":{"docs":{},"m":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}}}},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.04945054945054945}}}}},"i":{"docs":{},"t":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}}}},"c":{"docs":{},"k":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0024330900243309003},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}}},"e":{"docs":{},"e":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":10.04},"DataStructures/Trees/DepthFirst.html":{"ref":"DataStructures/Trees/DepthFirst.html","tf":0.010526315789473684},"DataStructures/Trees/DivideAndConquer.html":{"ref":"DataStructures/Trees/DivideAndConquer.html","tf":0.009615384615384616},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},")":{"docs":{"DataStructures/Trees/DepthFirst.html":{"ref":"DataStructures/Trees/DepthFirst.html","tf":0.021052631578947368},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.011235955056179775}}},",":{"docs":{"DataStructures/Trees/DepthFirst.html":{"ref":"DataStructures/Trees/DepthFirst.html","tf":0.010526315789473684}}},":":{"docs":{"DataStructures/Trees/DepthFirst.html":{"ref":"DataStructures/Trees/DepthFirst.html","tf":0.010526315789473684}}}}}}},"s":{"docs":{},"/":{"docs":{},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"m":{"docs":{},"i":{"docs":{},"s":{"docs":{},"s":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"/":{"docs":{"DataStructures/Trees/DepthFirst.html":{"ref":"DataStructures/Trees/DepthFirst.html","tf":0.010526315789473684}}}}}}}}}}}}}}}},",":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.011235955056179775}}}}},"u":{"docs":{},"e":{"docs":{"DataStructures/Trees/DepthFirst.html":{"ref":"DataStructures/Trees/DepthFirst.html","tf":0.010526315789473684},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0072992700729927005},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.009259259259259259}},";":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}}}},"i":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}},"c":{"docs":{},"k":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147},"PythonicTricks/":{"ref":"PythonicTricks/","tf":5.029411764705882}}}}}},"a":{"docs":{},"k":{"docs":{},"e":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.020833333333333332}},"n":{"docs":{"DataStructures/Trees/DivideAndConquer.html":{"ref":"DataStructures/Trees/DivideAndConquer.html","tf":0.009615384615384616},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}}}},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.008064516129032258}}}}}},"b":{"docs":{},"l":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.006944444444444444}},"e":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"[":{"docs":{},"w":{"docs":{},"e":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},"]":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}}}}}}}}}}}}}}}}},"o":{"docs":{},"p":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.011235955056179775},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.009259259259259259},"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.029411764705882353}}},"t":{"docs":{},"a":{"docs":{},"l":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}},"_":{"docs":{},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{},"m":{"docs":{},"u":{"docs":{},"t":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0072992700729927005}}}}}}}}}}}}},":":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0024330900243309003}}}},"*":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.015706806282722512},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.012165450121654502},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.006944444444444444}}},"+":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.015706806282722512},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.033707865168539325},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.019464720194647202},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.036290322580645164},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.02546296296296296},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.02197802197802198}},"=":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.011235955056179775},"Algorithms/DFS.html":{"ref":"Algorithms/DFS.html","tf":0.010526315789473684},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0072992700729927005},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}}},"=":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.005235602094240838},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.020833333333333332},"DataStructures/Trees/DepthFirst.html":{"ref":"DataStructures/Trees/DepthFirst.html","tf":0.06315789473684211},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.033707865168539325},"DataStructures/Trees/DivideAndConquer.html":{"ref":"DataStructures/Trees/DivideAndConquer.html","tf":0.019230769230769232},"Algorithms/DFS.html":{"ref":"Algorithms/DFS.html","tf":0.05263157894736842},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0535279805352798},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.028225806451612902},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.034722222222222224},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.03296703296703297},"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.029411764705882353}},"=":{"docs":{"DataStructures/Trees/DepthFirst.html":{"ref":"DataStructures/Trees/DepthFirst.html","tf":0.042105263157894736},"DataStructures/Trees/DivideAndConquer.html":{"ref":"DataStructures/Trees/DivideAndConquer.html","tf":0.009615384615384616},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.021897810218978103},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.012096774193548387},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.006944444444444444},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}},"x":{"docs":{"DataStructures/Trees/DepthFirst.html":{"ref":"DataStructures/Trees/DepthFirst.html","tf":0.010526315789473684}},"o":{"docs":{},"r":{"docs":{},"s":{"docs":{},"/":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.005235602094240838}}}}}},")":{"docs":{},":":{"docs":{"DataStructures/Trees/DepthFirst.html":{"ref":"DataStructures/Trees/DepthFirst.html","tf":0.010526315789473684}}}},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}}},"/":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.0625},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}}},">":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.15384615384615385},"DataStructures/Trees/DepthFirst.html":{"ref":"DataStructures/Trees/DepthFirst.html","tf":0.021052631578947368},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.02247191011235955},"DataStructures/Trees/DivideAndConquer.html":{"ref":"DataStructures/Trees/DivideAndConquer.html","tf":0.009615384615384616},"Algorithms/DFS.html":{"ref":"Algorithms/DFS.html","tf":0.021052631578947368},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.029197080291970802},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.020161290322580645}}},"j":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.016129032258064516},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.004629629629629629}},"u":{"docs":{},"m":{"docs":{},"p":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.02}}}}},")":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}},")":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.008064516129032258}},":":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}}},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}}},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}},":":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}},"a":{"docs":{},"v":{"docs":{},"a":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}}}},"#":{"docs":{"DataStructures/Trees/DepthFirst.html":{"ref":"DataStructures/Trees/DepthFirst.html","tf":0.06315789473684211},"Algorithms/DFS.html":{"ref":"Algorithms/DFS.html","tf":0.05263157894736842},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.004866180048661801},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.028225806451612902}},"a":{"docs":{},"d":{"docs":{},"d":{"docs":{},"i":{"docs":{},"t":{"docs":{"DataStructures/Trees/DivideAndConquer.html":{"ref":"DataStructures/Trees/DivideAndConquer.html","tf":0.009615384615384616}}}}}}},"i":{"docs":{},"f":{"docs":{"DataStructures/Trees/DivideAndConquer.html":{"ref":"DataStructures/Trees/DivideAndConquer.html","tf":0.019230769230769232}}},"m":{"docs":{},"a":{"docs":{},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{"DataStructures/Trees/DivideAndConquer.html":{"ref":"DataStructures/Trees/DivideAndConquer.html","tf":0.009615384615384616}}}}}}}},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{"DataStructures/Trees/DivideAndConquer.html":{"ref":"DataStructures/Trees/DivideAndConquer.html","tf":0.009615384615384616}}}}}},"r":{"docs":{},"e":{"docs":{},"t":{"docs":{},"u":{"docs":{},"r":{"docs":{},"n":{"docs":{"DataStructures/Trees/DivideAndConquer.html":{"ref":"DataStructures/Trees/DivideAndConquer.html","tf":0.009615384615384616},"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.029411764705882353}}}}}}}},"s":{"docs":{},"o":{"docs":{},"m":{"docs":{},"e":{"docs":{"DataStructures/Trees/DivideAndConquer.html":{"ref":"DataStructures/Trees/DivideAndConquer.html","tf":0.019230769230769232}}}}}},"u":{"docs":{},"p":{"docs":{},"d":{"docs":{},"a":{"docs":{},"t":{"docs":{"DataStructures/Trees/DivideAndConquer.html":{"ref":"DataStructures/Trees/DivideAndConquer.html","tf":0.009615384615384616}}}}}}},"(":{"docs":{},"c":{"docs":{},"l":{"docs":{},"i":{"docs":{},"m":{"docs":{},"b":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}}}}}}}}},"[":{"0":{"docs":{},"]":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}}}},"docs":{},"]":{"docs":{"DataStructures/Trees/DepthFirst.html":{"ref":"DataStructures/Trees/DepthFirst.html","tf":0.021052631578947368},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.012165450121654502}}},"f":{"docs":{},"a":{"docs":{},"l":{"docs":{},"s":{"docs":{},"e":{"docs":{},"]":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0072992700729927005}}}}}}}},"[":{"0":{"docs":{},"]":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}}}},"docs":{}}},"_":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}},"_":{"docs":{},"i":{"docs":{},"n":{"docs":{},"i":{"docs":{},"t":{"docs":{},"_":{"docs":{},"_":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Trees/DepthFirst.html":{"ref":"DataStructures/Trees/DepthFirst.html","tf":0.010526315789473684},"Algorithms/DFS.html":{"ref":"Algorithms/DFS.html","tf":0.010526315789473684}}},")":{"docs":{},":":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.011235955056179775},"DataStructures/Trees/DivideAndConquer.html":{"ref":"DataStructures/Trees/DivideAndConquer.html","tf":0.009615384615384616},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0024330900243309003}}}}}}}}}}}}}}}},"h":{"docs":{},"e":{"docs":{},"l":{"docs":{},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"l":{"docs":{},"e":{"docs":{},"v":{"docs":{},"e":{"docs":{},"l":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},")":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.011235955056179775}}}}}}}}}}}}}}}}}}},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0024330900243309003}}}}}}}},"_":{"docs":{},"g":{"docs":{},"e":{"docs":{},"n":{"docs":{},"e":{"docs":{},"r":{"docs":{},"a":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0024330900243309003}}}}}}}}}}}}}}}}}},"b":{"docs":{},"i":{"docs":{},"n":{"docs":{},"a":{"docs":{},"r":{"docs":{},"y":{"docs":{},"h":{"docs":{},"o":{"docs":{},"u":{"docs":{},"r":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0024330900243309003}}}}}}}}}}}}},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0024330900243309003}}}}}}}}}}}}}}}}}},"c":{"docs":{},"o":{"docs":{},"p":{"docs":{},"y":{"docs":{},"p":{"docs":{},"a":{"docs":{},"s":{"docs":{},"t":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}}}}}}}}}}}}}}}}}}}}}}},"\"":{"docs":{},"\"":{"docs":{},"\"":{"docs":{"Algorithms/DFS.html":{"ref":"Algorithms/DFS.html","tf":0.021052631578947368}}}}},"\\":{"docs":{"Algorithms/DFS.html":{"ref":"Algorithms/DFS.html","tf":0.031578947368421054},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0024330900243309003}}},"{":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.012096774193548387},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.018518518518518517}},"'":{"docs":{},"i":{"docs":{},"m":{"docs":{},"p":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{},"a":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},"'":{"docs":{},":":{"docs":{"Algorithms/DFS.html":{"ref":"Algorithms/DFS.html","tf":0.010526315789473684}}}}}}}}}}}}}}},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{},"m":{"docs":{},".":{"docs":{},"i":{"docs":{},"d":{"docs":{"Algorithms/DFS.html":{"ref":"Algorithms/DFS.html","tf":0.010526315789473684}}}}},"[":{"0":{"docs":{},"]":{"docs":{},":":{"docs":{"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.029411764705882353}}}}},"docs":{}}}}}},"k":{"docs":{},":":{"docs":{"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.029411764705882353}}}}},"‘":{"docs":{},"r":{"docs":{},"e":{"docs":{},"j":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"’":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0024330900243309003}}}}}}}}}},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}},"y":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}}},"}":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129},"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.006944444444444444}}},"!":{"docs":{},"=":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}}}},")":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}}},"?":{"docs":{"Algorithms/DynamicProgramming.html":{"ref":"Algorithms/DynamicProgramming.html","tf":0.0023148148148148147}}}},"length":1415},"corpusTokens":["!=","\"\"\"","#","#(climb","#addit","#if","#imagin","#node","#return","#some","#updat","&","'pivot'","'quirky'","'subordinates':","'visited'","((i,","(1)","(==r)","(bag_weight","(bottom","(d","(distinguish","(end_index","(especi","(i","(i,","(i.e.","(int","(k","(leaves[i]","(leetcod","(len(leaves)","(len(values)","(memo[position]","(n","(ncr)","(posit","(should","(sorted)","(start_index","(top","(total_sum","(use","(veri","(with",")","*","+","+=",",","/","0","0)","0))","0):","0,","0/1","0:","0;","1","1)","1))","1),","1)/2","1):","1);","1)]","1,","10):","18/","1;","1]","1])","2","2)","2):","2.","2]","3.","3/","3000","4","4):","6","6):","70)",":","=","==",">","?","[0]","[[0]","[]","[false]","\\","_","__init__(self):","__init__(self,","_helper(self,","_helper_generator(self,","_helperbinaryhours(self,","_helperbinarymins(self,","_helpercopypaste(self,","_helpermaxlevelsum(self)","absolut","abstract","accept","accept,","achiev","actual","actual_solver(root.left)","actual_solver(root.right)","actual_solver(self,","add","addit","again.","algorithm","algorithms.","allow","alway","anoth","answer","answer.","answer:","append","appli","approach","approach.","archives:","array","array.","array:","backtrack","backtracker([],","backtracker(bucket,","backtracker(bucket:","backtracking.","bad,","bag_weight","bag_weight):","base","basic","befor","behavior","benefit","best.","better","between","bfs.","binari","book","bool:","boolean","bottom","brave","brute","bucket","bucket.append('(')","bucket.append(')')","bucket.pop()","built","buy","c","c.most_common(n)","caching.","calcul","call","can't","canjump(int[]","canjumpfromposition(int","care","case","case)","cash","cash,","cash.","catch:","caus","cc","cell","cell.","cell_column)","certain","challeng","chang","change.","characterist","characters/","cheat","check","checks:","child","children","choices,","choices:","choos","class","class,","climb","code","collect","collections.deque)","colleg","combin","combinations:","combinator","comment","comparison","competit","complet","complex","complexity:","condit","conquer","constraint","continu","convers","convert","copied))","copied,","copied:","correct","count","counter","counter(list/string)","crux","current","current),","current,","current:","customer?","d","data","day","day,","de","deal","decid","decor","deep","def","defaultdict","defaultdict(int)","definit","deliv","depth","deque()","deque,","desir","determin","df","dfs(self,","dict,","dictionari","differ","difference,","direct","divid","do?","docstr","domain","domain)","domain:","don't","done","don’t","down","dp","dp[0]","dp[1]","dp[2]","dp[i","dp[i]","dp[n","dp[n]","drawn","dure","dynam","each","easi","easier.","effect","effici","eg.","element","element,","element/","element:","elements/","elif(weight","elimin","employe","employee:","employee_data","employee_data:","employee_data[id][\"importance\"]","employee_data[id][\"subordinates\"]:","employees:","employees}","empti","end","end,","enum","equat","etc","even","everytim","exact","exclud","exclude)","exhaust","exists:","experience,","experience.","faced?","fals","false,","false;","far,","far.","faster","fee","fee)","fee):","fee/","filter","final","final_answ","find","finit","first","first.","follow","forc","found","found:","frequenc","frequent","fulli","function","further","furthestjump","futur","game","geek","gener","generateparenthesis(self,","getimportance(self,","getmaximumgold(self,","getter","give","global/loc","go","go.","goe","gold/","good,","graduat","greater","greedi","grid","grid:","grid[i][j]","heap","help","helper","here","here,","hold","hold,","https://leetcode.com/discuss/interview","https://leetcode.com/problems/2","https://leetcode.com/problems/3sum/","https://leetcode.com/problems/best","https://leetcode.com/problems/binari","https://leetcode.com/problems/combin","https://leetcode.com/problems/contain","https://leetcode.com/problems/employe","https://leetcode.com/problems/gener","https://leetcode.com/problems/jump","https://leetcode.com/problems/leaf","https://leetcode.com/problems/longest","https://leetcode.com/problems/maximum","https://leetcode.com/problems/next","https://leetcode.com/problems/path","https://leetcode.com/problems/two","https://www.geeksforgeeks.org/maximum","https://www.geeksforgeeks.org/merg","https://www.geeksforgeeks.org/next","https://www.geeksforgeeks.org/numb","https://www.geeksforgeeks.org/partit","https://www.geeksforgeeks.org/stock","https://www.geeksforgeeks.org/tag/subset/","https://www.geeksforgeeks.org/xor","i)","i+1","i,","i:","id","id)","id:","if((len(bucket)","if(curr","if(failure_base_case):","if(i","if(k","if(len(bucket)","if(n","if(not","if(num","if(opencount","if(self.accepted[i]):","if(success_base_case):","imagin","implement","impli","import","importance/","importance:","importantly,","includ","incomplet","increas","independently.","index","index.good","index.unknown)","index[]","index[nums.length];","info","innovative:","inord","inorder(root.left)","inorder(root.right)","inorder(root:","insid","instanti","instead","instruct","instructions:","int","int)","int,","int:","int[]","interact","interest","interv","intervals/","intmax","intmin","introduct","issubsetsum(list,","it'","item","item.importance,","item.subordinates}","item:","item[1:]","item[1])}","iteration.","ith","iv/discuss/54117/clean","j","j)","j))","j)):","j),","j,","j:","java","jump","k","k,","k/","k:","keep","key","key=lambda","key=self.level_sum.get)","keyboard/submissions/","kind","knapsack","knapsack(self,","knapsack,","known,","kth","k’","larg","largest","lca","leaf","leafsimilar(self,","leav","leaves.append(root.val)","leaves1","leaves1[i]):","leaves[0:]","leetcode:","left","left_solut","len(domain)","len(grid),","len(grid[0])","len(leaves)):","len(leaves1)):","len(prices)):","len(values)+","length","less","level","librari","life","limit","limit,","list","list)","list,","list.","list:","list['employee'],","list[i","list[i]","list[int]):","list[list[int]])","list[n","list}","local","longer","look","loop","m","m,","made","maintain","make","matched:","math.min(i","math.min(posit","max","max(cash,","max(hold,","max(include,","max(self.dfs(i,","max(self.dfs(x,","max(self.level_sum,","max/min.","max/min:","maxima","maximum","maximumsum","maximumsum)","maxlevelsum(self,","maxprofit(self,","maxval","memo","memo;","memo[position]","memoiz","memori","mention","merg","method","methods,","min","min(2","minima","minimum","minsteps(self,","minval","miscellan","modulo","more","move","move:","multi,","multipl","n","n)","n):","n,","n:","necessari","necessary.","need","negative,","never","new","next","nextposit","node","node):","node,","node.","node.v","none","none:","normal","note","nth","num","num:","number","nums)","nums.length","nums[i],","nums[position],","o(2^n)","observ","odd","of.","older","on","onc","oop:","open","opencount","opencount)","opencount:","oper","optim","optimization.","option","order","out","over","overhead","overlap","own","pair","param","parentheses/","partial","particular","partitions:","pass","pattern","per","perform","perm_recur(self,","permut","permutation/solution/","permutation:","pivot","point","point)","pointer","pointers:","pop","posit","position,","possibl","possible.","post","practice,","pre","prefix","prefix_arr[0]","prefix_arr[1]","previou","prices,","prices[0]","prices[i]","prices[i])","principl","print(\"\\n\")","print(root.value)","print(self.hoursaccepted)","print(self.minsaccepted)","prioriti","problem","problems)","problems:","process","process:","produc","product","profit","program","program:","programming)","programming:","project,","prop","properti","property,","public","python","quantiti","question","question/356520","questions:","quicksort","r","rang","range(0,","range(1,","range(3,","range(m))","range(n)","range(start,","readbinary(self,","realli","recent","recurs","recursion)","recursion,","recursion.","recursiveimportance(self,","reduc","refer","reference:","relat","reli","rememb","remember:","remov","repeat","repeatition)","repetition,","requir","result","retriev","return","revers","revert","right","right.","right_solut","root","root):","root.left","root.right","root1:","root2:","root:","run","runtim","same","satisfi","scenario","search","see","seen),","seen):","seen.add((i,","seen.discard((i,","seen:","select","select.","self._helperbinaryhours(num","self._helperbinarymins(i,","self._helperbinarymins(num","self._helpercopypaste(n,","self._helpermaxlevelsum()","self.accept","self.accepted[i]","self.bucket","self.bucket.append(domain[i])","self.bucket.pop()","self.hour","self.hoursaccept","self.hoursaccepted[i]","self.hoursaccepted[i]:","self.id","self.import","self.left","self.level_sum","self.level_sum[level]","self.min","self.minsaccept","self.minsaccepted[i]","self.minsaccepted[i]:","self.n","self.n):","self.perm_recur(0,","self.perm_recur(k","self.permut","self.permutations.append(''.join(bucket))","self.permutations.append(self.bucket[:])","self.powerset","self.powerset.append(self.subset[:])","self.queu","self.queue.append((node.left,","self.queue.append((node.right,","self.queue.append((root,","self.queue.popleft()","self.recurse(k,","self.recursiveimportance(employee_data,","self.right","self.solution_function(case_one,","self.solution_function(case_two,","self.solution_search(0,","self.solution_search(k","self.subordin","self.subset","self.subset.append(domain[k])","self.subset.pop()","self.val","sell","sell/","seqbuilder(root):","seqbuilder(root.left)","seqbuilder(root.right)","seqbuilder(root1)","seqbuilder(root2)","set","set())","set)","setter","share","sheet","similar","simpl","simple.","simplest","size","slide","slower","small","smallest","smallest,","solut","solution(object):","solution,","solution.","solution:","solution_function(self,","solution_search(self,","solutiongenerator:","solutions.","solutions:","solv","someth","sort","sort:","sorted(x.items(),","specifics,","squar","stack","stair","standard","start","start:","step","step,","stock","stock,","stock.","store","strictli","string","structur","sub","subarray","subarray.","subarray/","subarrays,","subarrays:","subordin","subordinate)","subordinates:","subproblem","subsequ","subsequences.","subset","subsets:","substr","substructur","sum","sum,","sum/","sum/discuss/16510/python","sum:","sure","swap","t:","tabl","table[i][weight]","take","taken","target","techniqu","tell","template:","temporari","th","there,","thick","thing","this:","those","thought","till","time","tips:","top","total","total_permut","track","transact","transfer","transform","transit","travers","tree","tree,","treenode)","treenode,","treenode:","trees/submissions/","tri","trick","true","true;","tweak","twice/","two","type","typic","understand","uniqu","unknown","unless","up","updat","us","usual","usually,","v","vagu","valu","value)","values,","variabl","variat","varient","veri","view,","want","watch/","water/","way","weight","weights,","while(len(self.queue)):","whole","width","window","wise","without","work","write","x","x):","x,","xors/","y","y,","{","{'importance':","{item.id","{item[0]:","{k:","}","‘reject’"],"pipeline":["stopWordFilter","stemmer"]},"store":{"./":{"url":"./","title":"Introduction","keywords":"","body":"Introduction\nCompetitive coding notes\n"},"GeneralInstructions.html":{"url":"GeneralInstructions.html","title":"General Instructions","keywords":"","body":"General instructions\nProblem solving\n\nBrute-force approach first\nKeep on optimizing code\nRemember runtimes of python built-in functions and libraries\n\nCode writing\n\nOOP: use class, methods, and class variables\nUse docstrings if possible\nHelper functions to maintain some level of abstraction\nProperty, getters-setters to decorate code further\n\n"},"DataStructures/":{"url":"DataStructures/","title":"Data Structures","keywords":"","body":"Data Structures & standard questions\n"},"DataStructures/Arrays/":{"url":"DataStructures/Arrays/","title":"Arrays","keywords":"","body":"Arrays\nGeneral instructions:\n\nCheck if pre and post array can help \nhttps://www.geeksforgeeks.org/maximum-length-of-strictly-increasing-sub-array-after-removing-at-most-one-element/\n\n'Quirky' stack problems \nhttps://www.geeksforgeeks.org/next-greater-element/ : Position priority\n\nSimilar to stack problems (1) but value priority and then position \nhttps://leetcode.com/problems/next-permutation/solution/\n\n\n"},"DataStructures/Arrays/TwoPointers.html":{"url":"DataStructures/Arrays/TwoPointers.html","title":"Two Pointers","keywords":"","body":"2 Pointers technique\nhttps://leetcode.com/problems/container-with-most-water/  \nhttps://leetcode.com/problems/two-sum/\nhttps://leetcode.com/problems/3sum/\nTwo pointers is really an easy and effective technique which is typically used for searching pairs in an array.\n Two pointers:\nAt either ends and decide which one to move\nOne faster and one slower\nMaintain subarray size of K’s props\n"},"DataStructures/Arrays/Subarrays.html":{"url":"DataStructures/Arrays/Subarrays.html","title":"Subarrays","keywords":"","body":"Subarrays\nOptimization checks: \n\nTwo pointers \nSliding window with running values \nPrefix array: if we need to apply brute force at any point\nPre and Post arrays\n\nFind subarray size K:\nRequires all subarrays of all sizes and find all where a constraint is matched: \nhttps://www.geeksforgeeks.org/number-subarrays-product-less-k/\nSliding window with two pointers \nLeft move: if product is more than the constraint \nRight move: everytime unless the product is more than the constraint \nCatch: Each addition of the element produces (end_index - (start_index - 1)) more subarrays \nCatch: Which implies -- subarray of size d produces d * (d + 1)/2 different subarrays\nhttps://www.geeksforgeeks.org/maximum-subarray-size-subarrays-size-sum-less-k/\nPrefix array to store constraint related data (sorted) \nBinary search + two pointers to find ALL subarrays of that size satisfying the constraint\nhttps://www.geeksforgeeks.org/number-of-subarrays-with-odd-sum/\nPrefix array but instead of sum, store sum modulo 2 \nfinal_answer = prefix_arr[0] * prefix_arr[1]\nOperation on all of subarrays:\nhttps://www.geeksforgeeks.org/xor-subarray-xors/\nCatch: ith element frequency in all subarrays: (i + 1) * (n - i) \nDesired quantity at the end of the whole domain traversal \nhttps://leetcode.com/problems/maximum-subarray/\nKeep current value running and max/min: \n\nIncluding the element \nExcluding the element: basically new subsequence start \n\nLooks like DP question but we don’t have to refer older values as we are dealing subarrays, not subsequences. Answer till  previous is stored in the comparison step of current and absolute max/min.\nhttps://www.geeksforgeeks.org/maximum-product-subarray-set-3/\nmaxVal and minVal at each value during iteration. If negative, swap them before multi, other things similar to maximum subarray sum\n"},"DataStructures/Arrays/Subsets.html":{"url":"DataStructures/Arrays/Subsets.html","title":"Subsets","keywords":"","body":"Subsets\nGeeks for Geeks archives: https://www.geeksforgeeks.org/tag/subset/ \nOptimization checks:\n\nSorting the whole array\n\nFor each element, there are 2 choices: Take or leave \nTwo ways to implement this: \n\nRecursion\nDP\n\nStandard questions\nhttps://www.geeksforgeeks.org/partition-problem-dp-18/\n\nisSubsetSum(list, n, sum / 2) = isSubsetSum(list, n - 1, sum / 2) or isSubsetSum(list, n - 1, sum / 2 - list[n - 1])\n\n \n\n\n\n"},"DataStructures/Strings/":{"url":"DataStructures/Strings/","title":"Strings","keywords":"","body":"Strings\n"},"DataStructures/Strings/StandardQuestions.html":{"url":"DataStructures/Strings/StandardQuestions.html","title":"Standard Questions","keywords":"","body":"Standard Questions\nBrute -> Sliding Window -> Set\nhttps://leetcode.com/problems/longest-substring-without-repeating-characters/\n"},"DataStructures/Trees/":{"url":"DataStructures/Trees/","title":"Trees","keywords":"","body":"Trees\nGeneral tips:\n\nNeed to brave and innovative: find the crux or a pattern of append\nThe answer is always very simple. Imagine a simple tree with a root node with a left and right child\nCheck if a helper function can make life easier.\nRecursion. Recursion. Recursion.\nTweaks here and there, go for the simplest solution first. Don’t just jump to recursion.\nCheck which kind of traversal might be the best. Inorder DFS or level-wise BFS.\n\n"},"DataStructures/Trees/DepthFirst.html":{"url":"DataStructures/Trees/DepthFirst.html","title":"Depth-First","keywords":"","body":"Depth-First traversals\nInorder\ndef inorder(root: TreeNode) -> None:\n    if root:\n        inorder(root.left)\n        print(root.value)\n        inorder(root.right)\n\nSolutions are generally some varients of inorder code\nLeaf-related problems: \nhttps://leetcode.com/problems/leaf-similar-trees/submissions/ \n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def leafSimilar(self, root1: TreeNode, root2: TreeNode) -> bool:\n        leaves = []\n        def seqBuilder(root):\n            if root:\n                if root.left == None and root.right == None:\n                    leaves.append(root.val)\n                seqBuilder(root.left)\n                seqBuilder(root.right)\n\n        seqBuilder(root1)\n        leaves1 = leaves[0:]\n        leaves = []\n        seqBuilder(root2)\n\n        if not (len(leaves) == len(leaves1)):\n            return False\n\n        for i in range(0, len(leaves)):\n            if not (leaves[i] == leaves1[i]):\n                return False\n\n        return True\n\n"},"DataStructures/Trees/LevelWise.html":{"url":"DataStructures/Trees/LevelWise.html","title":"Level-wise Traversal","keywords":"","body":"Level-wise traversal problems\neg. Top-view, Bottom-view, Thickness of the tree, etc\n\nCan maintain the left-most node and right-most node or related data \nHelper functions or helper data structures (especially collections.deque) for data transfer or retrieval (i.e. depth value or width value) can help\n\nGeneral solution template:\nfrom collections import deque, defaultdict\n\nclass Solution:\n    def __init__(self):\n        self.queue = deque()\n        self.level_sum = defaultdict(int)\n\n    def _helperMaxLevelSum(self) -> None:\n        while(len(self.queue)):\n            node, level = self.queue.popleft()\n            if(not node):\n                continue\n\n            self.level_sum[level] += node.val\n\n            self.queue.append((node.left, level + 1))\n            self.queue.append((node.right, level + 1))\n\n    def maxLevelSum(self, root: TreeNode) -> int:\n        self.queue.append((root, 0))\n        self._helperMaxLevelSum()\n\n        return max(self.level_sum, key=self.level_sum.get) + 1\n\n"},"DataStructures/Trees/DivideAndConquer.html":{"url":"DataStructures/Trees/DivideAndConquer.html","title":"Divide and Conquer","keywords":"","body":"Divide and Conquer\neg. Kth smallest, LCA\nRemember:\n\nIn-order of binary gives a sorted list\nResult from left and right -> need to be taken care of\nRecursive calls just call left and right. They do not traverse the whole depth in one go. The basic principle of recursion.\nLook for the Pivot (distinguishing characteristics of that particular point)\n\nThe general solution template:\nclass solution:\n    def __init__(self):\n        #some props that we need pass down the tree\n        #some props that we want to maintain values of\n\n    def actual_solver(self, root):\n        #if some props needed to be passed per node, use helper here\n        #additional param needs to be passed for the helper\n        If root == None:\n            return\n        left_solution  = actual_solver(root.left)\n\n        #Node processing using global/local values\n        #updation of those global/local values\n        #if found:\n        return answer\n\n        Right_solution = actual_solver(root.right)\n        #return answer based on left_solution and right_solution\n        #imagine the stack after recursion\n\n"},"Algorithms/":{"url":"Algorithms/","title":"Algorithms","keywords":"","body":"Algorithms\n"},"Algorithms/DFS.html":{"url":"Algorithms/DFS.html","title":"DFS","keywords":"","body":"DFS\nProcess current node and then process its children \nhttps://leetcode.com/problems/employee-importance/\n\"\"\"\n# Employee info\nclass Employee:\n    def __init__(self, id: int, importance: int, subordinates: List[int]):\n        # It's the unique id of each node.\n        # unique id of this employee\n        self.id = id\n        # the importance value of this employee\n        self.importance = importance\n        # the id of direct subordinates\n        self.subordinates = subordinates\n\"\"\"\nclass Solution:\n\n    def recursiveImportance(self, employee_data: dict, id: int) -> int:     \n        current = employee_data[id][\"importance\"]\n\n        for subordinate in employee_data[id][\"subordinates\"]:\n            current += self.recursiveImportance(employee_data, subordinate)\n\n        return current\n\n\n    def getImportance(self, employees: List['Employee'], id: int) -> int:\n        employee_data = {item.id : \\\n                        {'importance': item.importance, \\\n                         'subordinates': item.subordinates} \\\n                        for item in employees}\n\n        return self.recursiveImportance(employee_data, id)\n\n"},"Algorithms/Combinatorics.html":{"url":"Algorithms/Combinatorics.html","title":"Combinatorics","keywords":"","body":"Combinatorics\nSubsets\nReference: CC Cheat sheet book \nNote the number of recursive calls made\nTwo choices:\n\nDon't choose the element: Just make a recursive call \nChoose the element\nSelect step\nGo to the next depth\nPop out so that we don't have to instantiate the bucket\n\n\n\nclass SolutionGenerator:\n    def solution_search(self, k : int, domain: list) -> None:\n        if (k == self.n):\n            self.powerset.append(self.subset[:])\n            return\n        self.solution_search(k + 1, domain)\n        self.subset.append(domain[k])\n        self.solution_search(k + 1, domain)\n        self.subset.pop()\n\n    def _helper_generator(self, domain: list) -> list:\n        self.powerset = []\n        self.subset = []\n        self.n = len(domain)\n        self.solution_search(0, domain)\n        return self.powerset\n\nPermutations\nRecursive calls for every element in the loop \nNo need to add a ‘reject’ scenario \nAccept, make changes and revert after going a level deep \nFilter right after the loop using a helper array used for tracking \nclass Permutation:\n    def perm_recur(self, k : int, domain: list) -> None:\n        if(k == self.n):\n            self.permutations.append(self.bucket[:])\n            return\n        for i in range(0, self.n):\n            if(self.accepted[i]):\n                continue\n            self.accepted[i] = True\n            self.bucket.append(domain[i])\n            self.perm_recur(k + 1, domain)\n            self.accepted[i] = False\n            self.bucket.pop()\n\n    def _helper(self, domain: list) -> list:\n        self.n = len(domain)\n        self.accepted = [False] * self.n\n        self.permutations = []\n        self.bucket = []\n        self.perm_recur(0, domain)\n        return self.permutations\n\nAdditional questions:\nhttps://leetcode.com/problems/combination-sum/discuss/16510/Python-dfs-solution.\nTo allow repetition, go to the same node after select. \nself.recurse(k, domain)\nCombinations: select r out of n (nCr)\n\nRecursion base case change (==r)\nrange inside the recursive function should go over n (should start from i + 1)\nSimilar to normal permutation\n\nIncomplete solution of https://leetcode.com/problems/binary-watch/ :\nclass T:\n    def __init__(self):\n        self.minsAccepted = [False] * 4\n        self.hoursAccepted = [False] * 6\n        self.mins = 0\n        self.hours = 0\n\n    def _helperBinaryHours(self, num: int, start: int) -> None:\n        if(num == 0):\n            # print(self.hoursAccepted)\n            self.hours += 1\n            return\n        for i in range(start, 6):\n            if self.hoursAccepted[i]:\n                continue\n            self.hoursAccepted[i] = True\n            self._helperBinaryHours(num - 1, i + 1)\n            self.hoursAccepted[i] = False\n\n    def _helperBinaryMins(self, num: int, start: int) -> None:\n        if(num == 0):\n            # print(self.minsAccepted)\n            self.mins += 1\n            return\n        for i in range(start, 4):\n            if self.minsAccepted[i]:\n                continue\n            self.minsAccepted[i] = True\n            self._helperBinaryMins(num - 1, i + 1)\n            self.minsAccepted[i] = False\n\n    def readBinary(self, num: int) -> int:\n        total_permutations = 0\n        if(num == 0 or num == 10):\n            return 1\n        if(num > 10):\n            return 0\n\n        for i in range(0, num + 1):\n            self._helperBinaryMins(i, 0)\n            self._helperBinaryHours(num - i, 0)\n            total_permutations += self.mins * self.hours\n            self.mins = 0\n            self.hours = 0\n            print(\"\\n\")\n\n        return total_permutations\n\nPermutation over a limited set of values (with repeatition)\n\nSelect one option and de-select it\nSimilar for other options \nThere are finite number of options at each step\nRecurse based on your selection\n\nhttps://leetcode.com/problems/generate-parentheses/\nclass Solution:\n    def generateParenthesis(self, n: int) -> int:\n        def backtracker(bucket: list, openCount: int) -> None:\n            if((len(bucket) - openCount) > openCount or \\\n               openCount > self.n):\n                return\n\n            if(len(bucket) == self.n * 2):\n                if(openCount == self.n):\n                    self.permutations.append(''.join(bucket))\n                return\n\n            bucket.append('(')\n            backtracker(bucket, openCount + 1)\n            bucket.pop()\n            bucket.append(')')\n            backtracker(bucket, openCount)\n            bucket.pop()\n\n        self.permutations = []\n        self.n = n\n        if n == 0:\n            return 0\n\n        backtracker([], 0)\n        return self.permutations\n\n"},"Algorithms/Backtracking.html":{"url":"Algorithms/Backtracking.html","title":"Backtracking and Complete Search","keywords":"","body":"Backtracking and Complete Search\nExhaustive search for an answer:\nCheck every possible option and see if a solution exists: (very similar to permutation problems) \nhttps://leetcode.com/problems/jump-game \nAccept one of the options at each step \nEmptying the bucket is not necessary \npublic class Solution {\n    public boolean canJumpFromPosition(int position, int[] nums) {\n        if (position == nums.length - 1) {\n            return true;\n        }\n\n        int furthestJump = Math.min(position + nums[position], nums.length - 1);\n        for (int nextPosition = position + 1; nextPosition \nGrid DFS\nSolution of https://leetcode.com/problems/path-with-maximum-gold/ :\ndef dfs(self, i: int, j: int, sum: int, seen: set) -> int:\n    # constraints\n    if(i = m or j = n or not grid[i][j] or (i, j) in seen):\n        return sum\n    # add to the 'visited' set\n    seen.add((i, j))\n    # update current target\n    sum += grid[i][j]\n    # set maximum target\n    maximumSum = 0\n\n    # directions to move in\n    for x, y in ((i, j + 1), (i , j - 1), (i + 1, j), (i - 1, j)):\n    # The actual recursion step\n        maximumSum = max(self.dfs(x, y, sum, seen), maximumSum)\n    # remove from the 'visited' set after recursion \n    seen.discard((i, j))\n    return maximumSum\n\ndef getMaximumGold(self, grid: List[List[int]]) -> int:\n    m, n = len(grid), len(grid[0])\n    return max(self.dfs(i, j, 0, set()) for j in range(n) for i in range(m))\n\nhttps://leetcode.com/problems/2-keys-keyboard/submissions/ \nReturn types should be taken care of. \n\nBase condition\nLimiting condition if required (Use INTMAX for min recursion, INTMIN for max recursion)\nActual recursion\n\nclass Solution:\n    def _helperCopyPaste(self, n: int, current: int, copied: int) -> int:\n        if(current == n):\n            return 0\n        if(current > n):\n            return 3000\n        return min(2 + self._helperCopyPaste(n, current + current, current),\n                   1 + self._helperCopyPaste(n, current + copied, copied))\n\n    def minSteps(self, n: int) -> int:\n        if(n == 1):\n            return 0\n        return 1 + self._helperCopyPaste(n, 1, 1)\n\n"},"Algorithms/DynamicProgramming.html":{"url":"Algorithms/DynamicProgramming.html","title":"Dynamic Programming","keywords":"","body":"Dynamic Programming\nDynamic programming is a technique that combines the correctness of complete search and the efficiency of greedy algorithms. Dynamic programming can be applied if the problem can be divided into overlapping subproblems that can be solved independently.\nThere are two uses for dynamic programming:\n\nFinding an optimal solution: We want to find a solution that is as large as possible or as small as possible.\nCounting the number of solutions: We want to calculate the total number of possible solutions.\n\nOptimal Solution\neg. 0/1 Knapsack, partitions: exact sum, minimum sum difference\nKnapsack program:\nclass Solution:\n    def knapsack(self, weights, values, bag_weight):\n        table = [[0] * (bag_weight + 1)] for _ in (len(values) + 1)]\n\n        for i in range(0, len(values)+ 1):\n            for weight in range(0, bag_weight + 1):\n                if(i == 0 or weight == 0):\n                    table[i][weight] = 0\n                elif(weight \nFor exact sum subsets and minimum difference subsets: \nTrue or False for each cell. Use or instead of max(include, exclude)\nNeed to have another loop over the table to find the 'pivot'\nFor minimum difference, find a True cell and that causes the least difference \n(total_sum - 2 * cell_column)\nFor the minimum number of squares required to get the sum, similar to the exact sum subarray. Rather than True or False, maintain the number of squares required for the sum\nNumber of solutions\neg. Climbing stairs (LeetCode 70)\nFor each step, there are multiple choices, generally 2. \nBrute force solution goes something like this:\nclass Solution:\n    def solution_function(self, n):\n        if(success_base_case):\n           return 1\n        if(failure_base_case):\n           return 0\n\n    return self.solution_function(case_one, n) + self.solution_function(case_two, n)\n\nTime Complexity: O(2^n) - tree size\nCheck if the problem satisfies Optimal Substructure Property \nFind an equation for the answer \nHere,\ndp[n] = dp[n  -  1] + dp[n - 2] #(climb stairs case)\n\ndp = [0] * (n + 1)\ndp[0] = 0\ndp[1] = 1\ndp[2] = 2\n\nfor i in range(3, n):\n            dp[i] = dp[i - 1] + dp[i - 2]\nreturn dp[n]\n\nFrom Leetcode:\n\nUsually, solving and fully understanding a dynamic programming problem is a 4 step process: \n\nStart with the recursive backtracking solution\nOptimize by using a memoization table (top-down dynamic programming)\nRemove the need for recursion (bottom-up dynamic programming)\nApply final tricks to reduce the time / memory complexity\n\n\neg. https://leetcode.com/problems/jump-game \n\nRefer backtracking solution\n\n2. Top-down Dynamic Programming\nTop-down Dynamic Programming can be thought of as optimized backtracking. It relies on the observation that once we determine that a certain subproblem solution, this result will never change. \nIf the solution is not known, perform backtracking again.\nenum Index {\n    GOOD, BAD, UNKNOWN\n}\n\npublic class Solution {\n    Index[] memo;\n\n    public boolean canJumpFromPosition(int position, int[] nums) {\n        if (memo[position] != Index.UNKNOWN) {\n            return memo[position] == Index.GOOD ? true : false;\n        }\n\n        int furthestJump = Math.min(position + nums[position], nums.length - 1);\n        for (int nextPosition = position + 1; nextPosition \n3. Bottom-up Dynamic Programming\nTop-down to bottom-up conversion is done by eliminating recursion. In practice, this achieves better performance as we no longer have the method stack overhead and might even benefit from some caching. More importantly, this step opens up possibilities for future optimization. The recursion is usually eliminated by trying to reverse the order of the steps from the top-down approach.\nenum Index {\n    GOOD, BAD, UNKNOWN\n}\n\npublic class Solution {\n    public boolean canJump(int[] nums) {\n        Index[] memo = new Index[nums.length];\n        for (int i = 0; i = 0; i--) {\n            int furthestJump = Math.min(i + nums[i], nums.length - 1);\n            for (int j = i + 1; j \n"},"Miscellaneous/":{"url":"Miscellaneous/","title":"Miscellaneous","keywords":"","body":"Miscellaneous\n"},"Miscellaneous/Stocks.html":{"url":"Miscellaneous/Stocks.html","title":"Stocks","keywords":"","body":"Stocks\n1 transaction\nhttps://www.geeksforgeeks.org/maximum-difference-between-two-elements/ \nKeep track of the minimum element found so far, calculate the difference between the current and minimum found so far. \nUpdate the maximum difference if necessary.\nAt most 2 transactions\nhttps://www.geeksforgeeks.org/maximum-profit-by-buying-and-selling-a-share-at-most-twice/ \nA similar approach to one transaction limit, maintain the minimum till that element and similar for i + 1 and till the end of the List.\nAny number of transactions\nhttps://www.geeksforgeeks.org/stock-buy-sell/ \nLocal minima List[i] = List[i + 1]\nBuy at local minima and sell at local maxima\nAny number of transactions with transaction fee\n\nCan use this for any number of transactions with fee == 0 \nhttps://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/ \nAt the end of the i-th day, we maintain cash, the maximum profit we could have if we did not have a share of stock, and hold, the maximum profit we could have if we owned a share of stock.\n\nTo transition from the i-th day to the i+1-th day, we either sell our stock \ncash = max(cash, hold + prices[i] - fee) or \nbuy a stock \nhold = max(hold, cash - prices[i]) \nAt the end, we want to return cash. We can transform cash first without using temporary variables because selling and buying on the same day can't be better than just continuing to hold the stock.\nclass Solution(object):\n    def maxProfit(self, prices, fee):\n        cash, hold = 0, -prices[0]\n        for i in range(1, len(prices)):\n            cash = max(cash, hold + prices[i] - fee)\n            hold = max(hold, cash - prices[i])\n        return cash\n\nK number of transactions\nhttps://leetcode.com/problems/best-time-to-buy-and-sell-stock-iv/discuss/54117/Clean-Java-DP-solution-with-comment \nDynamic programming\n"},"Miscellaneous/Intervals.html":{"url":"Miscellaneous/Intervals.html","title":"Intervals","keywords":"","body":"Interval problems\nhttps://www.geeksforgeeks.org/merging-intervals/ \nMerge one by one after sorting based on starting time\nhttps://leetcode.com/discuss/interview-question/356520 \nKeep a running count of the number of overlapping intervals\n"},"Miscellaneous/InterestingMiscellaneous.html":{"url":"Miscellaneous/InterestingMiscellaneous.html","title":"Interesting Miscellaneous","keywords":"","body":"Need to find nth smallest or largest\nUse max or min-heap or partial sort: quicksort variation\n"},"PythonicTricks/":{"url":"PythonicTricks/","title":"Pythonic Tricks","keywords":"","body":"Pythonic Tricks\nConvert list into a dictionary\n{item[0]: item[1:] for item in list}\n\nSort dictionary by value\n{k: v for k, v in sorted(x.items(), key=lambda item: item[1])}\n\nMost frequent in an array or a string\nfrom collections import Counter\nC = Counter(list/string)\nC.most_common(n) #returns a list of top n\n\n"},"BehavioralQuestions.html":{"url":"BehavioralQuestions.html","title":"Behavioral Questions","keywords":"","body":"Behavioral Questions\n\nWhat was a challenge or problem that you faced?\nTell me about a time when you were not able to deliver on time and what did you do?\nIs it better to have direct interaction with the customer?\nAnd some follow up questions based on my answers \n\n\nAll my answers were drawn from experience, I made sure I mentioned specifics, not just a vague answer. One answer from my recent graduate college project, two from my previous work experience.\n\n"}}}