{"index":{"version":"0.5.12","fields":[{"name":"title","boost":10},{"name":"keywords","boost":15},{"name":"body","boost":1}],"ref":"url","documentStore":{"store":{"./":["code","competit","introduct","note"],"GeneralInstructions.html":["abstract","approach","avoid","bracket","brute","built","class","class,","code","decor","docstr","first","forc","function","further","gener","getter","helper","improv","instruct","keep","level","librari","maintain","methods,","mistak","oop:","optim","possibl","possible:","problem","property,","python","readabl","rememb","runtim","setter","solv","stupid","us","variabl","write"],"DataStructures/":["&","data","question","standard","structur"],"DataStructures/Arrays/":["'quirky'","(1)","+","3",":","array","binari","check","element","element/","find","gener","greater","hash","help","https://leetcode.com/problems/next","https://www.geeksforgeeks.org/maximum","https://www.geeksforgeeks.org/next","increas","instructions:","length","on","permutation/solution/","posit","post","power","pre","prioriti","problem","question","remov","search","similar","sort","stack","strictli","sub","valu","weapon"],"DataStructures/Arrays/TwoPointers.html":["(n","(not","0","1)):","1/3286/","2","=","==",">",">=","array.","break","challenge/528/week","class","day","decid","def","easi","effect","end","faster","gener","https://leetcode.com/explore/challenge/card/30","https://leetcode.com/problems/3sum/","https://leetcode.com/problems/contain","https://leetcode.com/problems/two","k’","leetcod","len(nums)","list[int])","maintain","move","movezeroes(self,","n","n:","none:","num","nums:","nums[p]","nums[p],","nums[z]","nums[z],","on","p","pair","pointer","pointers:","prop","realli","return","search","size","slower","solut","solution:","structure:","subarray","sum/","techniqu","two","typic","us","water/","z"],"DataStructures/Arrays/Subarrays.html":["(d","(end_index","(i","(n","(sorted)","(start_index","*","+","1)","1))","1)/2","2","3/","=","absolut","addit","answer","array","basic","befor","binari","catch:","checks:","comparison","constraint","current","d","data","deal","desir","differ","domain","don’t","dp","dure","each","element","element/","element:","end","everytim","exclud","final_answ","find","frequenc","https://leetcode.com/problems/maximum","https://www.geeksforgeeks.org/maximum","https://www.geeksforgeeks.org/numb","https://www.geeksforgeeks.org/xor","i)","impli","includ","increas","instead","iteration.","ith","k/","k:","keep","left","length","less","look","matched:","max/min.","max/min:","maximum","maxval","minval","modulo","more","move:","multi,","negative,","new","odd","older","on","oper","optim","pointer","post","pre","prefix","prefix_arr[0]","prefix_arr[1]","previou","produc","product","quantiti","question","refer","relat","remov","requir","right","run","satisfi","search","set","similar","size","slide","start","step","store","strictli","sub","subarray","subarray/","subarrays,","subarrays:","subsequ","subsequences.","sum","sum,","sum/","swap","thing","till","travers","two","unless","valu","whole","window","xors/"],"DataStructures/Arrays/Subsets.html":["(check","/","1,","18/","1])","2","2)","=","archives:","array","checks:","choices:","dp","each","element,","geek","https://www.geeksforgeeks.org/partit","https://www.geeksforgeeks.org/tag/subset/","implement","issubsetsum(list,","leav","list[n","miscellan","n","n,","optim","prioriti","problem","question","queue","recurs","section)","sort","standard","subset","sum","take","this:","two","way","whole"],"DataStructures/Strings/":["string"],"DataStructures/Strings/StandardQuestions.html":[">","brute","characters/","https://leetcode.com/problems/longest","question","repeat","set","slide","standard","substr","window","without"],"DataStructures/Trees/":["(collections.deque)","(levelwis","(recurs","+","439df7e5ea1f","answer.","append","befor","cases.","check","combo","curat","data","decent","don't","down","encount","find","global","hashing)","https://medium.com/@codingfreak/binari","inord","interview","iterative)","keep","left","left/","level","levelwis","levelwise,","list:","make","node","node.","node/","order","pass","popleft","postord","practic","preorder","present","problem","push","question","queue.","record","recurs","return","right","see","situations,","solut","solution,","solution.","sure","travers","tree","tree,","up","updat","value.","vertic","want"],"DataStructures/Trees/Inorder.html":["\"","\"\")","+","+=","0","=",">",">\")","[]","base","binarytreepaths(self,","bst","case","class","criteria,","current","current.left","current.right","current.right:","current.v","current:","def","don't","fals","find","flag","for,","give","https://leetcode.com/problems/binari","https://leetcode.com/problems/sum","inord","int:","iter","leaves/","left","list","list[str]:","look","make","node.left","node.right:","node:","particularli","path","path):","paths.","paths/","recur","recurs","result","result.append(path","return","root","root:","satisfi","set","solution:","sort","stack","stack.append(current)","stack.pop()","str(node.val)","str(node.val))","sumofleftleaves(self,","sure","total_sum","travers","traverse(node,","traverse(node.left,","traverse(node.right,","traverse(root,","tree","tree,","treenode)","true","unnecessari","until","up","us","want"],"DataStructures/Trees/Preorder.html":["(current","(not","(sum","*","+","+=","0","0)","0,","1","1)","10","=","==",">","[]","[],","[node.val],","addnums(node,","addnums(node.left,","addnums(node.right,","addnums(root,","always,","check","class","course)","cover","current","current):","current_sum","current_sum):","def","direct","direction,","down","elif","else:","exist","gener","go","https://leetcode.com/problems/binari","https://leetcode.com/problems/path","https://leetcode.com/problems/sum","ii/","int)","int:","leaf","left","left,","left:","length","length)","length):","level","levelwis","list[list[int]]:","longestzigzag(self,","max(self.max_length,","node","node.left","node.left:","node.right:","node.val)","node.val):","node:","numbers/","order","pass","path","path,","path.append(node.val)","pathsum(self,","perfect","preorder","process","replac","result","result.append(path)","return","right","right,","right:","root","root.left","root.right,","root:","self.max_length","self.tot","solution:","sometim","sum","sum:","sumnumbers(self,","travers","traversal/","traverse(node,","traverse(node.left,","traverse(node.right,","traverse(root,","tree","tree.","treenode)","treenode,","valu","want","zigzag"],"DataStructures/Trees/Postorder.html":["'treenode')","'treenode',","'treenode':","(float('","(l","(left_max","(node.v","(right_min","+","+=","0","1","2:","=","==",">",">=","[]","[p.val,","afterwards.","ancestor","attribut","back","base","binari","bool:","bottom,","check","class","collect","common","def","defaultdict","defaultdict(int)","deque,","e.g.","easier","exist","fals","find","findfrequenttreesum(self,","float('inf'))","frequent","gener","globals/","https://leetcode.com/problems/lowest","https://leetcode.com/problems/most","https://leetcode.com/problems/valid","import","inf'),","insert","int:","isvalidbst(self,","key,","l","left","left,","left_max,","left_min","list[int]:","lowestcommonancestor(self,","max","max(self.max_count,","max_count","need","node","node'","node.val)","node.val]","node.val])","node:","none","note:","p:","pass","posit","postord","properties,","properties;","q.val])","q.val]))","q:","r","record","record/upd","recurse(node.left)","recurse(node.right)","recurse(node:","result","result.append(key)","return","return(l","right","right_max,","right_min","root.left","root.right:","root:","search","self.lca","self.max_count","self.valid","solution:","sometim","subtre","subtree.","sum","sum/","sums.items():","sums[l","travers","traverse(node):","traverse(node.left)","traverse(node.right)","traverse(root)","tree.","tree/","treenode)","true","up","us","valu","value.","value:"],"DataStructures/Trees/LevelWise.html":["!=","(x_found","(y_found","+=","0","1","1)","1))","1):","=","==",">","append","binari","bool:","class","collect","current","current,","current.left:","current.right:","current.v","current.val))","deepestleavessum(self,","def","dequ","deque()","fals","gener","https://leetcode.com/problems/cousin","https://leetcode.com/problems/deepest","import","int)","int,","int:","iscousins(self,","leav","len(queue)","level","level_sum","levelwis","more","node","parent","queue","queue.append((current.left,","queue.append((current.right,","queue.append((root,","queue.append(current.left)","queue.append(current.right)","queue.append(root)","queue.popleft()","queue:","return","root","root:","size","size:","solution:","sum/","travers","tree/","treenode)","treenode,","true","valu","wise","x:","x_found","y:","y_found","y_found)","y_found):"],"DataStructures/Trees/ConstructTree.html":["#","(end","+","//","1","1)","1,","1:","1]","2","3","=",">",">=","])","__init__(self,","balanc","binari","binarysearch(start","binarysearch(start,","bstfrompreorder(self,","class","construct","construct(0,","construct(l,","construct(max_index","constructmaximumbinarytree(self,","constructtree(0,","constructtree(arr:","constructtree(pivot,","constructtree(start","constructtree(start,","def","definit","easi","end","end)","end,","end:","https://leetcode.com/problems/bal","https://leetcode.com/problems/construct","https://leetcode.com/problems/maximum","int:","key","key)","key:","l","left","left=none,","len(arr)","len(list):","len(nums))","len(preorder)","list)","list[int])","max_index","max_index)","mid","node","node.","node.left","node.right","node.v","none","nums:","nums[i]","nums[max_index]","nums[max_index]:","pivot","preorder","preorder:","preorder[end","preorder[mid","preorder[start","preorder[start]","preorder[start])","question","r)","r):","r:","range(l,","return","right","right=none):","search","self.constructtree(arr[:mid])","self.constructtree(arr[mid","self.left","self.right","self.val","solution:","start","start)","traversal/","tree","tree/","tree/discuss/540038/python","treenode()","treenode(arr[mid])","treenode(preorder[start])","treenode:","understand","val","val=0,"],"DataStructures/Graphs/":["graph","https://leetcode.com/problems/array","nesting/"],"DataStructures/Graphs/Coloring.html":["!=","\"meaningful\"","(c","(node,","(use","+","0))","1","1))","1):","1:","1]","1])","1]:","2","2,","2])","3,","4])","=","==",">","[","[0","adjacent/","allow","altern","basically,","bfs(i):","bfs(s):","bfs)","bifurc","bipartite/","bipartition/","blue","blue,","blue])","blue_edges:","bool:","c","chang","class","code","collect","color","color)","color))","color,","color:","color_left","color_left))","colors.pop()","colors.remove(color)","colors/","continu","cycl","d","def","defaultdict","defaultdict(list)","defaultdict,","dequ","deque()","differ","disconnect","don't","edg","end","exists,","exists:","expect","expected):","expected,","extrem","fals","fill","find","first","flower","flowers.pop()","flowers.remove(planted[n","flowers:","gardennoadj(self,","graph","graph:","graph[end].append(start)","graph[i]","graph[node]:","graph[s].append([d,","graph[start].append(end)","https://leetcode.com/problems/flow","https://leetcode.com/problems/i","https://leetcode.com/problems/poss","https://leetcode.com/problems/shortest","import","int,","isbipartite(self,","keep","key","len(graph)):","len(graph))]","length","list[int]:","list[list[int]])","list[list[int]],","loop","make","mind","miss","n","n)]","n:","neigh","neigh:","node","node,","on","one:","over","pair","path","paths:","plant","planted[i","planted[n","problem","proper","queue","queue.append((0,","queue.append((i,","queue.append((v,","queue.popleft()","queue:","range(0,","range(1,","red","red,","red])","red_edges:","represent","result","result[node]","return","run","s","s,","sections.","see","seen","seen.add((node,","seen:","set","set()","set([1,","set([red,","shortestalternatingpaths(self,","similar","solut","solution:","solv","start,","store","sure","these,","tips:","travers","true","up","v","v,","vertic","visit","visited[node]","visited[node]:","visited[s]:","want"],"DataStructures/Graphs/GraphBFS.html":["(djikstra","(time","(x","+","0","0)])","1","=","==",">","[]","amaz","arsenal.","bf","bool:","canmeasurewater(self,","canvisitallrooms(self,","class","collect","continu","cost","def","defaultdict","defaultdict(list)","delay","dequ","deque()","deque([(0,","deque,","even","extrem","fals","function","graph","graph[node]:","graph[u].append((v,","heap","heap.append((0,","heap:","heapq","heapq.heappop(heap)","heapq.heappush(heap,","https://leetcode.com/problems/key","https://leetcode.com/problems/network","https://leetcode.com/problems/wat","import","int)","int,","int:","jug","k","k))","k:","len(rooms)","len(visited)","list[list[int]])","list[list[int]],","max(max_time,","max_tim","method:","myriad","n","n:","networkdelaytime(self,","node","optim","power","prioriti","problem","problems.","queue","queue)","queue.append(0)","queue.append(v)","queue.popleft()","queue:","quickest","reach","return","room","rooms/","rooms:","rooms[room]:","seen","set()","solution:","substitut","time","time)","time,","time/","times:","tool","true","u,","us","v","v))","v,","visit","visited.add(room)","visited:","visited[node]","w","w))","w,","way","x:","x;","y)","y:","z:","{}"],"DataStructures/Graphs/GraphDFS.html":["\"jfk\")]","+=","1","=",">","[]","a]","again","alreadi","befor","bool:","c,","canfinish(self,","check","children","class","collect","come","cours","cycl","cycle,","d,","def","defaultdict","defaultdict(int)","defaultdict(list)","df","dfs(i):","dfs(j):","dfs(start,","didn't","edg","edges[(none,","edges[(start,","edges[d,","eg.","end)]","end,","exit","fals","find","finditinerary(self,","first","g_visit","g_visited.add(i)","g_visited:","globally,","graph","graph:","graph[c].append(p)","graph[d].append(a)","graph[i]:","graph[s]","heapq","https://leetcode.com/problems/cours","https://leetcode.com/problems/reconstruct","import","instead","int,","itinerary/","j","lexograph","list[list[int]])","list[list[str]])","list[str]:","local","need","node","nodes.","numcourses):","numcourses:","on","p","path","possibl","prerequisites:","process","question","range(0,","repeat","result","result,","return","s","schedul","schedule/","selected):","self.result","set()","solution:","sort","sorted(graph[s])","store","there'","tickets:","time","true","type","unvisit","visit","visited.add(i)","visited.remove(i)","visited:"],"DataStructures/Graphs/TopologySort.html":["1]","=","==",">","[]","c,","class","collect","def","defaultdict","defaultdict(set)","deque()","deque,","findorder(self,","graph","graph[c].add(p)","graph[node]:","https://leetcode.com/problems/cours","ii/","import","incom","incoming[nei].remove(node)","incoming[nei]:","incoming[p].add(c)","int,","len(topo)","list[int]:","list[list[int]])","nei","node","numcours","numcourses))","numcourses:","p","prerequisites:","queue","queue.append(nei)","queue.append(node)","queue.popleft()","queue:","return","schedul","set(range(0,","solution:","sort","topo","topo.append(node)","topo[::","topolog","u_set","u_set.remove(p)","u_set:"],"Algorithms/":["(end","+","//","1)","14th/3328/","180/problems/lucki","2","8th","=","==",">",">=","algorithm","alien","arr[mid]","array","binari","binarysearch(start,","challenge/535/week","comment","contest","def","dequ","dictionari","do:","end","end):","function","greater,","greatest","https://leetcode.com/contest/weekli","https://leetcode.com/explore/challenge/card/may","https://leetcode.com/problems/slid","interv","k","k:","kadan","leetcod","matrix","maximum","maximum/discuss/111560/python","mid","next","number","o(n)","palindrom","paranthesis,","question","questions*","questions:","repetit","return","rightmost","rightmost,","search","smaller,","smallest","solut","start","start)","start:","stock","string","sum","travers","understand","us","weekli","window","zip"],"Algorithms/DFSandBFS.html":["#","####","(you'll","*","0,","1","1,","=","==",">",">=","[[[","[[fals","```pi","apend","array","avoid","b","base","be","bf","bit","board:","bool:","case","class","collect","collections.dequ","condit","continu","creat","def","dequ","deque([[0,","df","dfs(letter,","done","eg.","elimination/","empti","end","error","everywhere,","exceed","excel","exhaust","exist(self,","extrem","few","find","first","float('inf')]","forget","game","game/","gener","get","go","greedi","grid","grid:","grid[x][y]:","https://leetcode.com/problems/jump","https://leetcode.com/problems/shortest","https://leetcode.com/problems/word","ii/","import","int)","int:","j","job","jump","k","k:","k]])","k_left","left","len(board)","len(board[0])","len(grid)","len(grid[0])","len(word):","letter","limit","list[list[int]],","list[list[str]],","littl","long","minimum","need","notes:","obstacl","oper","optim","optimally.","orang","otherwise)","part","path","popleft","question","questions,","questions:","queue","queue.popleft()","queue:","range(0,","range(x)]","reach","repetit","requir","return","rotten","run","search","shortestpath(self,","slower","solut","solution:","solutions:","somewher","stack","start","step","steps,","str)","there'","true","type","up","us","useful:","visit","visited[x][y][1]","well","word","word:","work","x","x)]","x,","y","y)","y))]","y)]","y,","y:"],"Algorithms/Combinatorics.html":["(==r)","(k","(ncr)","(with","*","+","0","0)","0:","1)","1,","2):",":","=","==",">","[]","[false]","\\","_helper(self,","_helper_generator(self,","accept,","add","addit","allow","arr:","array","backtracker([],","backtracker(bucket,","backtracker(bucket:","base","book","bucket","bucket.append('(')","bucket.append(')')","bucket.append(arr[k])","bucket.pop()","call","case","cc","chang","cheat","choices:","choos","class","combin","combinations:","combinator","continu","de","deep","def","depth","df","domain)","domain:","don't","each","element","element:","fals","far;","filter","finit","generateparenthesis(self,","go","helper","helperncr(","helperncr(0,","helperncr(s,","helperncr(s:","https://leetcode.com/problems/combin","https://leetcode.com/problems/gener","if(","if((len(bucket)","if(k","if(len(bucket)","if(opencount","if(self.accepted[i]):","index","instanti","int)","int,","int:","item","k","k:","len(arr)","len(domain)","level","limit","list)","list,","list:","loop","made","make","n","n):","n:","ncr","ncr.append(bucket[:])","need","next","node","none:","normal","normalsubset(self,","note","number","on","opencount","opencount)","opencount:","option","out","over","param","parentheses/","perm_recur(self,","permut","permutation:","pop","process","questions:","r","r):","r:","range(0,","recurs","recursion:","reference:","repetition)","repetition,","return","revert","right","s:","same","scenario","select","select.","self.accept","self.accepted[i]","self.bucket","self.bucket.append(domain[i])","self.bucket.pop()","self.n","self.n):","self.perm_recur(0,","self.perm_recur(k","self.permut","self.permutations.append(''.join(bucket))","self.permutations.append(self.bucket[:])","self.powerset","self.powerset.append(self.subset[:])","self.recurse(k,","self.solution_search(0,","self.solution_search(k","self.subset","self.subset.append(domain[k])","self.subset.pop()","set","sheet","similar","solution.","solution:","solution_search(self,","solutiongenerator:","step","subset","sum/discuss/16510/python","t:","track","true","two","us","valu","‘reject’"],"Algorithms/Backtracking.html":["#","'visited'","((i,","(i","(i,","(int","(posit","(use","(veri","+","+=",",","0","0,","1","1)","1),","1):","1);","1,","1;","3000",":","=","==",">","_helpercopypaste(self,","accept","actual","add","answer:","backtrack","base","boolean","bucket","canjumpfromposition(int","care","check","class","complet","condit","constraint","copied))","copied,","copied:","current","current),","current,","current:","def","df","dfs(self,","direct","each","empti","exhaust","exists:","furthestjump","game","getmaximumgold(self,","gold/","grid","grid:","grid[i][j]","https://leetcode.com/problems/2","https://leetcode.com/problems/jump","https://leetcode.com/problems/path","i:","if(curr","if(i","if(n","int","int)","int,","int:","int[]","intmax","intmin","j","j)","j))","j)):","j),","j,","j:","key","keyboard/submissions/","len(grid),","len(grid[0])","limit","list[list[int]])","m","m,","math.min(posit","max","max(self.dfs(i,","max(self.dfs(x,","maximum","maximumsum","maximumsum)","min","min(2","minsteps(self,","move","n","n):","n:","necessari","nextposit","nums)","nums.length","nums[position],","of.","on","option","permut","posit","position,","possibl","problems)","public","range(m))","range(n)","recurs","recursion)","recursion,","remov","requir","return","search","see","seen),","seen):","seen.add((i,","seen.discard((i,","seen:","self._helpercopypaste(n,","set","set())","set)","similar","solut","solution:","step","sum","sum,","sum:","taken","target","true;","type","updat","x,","y","y,","{","}"],"Algorithms/DynamicProgramming-T.html":["#(climb","'pivot'","(bag_weight","(bottom","(leetcod","(len(values)","(n","(top","(total_sum","(x","(y",")","*","+","/","0","0)","0):","0/1","0:","1","1)","1),","1):","1)]","1,","1.","1035","1:","1]","1],","1][i","1][y]","1d","2","2)","2.","2]","4","70),","=","==",">",">=","[0]","[[0","[[0]","[[fals","\\","_","algorithms.","alway","anoth","answer","appli","array","backtrack","bag_weight","bag_weight):","basic","break,","brute","calcul","case","case)","caus","cell","cell.","cell_column)","cells,","change,","check","choices,","class","climb","coin","column","combin","complet","complex","complexity:","conditionally:","continu","correct","count","current","def","depend","dfs(0,","dfs(x","dfs(x,","dfs(x:","differ","difference,","divid","down","dp","dp:","dp[0]","dp[1]","dp[2]","dp[i","dp[i]","dp[n","dp[n]","dynam","each","effici","eg.","elif(weight","equat","etc","exact","except","exclude)","fals","false,","figur","final","find","forc","fulli","gener","go:","goe","greedi","half","here,","https://leetcode.com/problems/hous","https://leetcode.com/problems/uniqu","i:","if(failure_base_case):","if(i","if(success_base_case):","ii","improv","includ","independently.","instead","insur","int)","int,","int:","interview","intuit","j","knapsack","knapsack(self,","knapsack,","larg","leave,","leetcod","leetcode:","len(nums)","len(values)+","lis,","list[int])","loop","lot","m","m:","maintain","make","max","max(","max(include,","max(memo[i","max(nums[0],","memo","memo[0]","memo[1]","memo[i","memo[i]","memo[n","memo[x","memo[x][i","memo[x][y]","memoiz","memori","min.","minimum","multipl","n","n)","n):","n:","need","number","nums:","nums[0]","nums[1])","nums[i])","nums[i],","o(2^n)","obstruction.","on","onc","optim","out","over","overlap","particular","partitions:","path","paths/submissions/","perfect","possibl","possible.","previou","problem","process:","program","program:","programming)","programming:","properti","question","range(0,","range(2,","range(3,","recurs","recurse(0,","recurse(curr","recurse(current,","recurse(current:","reduc","remov","requir","rest","return","rob(self,","robber/","row","row[i","row[i]","runtim","satisfi","search","self.solution_function(case_one,","self.solution_function(case_two,","set","similar","size","small","solut","solution:","solution_function(self,","solutions.","solutions:","solv","someth","squar","squares,","stair","stairs:","start","step","step,","structur","subarray.","subproblem","subset","subsets:","substructur","sum","sum,","tabl","table[i][weight]","take","techniqu","theory:","this:","time","top","total","tree","trick","true","two","understand","uniqu","uniquepaths(self,","up","us","usually,","valu","values,","visit","visited[x][y]","visited[x][y]:","want","weight","weights,","word","x","x):","x)]","y","y)","y):","y)]","y:"],"Algorithms/DynamicProgramming-E.html":["\"solut","(m,","+","0","1","1)","1))","1):","1)]","1,","1]","1])","1]:","1][i","1][y],","2","4208fed71aa3","50","=","==",">","[[0","\\","break","chang","class","coin","common","decent","decod","def","diagram","dict()","dp","dp[x","dp[x][i","dp[x][y]","dynam","else:","essenti","examples:","explaination\"","explaination:","given","https://blog.usejournal.com/top","https://leetcode.com/problems/longest","https://www.techiedelight.com/longest","int:","lc","lcs(len(text1),","lcs(m","lcs(m,","leetcod","len(s)","len(text1)","len(text2)","len(text2))","li","longest","longestcommonsubsequence(self,","longestpalindromesubseq(self,","lps(0,","lps(m","lps(m,","m","max(dp[x","max(lcs(m","max(lps(m","memo","memo:","memo[(m,","memoiz","n","n)","n),","n):","n)]","n:","overlap","pages.","palindrom","perfect","practic","practice:","problem","problemset:","program","programming/","question","range(0,","range(1,","recurs","recursion:","return","s:","s[m]","s[n]:","solut","solution:","solv","squar","step","str)","str,","subsequ","subsequence/","text1:","text1[i","text1[m","text2:","text2[n","text2[x","tree","us","visual","way","word","x","y"],"Miscellaneous/":["miscellan"],"Miscellaneous/Stocks.html":["+","0","0,","1","1]","2","=","==","approach","better","between","buy","calcul","can't","cash","cash,","cash.","class","comment","continu","current","day","day,","def","differ","dp","dynam","element","elements/","end","end,","far,","far.","fee","fee)","fee):","fee/","first","found","hold","hold,","https://leetcode.com/problems/best","https://www.geeksforgeeks.org/maximum","https://www.geeksforgeeks.org/stock","i+1","iv/discuss/54117/clean","java","k","keep","len(prices)):","limit,","list.","list[i","list[i]","local","maintain","max(cash,","max(hold,","maxima","maximum","maxprofit(self,","minima","minimum","necessary.","number","on","own","prices,","prices[0]","prices[i]","prices[i])","profit","program","range(1,","return","same","sell","sell/","share","similar","solut","solution(object):","stock","stock,","stock.","temporari","th","till","time","track","transact","transform","transit","twice/","two","updat","us","variabl","want","without"],"Miscellaneous/Intervals.html":["+","252","253","435","56","accept","arrow","balloons/discuss/93735/a","base","burst","can't","check","compact","concis","cours","end","https://leetcode.com/problems/cours","https://leetcode.com/problems/minimum","ii","iii/","interv","like:","make","max_heap","meet","merg","non","number","on","overlap","possibl","problem","question","remov","room","schedul","select","set","simpl","someth","sort","templat","time","times,"],"Miscellaneous/InterestingMiscellaneous.html":["1383:","180/problems/maximum","857:","contest","cost","find","heap","hire","https://leetcode.com/contest/weekli","https://leetcode.com/problems/maximum","https://leetcode.com/problems/minimum","interest","k","largest","max","min","miscellan","need","nth","partial","perform","prioriti","queue","quicksort","smallest","solution:","sort:","team/","team/discuss/539797/c%2b%2bpython","us","variat","workers/"],"PythonicTricks/":["#return","(priority,","=","[]","array","c","c.most_common(n)","collect","convert","counter","counter(list/string)","dictionari","element","float('","float('inf')","fo","frequent","go","heap","heapq","heapq.heappush(heap,","import","inf')","insert","int_max","int_max:","int_min","int_min:","item","item))","item:","item[1:]","item[1])}","k,","keep","key=lambda","list","list}","n","prioriti","python","r","sort","sorted(x.items(),","string","throught","top","track","trick","v","valu","{item[0]:","{k:"],"BehavioralQuestions.html":["answer","answer.","base","behavior","better","challeng","colleg","customer?","deliv","direct","do?","drawn","experience,","experience.","faced?","follow","graduat","interact","made","mention","on","previou","problem","project,","question","recent","specifics,","sure","tell","time","two","up","vagu","work"]},"length":32},"tokenStore":{"root":{"0":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.02564102564102564},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.015625},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.02040816326530612},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.009345794392523364},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.020689655172413793},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.011494252873563218},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.012096774193548387},"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.02037617554858934},"Algorithms/DynamicProgramming-E.html":{"ref":"Algorithms/DynamicProgramming-E.html","tf":0.016666666666666666},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}},")":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.015306122448979591},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.005988023952095809},"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.003134796238244514}},")":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.007067137809187279}}},"]":{"docs":{},")":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.005747126436781609}}}},":":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}}}},",":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.00510204081632653},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.009216589861751152},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}},":":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044},"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.007836990595611285}}},"/":{"1":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}}},"docs":{}}},"1":{"0":{"3":{"5":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}}},"docs":{}},"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.015306122448979591}}},"3":{"8":{"3":{"docs":{},":":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.030303030303030304}}}},"docs":{}},"docs":{}},"4":{"docs":{},"t":{"docs":{},"h":{"docs":{},"/":{"3":{"3":{"2":{"8":{"docs":{},"/":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012195121951219513}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}}}},"8":{"0":{"docs":{},"/":{"docs":{},"p":{"docs":{},"r":{"docs":{},"o":{"docs":{},"b":{"docs":{},"l":{"docs":{},"e":{"docs":{},"m":{"docs":{},"s":{"docs":{},"/":{"docs":{},"l":{"docs":{},"u":{"docs":{},"c":{"docs":{},"k":{"docs":{},"i":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012195121951219513}}}}}}},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"i":{"docs":{},"m":{"docs":{},"u":{"docs":{},"m":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.030303030303030304}}}}}}}}}}}}}}}}}}}},"docs":{},"/":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.018518518518518517}}}},"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.01020408163265306},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.027586206896551724},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004629629629629629},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.007067137809187279},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.011494252873563218},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.012422360248447204},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.004608294930875576},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.008064516129032258},"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.014106583072100314},"Algorithms/DynamicProgramming-E.html":{"ref":"Algorithms/DynamicProgramming-E.html","tf":0.016666666666666666},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.01098901098901099}},")":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.030612244897959183},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.013793103448275862},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.009259259259259259},"Algorithms/":{"ref":"Algorithms/","tf":0.012195121951219513},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.008982035928143712},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.008064516129032258},"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.004702194357366771},"Algorithms/DynamicProgramming-E.html":{"ref":"Algorithms/DynamicProgramming-E.html","tf":0.016666666666666666}},")":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.006896551724137931},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.007067137809187279},"Algorithms/DynamicProgramming-E.html":{"ref":"Algorithms/DynamicProgramming-E.html","tf":0.011111111111111112}},":":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282}}}},"/":{"2":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653}}},"docs":{}},":":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.006896551724137931},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129},"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.004702194357366771},"Algorithms/DynamicProgramming-E.html":{"ref":"Algorithms/DynamicProgramming-E.html","tf":0.005555555555555556}}},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.008064516129032258},"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}}},";":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}},"]":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.003134796238244514},"Algorithms/DynamicProgramming-E.html":{"ref":"Algorithms/DynamicProgramming-E.html","tf":0.005555555555555556}}}},"/":{"3":{"2":{"8":{"6":{"docs":{},"/":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},",":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.037037037037037035},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.018518518518518517},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.004608294930875576},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.011976047904191617},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.012096774193548387},"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257},"Algorithms/DynamicProgramming-E.html":{"ref":"Algorithms/DynamicProgramming-E.html","tf":0.022222222222222223}}},"]":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.013888888888888888},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.007067137809187279},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.015873015873015872},"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.009404388714733543},"Algorithms/DynamicProgramming-E.html":{"ref":"Algorithms/DynamicProgramming-E.html","tf":0.011111111111111112},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}},")":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.018518518518518517},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395},"Algorithms/DynamicProgramming-E.html":{"ref":"Algorithms/DynamicProgramming-E.html","tf":0.002777777777777778}}},":":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395},"Algorithms/DynamicProgramming-E.html":{"ref":"Algorithms/DynamicProgramming-E.html","tf":0.008333333333333333}}},",":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}}},"[":{"docs":{},"i":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257},"Algorithms/DynamicProgramming-E.html":{"ref":"Algorithms/DynamicProgramming-E.html","tf":0.002777777777777778}}},"y":{"docs":{},"]":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}},",":{"docs":{"Algorithms/DynamicProgramming-E.html":{"ref":"Algorithms/DynamicProgramming-E.html","tf":0.002777777777777778}}}}}}},":":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004629629629629629},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395},"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.007836990595611285}}},";":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}},".":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}}},"d":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.003134796238244514}}}},"2":{"5":{"2":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.018518518518518517}}},"3":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.018518518518518517}}},"docs":{}},"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.037037037037037035},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.009259259259259259},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395},"Algorithms/":{"ref":"Algorithms/","tf":0.024390243902439025},"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.003134796238244514},"Algorithms/DynamicProgramming-E.html":{"ref":"Algorithms/DynamicProgramming-E.html","tf":0.005555555555555556},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}},")":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.037037037037037035},"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}},":":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}}}},":":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682}}},",":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395}}},"]":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.004702194357366771}},")":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395}}}},".":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.003134796238244514}}}},"3":{"0":{"0":{"0":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}},"docs":{}},"docs":{}},"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004629629629629629}},"/":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653}}},",":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395}}}},"4":{"2":{"0":{"8":{"docs":{},"f":{"docs":{},"e":{"docs":{},"d":{"7":{"1":{"docs":{},"a":{"docs":{},"a":{"3":{"docs":{"Algorithms/DynamicProgramming-E.html":{"ref":"Algorithms/DynamicProgramming-E.html","tf":0.002777777777777778}}},"docs":{}}}},"docs":{}},"docs":{}}}}},"docs":{}},"docs":{}},"3":{"5":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.018518518518518517}}},"9":{"docs":{},"d":{"docs":{},"f":{"7":{"docs":{},"e":{"5":{"docs":{},"e":{"docs":{},"a":{"1":{"docs":{},"f":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011235955056179775}}}},"docs":{}}}},"docs":{}}},"docs":{}}}},"docs":{}},"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}},"]":{"docs":{},")":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395}}}}},"5":{"0":{"docs":{"Algorithms/DynamicProgramming-E.html":{"ref":"Algorithms/DynamicProgramming-E.html","tf":0.002777777777777778}}},"6":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.018518518518518517}}},"docs":{}},"7":{"0":{"docs":{},")":{"docs":{},",":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}}}}},"docs":{}},"8":{"5":{"7":{"docs":{},":":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.030303030303030304}}}},"docs":{}},"docs":{},"t":{"docs":{},"h":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012195121951219513}}}}},"docs":{},"c":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395},"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.015873015873015872}},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{"./":{"ref":"./","tf":0.25},"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.08333333333333333},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395}}}},"m":{"docs":{},"p":{"docs":{},"e":{"docs":{},"t":{"docs":{},"i":{"docs":{},"t":{"docs":{"./":{"ref":"./","tf":0.25}}}}}},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{},"s":{"docs":{},"o":{"docs":{},"n":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653}}}}}}},"c":{"docs":{},"t":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.018518518518518517}}}}},"l":{"docs":{},"e":{"docs":{},"t":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":3.337365591397849},"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}}},"x":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}},"i":{"docs":{},"t":{"docs":{},"y":{"docs":{},":":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}}}}}}}}}},"b":{"docs":{},"o":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011235955056179775}}},"i":{"docs":{},"n":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044},"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},":":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}}}}}}},"o":{"docs":{},"r":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":10.002994011976048}}}}}}}}},"m":{"docs":{},"o":{"docs":{},"n":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682},"Algorithms/DynamicProgramming-E.html":{"ref":"Algorithms/DynamicProgramming-E.html","tf":0.008333333333333333}}}},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012195121951219513},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}}}},"e":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.006211180124223602}}}},"n":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.025510204081632654},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}}}}},"u":{"docs":{},"c":{"docs":{},"t":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":5.018518518518518}},"(":{"0":{"docs":{},",":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004629629629629629}}}},"docs":{},"l":{"docs":{},",":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.009259259259259259}}}},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"_":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004629629629629629}}}}}}}}}}}},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"i":{"docs":{},"m":{"docs":{},"u":{"docs":{},"m":{"docs":{},"b":{"docs":{},"i":{"docs":{},"n":{"docs":{},"a":{"docs":{},"r":{"docs":{},"y":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004629629629629629}}}}}}}}}}}}}}}}}}}}}}}}},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"(":{"0":{"docs":{},",":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004629629629629629}}}},"docs":{},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},":":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004629629629629629}}}}}},"p":{"docs":{},"i":{"docs":{},"v":{"docs":{},"o":{"docs":{},"t":{"docs":{},",":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004629629629629629}}}}}}}},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004629629629629629}},",":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004629629629629629}}}}}}}}}}}}}}}}}}},"t":{"docs":{},"i":{"docs":{},"n":{"docs":{},"u":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.01060070671378092},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.005747126436781609},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.004608294930875576},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044},"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.003134796238244514},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}}},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.024390243902439025},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.030303030303030304}}}}}},"d":{"docs":{},"i":{"docs":{},"t":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.004608294930875576},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.008064516129032258}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{},"y":{"docs":{},":":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}}}}}}}}}}}}},"c":{"docs":{},"i":{"docs":{},"s":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.018518518518518517}}}}},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.015873015873015872}}}}}}},"u":{"docs":{},"r":{"docs":{},"s":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.006211180124223602},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.018518518518518517}},"e":{"docs":{},")":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.00510204081632653}}}}}},"n":{"docs":{},"t":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.003134796238244514}},"e":{"docs":{},"r":{"docs":{"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.015873015873015872}},"(":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"/":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},")":{"docs":{"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.015873015873015872}}}}}}}}}}}}}}}}}}}},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.00510204081632653}}}}},"l":{"docs":{},"l":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.013793103448275862},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.01060070671378092},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.017241379310344827},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.012422360248447204},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.015873015873015872},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.004608294930875576},"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.015873015873015872}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},".":{"docs":{},"d":{"docs":{},"e":{"docs":{},"q":{"docs":{},"u":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.004608294930875576}}}}}}}}}}}}},"g":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.02631578947368421}}}}},"o":{"docs":{},"r":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":10.02826855123675}},")":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395}},")":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395}}}},",":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395}}},":":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395}}},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395}},")":{"docs":{},")":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395}}}}}}}}},"s":{"docs":{},".":{"docs":{},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.007067137809187279}}}}}}},"r":{"docs":{},"e":{"docs":{},"m":{"docs":{},"o":{"docs":{},"v":{"docs":{},"e":{"docs":{},"(":{"docs":{},"c":{"docs":{},"o":{"docs":{},"l":{"docs":{},"o":{"docs":{},"r":{"docs":{},")":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.007067137809187279}}}}}}}}}}}}}}}},"/":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395}}}}}},"u":{"docs":{},"m":{"docs":{},"n":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.003134796238244514}}}}}},"s":{"docs":{},"t":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.005747126436781609},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.030303030303030304}}}},"p":{"docs":{},"i":{"docs":{},"e":{"docs":{},"d":{"docs":{},")":{"docs":{},")":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}}},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}},":":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}}}}}},"i":{"docs":{},"n":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257},"Algorithms/DynamicProgramming-E.html":{"ref":"Algorithms/DynamicProgramming-E.html","tf":0.002777777777777778}}}},"r":{"docs":{},"r":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}}}}}}}},"l":{"docs":{},"a":{"docs":{},"s":{"docs":{},"s":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.020833333333333332},"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.015625},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.015306122448979591},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.018691588785046728},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.013793103448275862},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.018518518518518517},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.01060070671378092},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.017241379310344827},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.012422360248447204},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.015873015873015872},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.009216589861751152},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.011976047904191617},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.008064516129032258},"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.009404388714733543},"Algorithms/DynamicProgramming-E.html":{"ref":"Algorithms/DynamicProgramming-E.html","tf":0.013888888888888888},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}},",":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.020833333333333332}}}}}},"i":{"docs":{},"m":{"docs":{},"b":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.003134796238244514}}}}}},"h":{"docs":{},"e":{"docs":{},"c":{"docs":{},"k":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.02247191011235955},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.00510204081632653},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.006211180124223602},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129},"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.003134796238244514},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.018518518518518517}},"s":{"docs":{},":":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.018518518518518517}}}}}},"a":{"docs":{},"t":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}}}}},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.02631578947368421}},"e":{"docs":{},"/":{"5":{"2":{"8":{"docs":{},"/":{"docs":{},"w":{"docs":{},"e":{"docs":{},"e":{"docs":{},"k":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282}}}}}}}},"docs":{}},"3":{"5":{"docs":{},"/":{"docs":{},"w":{"docs":{},"e":{"docs":{},"e":{"docs":{},"k":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012195121951219513}}}}}}}},"docs":{}},"docs":{}},"docs":{}}}}}}}},"r":{"docs":{},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"/":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.07692307692307693}}}}}}}}}},"n":{"docs":{},"g":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.005988023952095809},"Algorithms/DynamicProgramming-E.html":{"ref":"Algorithms/DynamicProgramming-E.html","tf":0.002777777777777778}},"e":{"docs":{},",":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}}}}}}},"o":{"docs":{},"i":{"docs":{},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},":":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.018518518518518517},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}}},",":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}}}}}}},"o":{"docs":{},"s":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.005988023952095809}}}}},"i":{"docs":{},"l":{"docs":{},"d":{"docs":{},"r":{"docs":{},"e":{"docs":{},"n":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.006211180124223602}}}}}}}}},"a":{"docs":{},"t":{"docs":{},"c":{"docs":{},"h":{"docs":{},":":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.015306122448979591}}}}}},"s":{"docs":{},"e":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.03125},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.004608294930875576},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044},"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.003134796238244514}},"s":{"docs":{},".":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011235955056179775}}}},")":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}}}},"h":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.03296703296703297}},",":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.01098901098901099}}},".":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}}},"n":{"docs":{},"m":{"docs":{},"e":{"docs":{},"a":{"docs":{},"s":{"docs":{},"u":{"docs":{},"r":{"docs":{},"e":{"docs":{},"w":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.005747126436781609}}}}}}}}}}}}}}}}}}}},"v":{"docs":{},"i":{"docs":{},"s":{"docs":{},"i":{"docs":{},"t":{"docs":{},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"m":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.005747126436781609}}}}}}}}}}}}}}}}}}}}},"f":{"docs":{},"i":{"docs":{},"n":{"docs":{},"i":{"docs":{},"s":{"docs":{},"h":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.006211180124223602}}}}}}}}}}}}}},"j":{"docs":{},"u":{"docs":{},"m":{"docs":{},"p":{"docs":{},"f":{"docs":{},"r":{"docs":{},"o":{"docs":{},"m":{"docs":{},"p":{"docs":{},"o":{"docs":{},"s":{"docs":{},"i":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}}}}}}}}}}}}}}}}}}}}},"'":{"docs":{},"t":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.018518518518518517}}}}},"l":{"docs":{},"l":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.011976047904191617}}},"c":{"docs":{},"u":{"docs":{},"l":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}}}},"r":{"docs":{},"e":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}}},"u":{"docs":{},"s":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}}}}},"u":{"docs":{},"r":{"docs":{},"r":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.01020408163265306},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0390625},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.01020408163265306},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.020689655172413793},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.012096774193548387},"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.015625}},":":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.013793103448275862}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125}},":":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.013793103448275862}}}}}}}},"v":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.020689655172413793}},"a":{"docs":{},"l":{"docs":{},")":{"docs":{},")":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.013793103448275862}}}}}}}},":":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.015625},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}},")":{"docs":{},":":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.00510204081632653}}},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}}},"_":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.015306122448979591}},")":{"docs":{},":":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.00510204081632653}}}}}}}},",":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.006896551724137931},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}}}}}},"a":{"docs":{},"t":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011235955056179775}}}}},"s":{"docs":{},"t":{"docs":{},"o":{"docs":{},"m":{"docs":{},"e":{"docs":{},"r":{"docs":{},"?":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.02631578947368421}}}}}}}}}},"r":{"docs":{},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"i":{"docs":{},"a":{"docs":{},",":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125}}}}}}}}},"e":{"docs":{},"a":{"docs":{},"t":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.004608294930875576}}}}}},"y":{"docs":{},"c":{"docs":{},"l":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.006211180124223602}},"e":{"docs":{},",":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.006211180124223602}}}}}}},",":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.006211180124223602},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.015873015873015872}}},"c":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}}},"e":{"docs":{},"l":{"docs":{},"l":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}},".":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}}},"_":{"docs":{},"c":{"docs":{},"o":{"docs":{},"l":{"docs":{},"u":{"docs":{},"m":{"docs":{},"n":{"docs":{},")":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}}}}}}}}}},"s":{"docs":{},",":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}}}}}}},".":{"docs":{},"m":{"docs":{},"o":{"docs":{},"s":{"docs":{},"t":{"docs":{},"_":{"docs":{},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"m":{"docs":{},"o":{"docs":{},"n":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.015873015873015872}}}}}}}}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}},"r":{"docs":{},"o":{"docs":{},"d":{"docs":{},"u":{"docs":{},"c":{"docs":{},"t":{"docs":{"./":{"ref":"./","tf":10.25}}}}}}}},"e":{"docs":{},"r":{"docs":{},"v":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012195121951219513},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":10.074074074074074}},"i":{"docs":{},"e":{"docs":{},"w":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011235955056179775},"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}}}}}},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":5}}}}},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.02631578947368421}}}}}}},":":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.01020408163265306},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.006896551724137931},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004629629629629629},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.005747126436781609},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.004608294930875576},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.016129032258064516},"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.009404388714733543},"Algorithms/DynamicProgramming-E.html":{"ref":"Algorithms/DynamicProgramming-E.html","tf":0.013888888888888888}}},")":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.00510204081632653},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.006896551724137931},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.011494252873563218},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.004608294930875576},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.011976047904191617},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.008064516129032258},"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.006269592476489028}}},",":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.006896551724137931},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.007067137809187279},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.017241379310344827},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.006211180124223602},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.015873015873015872},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.008982035928143712},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.020161290322580645},"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.006269592476489028}}},"[":{"docs":{},"]":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}}},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}}},"i":{"docs":{},"n":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}}}},"u":{"docs":{},"i":{"docs":{},"t":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}}}}},"_":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.015873015873015872}},":":{"docs":{"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.015873015873015872}}}}},"i":{"docs":{},"n":{"docs":{"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.015873015873015872}},":":{"docs":{"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.015873015873015872}}}}}}}},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"u":{"docs":{},"c":{"docs":{},"t":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":5.020833333333333}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},":":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02}}}}}}}}}}},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.006211180124223602},"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}}}}},"a":{"docs":{},"n":{"docs":{},"t":{"docs":{},"i":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}}}}}}},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682},"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.015873015873015872}}}}},"u":{"docs":{},"r":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}}}}},"c":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"s":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653}}}}}},"l":{"docs":{},"u":{"docs":{},"d":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653},"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}}}}},"o":{"docs":{},"m":{"docs":{"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.015873015873015872}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"[":{"docs":{},"n":{"docs":{},"e":{"docs":{},"i":{"docs":{},"]":{"docs":{},".":{"docs":{},"r":{"docs":{},"e":{"docs":{},"m":{"docs":{},"o":{"docs":{},"v":{"docs":{},"e":{"docs":{},"(":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},")":{"docs":{"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.015873015873015872}}}}}}}}}}}}}}},":":{"docs":{"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.015873015873015872}}}}}}},"p":{"docs":{},"]":{"docs":{},".":{"docs":{},"a":{"docs":{},"d":{"docs":{},"d":{"docs":{},"(":{"docs":{},"c":{"docs":{},")":{"docs":{"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.015873015873015872}}}}}}}}}}}}}}}}}},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011235955056179775},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":5.015625}}}}},"f":{"docs":{},"'":{"docs":{},")":{"docs":{"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.015873015873015872}},",":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682}}}}}},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}}},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"l":{"docs":{},"y":{"docs":{},".":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}}}}}}}}}}}}}}},"m":{"docs":{},"p":{"docs":{},"r":{"docs":{},"o":{"docs":{},"v":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.020833333333333332},"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}}}}},"l":{"docs":{},"i":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653}}},"e":{"docs":{},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.018518518518518517}}}}}}}},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.013793103448275862},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.01060070671378092},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.022988505747126436},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.018633540372670808},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.015873015873015872},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.009216589861751152},"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.031746031746031744}}}}}}},")":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653}}},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.015625}},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},".":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653}}}}},"v":{"docs":{},"e":{"docs":{},")":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.033707865168539325}}}}}}}}},"m":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044},"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.015873015873015872}},")":{"docs":{},")":{"docs":{"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.015873015873015872}}}},":":{"docs":{"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.015873015873015872}}},"[":{"1":{"docs":{},":":{"docs":{},"]":{"docs":{"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.015873015873015872}}}},"]":{"docs":{},")":{"docs":{},"}":{"docs":{"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.015873015873015872}}}}}},"docs":{}}}},"h":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653}}},"i":{"docs":{},"n":{"docs":{},"e":{"docs":{},"r":{"docs":{},"a":{"docs":{},"r":{"docs":{},"y":{"docs":{},"/":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.006211180124223602}}}}}}}}}}},"s":{"docs":{},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},"(":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},",":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.05555555555555555}}}}}}}}}}}}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"i":{"docs":{},"d":{"docs":{},"b":{"docs":{},"s":{"docs":{},"t":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682}}}}}}}}}}}}}}}},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"s":{"docs":{},"i":{"docs":{},"n":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.006896551724137931}}}}}}}}}}}}}}},"b":{"docs":{},"i":{"docs":{},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395}}}}}}}}}}}}}}}}}},"i":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.018518518518518517}},"/":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.00510204081632653},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.015873015873015872},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.004608294930875576}}},"i":{"docs":{},"/":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.018518518518518517}}}}},"f":{"docs":{},"(":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.005988023952095809}},"(":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"(":{"docs":{},"b":{"docs":{},"u":{"docs":{},"c":{"docs":{},"k":{"docs":{},"e":{"docs":{},"t":{"docs":{},")":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}}}}}}}}}}}}}},"k":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}}},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"(":{"docs":{},"b":{"docs":{},"u":{"docs":{},"c":{"docs":{},"k":{"docs":{},"e":{"docs":{},"t":{"docs":{},")":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}}}}}}}}}}}}},"o":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}}}}}}}}}}},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},".":{"docs":{},"a":{"docs":{},"c":{"docs":{},"c":{"docs":{},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{},"e":{"docs":{},"d":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},")":{"docs":{},":":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}}}}}}}}}}}}}}}}}}},"u":{"docs":{},"c":{"docs":{},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{},"_":{"docs":{},"b":{"docs":{},"a":{"docs":{},"s":{"docs":{},"e":{"docs":{},"_":{"docs":{},"c":{"docs":{},"a":{"docs":{},"s":{"docs":{},"e":{"docs":{},")":{"docs":{},":":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}}}}}}}}}}}}}}}}}}}}},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{},"r":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.008064516129032258}}}}}},"i":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129},"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}}},"n":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}},"f":{"docs":{},"a":{"docs":{},"i":{"docs":{},"l":{"docs":{},"u":{"docs":{},"r":{"docs":{},"e":{"docs":{},"_":{"docs":{},"b":{"docs":{},"a":{"docs":{},"s":{"docs":{},"e":{"docs":{},"_":{"docs":{},"c":{"docs":{},"a":{"docs":{},"s":{"docs":{},"e":{"docs":{},")":{"docs":{},":":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}}}}}}}}}}}}}}}}}}}}}}},":":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129},"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}}},"+":{"1":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}},"docs":{}},"v":{"docs":{},"/":{"docs":{},"d":{"docs":{},"i":{"docs":{},"s":{"docs":{},"c":{"docs":{},"u":{"docs":{},"s":{"docs":{},"s":{"docs":{},"/":{"5":{"4":{"1":{"1":{"7":{"docs":{},"/":{"docs":{},"c":{"docs":{},"l":{"docs":{},"e":{"docs":{},"a":{"docs":{},"n":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}}}}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}}}},"n":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.02564102564102564},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.037037037037037035},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.007067137809187279},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.005747126436781609},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.011976047904191617},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.008064516129032258},"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.014106583072100314},"Algorithms/DynamicProgramming-E.html":{"ref":"Algorithms/DynamicProgramming-E.html","tf":0.03333333333333333},"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.015873015873015872}},"o":{"docs":{},"t":{"docs":{},"e":{"docs":{"./":{"ref":"./","tf":0.25},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}},":":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682}}},"s":{"docs":{},":":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.004608294930875576}}}}}},"n":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.018518518518518517}},"e":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.023148148148148147}},":":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.011976047904191617}}}}},"d":{"docs":{},"e":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.033707865168539325},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.00510204081632653},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.009345794392523364},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.006896551724137931},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.027777777777777776},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.011494252873563218},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.018633540372670808},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.031746031746031744},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}},".":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011235955056179775},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004629629629629629}},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.01020408163265306},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.013888888888888888}},":":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.00510204081632653}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.013888888888888888}},":":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.015306122448979591}}}}}}}},"v":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004629629629629629}},"a":{"docs":{},"l":{"docs":{},")":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.025510204081632654},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.009345794392523364}},":":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.00510204081632653}}}},"]":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682}},")":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682}}}}}}}},"/":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011235955056179775}}},":":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.01020408163265306},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.014018691588785047}}},"'":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682}}},",":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.007067137809187279}}},"s":{"docs":{},".":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.006211180124223602}}}}}},"r":{"docs":{},"m":{"docs":{},"a":{"docs":{},"l":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}}}}}}}}}}}}}}}}}}},":":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.007067137809187279},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.017241379310344827},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.008064516129032258},"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.004702194357366771},"Algorithms/DynamicProgramming-E.html":{"ref":"Algorithms/DynamicProgramming-E.html","tf":0.016666666666666666}}},"u":{"docs":{},"m":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282}},"s":{"docs":{},":":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.009259259259259259},"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.003134796238244514}}},"[":{"0":{"docs":{},"]":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.004702194357366771}}}},"1":{"docs":{},"]":{"docs":{},")":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}}}}},"docs":{},"p":{"docs":{},"]":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282}},",":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282}}}},"o":{"docs":{},"s":{"docs":{},"i":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"]":{"docs":{},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}}}}}}}}}}},"z":{"docs":{},"]":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282}},",":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282}}}}},"i":{"docs":{},"]":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004629629629629629}},")":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}}},",":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}}}}},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"_":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},"]":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004629629629629629}},":":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004629629629629629}}}}}}}}}}}}}},")":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.008064516129032258}}}}}}}}}},"b":{"docs":{},"e":{"docs":{},"r":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012195121951219513},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.008982035928143712},"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.007836990595611285},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.02197802197802198},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.018518518518518517}},"s":{"docs":{},"/":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.00510204081632653}}}}}}},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"r":{"docs":{},"s":{"docs":{"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.015873015873015872}},"e":{"docs":{},"s":{"docs":{},")":{"docs":{},":":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.006211180124223602}}},")":{"docs":{"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.015873015873015872}}}},":":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.006211180124223602},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.015873015873015872}}}}}}}}}}}},"e":{"docs":{},"g":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"v":{"docs":{},"e":{"docs":{},",":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653}}}}}}}}},"w":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653}}},"e":{"docs":{},"d":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.009345794392523364},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.012422360248447204},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.004608294930875576},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044},"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.003134796238244514},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.030303030303030304}}}},"s":{"docs":{},"t":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"/":{"docs":{"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.3333333333333333}}}}}}}},"i":{"docs":{"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.015873015873015872}},"g":{"docs":{},"h":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395}},":":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395}}}}}},"t":{"docs":{},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"k":{"docs":{},"d":{"docs":{},"e":{"docs":{},"l":{"docs":{},"a":{"docs":{},"y":{"docs":{},"t":{"docs":{},"i":{"docs":{},"m":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.005747126436781609}}}}}}}}}}}}}}}}}}}}}},"x":{"docs":{},"t":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.024390243902439025},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}},"p":{"docs":{},"o":{"docs":{},"s":{"docs":{},"i":{"docs":{},"t":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.008064516129032258}}}}}}}}},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}},"y":{"docs":{},".":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}}}}}}}}},",":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.018518518518518517}}},")":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.003134796238244514},"Algorithms/DynamicProgramming-E.html":{"ref":"Algorithms/DynamicProgramming-E.html","tf":0.005555555555555556}},"]":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.007067137809187279},"Algorithms/DynamicProgramming-E.html":{"ref":"Algorithms/DynamicProgramming-E.html","tf":0.03333333333333333}}},":":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.008064516129032258},"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.004702194357366771},"Algorithms/DynamicProgramming-E.html":{"ref":"Algorithms/DynamicProgramming-E.html","tf":0.011111111111111112}}},",":{"docs":{"Algorithms/DynamicProgramming-E.html":{"ref":"Algorithms/DynamicProgramming-E.html","tf":0.011111111111111112}}}},"c":{"docs":{},"r":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.005988023952095809}},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"b":{"docs":{},"u":{"docs":{},"c":{"docs":{},"k":{"docs":{},"e":{"docs":{},"t":{"docs":{},"[":{"docs":{},":":{"docs":{},"]":{"docs":{},")":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}}}}}}}}}}}}}}}}}}}}}},"t":{"docs":{},"h":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.030303030303030304}}}}},"a":{"docs":{},"b":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.020833333333333332}}}}}}},"o":{"docs":{},"l":{"docs":{},"u":{"docs":{},"t":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653}}}}}}}},"p":{"docs":{},"p":{"docs":{},"r":{"docs":{},"o":{"docs":{},"a":{"docs":{},"c":{"docs":{},"h":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.020833333333333332},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}}}}},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011235955056179775},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.006896551724137931}}}}},"l":{"docs":{},"i":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.003134796238244514}}}}},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.004608294930875576}}}}}},"v":{"docs":{},"o":{"docs":{},"i":{"docs":{},"d":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.020833333333333332},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.004608294930875576}}}}}},"r":{"docs":{},"r":{"docs":{},"a":{"docs":{},"y":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":10.08},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.025510204081632654},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.018518518518518517},"Algorithms/":{"ref":"Algorithms/","tf":0.012195121951219513},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.009216589861751152},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.005988023952095809},"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.003134796238244514},"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.015873015873015872}},".":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282}}}}},"[":{"docs":{},"m":{"docs":{},"i":{"docs":{},"d":{"docs":{},"]":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.036585365853658534}}}}}}},":":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}}},"o":{"docs":{},"w":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.018518518518518517}}}}},"c":{"docs":{},"h":{"docs":{},"i":{"docs":{},"v":{"docs":{},"e":{"docs":{},"s":{"docs":{},":":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.018518518518518517}}}}}}}}},"s":{"docs":{},"e":{"docs":{},"n":{"docs":{},"a":{"docs":{},"l":{"docs":{},".":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.005747126436781609}}}}}}}}},"d":{"docs":{},"d":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}},"i":{"docs":{},"t":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"(":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},",":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.00510204081632653}}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},",":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.00510204081632653}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},",":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.00510204081632653}}}}}}}}}}}}},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},",":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.00510204081632653}}}}}}}}}}}}},"j":{"docs":{},"a":{"docs":{},"c":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"/":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395}}}}}}}}}},"n":{"docs":{},"s":{"docs":{},"w":{"docs":{},"e":{"docs":{},"r":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653},"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.07894736842105263}},".":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011235955056179775},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.02631578947368421}}},":":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}}}}}},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682}}}}}}}},"o":{"docs":{},"t":{"docs":{},"h":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}}}}}},"l":{"docs":{},"w":{"docs":{},"a":{"docs":{},"y":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}},"s":{"docs":{},",":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.00510204081632653}}}}}}},"l":{"docs":{},"o":{"docs":{},"w":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}}}}},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"n":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395}}}}}},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},"i":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.012422360248447204}}}}}}},"g":{"docs":{},"o":{"docs":{},"r":{"docs":{},"i":{"docs":{},"t":{"docs":{},"h":{"docs":{},"m":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":10.012195121951219}},"s":{"docs":{},".":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}}}}}}}}}}},"i":{"docs":{},"e":{"docs":{},"n":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012195121951219513}}}}}},"f":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"w":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{},"s":{"docs":{},".":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682}}}}}}}}}}}},"t":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"b":{"docs":{},"u":{"docs":{},"t":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682}}}}}}}}},"m":{"docs":{},"a":{"docs":{},"z":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.005747126436781609}}}}},"]":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.006211180124223602}}},"g":{"docs":{},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.006211180124223602}}}}}},"c":{"docs":{},"c":{"docs":{},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.037037037037037035}},",":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}}}}}}},"t":{"docs":{},"u":{"docs":{},"a":{"docs":{},"l":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.008064516129032258}}}}}}}},"b":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.004608294930875576}},"r":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"e":{"docs":{},"t":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.020833333333333332}}}}}}},"u":{"docs":{},"t":{"docs":{},"e":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.020833333333333332},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.07692307692307693},"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}}}}},"e":{"docs":{},"a":{"docs":{},"k":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282},"Algorithms/DynamicProgramming-E.html":{"ref":"Algorithms/DynamicProgramming-E.html","tf":0.002777777777777778}},",":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}}}}}}},"u":{"docs":{},"i":{"docs":{},"l":{"docs":{},"t":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.020833333333333332}}}}},"c":{"docs":{},"k":{"docs":{},"e":{"docs":{},"t":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.005988023952095809},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"'":{"docs":{},"(":{"docs":{},"'":{"docs":{},")":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}}}}},")":{"docs":{},"'":{"docs":{},")":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}}}}}},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},"[":{"docs":{},"k":{"docs":{},"]":{"docs":{},")":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}}}}}}}}}}}}}}}},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.008982035928143712}}}}}}}}}}}},"y":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.038461538461538464}}},"r":{"docs":{},"s":{"docs":{},"t":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.018518518518518517}}}}}},"i":{"docs":{},"n":{"docs":{},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.009345794392523364},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.006896551724137931},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.018518518518518517},"Algorithms/":{"ref":"Algorithms/","tf":0.012195121951219513}}},"y":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"p":{"docs":{},"a":{"docs":{},"t":{"docs":{},"h":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125}}}}}}}}}}}}}}}}},"s":{"docs":{},"e":{"docs":{},"a":{"docs":{},"r":{"docs":{},"c":{"docs":{},"h":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004629629629629629}},",":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.009259259259259259},"Algorithms/":{"ref":"Algorithms/","tf":0.024390243902439025}}}}}}}}}}}}}}}}}}},"f":{"docs":{},"u":{"docs":{},"r":{"docs":{},"c":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395}}}}}},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{},"/":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395}}}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"/":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395}}}}}}}}}}}},"t":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.004608294930875576}}}},"a":{"docs":{},"s":{"docs":{},"i":{"docs":{},"c":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653},"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{},"y":{"docs":{},",":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395}}}}}}}}},"e":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.004608294930875576},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.005988023952095809},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.018518518518518517},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.02631578947368421}}}},"c":{"docs":{},"k":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682}},"t":{"docs":{},"r":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":3.337365591397849},"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"[":{"docs":{},"]":{"docs":{},",":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}}}}},"b":{"docs":{},"u":{"docs":{},"c":{"docs":{},"k":{"docs":{},"e":{"docs":{},"t":{"docs":{},",":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.005988023952095809}}},":":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}}}}}}}}}}}}}}}}}}},"l":{"docs":{},"a":{"docs":{},"n":{"docs":{},"c":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004629629629629629}}}}},"l":{"docs":{},"o":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"/":{"docs":{},"d":{"docs":{},"i":{"docs":{},"s":{"docs":{},"c":{"docs":{},"u":{"docs":{},"s":{"docs":{},"s":{"docs":{},"/":{"9":{"3":{"7":{"3":{"5":{"docs":{},"/":{"docs":{},"a":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.018518518518518517}}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}}}}}}}},"g":{"docs":{},"_":{"docs":{},"w":{"docs":{},"e":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}},")":{"docs":{},":":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}}}}}}}}}}}}},"e":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.004608294930875576}},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.02247191011235955},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.006211180124223602}}}}},"t":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.02631578947368421}}}}},"w":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.01098901098901099}}}}}}},"h":{"docs":{},"a":{"docs":{},"v":{"docs":{},"i":{"docs":{},"o":{"docs":{},"r":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":5.026315789473684}}}}}}}}},"s":{"docs":{},"t":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125}},"f":{"docs":{},"r":{"docs":{},"o":{"docs":{},"m":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004629629629629629}}}}}}}}}}}}}}}}}}}}}},"o":{"docs":{},"o":{"docs":{},"l":{"docs":{},":":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.006896551724137931},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.011494252873563218},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.006211180124223602},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.009216589861751152}}},"e":{"docs":{},"a":{"docs":{},"n":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}}}}},"k":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}}}},"t":{"docs":{},"t":{"docs":{},"o":{"docs":{},"m":{"docs":{},",":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682}}}}}}},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{},":":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.004608294930875576}}}}}}},"f":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":5.005747126436781},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":5.013824884792626}},"s":{"docs":{},"(":{"docs":{},"i":{"docs":{},")":{"docs":{},":":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395}}}}},"s":{"docs":{},")":{"docs":{},":":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395}}}}}},")":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395}}}}},"l":{"docs":{},"u":{"docs":{},"e":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395}},",":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395}}},"]":{"docs":{},")":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.007067137809187279}}}},"_":{"docs":{},"e":{"docs":{},"d":{"docs":{},"g":{"docs":{},"e":{"docs":{},"s":{"docs":{},":":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.007067137809187279}}}}}}}}}}}}},"d":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.01020408163265306},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.007067137809187279}},"e":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}},"c":{"docs":{},"o":{"docs":{},"r":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.020833333333333332}}},"d":{"docs":{"Algorithms/DynamicProgramming-E.html":{"ref":"Algorithms/DynamicProgramming-E.html","tf":0.002777777777777778}}}},"i":{"docs":{},"d":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282}}}},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011235955056179775},"Algorithms/DynamicProgramming-E.html":{"ref":"Algorithms/DynamicProgramming-E.html","tf":0.002777777777777778}}}}}},"f":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0234375},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.030612244897959183},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.028037383177570093},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.013793103448275862},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.032407407407407406},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.014134275618374558},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.017241379310344827},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.024844720496894408},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.015873015873015872},"Algorithms/":{"ref":"Algorithms/","tf":0.012195121951219513},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.013824884792626729},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.023952095808383235},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.016129032258064516},"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.012539184952978056},"Algorithms/DynamicProgramming-E.html":{"ref":"Algorithms/DynamicProgramming-E.html","tf":0.025},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}},"a":{"docs":{},"u":{"docs":{},"l":{"docs":{},"t":{"docs":{},"d":{"docs":{},"i":{"docs":{},"c":{"docs":{},"t":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.005747126436781609},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.018633540372670808},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.015873015873015872}},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},")":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.006211180124223602}}}}}},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},")":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.007067137809187279},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.005747126436781609},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.012422360248447204}}}}}}},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{},")":{"docs":{"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.031746031746031744}}}}}}},",":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"i":{"docs":{},"t":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004629629629629629}}}}}}},"a":{"docs":{},"l":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653}}}},"s":{"docs":{},"i":{"docs":{},"r":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653}}}}},"q":{"docs":{},"u":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.013793103448275862},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.007067137809187279},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.011494252873563218},"Algorithms/":{"ref":"Algorithms/","tf":0.012195121951219513},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.004608294930875576}},"e":{"docs":{},",":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.005747126436781609},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.015873015873015872}}},"(":{"docs":{},")":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.013793103448275862},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.007067137809187279},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.005747126436781609},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.015873015873015872}}},"[":{"docs":{},"(":{"0":{"docs":{},",":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.005747126436781609}}}},"docs":{}},"[":{"0":{"docs":{},",":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.004608294930875576}}}},"docs":{}}}}}}},"e":{"docs":{},"p":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"l":{"docs":{},"e":{"docs":{},"a":{"docs":{},"v":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.006896551724137931}}}}}}}}}}}}}}}}}}}}}},"l":{"docs":{},"a":{"docs":{},"y":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.005747126436781609}}}},"i":{"docs":{},"v":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.02631578947368421}}}}},"p":{"docs":{},"t":{"docs":{},"h":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}}}},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}}}}}}},"o":{"docs":{},"c":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.020833333333333332}}}}}},"m":{"docs":{},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653}},")":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.017964071856287425}}},":":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.011976047904191617}}}}}}},"n":{"docs":{},"’":{"docs":{},"t":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653}}}},"'":{"docs":{},"t":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011235955056179775},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.005988023952095809}}}},"e":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.004608294930875576}}}},"w":{"docs":{},"n":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.033707865168539325},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.01020408163265306},"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}}}},":":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012195121951219513}}},"?":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.02631578947368421}}}},"a":{"docs":{},"t":{"docs":{},"a":{"docs":{"DataStructures/":{"ref":"DataStructures/","tf":5.2},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011235955056179775}}}},"y":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.01098901098901099}},",":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.01098901098901099}}}}},"i":{"docs":{},"f":{"docs":{},"f":{"docs":{},"e":{"docs":{},"r":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395},"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.003134796238244514},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.016483516483516484}},"e":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},",":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.003134796238244514}}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.01020408163265306},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.02631578947368421}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},",":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.00510204081632653}}}}}}}}}},"s":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"n":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395}}}}}}}}}},"d":{"docs":{},"n":{"docs":{},"'":{"docs":{},"t":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.006211180124223602}}}}}},"c":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012195121951219513},"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.031746031746031744}}}}}}}},"(":{"docs":{},")":{"docs":{"Algorithms/DynamicProgramming-E.html":{"ref":"Algorithms/DynamicProgramming-E.html","tf":0.005555555555555556}}}}}},"v":{"docs":{},"i":{"docs":{},"d":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}}}}},"a":{"docs":{},"g":{"docs":{},"r":{"docs":{},"a":{"docs":{},"m":{"docs":{"Algorithms/DynamicProgramming-E.html":{"ref":"Algorithms/DynamicProgramming-E.html","tf":0.002777777777777778}}}}}}}},"p":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.037037037037037035},"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.006269592476489028},"Algorithms/DynamicProgramming-E.html":{"ref":"Algorithms/DynamicProgramming-E.html","tf":0.008333333333333333},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}},":":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}}},"[":{"0":{"docs":{},"]":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}}}},"1":{"docs":{},"]":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}}}},"2":{"docs":{},"]":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}}}},"docs":{},"i":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.003134796238244514}},"]":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}}}},"n":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.003134796238244514}},"]":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.003134796238244514}}}},"x":{"docs":{"Algorithms/DynamicProgramming-E.html":{"ref":"Algorithms/DynamicProgramming-E.html","tf":0.002777777777777778}},"]":{"docs":{},"[":{"docs":{},"i":{"docs":{"Algorithms/DynamicProgramming-E.html":{"ref":"Algorithms/DynamicProgramming-E.html","tf":0.002777777777777778}}},"y":{"docs":{},"]":{"docs":{"Algorithms/DynamicProgramming-E.html":{"ref":"Algorithms/DynamicProgramming-E.html","tf":0.008333333333333333}}}}}}}}},"u":{"docs":{},"r":{"docs":{},"e":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653}}}}},",":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.006211180124223602}}},"f":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":5.0062111801242235},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":5.018433179723503},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}},"s":{"docs":{},"(":{"0":{"docs":{},",":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}}}},"docs":{},"i":{"docs":{},")":{"docs":{},":":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.012422360248447204}}}}},"j":{"docs":{},")":{"docs":{},":":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.006211180124223602}}}}},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},",":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.006211180124223602}}}}}}},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}}}}}},"l":{"docs":{},"e":{"docs":{},"t":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},",":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.004608294930875576}}}}}}}}},"x":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}},",":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}}},":":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}}}}}}},"y":{"docs":{},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":3.345872518286311},"Algorithms/DynamicProgramming-E.html":{"ref":"Algorithms/DynamicProgramming-E.html","tf":3.3388888888888886},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}}}},"r":{"docs":{},"a":{"docs":{},"w":{"docs":{},"n":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.02631578947368421}}}}}}},"f":{"docs":{},"i":{"docs":{},"r":{"docs":{},"s":{"docs":{},"t":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.020833333333333332},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.01060070671378092},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.006211180124223602},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.004608294930875576},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}}},"n":{"docs":{},"d":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.015306122448979591},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011235955056179775},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.009345794392523364},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.006211180124223602},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.004608294930875576},"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.007836990595611285},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.030303030303030304}},"f":{"docs":{},"r":{"docs":{},"e":{"docs":{},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682}}}}}}}}}}}}}}}}}}}}}}},"i":{"docs":{},"t":{"docs":{},"i":{"docs":{},"n":{"docs":{},"e":{"docs":{},"r":{"docs":{},"a":{"docs":{},"r":{"docs":{},"y":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.006211180124223602}}}}}}}}}}}}}}}}},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.015873015873015872}}}}}}}}}}}}}},"a":{"docs":{},"l":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}},"_":{"docs":{},"a":{"docs":{},"n":{"docs":{},"s":{"docs":{},"w":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653}}}}}}}}},"i":{"docs":{},"t":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}}}}},"l":{"docs":{},"l":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395}}},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}}}}}},"g":{"docs":{},"u":{"docs":{},"r":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}}}}}},"o":{"docs":{"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.015873015873015872}},"r":{"docs":{},"c":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.020833333333333332},"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}}},",":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125}}},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.009216589861751152}}}}}},"u":{"docs":{},"n":{"docs":{},"d":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.01098901098901099}}}}},"l":{"docs":{},"l":{"docs":{},"o":{"docs":{},"w":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.02631578947368421}}}}}}},"u":{"docs":{},"n":{"docs":{},"c":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.041666666666666664},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.005747126436781609},"Algorithms/":{"ref":"Algorithms/","tf":0.012195121951219513}}}}}}}},"r":{"docs":{},"t":{"docs":{},"h":{"docs":{},"e":{"docs":{},"r":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.020833333333333332}}},"s":{"docs":{},"t":{"docs":{},"j":{"docs":{},"u":{"docs":{},"m":{"docs":{},"p":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}}}}}}}}}}},"l":{"docs":{},"l":{"docs":{},"i":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}}}}}},"a":{"docs":{},"s":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282}}}}}},"l":{"docs":{},"s":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.020689655172413793},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.007067137809187279},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.005747126436781609},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.018633540372670808},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044},"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.003134796238244514}},"e":{"docs":{},",":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}}}}}},"r":{"docs":{},";":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}}},",":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}},".":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}},"c":{"docs":{},"e":{"docs":{},"d":{"docs":{},"?":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.02631578947368421}}}}}}},"r":{"docs":{},"e":{"docs":{},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"n":{"docs":{},"c":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653}}},"t":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682},"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.031746031746031744}}}}}}}}},"l":{"docs":{},"a":{"docs":{},"g":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125}}}},"o":{"docs":{},"a":{"docs":{},"t":{"docs":{},"(":{"docs":{},"'":{"docs":{"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.015873015873015872}},"i":{"docs":{},"n":{"docs":{},"f":{"docs":{},"'":{"docs":{},")":{"docs":{"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.015873015873015872}},")":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682}}},"]":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.004608294930875576}}}}}}}}}}}},"w":{"docs":{},"e":{"docs":{},"r":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395}},"s":{"docs":{},".":{"docs":{},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395}}}}}}},"r":{"docs":{},"e":{"docs":{},"m":{"docs":{},"o":{"docs":{},"v":{"docs":{},"e":{"docs":{},"(":{"docs":{},"p":{"docs":{},"l":{"docs":{},"a":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"d":{"docs":{},"[":{"docs":{},"n":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395}}}}}}}}}}}}}}}}}}},":":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395}}}}}}}}},"e":{"docs":{},"w":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.004608294930875576}}},"e":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.01098901098901099}},")":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.01098901098901099}},":":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}},"/":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}}}},"g":{"docs":{},"e":{"docs":{},"n":{"docs":{},"e":{"docs":{},"r":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":5.020833333333333},"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.04},"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.00510204081632653},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.006896551724137931},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.004608294930875576},"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"h":{"docs":{},"e":{"docs":{},"s":{"docs":{},"i":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}}}}}}}}}}}}}}}}}}}}}}}}},"t":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.004608294930875576}},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.020833333333333332}}}}},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"i":{"docs":{},"m":{"docs":{},"u":{"docs":{},"m":{"docs":{},"g":{"docs":{},"o":{"docs":{},"l":{"docs":{},"d":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}}}}}}}}}}}}}}}}}}},"e":{"docs":{},"k":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.037037037037037035}}}}},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02}},",":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012195121951219513}}}},"s":{"docs":{},"t":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012195121951219513}}}}}}},"e":{"docs":{},"d":{"docs":{},"i":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.004608294930875576},"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}}}}}},"a":{"docs":{},"p":{"docs":{},"h":{"docs":{"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":10.333333333333334},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0176678445229682},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":5.011494252873563},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":5.0186335403726705},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.015873015873015872}},":":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.006211180124223602}}},"[":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"]":{"docs":{},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},")":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395}}}}}}}}}}}}}}}}}}}},"i":{"docs":{},"]":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395}},":":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.006211180124223602}}}}},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"]":{"docs":{},":":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.007067137809187279},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.005747126436781609},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.015873015873015872}}}}}}}},"s":{"docs":{},"]":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.006211180124223602}},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"[":{"docs":{},"d":{"docs":{},",":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.007067137809187279}}}}}}}}}}}}}},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},"]":{"docs":{},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},")":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395}}}}}}}}}}}}}}}}}}}},"u":{"docs":{},"]":{"docs":{},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"(":{"docs":{},"v":{"docs":{},",":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.005747126436781609}}}}}}}}}}}}}}},"c":{"docs":{},"]":{"docs":{},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"p":{"docs":{},")":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.006211180124223602}}}}}}}}}},"d":{"docs":{},"d":{"docs":{},"(":{"docs":{},"p":{"docs":{},")":{"docs":{"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.015873015873015872}}}}}}}}}}},"d":{"docs":{},"]":{"docs":{},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"a":{"docs":{},")":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.006211180124223602}}}}}}}}}}}}}}}}},"d":{"docs":{},"u":{"docs":{},"a":{"docs":{},"t":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.02631578947368421}}}}}}},"i":{"docs":{},"d":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.018433179723502304},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}},":":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.004608294930875576},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}},"[":{"docs":{},"x":{"docs":{},"]":{"docs":{},"[":{"docs":{},"y":{"docs":{},"]":{"docs":{},":":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.004608294930875576}}}}}}}},"i":{"docs":{},"]":{"docs":{},"[":{"docs":{},"j":{"docs":{},"]":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.008064516129032258}}}}}}}}}}},"l":{"docs":{},"o":{"docs":{},"b":{"docs":{},"a":{"docs":{},"l":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011235955056179775}},"s":{"docs":{},"/":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682}}}},"l":{"docs":{},"y":{"docs":{},",":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.006211180124223602}}}}}}}}}},"i":{"docs":{},"v":{"docs":{},"e":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125}},"n":{"docs":{"Algorithms/DynamicProgramming-E.html":{"ref":"Algorithms/DynamicProgramming-E.html","tf":0.002777777777777778}}}}}},"o":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.00510204081632653},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.004608294930875576},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.008982035928143712},"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.015873015873015872}},"l":{"docs":{},"d":{"docs":{},"/":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}}}},":":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}}},"e":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}}}},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"n":{"docs":{},"n":{"docs":{},"o":{"docs":{},"a":{"docs":{},"d":{"docs":{},"j":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395}}}}}}}}}}}}}}}}},"m":{"docs":{},"e":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.009216589861751152},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}},"/":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.004608294930875576}}}}}},"_":{"docs":{},"v":{"docs":{},"i":{"docs":{},"s":{"docs":{},"i":{"docs":{},"t":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.006211180124223602}},"e":{"docs":{},"d":{"docs":{},".":{"docs":{},"a":{"docs":{},"d":{"docs":{},"d":{"docs":{},"(":{"docs":{},"i":{"docs":{},")":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.006211180124223602}}}}}}}}},":":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.018633540372670808}}}}}}}}}}}},"h":{"docs":{},"e":{"docs":{},"l":{"docs":{},"p":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02}},"e":{"docs":{},"r":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.020833333333333332},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}},"n":{"docs":{},"c":{"docs":{},"r":{"docs":{},"(":{"0":{"docs":{},",":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}}}},"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}},"s":{"docs":{},",":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}}},":":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}}}}}}}}}}}},"a":{"docs":{},"p":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.005747126436781609},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.030303030303030304},"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.015873015873015872}},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"(":{"0":{"docs":{},",":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.005747126436781609}}}},"docs":{}}}}}}}}}},":":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.005747126436781609}}},"q":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.005747126436781609},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.006211180124223602},"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.031746031746031744}},".":{"docs":{},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"p":{"docs":{},")":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.005747126436781609}}}}}}}}}},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"(":{"docs":{},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"p":{"docs":{},",":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.005747126436781609},"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.015873015873015872}}}}}}}}}}}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},",":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}}}}}},"a":{"docs":{},"s":{"docs":{},"h":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},")":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011235955056179775}}}}}}}},"l":{"docs":{},"f":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}}}}},"t":{"docs":{},"t":{"docs":{},"p":{"docs":{},"s":{"docs":{},":":{"docs":{},"/":{"docs":{},"/":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},".":{"docs":{},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"/":{"docs":{},"p":{"docs":{},"r":{"docs":{},"o":{"docs":{},"b":{"docs":{},"l":{"docs":{},"e":{"docs":{},"m":{"docs":{},"s":{"docs":{},"/":{"2":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}},"3":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},"/":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282}}}}}}},"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02}}}},"t":{"docs":{},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"k":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.005747126436781609}}}}}}}}},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"t":{"docs":{},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282}}}}}},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"u":{"docs":{},"c":{"docs":{},"t":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004629629629629629}}}}}}}}},"u":{"docs":{},"s":{"docs":{},"i":{"docs":{},"n":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.006896551724137931}}}}},"r":{"docs":{},"s":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.006211180124223602},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.015873015873015872},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.018518518518518517}}}}},"m":{"docs":{},"b":{"docs":{},"i":{"docs":{},"n":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}}}}}}}},"t":{"docs":{},"w":{"docs":{},"o":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282}}}}},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"i":{"docs":{},"m":{"docs":{},"u":{"docs":{},"m":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004629629629629629},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.030303030303030304}}}}}}}},"o":{"docs":{},"s":{"docs":{},"t":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682}}}}},"i":{"docs":{},"n":{"docs":{},"i":{"docs":{},"m":{"docs":{},"u":{"docs":{},"m":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.018518518518518517},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.030303030303030304}}}}}}}}},"l":{"docs":{},"o":{"docs":{},"n":{"docs":{},"g":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.07692307692307693},"Algorithms/DynamicProgramming-E.html":{"ref":"Algorithms/DynamicProgramming-E.html","tf":0.005555555555555556}}}}}}},"w":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682}}}}}}}},"b":{"docs":{},"i":{"docs":{},"n":{"docs":{},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.00510204081632653}}}}}}},"a":{"docs":{},"l":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004629629629629629}}}},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.01098901098901099}}}}}},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.00510204081632653}}}},"h":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.004608294930875576}}}}}}}}},"l":{"docs":{},"i":{"docs":{},"d":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012195121951219513}}}}}},"p":{"docs":{},"a":{"docs":{},"t":{"docs":{},"h":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.00510204081632653},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}}}},"o":{"docs":{},"s":{"docs":{},"s":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"i":{"docs":{},"d":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682}}}}}}},"d":{"docs":{},"e":{"docs":{},"e":{"docs":{},"p":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.006896551724137931}}}}}}}}},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},"a":{"docs":{},"y":{"docs":{"DataStructures/Graphs/":{"ref":"DataStructures/Graphs/","tf":0.3333333333333333}}}}}}},"f":{"docs":{},"l":{"docs":{},"o":{"docs":{},"w":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395}}}}}},"i":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395}}},"k":{"docs":{},"e":{"docs":{},"y":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.005747126436781609}}}}},"w":{"docs":{},"a":{"docs":{},"t":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.005747126436781609}}}},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.004608294930875576}}}}}},"r":{"docs":{},"e":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"u":{"docs":{},"c":{"docs":{},"t":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.006211180124223602}}}}}}}}}}}}},"j":{"docs":{},"u":{"docs":{},"m":{"docs":{},"p":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.009216589861751152},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}}}}},"g":{"docs":{},"e":{"docs":{},"n":{"docs":{},"e":{"docs":{},"r":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}}}}}}},"h":{"docs":{},"o":{"docs":{},"u":{"docs":{},"s":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}}}}}},"u":{"docs":{},"n":{"docs":{},"i":{"docs":{},"q":{"docs":{},"u":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}}}}}}}}}}}}}}}},"e":{"docs":{},"x":{"docs":{},"p":{"docs":{},"l":{"docs":{},"o":{"docs":{},"r":{"docs":{},"e":{"docs":{},"/":{"docs":{},"c":{"docs":{},"h":{"docs":{},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"e":{"docs":{},"/":{"docs":{},"c":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{},"/":{"3":{"0":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282}}},"docs":{}},"docs":{},"m":{"docs":{},"a":{"docs":{},"y":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012195121951219513}}}}}}}}}}}}}}}}}}}}}}}}}}}},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"/":{"docs":{},"w":{"docs":{},"e":{"docs":{},"e":{"docs":{},"k":{"docs":{},"l":{"docs":{},"i":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012195121951219513},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.030303030303030304}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"w":{"docs":{},"w":{"docs":{},"w":{"docs":{},".":{"docs":{},"g":{"docs":{},"e":{"docs":{},"e":{"docs":{},"k":{"docs":{},"s":{"docs":{},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"e":{"docs":{},"k":{"docs":{},"s":{"docs":{},".":{"docs":{},"o":{"docs":{},"r":{"docs":{},"g":{"docs":{},"/":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"i":{"docs":{},"m":{"docs":{},"u":{"docs":{},"m":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.015306122448979591},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.01098901098901099}}}}}}}}},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02}}}}},"u":{"docs":{},"m":{"docs":{},"b":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.01020408163265306}}}}}},"x":{"docs":{},"o":{"docs":{},"r":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653}}}}},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},"i":{"docs":{},"t":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.018518518518518517}}}}}}}},"t":{"docs":{},"a":{"docs":{},"g":{"docs":{},"/":{"docs":{},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{},"/":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.018518518518518517}}}}}}}}}}}}},"s":{"docs":{},"t":{"docs":{},"o":{"docs":{},"c":{"docs":{},"k":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}}}}}}}}}}}}}}}}}}}}}}},"t":{"docs":{},"e":{"docs":{},"c":{"docs":{},"h":{"docs":{},"i":{"docs":{},"e":{"docs":{},"d":{"docs":{},"e":{"docs":{},"l":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},".":{"docs":{},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"/":{"docs":{},"l":{"docs":{},"o":{"docs":{},"n":{"docs":{},"g":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"Algorithms/DynamicProgramming-E.html":{"ref":"Algorithms/DynamicProgramming-E.html","tf":0.005555555555555556}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"m":{"docs":{},"e":{"docs":{},"d":{"docs":{},"i":{"docs":{},"u":{"docs":{},"m":{"docs":{},".":{"docs":{},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"/":{"docs":{},"@":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"f":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"k":{"docs":{},"/":{"docs":{},"b":{"docs":{},"i":{"docs":{},"n":{"docs":{},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011235955056179775}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"b":{"docs":{},"l":{"docs":{},"o":{"docs":{},"g":{"docs":{},".":{"docs":{},"u":{"docs":{},"s":{"docs":{},"e":{"docs":{},"j":{"docs":{},"o":{"docs":{},"u":{"docs":{},"r":{"docs":{},"n":{"docs":{},"a":{"docs":{},"l":{"docs":{},".":{"docs":{},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"/":{"docs":{},"t":{"docs":{},"o":{"docs":{},"p":{"docs":{"Algorithms/DynamicProgramming-E.html":{"ref":"Algorithms/DynamicProgramming-E.html","tf":0.002777777777777778}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"o":{"docs":{},"l":{"docs":{},"d":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.03296703296703297}},",":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}}}},"i":{"docs":{},"r":{"docs":{},"e":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.030303030303030304}}}}}},"k":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.005747126436781609},"Algorithms/":{"ref":"Algorithms/","tf":0.012195121951219513},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.004608294930875576},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.014970059880239521},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.030303030303030304}},"e":{"docs":{},"e":{"docs":{},"p":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.020833333333333332},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011235955056179775},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495},"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.015873015873015872}}}},"y":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.013888888888888888},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}},",":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682}}},")":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.009259259259259259}}},":":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004629629629629629}}},"b":{"docs":{},"o":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{},"/":{"docs":{},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"m":{"docs":{},"i":{"docs":{},"s":{"docs":{},"s":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"/":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}}}}}}}}}}}}}}}}}}},"=":{"docs":{},"l":{"docs":{},"a":{"docs":{},"m":{"docs":{},"b":{"docs":{},"d":{"docs":{},"a":{"docs":{"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.015873015873015872}}}}}}}}}}},"’":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282}}},"/":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.01020408163265306}}},":":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.005747126436781609},"Algorithms/":{"ref":"Algorithms/","tf":0.024390243902439025},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.004608294930875576},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.005988023952095809}}},")":{"docs":{},")":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.005747126436781609}}}},"a":{"docs":{},"d":{"docs":{},"a":{"docs":{},"n":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012195121951219513}}}}}},"]":{"docs":{},"]":{"docs":{},")":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.004608294930875576}}}}},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.018433179723502304}}}}}}},"n":{"docs":{},"a":{"docs":{},"p":{"docs":{},"s":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}}}}}}}},",":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}}}}}}}}}},",":{"docs":{"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.015873015873015872}}}},"l":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.014018691588785047},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.009259259259259259}},"e":{"docs":{},"v":{"docs":{},"e":{"docs":{},"l":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.020833333333333332},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.02247191011235955},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.00510204081632653},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":3.333333333333333},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}},"w":{"docs":{},"i":{"docs":{},"s":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011235955056179775},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.00510204081632653},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.006896551724137931}},"e":{"docs":{},",":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011235955056179775}}}}}}},"_":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.027586206896551724}}}}}}}}},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.01020408163265306},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.01060070671378092}},")":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.00510204081632653}},":":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.00510204081632653}}}}}}},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},")":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282},"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.003134796238244514}},")":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004629629629629629}}}}}}}},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"u":{"docs":{},"e":{"docs":{},")":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.013793103448275862}}}}}}}},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},")":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004629629629629629},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}}}}}},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},")":{"docs":{},":":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004629629629629629}}}}}}}},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},")":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004629629629629629}}}}}}}}},"i":{"docs":{},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},")":{"docs":{},")":{"docs":{},":":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}}}}}}}}},"g":{"docs":{},"r":{"docs":{},"a":{"docs":{},"p":{"docs":{},"h":{"docs":{},")":{"docs":{},")":{"docs":{},":":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395}}},"]":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395}}}}}}}},"i":{"docs":{},"d":{"docs":{},")":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.004608294930875576}},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}}},"[":{"0":{"docs":{},"]":{"docs":{},")":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.004608294930875576},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}}}},"docs":{}}}}}},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"m":{"docs":{},"s":{"docs":{},")":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.005747126436781609}}}}}}}},"v":{"docs":{},"i":{"docs":{},"s":{"docs":{},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{},"d":{"docs":{},")":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.011494252873563218}}}}}}}}},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{},"e":{"docs":{},"s":{"docs":{},")":{"docs":{},"+":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}}}}}}}}}},"t":{"docs":{},"o":{"docs":{},"p":{"docs":{},"o":{"docs":{},")":{"docs":{"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.015873015873015872}}}}}},"e":{"docs":{},"x":{"docs":{},"t":{"1":{"docs":{},")":{"docs":{"Algorithms/DynamicProgramming-E.html":{"ref":"Algorithms/DynamicProgramming-E.html","tf":0.002777777777777778}}}},"2":{"docs":{},")":{"docs":{"Algorithms/DynamicProgramming-E.html":{"ref":"Algorithms/DynamicProgramming-E.html","tf":0.002777777777777778}},")":{"docs":{"Algorithms/DynamicProgramming-E.html":{"ref":"Algorithms/DynamicProgramming-E.html","tf":0.005555555555555556}}}}},"docs":{}}}}},"b":{"docs":{},"o":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{},")":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.004608294930875576}}},"[":{"0":{"docs":{},"]":{"docs":{},")":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.004608294930875576}}}}},"docs":{}}}}}}},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},")":{"docs":{},":":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.004608294930875576}}}}}}}},"d":{"docs":{},"o":{"docs":{},"m":{"docs":{},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{},")":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.005988023952095809}}}}}}}}},"s":{"docs":{},")":{"docs":{"Algorithms/DynamicProgramming-E.html":{"ref":"Algorithms/DynamicProgramming-E.html","tf":0.005555555555555556}}}}}},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282},"Algorithms/":{"ref":"Algorithms/","tf":0.012195121951219513},"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.003134796238244514},"Algorithms/DynamicProgramming-E.html":{"ref":"Algorithms/DynamicProgramming-E.html","tf":0.002777777777777778}},"e":{"docs":{},":":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}}}}}}}}},"f":{"docs":{},"t":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.02247191011235955},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.00510204081632653},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.009345794392523364},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004629629629629629},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.004608294930875576}},"/":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011235955056179775}}},",":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.015306122448979591},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682}}},":":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.00510204081632653}}},"_":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},",":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682}}}}},"i":{"docs":{},"n":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682}}}}}},"=":{"docs":{},"n":{"docs":{},"o":{"docs":{},"n":{"docs":{},"e":{"docs":{},",":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004629629629629629}}}}}}}}}},"s":{"docs":{},"s":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.01020408163265306}}}},"a":{"docs":{},"v":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.018518518518518517},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.006896551724137931}},"e":{"docs":{},"s":{"docs":{},"/":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125}}}},",":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}}}}},"f":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.00510204081632653}}}},"x":{"docs":{},"o":{"docs":{},"g":{"docs":{},"r":{"docs":{},"a":{"docs":{},"p":{"docs":{},"h":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.006211180124223602}}}}}}}}},"t":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.004608294930875576}}}}}}},"i":{"docs":{"Algorithms/DynamicProgramming-E.html":{"ref":"Algorithms/DynamicProgramming-E.html","tf":0.002777777777777778}},"b":{"docs":{},"r":{"docs":{},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.020833333333333332}}}}}}},"s":{"docs":{},"t":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125},"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.047619047619047616}},"[":{"docs":{},"i":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}},"n":{"docs":{},"t":{"docs":{},"]":{"docs":{},")":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.009259259259259259},"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.003134796238244514}}},":":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.007067137809187279},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.015873015873015872}}}}}},"]":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}},"n":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.018518518518518517}}},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"]":{"docs":{},":":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.006211180124223602}}}}}}},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"[":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"]":{"docs":{},"]":{"docs":{},":":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.00510204081632653}}},")":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.01060070671378092},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.005747126436781609},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.006211180124223602},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.015873015873015872},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}},",":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.005747126436781609},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.004608294930875576}}}}}}}},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"]":{"docs":{},"]":{"docs":{},")":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.006211180124223602}}},",":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.004608294930875576}}}}}}}}}}}}}},":":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011235955056179775},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.008982035928143712}}},")":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004629629629629629},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.011976047904191617}}},",":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.005988023952095809}}},".":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}},"}":{"docs":{"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.015873015873015872}}}},",":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}}}},"m":{"docs":{},"i":{"docs":{},"t":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.004608294930875576},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}},",":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}}}},"t":{"docs":{},"t":{"docs":{},"l":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.004608294930875576}}}}},"k":{"docs":{},"e":{"docs":{},":":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.018518518518518517}}}}}},"o":{"docs":{},"o":{"docs":{},"k":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125}}},"p":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.005988023952095809},"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}}}},"n":{"docs":{},"g":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.004608294930875576}},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"Algorithms/DynamicProgramming-E.html":{"ref":"Algorithms/DynamicProgramming-E.html","tf":0.005555555555555556}},"z":{"docs":{},"i":{"docs":{},"g":{"docs":{},"z":{"docs":{},"a":{"docs":{},"g":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.00510204081632653}}}}}}}}}}}}}},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"m":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"s":{"docs":{},"e":{"docs":{},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Algorithms/DynamicProgramming-E.html":{"ref":"Algorithms/DynamicProgramming-E.html","tf":0.008333333333333333}}}}}}}}}}}}}}}}}}}}}}}}},"p":{"docs":{},"a":{"docs":{},"l":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"r":{"docs":{},"o":{"docs":{},"m":{"docs":{},"e":{"docs":{},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"s":{"docs":{},"e":{"docs":{},"q":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Algorithms/DynamicProgramming-E.html":{"ref":"Algorithms/DynamicProgramming-E.html","tf":0.005555555555555556}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"w":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"m":{"docs":{},"o":{"docs":{},"n":{"docs":{},"a":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682}}}}}}}}}}}}}}}}}}}}}}}}}},"c":{"docs":{},"a":{"docs":{},"l":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.006211180124223602},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.016483516483516484}}}}},"t":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}}}},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.030303030303030304}}}}}}}},"c":{"docs":{"Algorithms/DynamicProgramming-E.html":{"ref":"Algorithms/DynamicProgramming-E.html","tf":0.002777777777777778}},"s":{"docs":{},"(":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"(":{"docs":{},"t":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"1":{"docs":{},")":{"docs":{},",":{"docs":{"Algorithms/DynamicProgramming-E.html":{"ref":"Algorithms/DynamicProgramming-E.html","tf":0.005555555555555556}}}}},"docs":{}}}}}}}}},"m":{"docs":{"Algorithms/DynamicProgramming-E.html":{"ref":"Algorithms/DynamicProgramming-E.html","tf":0.005555555555555556}},",":{"docs":{"Algorithms/DynamicProgramming-E.html":{"ref":"Algorithms/DynamicProgramming-E.html","tf":0.011111111111111112}}}}}}},"p":{"docs":{},"s":{"docs":{},"(":{"0":{"docs":{},",":{"docs":{"Algorithms/DynamicProgramming-E.html":{"ref":"Algorithms/DynamicProgramming-E.html","tf":0.005555555555555556}}}},"docs":{},"m":{"docs":{"Algorithms/DynamicProgramming-E.html":{"ref":"Algorithms/DynamicProgramming-E.html","tf":0.005555555555555556}},",":{"docs":{"Algorithms/DynamicProgramming-E.html":{"ref":"Algorithms/DynamicProgramming-E.html","tf":0.011111111111111112}}}}}}}},"m":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129},"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.003134796238244514},"Algorithms/DynamicProgramming-E.html":{"ref":"Algorithms/DynamicProgramming-E.html","tf":0.016666666666666666}},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.020833333333333332},"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282},"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.01098901098901099}}}}}}}},"t":{"docs":{},"c":{"docs":{},"h":{"docs":{},"e":{"docs":{},"d":{"docs":{},":":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653}}}}}}},"r":{"docs":{},"i":{"docs":{},"x":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.024390243902439025}}}}},"h":{"docs":{},".":{"docs":{},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},"p":{"docs":{},"o":{"docs":{},"s":{"docs":{},"i":{"docs":{},"t":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}}}}}}}}}}}}},"x":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.009345794392523364},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129},"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.030303030303030304}},"/":{"docs":{},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{},".":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653}}},":":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653}}}}}}},"i":{"docs":{},"m":{"docs":{},"u":{"docs":{},"m":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653},"Algorithms/":{"ref":"Algorithms/","tf":0.012195121951219513},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.008064516129032258},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.016483516483516484}},"/":{"docs":{},"d":{"docs":{},"i":{"docs":{},"s":{"docs":{},"c":{"docs":{},"u":{"docs":{},"s":{"docs":{},"s":{"docs":{},"/":{"1":{"1":{"1":{"5":{"6":{"0":{"docs":{},"/":{"docs":{},"p":{"docs":{},"y":{"docs":{},"t":{"docs":{},"h":{"docs":{},"o":{"docs":{},"n":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012195121951219513}}}}}}}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.012096774193548387}},")":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}}}}}}},"a":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653}}}}},"(":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},".":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},",":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.00510204081632653}}}}}}}}},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{},",":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682}}}}}}}}}}}},"d":{"docs":{},"f":{"docs":{},"s":{"docs":{},"(":{"docs":{},"i":{"docs":{},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}}},"x":{"docs":{},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}}}}}}}}}}}},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"_":{"docs":{},"t":{"docs":{},"i":{"docs":{},"m":{"docs":{},"e":{"docs":{},",":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.005747126436781609}}}}}}}}}},"e":{"docs":{},"m":{"docs":{},"o":{"docs":{},"[":{"docs":{},"i":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}}}}}}}},"i":{"docs":{},"n":{"docs":{},"c":{"docs":{},"l":{"docs":{},"u":{"docs":{},"d":{"docs":{},"e":{"docs":{},",":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}}}}}}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{},",":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}}}}},"docs":{}}}}}},"d":{"docs":{},"p":{"docs":{},"[":{"docs":{},"x":{"docs":{"Algorithms/DynamicProgramming-E.html":{"ref":"Algorithms/DynamicProgramming-E.html","tf":0.002777777777777778}}}}}},"l":{"docs":{},"c":{"docs":{},"s":{"docs":{},"(":{"docs":{},"m":{"docs":{"Algorithms/DynamicProgramming-E.html":{"ref":"Algorithms/DynamicProgramming-E.html","tf":0.005555555555555556}}}}}},"p":{"docs":{},"s":{"docs":{},"(":{"docs":{},"m":{"docs":{"Algorithms/DynamicProgramming-E.html":{"ref":"Algorithms/DynamicProgramming-E.html","tf":0.005555555555555556}}}}}}},"c":{"docs":{},"a":{"docs":{},"s":{"docs":{},"h":{"docs":{},",":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.01098901098901099}}}}}}},"h":{"docs":{},"o":{"docs":{},"l":{"docs":{},"d":{"docs":{},",":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.01098901098901099}}}}}}}},"_":{"docs":{},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682}}}}}}},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.009259259259259259}},")":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004629629629629629}}}}}}}},"t":{"docs":{},"i":{"docs":{},"m":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.017241379310344827}}}}},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"p":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.018518518518518517}}}}}}},"p":{"docs":{},"r":{"docs":{},"o":{"docs":{},"f":{"docs":{},"i":{"docs":{},"t":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}}}}}}}}}}}}},"k":{"docs":{},"e":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011235955056179775},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.005988023952095809},"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.018518518518518517}}}},"d":{"docs":{},"e":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.02631578947368421}}}}},"e":{"docs":{},"t":{"docs":{},"h":{"docs":{},"o":{"docs":{},"d":{"docs":{},"s":{"docs":{},",":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.020833333333333332}}}},":":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.005747126436781609}}}}}}},"m":{"docs":{},"o":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.003134796238244514},"Algorithms/DynamicProgramming-E.html":{"ref":"Algorithms/DynamicProgramming-E.html","tf":0.005555555555555556}},"[":{"0":{"docs":{},"]":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}}}},"1":{"docs":{},"]":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}}}},"docs":{},"i":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}},"]":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}}}},"n":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}}},"x":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.003134796238244514}},"]":{"docs":{},"[":{"docs":{},"i":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}}},"y":{"docs":{},"]":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.004702194357366771}}}}}}},"(":{"docs":{},"m":{"docs":{},",":{"docs":{"Algorithms/DynamicProgramming-E.html":{"ref":"Algorithms/DynamicProgramming-E.html","tf":0.03333333333333333}}}}}},"i":{"docs":{},"z":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.006269592476489028},"Algorithms/DynamicProgramming-E.html":{"ref":"Algorithms/DynamicProgramming-E.html","tf":0.005555555555555556}}}},"r":{"docs":{},"i":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}}}},":":{"docs":{"Algorithms/DynamicProgramming-E.html":{"ref":"Algorithms/DynamicProgramming-E.html","tf":0.005555555555555556}}}}},"e":{"docs":{},"t":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.037037037037037035}}}},"r":{"docs":{},"g":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.018518518518518517}}}},"n":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.02631578947368421}}}}}}}},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"k":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.020833333333333332}}}}},"c":{"docs":{},"e":{"docs":{},"l":{"docs":{},"l":{"docs":{},"a":{"docs":{},"n":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.018518518518518517},"Miscellaneous/":{"ref":"Miscellaneous/","tf":11},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":5}}}}}}}},"s":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395}}}},"n":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.030303030303030304}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653}}}}},"d":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395}}},"i":{"docs":{},"m":{"docs":{},"u":{"docs":{},"m":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.004608294930875576},"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.006269592476489028},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.016483516483516484}}}},"a":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.01098901098901099}}}}},"(":{"2":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}},"docs":{}},"s":{"docs":{},"t":{"docs":{},"e":{"docs":{},"p":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}}}}}}}}}}}},".":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}}}},"d":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.013888888888888888},"Algorithms/":{"ref":"Algorithms/","tf":0.036585365853658534}}}},"o":{"docs":{},"v":{"docs":{},"e":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}},"z":{"docs":{},"e":{"docs":{},"r":{"docs":{},"o":{"docs":{},"e":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282}}}}}}}}}}}}}},":":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.01020408163265306}}}}},"d":{"docs":{},"u":{"docs":{},"l":{"docs":{},"o":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653}}}}}},"r":{"docs":{},"e":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.015306122448979591},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.006896551724137931}}}}},"u":{"docs":{},"l":{"docs":{},"t":{"docs":{},"i":{"docs":{},",":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653}}},"p":{"docs":{},"l":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}}}}}}}},"y":{"docs":{},"r":{"docs":{},"i":{"docs":{},"a":{"docs":{},"d":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.005747126436781609}}}}}}},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}},":":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.003134796238244514}}}},"o":{"docs":{},"o":{"docs":{},"p":{"docs":{},":":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.020833333333333332}}}}},"p":{"docs":{},"t":{"docs":{},"i":{"docs":{},"m":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.020833333333333332},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.018518518518518517},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.011494252873563218},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.004608294930875576},"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.006269592476489028}},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{},"y":{"docs":{},".":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.004608294930875576}}}}}}}},"o":{"docs":{},"n":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.008982035928143712},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.008064516129032258}}}}}},"e":{"docs":{},"r":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.009216589861751152}}},"n":{"docs":{},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.008982035928143712}},")":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.005988023952095809}}},":":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}}}}}}}}}}},"n":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02},"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.038461538461538464},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.006211180124223602},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129},"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.018518518518518517},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.02631578947368421}},"e":{"docs":{},":":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395}}}},"c":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.003134796238244514}}}},"d":{"docs":{},"d":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653}}}},"l":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653}}}}}},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011235955056179775},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.00510204081632653}}}}},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.004608294930875576}}}}}},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044},"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}},"l":{"docs":{},"a":{"docs":{},"p":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257},"Algorithms/DynamicProgramming-E.html":{"ref":"Algorithms/DynamicProgramming-E.html","tf":0.002777777777777778},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.037037037037037035}}}}}}}},"(":{"2":{"docs":{},"^":{"docs":{},"n":{"docs":{},")":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}}}}}},"docs":{},"n":{"docs":{},")":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012195121951219513}}}}},"b":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"c":{"docs":{},"l":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.004608294930875576}}}}},"r":{"docs":{},"u":{"docs":{},"c":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},".":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}}}}}}}}}}}}},"t":{"docs":{},"h":{"docs":{},"e":{"docs":{},"r":{"docs":{},"w":{"docs":{},"i":{"docs":{},"s":{"docs":{},"e":{"docs":{},")":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.004608294930875576}}}}}}}}}}},"u":{"docs":{},"t":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.005988023952095809},"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}}}},"f":{"docs":{},".":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}}},"w":{"docs":{},"n":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}}},"p":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.02564102564102564},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.006211180124223602},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.031746031746031744}},"o":{"docs":{},"s":{"docs":{},"s":{"docs":{},"i":{"docs":{},"b":{"docs":{},"l":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.020833333333333332},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.006211180124223602},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129},"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.003134796238244514},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.018518518518518517}},"e":{"docs":{},":":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.020833333333333332}}},".":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}}}}}}}},"i":{"docs":{},"t":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.04},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}}}}}}},"t":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.01020408163265306}},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.02247191011235955},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":5.0046728971962615}}}}}}},"w":{"docs":{},"e":{"docs":{},"r":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.005747126436781609}}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":5.0256410256410255},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.015306122448979591}},"s":{"docs":{},":":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282}}}}}}}}},"p":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011235955056179775},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.004608294930875576}}}}}}}},"r":{"docs":{},"o":{"docs":{},"b":{"docs":{},"l":{"docs":{},"e":{"docs":{},"m":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.020833333333333332},"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.04},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.037037037037037035},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011235955056179775},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.007067137809187279},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.005747126436781609},"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.014106583072100314},"Algorithms/DynamicProgramming-E.html":{"ref":"Algorithms/DynamicProgramming-E.html","tf":0.005555555555555556},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.037037037037037035},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.02631578947368421}},"s":{"docs":{},".":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.005747126436781609}}},")":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}},"e":{"docs":{},"t":{"docs":{},":":{"docs":{"Algorithms/DynamicProgramming-E.html":{"ref":"Algorithms/DynamicProgramming-E.html","tf":0.002777777777777778}}}}}}}}}},"p":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282}},"e":{"docs":{},"r":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395}},"t":{"docs":{},"y":{"docs":{},",":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.020833333333333332}}}},"i":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}},"e":{"docs":{},"s":{"docs":{},",":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682}}},";":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682}}}}}}}}}},"d":{"docs":{},"u":{"docs":{},"c":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.01020408163265306}},"t":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.02040816326530612}}}}}},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.00510204081632653},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.006211180124223602},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}},":":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}}}}}}},"g":{"docs":{},"r":{"docs":{},"a":{"docs":{},"m":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":3.3411703239289445},"Algorithms/DynamicProgramming-E.html":{"ref":"Algorithms/DynamicProgramming-E.html","tf":3.336111111111111},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}},":":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}}},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},")":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.003134796238244514}}},":":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}}},"/":{"docs":{"Algorithms/DynamicProgramming-E.html":{"ref":"Algorithms/DynamicProgramming-E.html","tf":0.002777777777777778}}}}}}}}}}},"f":{"docs":{},"i":{"docs":{},"t":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.016483516483516484}}}}},"j":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},",":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.02631578947368421}}}}}}}},"e":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.01020408163265306}},"f":{"docs":{},"i":{"docs":{},"x":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.01020408163265306}},"_":{"docs":{},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653}}}},"1":{"docs":{},"]":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653}}}},"docs":{}}}}}}}}},"v":{"docs":{},"i":{"docs":{},"o":{"docs":{},"u":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653},"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.02631578947368421}}}}}},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.02247191011235955},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":5.005102040816326},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.009259259259259259}},":":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.009259259259259259}}},"[":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004629629629629629}}}}},"m":{"docs":{},"i":{"docs":{},"d":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004629629629629629}}}}},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004629629629629629}},"]":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004629629629629629}},")":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004629629629629629}}}}}}}}}}}}}}},"s":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011235955056179775}}}}}},"r":{"docs":{},"e":{"docs":{},"q":{"docs":{},"u":{"docs":{},"i":{"docs":{},"s":{"docs":{},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{},"s":{"docs":{},":":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.012422360248447204},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.031746031746031744}}}}}}}}}}}}}},"i":{"docs":{},"o":{"docs":{},"r":{"docs":{},"i":{"docs":{},"t":{"docs":{},"i":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.04},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.018518518518518517},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.011494252873563218},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.06060606060606061},"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.015873015873015872}}}}}}},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},",":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}},"[":{"0":{"docs":{},"]":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}},"docs":{},"i":{"docs":{},"]":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.01098901098901099}},")":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.01098901098901099}}}}}}}}}},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{},"i":{"docs":{},"c":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011235955056179775},"Algorithms/DynamicProgramming-E.html":{"ref":"Algorithms/DynamicProgramming-E.html","tf":0.002777777777777778}},"e":{"docs":{},":":{"docs":{"Algorithms/DynamicProgramming-E.html":{"ref":"Algorithms/DynamicProgramming-E.html","tf":0.002777777777777778}}}}}}}}}},"y":{"docs":{},"t":{"docs":{},"h":{"docs":{},"o":{"docs":{},"n":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.020833333333333332},"PythonicTricks/":{"ref":"PythonicTricks/","tf":5.015873015873016}}}}}}},"e":{"docs":{},"r":{"docs":{},"m":{"docs":{},"u":{"docs":{},"t":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.005988023952095809},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"/":{"docs":{},"s":{"docs":{},"o":{"docs":{},"l":{"docs":{},"u":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"/":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02}}}}}}}}}}}},":":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}}}}}}}}}},"_":{"docs":{},"r":{"docs":{},"e":{"docs":{},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}}}}}}}}}}}}}}},"f":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.00510204081632653},"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257},"Algorithms/DynamicProgramming-E.html":{"ref":"Algorithms/DynamicProgramming-E.html","tf":0.002777777777777778}}}}},"o":{"docs":{},"r":{"docs":{},"m":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.06060606060606061}}}}}}}},"a":{"docs":{},"i":{"docs":{},"r":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395}}}},"s":{"docs":{},"s":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.02247191011235955},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.00510204081632653},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682}}}},"r":{"docs":{},"t":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.004608294930875576}},"i":{"docs":{},"c":{"docs":{},"u":{"docs":{},"l":{"docs":{},"a":{"docs":{},"r":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}},"l":{"docs":{},"i":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125}}}}}}}}},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},":":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}}}}}}}},"a":{"docs":{},"l":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.030303030303030304}}}}}},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.020689655172413793}},"h":{"docs":{},"e":{"docs":{},"s":{"docs":{},"e":{"docs":{},"s":{"docs":{},"/":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}}}}}}}}}}},"a":{"docs":{},"n":{"docs":{},"t":{"docs":{},"h":{"docs":{},"e":{"docs":{},"s":{"docs":{},"i":{"docs":{},"s":{"docs":{},",":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012195121951219513}}}}}}}}}},"m":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}}}}},"t":{"docs":{},"h":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.015625},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.01020408163265306},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.006211180124223602},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.004608294930875576},"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.003134796238244514}},")":{"docs":{},":":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125}}}},"s":{"docs":{},".":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125}}},"/":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125}},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"m":{"docs":{},"i":{"docs":{},"s":{"docs":{},"s":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"/":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}}}}}}}}}}}}}}},"u":{"docs":{},"m":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.00510204081632653}}}}}}}}}},":":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.007067137809187279}}}},",":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.00510204081632653}}},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},".":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},")":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.00510204081632653}}}}}}}}}}}}}}}}}}}}},"l":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"r":{"docs":{},"o":{"docs":{},"m":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012195121951219513},"Algorithms/DynamicProgramming-E.html":{"ref":"Algorithms/DynamicProgramming-E.html","tf":0.008333333333333333}}}}}}}}},"g":{"docs":{},"e":{"docs":{},"s":{"docs":{},".":{"docs":{"Algorithms/DynamicProgramming-E.html":{"ref":"Algorithms/DynamicProgramming-E.html","tf":0.002777777777777778}}}}}}},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011235955056179775}}}},"b":{"docs":{},"l":{"docs":{},"i":{"docs":{},"c":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.008064516129032258}}}}}}},":":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682}}},"i":{"docs":{},"v":{"docs":{},"o":{"docs":{},"t":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.009259259259259259}}}}}},"l":{"docs":{},"a":{"docs":{},"n":{"docs":{},"t":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.01060070671378092}},"e":{"docs":{},"d":{"docs":{},"[":{"docs":{},"i":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.007067137809187279}}},"n":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395}}}}}}}}}}},"r":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.03271028037383177},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.005988023952095809},"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.015873015873015872}},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},"a":{"docs":{},"b":{"docs":{},"l":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.020833333333333332}}}}}},"l":{"docs":{},"l":{"docs":{},"i":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282}}}}},"c":{"docs":{},"h":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.005747126436781609},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.004608294930875576}}}}},"m":{"docs":{},"e":{"docs":{},"m":{"docs":{},"b":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.020833333333333332}}}}},"o":{"docs":{},"v":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129},"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.018518518518518517}}}}},"t":{"docs":{},"u":{"docs":{},"r":{"docs":{},"n":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011235955056179775},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0625},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.04591836734693878},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.04205607476635514},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.041379310344827586},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.05555555555555555},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.02120141342756184},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.028735632183908046},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.049689440993788817},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.015873015873015872},"Algorithms/":{"ref":"Algorithms/","tf":0.024390243902439025},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.004608294930875576},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.03293413173652695},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.04032258064516129},"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.034482758620689655},"Algorithms/DynamicProgramming-E.html":{"ref":"Algorithms/DynamicProgramming-E.html","tf":0.05277777777777778},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.01098901098901099}},"(":{"docs":{},"l":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682}}}}}}}},"f":{"docs":{},"e":{"docs":{},"r":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653}},"e":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},":":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}}}}}}}}}},"l":{"docs":{},"a":{"docs":{},"t":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653}}}}},"q":{"docs":{},"u":{"docs":{},"i":{"docs":{},"r":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.004608294930875576},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129},"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.003134796238244514}}}}}},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125}},"s":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.018518518518518517},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.02247191011235955},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.014970059880239521},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.012096774193548387},"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.0109717868338558},"Algorithms/DynamicProgramming-E.html":{"ref":"Algorithms/DynamicProgramming-E.html","tf":0.008333333333333333}},"e":{"docs":{},"(":{"0":{"docs":{},",":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}}}},"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},")":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},")":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682}}}}}}}}},":":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682}}}}}}},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{},"r":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},",":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}}},":":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}}}}}}}}}}}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},":":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044},"Algorithms/DynamicProgramming-E.html":{"ref":"Algorithms/DynamicProgramming-E.html","tf":0.005555555555555556}}},")":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}}}}}}}},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011235955056179775},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682}},"/":{"docs":{},"u":{"docs":{},"p":{"docs":{},"d":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682}}}}}}}}},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.02631578947368421}}}}}},"p":{"docs":{},"e":{"docs":{},"a":{"docs":{},"t":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.07692307692307693},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.006211180124223602}}}},"t":{"docs":{},"i":{"docs":{},"t":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012195121951219513},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.004608294930875576}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},")":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}}},",":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}}}}}}}}}},"l":{"docs":{},"a":{"docs":{},"c":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.00510204081632653}}}}},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395}}}}}}}}},"s":{"docs":{},"u":{"docs":{},"l":{"docs":{},"t":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.015625},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.01020408163265306},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.009345794392523364},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.007067137809187279},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.006211180124223602}},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"p":{"docs":{},"a":{"docs":{},"t":{"docs":{},"h":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125}},")":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.00510204081632653}}}}}}},"k":{"docs":{},"e":{"docs":{},"y":{"docs":{},")":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682}}}}}}}}}}}}}},"[":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"]":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.007067137809187279}}}}}}}},",":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.006211180124223602}}}}}},"t":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}}}},"d":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395}},",":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395}}},"]":{"docs":{},")":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395}}}},"_":{"docs":{},"e":{"docs":{},"d":{"docs":{},"g":{"docs":{},"e":{"docs":{},"s":{"docs":{},":":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.007067137809187279}}}}}}}}},"u":{"docs":{},"c":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}}}}},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}}}}}}},"u":{"docs":{},"n":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.01020408163265306},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.004608294930875576}},"t":{"docs":{},"i":{"docs":{},"m":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.020833333333333332},"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}}}}}}},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.033707865168539325},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.00510204081632653},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.014018691588785047},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004629629629629629},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}},",":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.015306122448979591}}},":":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.00510204081632653}}},"_":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},",":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682}}}}},"i":{"docs":{},"n":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682}}}}}},"=":{"docs":{},"n":{"docs":{},"o":{"docs":{},"n":{"docs":{},"e":{"docs":{},")":{"docs":{},":":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004629629629629629}}}}}}}}},"m":{"docs":{},"o":{"docs":{},"s":{"docs":{},"t":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012195121951219513}},",":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012195121951219513}}}}}}}}}}},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.00510204081632653},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.013793103448275862}},":":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0234375},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.025510204081632654},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.02336448598130841},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.027586206896551724}}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.00510204081632653},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},",":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.00510204081632653}}},":":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682}}}}}}}}}},"m":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.005747126436781609},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.037037037037037035}},"s":{"docs":{},"/":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.005747126436781609}}},":":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.011494252873563218}}},"[":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"m":{"docs":{},"]":{"docs":{},":":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.005747126436781609}}}}}}}}}}}},"t":{"docs":{},"t":{"docs":{},"e":{"docs":{},"n":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.004608294930875576}}}}}},"b":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.003134796238244514}}}}}}}},"b":{"docs":{},"e":{"docs":{},"r":{"docs":{},"/":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}}}}}}},"w":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}},"[":{"docs":{},"i":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}},"]":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}}}}}}},")":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004629629629629629}},":":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.009259259259259259},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}}}},":":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004629629629629629},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}}},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{},"e":{"docs":{},"(":{"0":{"docs":{},",":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.014134275618374558},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.006211180124223602},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.013824884792626729},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044},"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.012539184952978056},"Algorithms/DynamicProgramming-E.html":{"ref":"Algorithms/DynamicProgramming-E.html","tf":0.005555555555555556}}}},"1":{"docs":{},",":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395},"Algorithms/DynamicProgramming-E.html":{"ref":"Algorithms/DynamicProgramming-E.html","tf":0.005555555555555556},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}},"2":{"docs":{},",":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}}}},"3":{"docs":{},",":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}}}},"docs":{},"l":{"docs":{},",":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004629629629629629}}}},"x":{"docs":{},")":{"docs":{},"]":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.004608294930875576}}}}},"m":{"docs":{},")":{"docs":{},")":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}}}},"n":{"docs":{},")":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}}}}}}}}},"s":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.006211180124223602}},"e":{"docs":{},"t":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.07692307692307693},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.007067137809187279},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.012096774193548387},"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.018518518518518517}},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.020833333333333332}}}}},"(":{"docs":{},")":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.011494252873563218},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.012422360248447204}},")":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}}},"[":{"1":{"docs":{},",":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.007067137809187279}}}},"docs":{},"r":{"docs":{},"e":{"docs":{},"d":{"docs":{},",":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395}}}}}}},"r":{"docs":{},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{},"e":{"docs":{},"(":{"0":{"docs":{},",":{"docs":{"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.015873015873015872}}}},"docs":{}}}}}}}},")":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}}},"a":{"docs":{},"r":{"docs":{},"c":{"docs":{},"h":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02},"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.009259259259259259},"Algorithms/":{"ref":"Algorithms/","tf":0.012195121951219513},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.013824884792626729},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":3.3413978494623655},"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}}}}}},"c":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},")":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.018518518518518517}}},"s":{"docs":{},".":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395}}}}}}}}},"e":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011235955056179775},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}},"n":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.007067137809187279},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.005747126436781609}},".":{"docs":{},"a":{"docs":{},"d":{"docs":{},"d":{"docs":{},"(":{"docs":{},"(":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},",":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395}}}}}}},"i":{"docs":{},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}}}}}}}},"d":{"docs":{},"i":{"docs":{},"s":{"docs":{},"c":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{},"(":{"docs":{},"(":{"docs":{},"i":{"docs":{},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}}}}}}}}}}}}},":":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}},")":{"docs":{},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}},":":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}}}}},"l":{"docs":{},"f":{"docs":{},".":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.015306122448979591}}}}}}}},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.014018691588785047}}}}}}}}}}},"t":{"docs":{},"o":{"docs":{},"t":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.015306122448979591}}}}},"l":{"docs":{},"c":{"docs":{},"a":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.014018691588785047}}}},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004629629629629629}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004629629629629629}},"i":{"docs":{},"d":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.014018691588785047}}}}}}},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"u":{"docs":{},"c":{"docs":{},"t":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"(":{"docs":{},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},"[":{"docs":{},":":{"docs":{},"m":{"docs":{},"i":{"docs":{},"d":{"docs":{},"]":{"docs":{},")":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004629629629629629}}}}}}}},"m":{"docs":{},"i":{"docs":{},"d":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004629629629629629}}}}}}}}}}}}}}}}}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004629629629629629}}}}}},"e":{"docs":{},"s":{"docs":{},"u":{"docs":{},"l":{"docs":{},"t":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.006211180124223602}}}}}},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{},"s":{"docs":{},"e":{"docs":{},"(":{"docs":{},"k":{"docs":{},",":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}}}}}}}}}}}},"a":{"docs":{},"c":{"docs":{},"c":{"docs":{},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}},"e":{"docs":{},"d":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.005988023952095809}}}}}}}}}}}}},"b":{"docs":{},"u":{"docs":{},"c":{"docs":{},"k":{"docs":{},"e":{"docs":{},"t":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"d":{"docs":{},"o":{"docs":{},"m":{"docs":{},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},")":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}}}}}}}}}}}}}}}}}}},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}}}}}}}}}}}}}},"n":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.014970059880239521}},")":{"docs":{},":":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.014970059880239521}}}}},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{},"m":{"docs":{},"_":{"docs":{},"r":{"docs":{},"e":{"docs":{},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{},"(":{"0":{"docs":{},",":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}}}},"docs":{},"k":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}}}}}}}}}},"u":{"docs":{},"t":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.011976047904191617}},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"'":{"docs":{},"'":{"docs":{},".":{"docs":{},"j":{"docs":{},"o":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},"b":{"docs":{},"u":{"docs":{},"c":{"docs":{},"k":{"docs":{},"e":{"docs":{},"t":{"docs":{},")":{"docs":{},")":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}}}}}}}}}}}}}}}}}},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},".":{"docs":{},"b":{"docs":{},"u":{"docs":{},"c":{"docs":{},"k":{"docs":{},"e":{"docs":{},"t":{"docs":{},"[":{"docs":{},":":{"docs":{},"]":{"docs":{},")":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"o":{"docs":{},"w":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.005988023952095809}},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},".":{"docs":{},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{},"[":{"docs":{},":":{"docs":{},"]":{"docs":{},")":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"o":{"docs":{},"l":{"docs":{},"u":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"_":{"docs":{},"s":{"docs":{},"e":{"docs":{},"a":{"docs":{},"r":{"docs":{},"c":{"docs":{},"h":{"docs":{},"(":{"0":{"docs":{},",":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}}}},"docs":{},"k":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.005988023952095809}}}}}}}}}},"f":{"docs":{},"u":{"docs":{},"n":{"docs":{},"c":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"(":{"docs":{},"c":{"docs":{},"a":{"docs":{},"s":{"docs":{},"e":{"docs":{},"_":{"docs":{},"o":{"docs":{},"n":{"docs":{},"e":{"docs":{},",":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}}}}}},"t":{"docs":{},"w":{"docs":{},"o":{"docs":{},",":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}}}}}}}}}}}}}}}}}}}}}}}}}}}},"u":{"docs":{},"b":{"docs":{},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"d":{"docs":{},"o":{"docs":{},"m":{"docs":{},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{},"[":{"docs":{},"k":{"docs":{},"]":{"docs":{},")":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}}}}}}}}}}}}}}}}}}},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}}}}}}}}}}}}}},"_":{"docs":{},"h":{"docs":{},"e":{"docs":{},"l":{"docs":{},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{},"c":{"docs":{},"o":{"docs":{},"p":{"docs":{},"y":{"docs":{},"p":{"docs":{},"a":{"docs":{},"s":{"docs":{},"t":{"docs":{},"e":{"docs":{},"(":{"docs":{},"n":{"docs":{},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.012096774193548387}}}}}}}}}}}}}}}}}}}}}}},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.017964071856287425},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.018518518518518517}},"e":{"docs":{},"d":{"docs":{},")":{"docs":{},":":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.006211180124223602}}}}}},".":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}}}}}},"l":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.03296703296703297}},"/":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}}}},"o":{"docs":{},"l":{"docs":{},"v":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.020833333333333332},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395},"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.007836990595611285},"Algorithms/DynamicProgramming-E.html":{"ref":"Algorithms/DynamicProgramming-E.html","tf":0.002777777777777778}}},"u":{"docs":{},"t":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011235955056179775},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.01060070671378092},"Algorithms/":{"ref":"Algorithms/","tf":0.012195121951219513},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.004608294930875576},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.012096774193548387},"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.012539184952978056},"Algorithms/DynamicProgramming-E.html":{"ref":"Algorithms/DynamicProgramming-E.html","tf":0.005555555555555556},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},":":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.015625},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.02040816326530612},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.018691588785046728},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.020689655172413793},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.013888888888888888},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.01060070671378092},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.017241379310344827},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.012422360248447204},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.015873015873015872},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.009216589861751152},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129},"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.01567398119122257},"Algorithms/DynamicProgramming-E.html":{"ref":"Algorithms/DynamicProgramming-E.html","tf":0.013888888888888888},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.030303030303030304}}},",":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011235955056179775}}},".":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011235955056179775},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}}},"s":{"docs":{},":":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.004608294930875576},"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}}},".":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}}}},"_":{"docs":{},"s":{"docs":{},"e":{"docs":{},"a":{"docs":{},"r":{"docs":{},"c":{"docs":{},"h":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}}}}}}}}}}}}}},"f":{"docs":{},"u":{"docs":{},"n":{"docs":{},"c":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}}}}}}}}}}}}}}}}},"g":{"docs":{},"e":{"docs":{},"n":{"docs":{},"e":{"docs":{},"r":{"docs":{},"a":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},":":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}}}}}}}}}}}},"(":{"docs":{},"o":{"docs":{},"b":{"docs":{},"j":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},")":{"docs":{},":":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}}}}}}}}}}}}}}},"r":{"docs":{},"t":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.04},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.018518518518518517},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.006211180124223602},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":5.015873015873016},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.037037037037037035},"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.015873015873015872}},"e":{"docs":{},"d":{"docs":{},"(":{"docs":{},"g":{"docs":{},"r":{"docs":{},"a":{"docs":{},"p":{"docs":{},"h":{"docs":{},"[":{"docs":{},"s":{"docs":{},"]":{"docs":{},")":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.006211180124223602}}}}}}}}}}},"x":{"docs":{},".":{"docs":{},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{},"m":{"docs":{},"s":{"docs":{},"(":{"docs":{},")":{"docs":{},",":{"docs":{"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.015873015873015872}}}}}}}}}}}}}}},":":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.030303030303030304}}}}},"m":{"docs":{},"e":{"docs":{},"t":{"docs":{},"i":{"docs":{},"m":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.00510204081632653},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682}}}},"h":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.018518518518518517}}}},"w":{"docs":{},"h":{"docs":{},"e":{"docs":{},"r":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.004608294930875576}}}}}}}}},"t":{"docs":{},"u":{"docs":{},"p":{"docs":{},"i":{"docs":{},"d":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.020833333333333332}}}}}},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{"DataStructures/":{"ref":"DataStructures/","tf":0.2},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.018518518518518517},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":5.076923076923077}}}}}}},"c":{"docs":{},"k":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.04},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.015625},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.004608294930875576}},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{},"r":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},")":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125}}}}}}}}}}}}}}}}},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125}}}}}}}}}},"r":{"docs":{},"t":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.013888888888888888},"Algorithms/":{"ref":"Algorithms/","tf":0.012195121951219513},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.004608294930875576},"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}},")":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004629629629629629},"Algorithms/":{"ref":"Algorithms/","tf":0.012195121951219513}}},",":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395}}},":":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012195121951219513}}}}},"i":{"docs":{},"r":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.003134796238244514}},"s":{"docs":{},":":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}}}}}}},"r":{"docs":{},"u":{"docs":{},"c":{"docs":{},"t":{"docs":{},"u":{"docs":{},"r":{"docs":{"DataStructures/":{"ref":"DataStructures/","tf":5.2},"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}},"e":{"docs":{},":":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282}}}}}}}}},"i":{"docs":{},"c":{"docs":{},"t":{"docs":{},"l":{"docs":{},"i":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653}}}}}},"n":{"docs":{},"g":{"docs":{"DataStructures/Strings/":{"ref":"DataStructures/Strings/","tf":11},"Algorithms/":{"ref":"Algorithms/","tf":0.012195121951219513},"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.015873015873015872}}}}},"(":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},".":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},")":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.015625}},")":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125}}}}}}}}}}}}},")":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.004608294930875576},"Algorithms/DynamicProgramming-E.html":{"ref":"Algorithms/DynamicProgramming-E.html","tf":0.013888888888888888}}},",":{"docs":{"Algorithms/DynamicProgramming-E.html":{"ref":"Algorithms/DynamicProgramming-E.html","tf":0.008333333333333333}}}},"e":{"docs":{},"p":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.004608294930875576},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.005988023952095809},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.008064516129032258},"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257},"Algorithms/DynamicProgramming-E.html":{"ref":"Algorithms/DynamicProgramming-E.html","tf":0.005555555555555556}},"s":{"docs":{},",":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.009216589861751152}}}},",":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}}}}},"o":{"docs":{},"r":{"docs":{},"e":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.015306122448979591},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.012422360248447204}}}},"c":{"docs":{},"k":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012195121951219513},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":10.027472527472527}},",":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}},".":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.01098901098901099}}}}}}},"i":{"docs":{},"m":{"docs":{},"i":{"docs":{},"l":{"docs":{},"a":{"docs":{},"r":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.005988023952095809},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129},"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.009404388714733543},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.01098901098901099}}}}}},"p":{"docs":{},"l":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.018518518518518517}}}}},"z":{"docs":{},"e":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.030612244897959183},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.027586206896551724},"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}},":":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.013793103448275862}}}}},"t":{"docs":{},"u":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},",":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011235955056179775}}}}}}}}}}}},"u":{"docs":{},"b":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653}},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},"a":{"docs":{},"y":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":10.071428571428571}},"/":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653}}},"s":{"docs":{},",":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653}}},":":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.01020408163265306}}}},".":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}}}}}}}},"s":{"docs":{},"e":{"docs":{},"q":{"docs":{},"u":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653},"Algorithms/DynamicProgramming-E.html":{"ref":"Algorithms/DynamicProgramming-E.html","tf":0.008333333333333333}},"e":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},".":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653}}}},"/":{"docs":{"Algorithms/DynamicProgramming-E.html":{"ref":"Algorithms/DynamicProgramming-E.html","tf":0.008333333333333333}}}}}}}}},"t":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":10.018518518518519},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044},"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}},"s":{"docs":{},":":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}}}}}},"t":{"docs":{},"r":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.07692307692307693}},"u":{"docs":{},"c":{"docs":{},"t":{"docs":{},"u":{"docs":{},"r":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}}}}}}}},"i":{"docs":{},"t":{"docs":{},"u":{"docs":{},"t":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.005747126436781609}}}}}}}},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.014018691588785047}},"e":{"docs":{},".":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682}}}}}}},"p":{"docs":{},"r":{"docs":{},"o":{"docs":{},"b":{"docs":{},"l":{"docs":{},"e":{"docs":{},"m":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.003134796238244514}}}}}}}}}},"m":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.015306122448979591},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.05555555555555555},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.00510204081632653},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.009345794392523364},"Algorithms/":{"ref":"Algorithms/","tf":0.012195121951219513},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.008064516129032258},"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.006269592476489028}},"/":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.006896551724137931}},"d":{"docs":{},"i":{"docs":{},"s":{"docs":{},"c":{"docs":{},"u":{"docs":{},"s":{"docs":{},"s":{"docs":{},"/":{"1":{"6":{"5":{"1":{"0":{"docs":{},"/":{"docs":{},"p":{"docs":{},"y":{"docs":{},"t":{"docs":{},"h":{"docs":{},"o":{"docs":{},"n":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}}}}}}}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}},",":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129},"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.003134796238244514}}},"o":{"docs":{},"f":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},"l":{"docs":{},"e":{"docs":{},"a":{"docs":{},"v":{"docs":{},"e":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125}}}}}}}}}}}}}}}}}}}},":":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.00510204081632653},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"b":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.00510204081632653}}}}}}}}}}}}}}},"s":{"docs":{},".":{"docs":{},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{},"m":{"docs":{},"s":{"docs":{},"(":{"docs":{},")":{"docs":{},":":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682}}}}}}}}}}},"[":{"docs":{},"l":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.009345794392523364}}}}}},"r":{"docs":{},"e":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011235955056179775},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.02631578947368421}}}}},"l":{"docs":{},"o":{"docs":{},"w":{"docs":{},"e":{"docs":{},"r":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.004608294930875576}}}}}},"i":{"docs":{},"d":{"docs":{},"e":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.01020408163265306},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.07692307692307693}}}}}},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"s":{"docs":{},"f":{"docs":{},"i":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125},"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}}}}}}},"m":{"docs":{},"e":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}}},"w":{"docs":{},"a":{"docs":{},"p":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653}}}}},",":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.007067137809187279}}},"h":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"l":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"n":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"p":{"docs":{},"a":{"docs":{},"t":{"docs":{},"h":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395}}}}}}}}}}}}}}}}}}}}}}}},"p":{"docs":{},"a":{"docs":{},"t":{"docs":{},"h":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.004608294930875576}}}}}}}}}}}}}}}}}},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}}}}},"a":{"docs":{},"r":{"docs":{},"e":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.016483516483516484}}}}}},"c":{"docs":{},"h":{"docs":{},"e":{"docs":{},"d":{"docs":{},"u":{"docs":{},"l":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.006211180124223602},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.015873015873015872},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.018518518518518517}},"e":{"docs":{},"/":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.006211180124223602}}}}}}}}},"e":{"docs":{},"n":{"docs":{},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{},"o":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}}}}}}}}},"m":{"docs":{},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}},"e":{"docs":{},"r":{"docs":{},",":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012195121951219513}}}},"s":{"docs":{},"t":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012195121951219513},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.030303030303030304}}}}}}}}},":":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044},"Algorithms/DynamicProgramming-E.html":{"ref":"Algorithms/DynamicProgramming-E.html","tf":0.005555555555555556}}},"q":{"docs":{},"u":{"docs":{},"a":{"docs":{},"r":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.003134796238244514},"Algorithms/DynamicProgramming-E.html":{"ref":"Algorithms/DynamicProgramming-E.html","tf":0.002777777777777778}},"e":{"docs":{},"s":{"docs":{},",":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}}}}}}}}},"[":{"docs":{},"m":{"docs":{},"]":{"docs":{"Algorithms/DynamicProgramming-E.html":{"ref":"Algorithms/DynamicProgramming-E.html","tf":0.005555555555555556}}}},"n":{"docs":{},"]":{"docs":{},":":{"docs":{"Algorithms/DynamicProgramming-E.html":{"ref":"Algorithms/DynamicProgramming-E.html","tf":0.005555555555555556}}}}}},"p":{"docs":{},"e":{"docs":{},"c":{"docs":{},"i":{"docs":{},"f":{"docs":{},"i":{"docs":{},"c":{"docs":{},"s":{"docs":{},",":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.02631578947368421}}}}}}}}}}}},"u":{"docs":{},"s":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.0625},"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.015625},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.011494252873563218},"Algorithms/":{"ref":"Algorithms/","tf":0.012195121951219513},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.013824884792626729},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.005988023952095809},"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.006269592476489028},"Algorithms/DynamicProgramming-E.html":{"ref":"Algorithms/DynamicProgramming-E.html","tf":0.002777777777777778},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.01098901098901099},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.030303030303030304}},"e":{"docs":{},"f":{"docs":{},"u":{"docs":{},"l":{"docs":{},":":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.004608294930875576}}}}}}},"u":{"docs":{},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{},"y":{"docs":{},",":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}}}}}}}}},"n":{"docs":{},"l":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653}}}}}},"n":{"docs":{},"e":{"docs":{},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125}}}}}}}}}}},"t":{"docs":{},"i":{"docs":{},"l":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125}}}}},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004629629629629629},"Algorithms/":{"ref":"Algorithms/","tf":0.012195121951219513},"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}}}}}}}}}},"v":{"docs":{},"i":{"docs":{},"s":{"docs":{},"i":{"docs":{},"t":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.006211180124223602}}}}}}},"i":{"docs":{},"q":{"docs":{},"u":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.003134796238244514}},"e":{"docs":{},"p":{"docs":{},"a":{"docs":{},"t":{"docs":{},"h":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.003134796238244514}}}}}}}}}}}}}}}}}},"p":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.02247191011235955},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.004608294930875576},"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.02631578947368421}},"d":{"docs":{},"a":{"docs":{},"t":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011235955056179775},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}}}},",":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.005747126436781609}}},"_":{"docs":{},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.015873015873015872}},".":{"docs":{},"r":{"docs":{},"e":{"docs":{},"m":{"docs":{},"o":{"docs":{},"v":{"docs":{},"e":{"docs":{},"(":{"docs":{},"p":{"docs":{},")":{"docs":{"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.015873015873015872}}}}}}}}}}}},":":{"docs":{"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.031746031746031744}}}}}}}},"v":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.017241379310344827},"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.031746031746031744}},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{},"a":{"docs":{},"b":{"docs":{},"l":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.020833333333333332},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}},"t":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.030303030303030304}}}}}},"l":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004629629629629629}},"u":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.02040816326530612},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.00510204081632653},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.014018691588785047},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.006896551724137931},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044},"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257},"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.015873015873015872}},"e":{"docs":{},".":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011235955056179775},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682}}},":":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682}}},"s":{"docs":{},",":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}}}}}},"=":{"0":{"docs":{},",":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004629629629629629}}}},"docs":{}}},"g":{"docs":{},"u":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.02631578947368421}}}}},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{},"i":{"docs":{},"c":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011235955056179775},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395}}}}}}},",":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.011494252873563218}}},"i":{"docs":{},"s":{"docs":{},"i":{"docs":{},"t":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.011494252873563218},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.043478260869565216},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.02304147465437788},"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}},"e":{"docs":{},"d":{"docs":{},"[":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"]":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.01060070671378092},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.005747126436781609}},":":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395}}}}}}}},"s":{"docs":{},"]":{"docs":{},":":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395}}}}},"x":{"docs":{},"]":{"docs":{},"[":{"docs":{},"y":{"docs":{},"]":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.003134796238244514}},"[":{"1":{"docs":{},"]":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.004608294930875576}}}},"docs":{}},":":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}}}}}}}}},".":{"docs":{},"a":{"docs":{},"d":{"docs":{},"d":{"docs":{},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"m":{"docs":{},")":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.005747126436781609}}}}}}},"i":{"docs":{},")":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.006211180124223602}}}}}}}},"r":{"docs":{},"e":{"docs":{},"m":{"docs":{},"o":{"docs":{},"v":{"docs":{},"e":{"docs":{},"(":{"docs":{},"i":{"docs":{},")":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.006211180124223602}}}}}}}}}}}},":":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.017241379310344827},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.006211180124223602}}}}}}},"u":{"docs":{},"a":{"docs":{},"l":{"docs":{"Algorithms/DynamicProgramming-E.html":{"ref":"Algorithms/DynamicProgramming-E.html","tf":0.002777777777777778}}}}}}},")":{"docs":{},")":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.005747126436781609}}}}},"w":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.011494252873563218}},"r":{"docs":{},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{"GeneralInstructions.html":{"ref":"GeneralInstructions.html","tf":0.020833333333333332}}}}}},"e":{"docs":{},"a":{"docs":{},"p":{"docs":{},"o":{"docs":{},"n":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02}}}}}},"e":{"docs":{},"k":{"docs":{},"l":{"docs":{},"i":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012195121951219513}}}}}},"l":{"docs":{},"l":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.004608294930875576}}}},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.003134796238244514}},"s":{"docs":{},",":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}}}}}}}}},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"/":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282}}}}}},"y":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.018518518518518517},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.005747126436781609},"Algorithms/DynamicProgramming-E.html":{"ref":"Algorithms/DynamicProgramming-E.html","tf":0.002777777777777778}}},"n":{"docs":{},"t":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.02247191011235955},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.00510204081632653},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395},"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.003134796238244514},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}}},"h":{"docs":{},"o":{"docs":{},"l":{"docs":{},"e":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.018518518518518517}}}}}},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"o":{"docs":{},"w":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.01020408163265306},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.07692307692307693},"Algorithms/":{"ref":"Algorithms/","tf":0.012195121951219513}}}}}},"t":{"docs":{},"h":{"docs":{},"o":{"docs":{},"u":{"docs":{},"t":{"docs":{"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.07692307692307693},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}}}}},"s":{"docs":{},"e":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":3.333333333333333}}}}},")":{"docs":{},")":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.005747126436781609}}}},",":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.005747126436781609}}},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.004608294930875576},"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257},"Algorithms/DynamicProgramming-E.html":{"ref":"Algorithms/DynamicProgramming-E.html","tf":0.002777777777777778}},":":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.004608294930875576}}}},"k":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.004608294930875576},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.02631578947368421}},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"/":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.030303030303030304}}}}}}}}}},"&":{"docs":{"DataStructures/":{"ref":"DataStructures/","tf":0.2}}},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{"DataStructures/":{"ref":"DataStructures/","tf":0.2},"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.018518518518518517},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":5.076923076923077},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011235955056179775},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004629629629629629},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.006211180124223602},"Algorithms/":{"ref":"Algorithms/","tf":0.024390243902439025},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.004608294930875576},"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257},"Algorithms/DynamicProgramming-E.html":{"ref":"Algorithms/DynamicProgramming-E.html","tf":0.002777777777777778},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.018518518518518517},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":5.052631578947368}},"s":{"docs":{},"*":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012195121951219513}}},":":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012195121951219513},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.004608294930875576},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}}},",":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.004608294930875576}}}}}}}}},"u":{"docs":{},"e":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.018518518518518517},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.020689655172413793},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.007067137809187279},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.017241379310344827},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.015873015873015872},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.013824884792626729},"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.06060606060606061}},".":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011235955056179775}},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"0":{"docs":{},")":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.005747126436781609}}}},"docs":{},"(":{"0":{"docs":{},",":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.007067137809187279}}}},"docs":{},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{},"r":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},",":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.006896551724137931}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},",":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.006896551724137931}}}}}}}}}}}}}}}},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},",":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.006896551724137931}}}}}}},"i":{"docs":{},",":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395}}}},"v":{"docs":{},",":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.007067137809187279}}}}},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{},"r":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},")":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.006896551724137931}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},")":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.006896551724137931}}}}}}}}}}}}}}}},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},")":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.006896551724137931}}}}}}},"v":{"docs":{},")":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.005747126436781609}}}},"n":{"docs":{},"e":{"docs":{},"i":{"docs":{},")":{"docs":{"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.015873015873015872}}}}},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},")":{"docs":{"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.015873015873015872}}}}}}}}}}}}}},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.013793103448275862},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.007067137809187279},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.005747126436781609},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.015873015873015872},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.004608294930875576}}}}}}}}}}}},":":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.013793103448275862},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.007067137809187279},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.005747126436781609},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.015873015873015872},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.004608294930875576}}},")":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.005747126436781609}}}}}},"a":{"docs":{},"n":{"docs":{},"t":{"docs":{},"i":{"docs":{},"t":{"docs":{},"i":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653}}}}}}}},"i":{"docs":{},"c":{"docs":{},"k":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.005747126436781609}}}}},"s":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.030303030303030304}}}}}}}}}},".":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"]":{"docs":{},")":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682}},")":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682}}}}}}}}},":":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682}}}},"'":{"docs":{},"q":{"docs":{},"u":{"docs":{},"i":{"docs":{},"r":{"docs":{},"k":{"docs":{},"y":{"docs":{},"'":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02}}}}}}}}},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"'":{"docs":{},")":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682}}},",":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.009345794392523364}}},":":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682}}}}}}}}}}}},"v":{"docs":{},"i":{"docs":{},"s":{"docs":{},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{},"d":{"docs":{},"'":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.008064516129032258}}}}}}}}}},"p":{"docs":{},"i":{"docs":{},"v":{"docs":{},"o":{"docs":{},"t":{"docs":{},"'":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}}}}}}}}},"(":{"1":{"docs":{},")":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02}}}},"docs":{},"n":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653},"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}},"o":{"docs":{},"t":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.00510204081632653}}},"d":{"docs":{},"e":{"docs":{},".":{"docs":{},"v":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.009345794392523364}}}},",":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395}}}}}},"c":{"docs":{},"r":{"docs":{},")":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}}}}}},"d":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653}},"j":{"docs":{},"i":{"docs":{},"k":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"a":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.005747126436781609}}}}}}}}}},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004629629629629629},"Algorithms/":{"ref":"Algorithms/","tf":0.012195121951219513}},"_":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653}}}}}}}}}}},"i":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.012096774193548387}},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}},"n":{"docs":{},"t":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}}}},"s":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{},"e":{"docs":{},"d":{"docs":{},")":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653}}}}}}}},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},"_":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653}}}}}}}}}}}},"u":{"docs":{},"m":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.00510204081632653}}}}},"c":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395}},"h":{"docs":{},"e":{"docs":{},"c":{"docs":{},"k":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.018518518518518517}}}}}},"o":{"docs":{},"l":{"docs":{},"l":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},".":{"docs":{},"d":{"docs":{},"e":{"docs":{},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},")":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011235955056179775}}}}}}}}}}}}}}}}}}},"u":{"docs":{},"r":{"docs":{},"r":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.00510204081632653}}}}}}}}},"l":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682}},"e":{"docs":{},"v":{"docs":{},"e":{"docs":{},"l":{"docs":{},"w":{"docs":{},"i":{"docs":{},"s":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011235955056179775}}}}}}}},"f":{"docs":{},"t":{"docs":{},"_":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682}}}}}}}},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}}}}}}},"n":{"docs":{},"(":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{},"e":{"docs":{},"s":{"docs":{},")":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}}}}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{},"s":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.033707865168539325}}}}}}},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},"_":{"docs":{},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682}}}}}}}}}}},"f":{"docs":{},"l":{"docs":{},"o":{"docs":{},"a":{"docs":{},"t":{"docs":{},"(":{"docs":{},"'":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682}}}}}}}}},"x":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.005747126436781609},"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}},"_":{"docs":{},"f":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"d":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.027586206896551724}}}}}}}}},"y":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}},"_":{"docs":{},"f":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"d":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.006896551724137931}}}}}}}},"o":{"docs":{},"u":{"docs":{},"'":{"docs":{},"l":{"docs":{},"l":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.004608294930875576}}}}}}}},"u":{"docs":{},"s":{"docs":{},"e":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}}}},"t":{"docs":{},"i":{"docs":{},"m":{"docs":{},"e":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.005747126436781609}}}}},"o":{"docs":{},"p":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}}},"t":{"docs":{},"a":{"docs":{},"l":{"docs":{},"_":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}}}}}}}}}}},"=":{"docs":{},"=":{"docs":{},"r":{"docs":{},")":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}}}}}},"k":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}}},"w":{"docs":{},"i":{"docs":{},"t":{"docs":{},"h":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}}}}}},"(":{"docs":{},"i":{"docs":{},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}}}},"p":{"docs":{},"o":{"docs":{},"s":{"docs":{},"i":{"docs":{},"t":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}}}}},"r":{"docs":{},"i":{"docs":{},"o":{"docs":{},"r":{"docs":{},"i":{"docs":{},"t":{"docs":{},"y":{"docs":{},",":{"docs":{"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.015873015873015872}}}}}}}}}}},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"i":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}}}}},"b":{"docs":{},"a":{"docs":{},"g":{"docs":{},"_":{"docs":{},"w":{"docs":{},"e":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}}}}}}}}}}},"o":{"docs":{},"t":{"docs":{},"t":{"docs":{},"o":{"docs":{},"m":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}}}}}}}},"m":{"docs":{},",":{"docs":{"Algorithms/DynamicProgramming-E.html":{"ref":"Algorithms/DynamicProgramming-E.html","tf":0.005555555555555556}}}}},"+":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.04},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.015306122448979591},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011235955056179775},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0390625},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.04591836734693878},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.037383177570093455},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.027777777777777776},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.007067137809187279},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.011494252873563218},"Algorithms/":{"ref":"Algorithms/","tf":0.012195121951219513},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.020958083832335328},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.036290322580645164},"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.023510971786833857},"Algorithms/DynamicProgramming-E.html":{"ref":"Algorithms/DynamicProgramming-E.html","tf":0.041666666666666664},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.02197802197802198},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.018518518518518517}},"=":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.00510204081632653},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.006896551724137931},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.012422360248447204},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}}},":":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.005988023952095809},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}},"e":{"docs":{},"l":{"docs":{},"e":{"docs":{},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.02},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.015306122448979591},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.005988023952095809},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.01098901098901099},"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.015873015873015872}},"/":{"docs":{"DataStructures/Arrays/":{"ref":"DataStructures/Arrays/","tf":0.04},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653}}},":":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}}},",":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.018518518518518517}}},"s":{"docs":{},"/":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}}}}}}},"i":{"docs":{},"f":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.00510204081632653}},"(":{"docs":{},"w":{"docs":{},"e":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}}}}}}}}}},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"/":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.004608294930875576}}}}}}}}}}}},"s":{"docs":{},"e":{"docs":{},":":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.00510204081632653},"Algorithms/DynamicProgramming-E.html":{"ref":"Algorithms/DynamicProgramming-E.html","tf":0.011111111111111112}}}}}},"a":{"docs":{},"s":{"docs":{},"i":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004629629629629629}},"e":{"docs":{},"r":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682}}}}}},"c":{"docs":{},"h":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.01020408163265306},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.018518518518518517},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129},"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.003134796238244514}}}}},"f":{"docs":{},"f":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282}}}}},"i":{"docs":{},"c":{"docs":{},"i":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}}}}}}},"n":{"docs":{},"d":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004629629629629629},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395},"Algorithms/":{"ref":"Algorithms/","tf":0.012195121951219513},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.009216589861751152},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.01098901098901099},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.018518518518518517}},")":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.009259259259259259}},"]":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.006211180124223602}}},":":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012195121951219513}}}},",":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.009259259259259259},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.006211180124223602},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}},":":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.009259259259259259}}}},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011235955056179775}}}}}}}},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"y":{"docs":{},"t":{"docs":{},"i":{"docs":{},"m":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653}}}}},"w":{"docs":{},"h":{"docs":{},"e":{"docs":{},"r":{"docs":{},"e":{"docs":{},",":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.004608294930875576}}}}}}}}}},"n":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.005747126436781609}}}}},"x":{"docs":{},"c":{"docs":{},"l":{"docs":{},"u":{"docs":{},"d":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653}},"e":{"docs":{},")":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}}}}}}},"e":{"docs":{},"e":{"docs":{},"d":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.004608294930875576}}}},"l":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.004608294930875576}}},"p":{"docs":{},"t":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}}}}}},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.00510204081632653},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682}},"s":{"docs":{},",":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395}}},":":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}}},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.004608294930875576}}}}}}}}}},"t":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.006211180124223602}}}},"p":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395}},"e":{"docs":{},"d":{"docs":{},")":{"docs":{},":":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395}}}},",":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395}}}}}}},"r":{"docs":{},"i":{"docs":{},"e":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},",":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.02631578947368421}}},".":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.02631578947368421}}}}}}}}}},"l":{"docs":{},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"\"":{"docs":{"Algorithms/DynamicProgramming-E.html":{"ref":"Algorithms/DynamicProgramming-E.html","tf":0.002777777777777778}}},":":{"docs":{"Algorithms/DynamicProgramming-E.html":{"ref":"Algorithms/DynamicProgramming-E.html","tf":0.005555555555555556}}}}}}}}}}}}},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"m":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.005747126436781609},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.004608294930875576}}}}}},"h":{"docs":{},"a":{"docs":{},"u":{"docs":{},"s":{"docs":{},"t":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.004608294930875576},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}}}}}},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.004702194357366771}}}},"m":{"docs":{},"p":{"docs":{},"l":{"docs":{},"e":{"docs":{},"s":{"docs":{},":":{"docs":{"Algorithms/DynamicProgramming-E.html":{"ref":"Algorithms/DynamicProgramming-E.html","tf":3.333333333333333}}}}}}}}}},".":{"docs":{},"g":{"docs":{},".":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682}}}}},"d":{"docs":{},"g":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.024844720496894408}},"e":{"docs":{},"s":{"docs":{},"[":{"docs":{},"(":{"docs":{},"n":{"docs":{},"o":{"docs":{},"n":{"docs":{},"e":{"docs":{},",":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.006211180124223602}}}}}}},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},",":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.006211180124223602}}}}}}}}},"d":{"docs":{},",":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.006211180124223602}}}}}}}}},"g":{"docs":{},".":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.006211180124223602},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.009216589861751152},"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.004702194357366771}}}},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{},"i":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.004608294930875576},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}}}}},"r":{"docs":{},"r":{"docs":{},"o":{"docs":{},"r":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.004608294930875576}}}}}},"q":{"docs":{},"u":{"docs":{},"a":{"docs":{},"t":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}}}}}},"t":{"docs":{},"c":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}}}},"s":{"docs":{},"s":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"i":{"docs":{"Algorithms/DynamicProgramming-E.html":{"ref":"Algorithms/DynamicProgramming-E.html","tf":0.002777777777777778}}}}}}}}},"=":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.0641025641025641},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.018518518518518517},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0546875},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.030612244897959183},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.06074766355140187},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.1103448275862069},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.08333333333333333},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.07420494699646643},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.06896551724137931},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.043478260869565216},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.09523809523809523},"Algorithms/":{"ref":"Algorithms/","tf":0.012195121951219513},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.059907834101382486},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.041916167664670656},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.028225806451612902},"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.045454545454545456},"Algorithms/DynamicProgramming-E.html":{"ref":"Algorithms/DynamicProgramming-E.html","tf":0.041666666666666664},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.03296703296703297},"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.06349206349206349}},"=":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.015306122448979591},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.009345794392523364},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.020689655172413793},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.007067137809187279},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.011494252873563218},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.015873015873015872},"Algorithms/":{"ref":"Algorithms/","tf":0.012195121951219513},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.004608294930875576},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.020958083832335328},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.012096774193548387},"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.02821316614420063},"Algorithms/DynamicProgramming-E.html":{"ref":"Algorithms/DynamicProgramming-E.html","tf":0.025},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}},">":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282},"DataStructures/Strings/StandardQuestions.html":{"ref":"DataStructures/Strings/StandardQuestions.html","tf":0.15384615384615385},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.015625},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.015306122448979591},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.018691588785046728},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.013793103448275862},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.041666666666666664},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.014134275618374558},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.022988505747126436},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.024844720496894408},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.015873015873015872},"Algorithms/":{"ref":"Algorithms/","tf":0.012195121951219513},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.013824884792626729},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.03293413173652695},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.020161290322580645},"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.01567398119122257},"Algorithms/DynamicProgramming-E.html":{"ref":"Algorithms/DynamicProgramming-E.html","tf":0.019444444444444445}},"=":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004629629629629629},"Algorithms/":{"ref":"Algorithms/","tf":0.012195121951219513},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.004608294930875576},"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}}},"\"":{"docs":{},")":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.015625}}}}},"t":{"docs":{},"e":{"docs":{},"c":{"docs":{},"h":{"docs":{},"n":{"docs":{},"i":{"docs":{},"q":{"docs":{},"u":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.02564102564102564},"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}}}}}}}},"x":{"docs":{},"t":{"1":{"docs":{},":":{"docs":{"Algorithms/DynamicProgramming-E.html":{"ref":"Algorithms/DynamicProgramming-E.html","tf":0.008333333333333333}}},"[":{"docs":{},"i":{"docs":{"Algorithms/DynamicProgramming-E.html":{"ref":"Algorithms/DynamicProgramming-E.html","tf":0.002777777777777778}}},"m":{"docs":{"Algorithms/DynamicProgramming-E.html":{"ref":"Algorithms/DynamicProgramming-E.html","tf":0.005555555555555556}}}}},"2":{"docs":{},":":{"docs":{"Algorithms/DynamicProgramming-E.html":{"ref":"Algorithms/DynamicProgramming-E.html","tf":0.008333333333333333}}},"[":{"docs":{},"n":{"docs":{"Algorithms/DynamicProgramming-E.html":{"ref":"Algorithms/DynamicProgramming-E.html","tf":0.005555555555555556}}},"x":{"docs":{"Algorithms/DynamicProgramming-E.html":{"ref":"Algorithms/DynamicProgramming-E.html","tf":0.002777777777777778}}}}},"docs":{}}},"m":{"docs":{},"p":{"docs":{},"o":{"docs":{},"r":{"docs":{},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}}}}},"l":{"docs":{},"a":{"docs":{},"t":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.037037037037037035}}}}}}},"a":{"docs":{},"m":{"docs":{},"/":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.030303030303030304}},"d":{"docs":{},"i":{"docs":{},"s":{"docs":{},"c":{"docs":{},"u":{"docs":{},"s":{"docs":{},"s":{"docs":{},"/":{"5":{"3":{"9":{"7":{"9":{"7":{"docs":{},"/":{"docs":{},"c":{"docs":{},"%":{"2":{"docs":{},"b":{"docs":{},"%":{"2":{"docs":{},"b":{"docs":{},"p":{"docs":{},"y":{"docs":{},"t":{"docs":{},"h":{"docs":{},"o":{"docs":{},"n":{"docs":{"Miscellaneous/InterestingMiscellaneous.html":{"ref":"Miscellaneous/InterestingMiscellaneous.html","tf":0.030303030303030304}}}}}}}}}},"docs":{}}}},"docs":{}}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}}}},"l":{"docs":{},"l":{"docs":{"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.02631578947368421}}}}},"w":{"docs":{},"o":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":5.0256410256410255},"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.015306122448979591},"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.018518518518518517},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044},"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.02631578947368421}}},"i":{"docs":{},"c":{"docs":{},"e":{"docs":{},"/":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}}}}},"y":{"docs":{},"p":{"docs":{},"i":{"docs":{},"c":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.01282051282051282}}}},"e":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.006211180124223602},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.004608294930875576},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}}}},"h":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.016483516483516484}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653}}}},"s":{"docs":{},":":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.018518518518518517},"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}}}}},"e":{"docs":{},"s":{"docs":{},"e":{"docs":{},",":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395}}}}},"r":{"docs":{},"e":{"docs":{},"'":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.006211180124223602},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.004608294930875576}}}}},"o":{"docs":{},"r":{"docs":{},"y":{"docs":{},":":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":3.333333333333333}}}}}}},"r":{"docs":{},"o":{"docs":{},"u":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.015873015873015872}}}}}}}}},"i":{"docs":{},"l":{"docs":{},"l":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.01098901098901099}}}},"p":{"docs":{},"s":{"docs":{},":":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395}}}}},"m":{"docs":{},"e":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.005747126436781609},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.006211180124223602},"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.003134796238244514},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.01098901098901099},"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.018518518518518517},"BehavioralQuestions.html":{"ref":"BehavioralQuestions.html","tf":0.05263157894736842}},")":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.005747126436781609}}},",":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.005747126436781609}}},"/":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.005747126436781609}}},"s":{"docs":{},":":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.011494252873563218}}},",":{"docs":{"Miscellaneous/Intervals.html":{"ref":"Miscellaneous/Intervals.html","tf":0.018518518518518517}}}}}},"c":{"docs":{},"k":{"docs":{},"e":{"docs":{},"t":{"docs":{},"s":{"docs":{},":":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.018633540372670808}}}}}}}}},"r":{"docs":{},"a":{"docs":{},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653},"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.011235955056179775},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":5.015625},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":5.005102040816326},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":5.0046728971962615},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":3.3402298850574708},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395},"Algorithms/":{"ref":"Algorithms/","tf":0.012195121951219513}},"e":{"docs":{},"(":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},",":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.01020408163265306}}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},",":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.02040816326530612}}},")":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.009345794392523364}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},",":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.02040816326530612}}},")":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.009345794392523364}}}}}}}}},")":{"docs":{},":":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.009345794392523364}}}}}}}},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},",":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.01020408163265306}}},")":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.009345794392523364}}}}}}}}},"a":{"docs":{},"l":{"docs":{},"/":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.00510204081632653},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004629629629629629}}}}}}}}},"c":{"docs":{},"k":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044},"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495},"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.015873015873015872}}}},"n":{"docs":{},"s":{"docs":{},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.04945054945054945}}}}},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"m":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}}}},"i":{"docs":{},"t":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}}}}},"e":{"docs":{},"e":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":10.0561797752809},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.00510204081632653},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":5.018518518518518},"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257},"Algorithms/DynamicProgramming-E.html":{"ref":"Algorithms/DynamicProgramming-E.html","tf":0.002777777777777778}},",":{"docs":{"DataStructures/Trees/":{"ref":"DataStructures/Trees/","tf":0.02247191011235955},"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125}}},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},")":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.015625},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.01020408163265306},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.014018691588785047},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.006896551724137931}}},",":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.00510204081632653},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.006896551724137931}}},"(":{"docs":{},")":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004629629629629629}}},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},"[":{"docs":{},"m":{"docs":{},"i":{"docs":{},"d":{"docs":{},"]":{"docs":{},")":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004629629629629629}}}}}}}}}}},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},"[":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},"]":{"docs":{},")":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004629629629629629}}}}}}}}}}}}}}}}}}},":":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.023148148148148147}}}}}}},".":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.01020408163265306},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682}}},"/":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.009345794392523364},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.006896551724137931},"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004629629629629629}},"d":{"docs":{},"i":{"docs":{},"s":{"docs":{},"c":{"docs":{},"u":{"docs":{},"s":{"docs":{},"s":{"docs":{},"/":{"5":{"4":{"0":{"0":{"3":{"8":{"docs":{},"/":{"docs":{},"p":{"docs":{},"y":{"docs":{},"t":{"docs":{},"h":{"docs":{},"o":{"docs":{},"n":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004629629629629629}}}}}}}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}}}},"u":{"docs":{},"e":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.004672897196261682},"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.006896551724137931},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.007067137809187279},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.011494252873563218},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.024844720496894408},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.004608294930875576},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044},"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.006269592476489028}},";":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}}}},"i":{"docs":{},"c":{"docs":{},"k":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257},"PythonicTricks/":{"ref":"PythonicTricks/","tf":5.015873015873016}}}}}},"a":{"docs":{},"k":{"docs":{},"e":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.018518518518518517},"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.003134796238244514}},"n":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}}}},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.008064516129032258}}}}}},"b":{"docs":{},"l":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.004702194357366771}},"e":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"[":{"docs":{},"w":{"docs":{},"e":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},"]":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}}}}}}}}}}}}}}}}},"o":{"docs":{},"t":{"docs":{},"a":{"docs":{},"l":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.004702194357366771}},"_":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0234375}}}}}}}}},"o":{"docs":{},"l":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.005747126436781609}}}},"p":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257},"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.015873015873015872}},"o":{"docs":{"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.015873015873015872}},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},")":{"docs":{"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.015873015873015872}}}}}}}}}}}}}}},"[":{"docs":{},":":{"docs":{},":":{"docs":{"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.015873015873015872}}}}},"l":{"docs":{},"o":{"docs":{},"g":{"docs":{"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":5.015873015873016}}}}}}}},":":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}}}},"z":{"docs":{"DataStructures/Arrays/TwoPointers.html":{"ref":"DataStructures/Arrays/TwoPointers.html","tf":0.038461538461538464}},"i":{"docs":{},"g":{"docs":{},"z":{"docs":{},"a":{"docs":{},"g":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.00510204081632653}}}}}},"p":{"docs":{"Algorithms/":{"ref":"Algorithms/","tf":0.012195121951219513}}}},":":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.005747126436781609}}}},"*":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.015306122448979591},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.015306122448979591},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.004608294930875576},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.005988023952095809},"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.006269592476489028}}},"x":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.041474654377880185},"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.018808777429467086},"Algorithms/DynamicProgramming-E.html":{"ref":"Algorithms/DynamicProgramming-E.html","tf":0.016666666666666666}},"o":{"docs":{},"r":{"docs":{},"s":{"docs":{},"/":{"docs":{"DataStructures/Arrays/Subarrays.html":{"ref":"DataStructures/Arrays/Subarrays.html","tf":0.00510204081632653}}}}}},":":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.013793103448275862},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.005747126436781609}}},"_":{"docs":{},"f":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"d":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.013793103448275862}}}}}}}},";":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.005747126436781609}}},")":{"docs":{},"]":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.004608294930875576},"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.003134796238244514}}},":":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}}}},",":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.013824884792626729},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}}},"/":{"docs":{"DataStructures/Arrays/Subsets.html":{"ref":"DataStructures/Arrays/Subsets.html","tf":0.05555555555555555},"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}},"/":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.009259259259259259},"Algorithms/":{"ref":"Algorithms/","tf":0.012195121951219513}}}},"\"":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.015625}},"\"":{"docs":{},")":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.0078125}}}},"m":{"docs":{},"e":{"docs":{},"a":{"docs":{},"n":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"f":{"docs":{},"u":{"docs":{},"l":{"docs":{},"\"":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395}}}}}}}}}}}}},"j":{"docs":{},"f":{"docs":{},"k":{"docs":{},"\"":{"docs":{},")":{"docs":{},"]":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.006211180124223602}}}}}}}},"s":{"docs":{},"o":{"docs":{},"l":{"docs":{},"u":{"docs":{},"t":{"docs":{"Algorithms/DynamicProgramming-E.html":{"ref":"Algorithms/DynamicProgramming-E.html","tf":0.002777777777777778}}}}}}}},"[":{"0":{"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.007067137809187279}},"]":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.003134796238244514}}}},"docs":{"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395}},"]":{"docs":{"DataStructures/Trees/Inorder.html":{"ref":"DataStructures/Trees/Inorder.html","tf":0.015625},"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.00510204081632653},"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.009345794392523364},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.005747126436781609},"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.012422360248447204},"DataStructures/Graphs/TopologySort.html":{"ref":"DataStructures/Graphs/TopologySort.html","tf":0.031746031746031744},"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.020958083832335328},"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.015873015873015872}},",":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.00510204081632653}}}},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},".":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"]":{"docs":{},",":{"docs":{"DataStructures/Trees/Preorder.html":{"ref":"DataStructures/Trees/Preorder.html","tf":0.01020408163265306}}}}}}}}}}}},"p":{"docs":{},".":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},",":{"docs":{"DataStructures/Trees/Postorder.html":{"ref":"DataStructures/Trees/Postorder.html","tf":0.009345794392523364}}}}}}}},"[":{"0":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257},"Algorithms/DynamicProgramming-E.html":{"ref":"Algorithms/DynamicProgramming-E.html","tf":0.002777777777777778}},"]":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}}}},"docs":{},"[":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.004608294930875576}}},"f":{"docs":{},"a":{"docs":{},"l":{"docs":{},"s":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.004608294930875576},"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}}}}}}},"f":{"docs":{},"a":{"docs":{},"l":{"docs":{},"s":{"docs":{},"e":{"docs":{},"]":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}}}}}}}}},"!":{"docs":{},"=":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.027586206896551724},"DataStructures/Graphs/Coloring.html":{"ref":"DataStructures/Graphs/Coloring.html","tf":0.0035335689045936395}}}},"y":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.027649769585253458},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129},"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.018808777429467086},"Algorithms/DynamicProgramming-E.html":{"ref":"Algorithms/DynamicProgramming-E.html","tf":0.016666666666666666}},":":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.013793103448275862},"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.005747126436781609},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.004608294930875576},"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.003134796238244514}}},"_":{"docs":{},"f":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"d":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.013793103448275862}},")":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.006896551724137931}},":":{"docs":{"DataStructures/Trees/LevelWise.html":{"ref":"DataStructures/Trees/LevelWise.html","tf":0.006896551724137931}}}}}}}}}},")":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.005747126436781609},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.004608294930875576},"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}},")":{"docs":{},"]":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.004608294930875576}}}},"]":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.004608294930875576},"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.003134796238244514}}},":":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}}}},",":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.009216589861751152},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}}},"#":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.027777777777777776},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.009216589861751152},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.028225806451612902}},"#":{"docs":{},"#":{"docs":{},"#":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.004608294930875576}}}}},"(":{"docs":{},"c":{"docs":{},"l":{"docs":{},"i":{"docs":{},"m":{"docs":{},"b":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}}}}}}}},"r":{"docs":{},"e":{"docs":{},"t":{"docs":{},"u":{"docs":{},"r":{"docs":{},"n":{"docs":{"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.015873015873015872}}}}}}}}},"]":{"docs":{},")":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004629629629629629}}}},"_":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}},"_":{"docs":{},"i":{"docs":{},"n":{"docs":{},"i":{"docs":{},"t":{"docs":{},"_":{"docs":{},"_":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"DataStructures/Trees/ConstructTree.html":{"ref":"DataStructures/Trees/ConstructTree.html","tf":0.004629629629629629}}}}}}}}}}}}}}},"h":{"docs":{},"e":{"docs":{},"l":{"docs":{},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}}}}}}}},"_":{"docs":{},"g":{"docs":{},"e":{"docs":{},"n":{"docs":{},"e":{"docs":{},"r":{"docs":{},"a":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}}}}}}}}}}}}}}}}}},"c":{"docs":{},"o":{"docs":{},"p":{"docs":{},"y":{"docs":{},"p":{"docs":{},"a":{"docs":{},"s":{"docs":{},"t":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}}}}}}}}}}}}}}}}}}}}}}},"j":{"docs":{"DataStructures/Graphs/GraphDFS.html":{"ref":"DataStructures/Graphs/GraphDFS.html","tf":0.006211180124223602},"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.004608294930875576},"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.016129032258064516},"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}},"u":{"docs":{},"g":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.005747126436781609}}},"m":{"docs":{},"p":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.004608294930875576}}}}},"o":{"docs":{},"b":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.004608294930875576}}}},")":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}},")":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.008064516129032258}},":":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}}},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}}},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}},":":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}},"a":{"docs":{},"v":{"docs":{},"a":{"docs":{"Miscellaneous/Stocks.html":{"ref":"Miscellaneous/Stocks.html","tf":0.005494505494505495}}}}}},"{":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.012096774193548387}},"}":{"docs":{"DataStructures/Graphs/GraphBFS.html":{"ref":"DataStructures/Graphs/GraphBFS.html","tf":0.005747126436781609}}},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{},"m":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{},":":{"docs":{"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.015873015873015872}}}}},"docs":{}}}}}},"k":{"docs":{},":":{"docs":{"PythonicTricks/":{"ref":"PythonicTricks/","tf":0.015873015873015872}}}}},"`":{"docs":{},"`":{"docs":{},"`":{"docs":{},"p":{"docs":{},"i":{"docs":{"Algorithms/DFSandBFS.html":{"ref":"Algorithms/DFSandBFS.html","tf":0.009216589861751152}}}}}}},"\\":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044},"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257},"Algorithms/DynamicProgramming-E.html":{"ref":"Algorithms/DynamicProgramming-E.html","tf":0.013888888888888888}}},"‘":{"docs":{},"r":{"docs":{},"e":{"docs":{},"j":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"’":{"docs":{"Algorithms/Combinatorics.html":{"ref":"Algorithms/Combinatorics.html","tf":0.0029940119760479044}}}}}}}}}},",":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}},"}":{"docs":{"Algorithms/Backtracking.html":{"ref":"Algorithms/Backtracking.html","tf":0.004032258064516129}}},")":{"docs":{"Algorithms/DynamicProgramming-T.html":{"ref":"Algorithms/DynamicProgramming-T.html","tf":0.001567398119122257}}}},"length":2571},"corpusTokens":["!=","\"","\"\")","\"jfk\")]","\"meaningful\"","\"solut","#","####","#(climb","#return","&","'pivot'","'quirky'","'treenode')","'treenode',","'treenode':","'visited'","((i,","(1)","(==r)","(bag_weight","(bottom","(c","(check","(collections.deque)","(current","(d","(djikstra","(end","(end_index","(float('","(i","(i,","(int","(k","(l","(leetcod","(left_max","(len(values)","(levelwis","(m,","(n","(ncr)","(node,","(node.v","(not","(posit","(priority,","(recurs","(right_min","(sorted)","(start_index","(sum","(time","(top","(total_sum","(use","(veri","(with","(x","(x_found","(y","(y_found","(you'll",")","*","+","+=",",","/","//","0","0)","0))","0):","0)])","0,","0/1","0:","1","1)","1))","1)):","1),","1)/2","1):","1);","1)]","1,","1.","1/3286/","10","1035","1383:","14th/3328/","18/","180/problems/lucki","180/problems/maximum","1:","1;","1]","1])","1],","1]:","1][i","1][y]","1][y],","1d","2","2)","2):","2,","2.","252","253","2:","2]","2])","3","3,","3/","3000","4","4208fed71aa3","435","439df7e5ea1f","4])","50","56","70),","857:","8th",":","=","==",">",">\")",">=","[","[0","[0]","[[0","[[0]","[[[","[[fals","[]","[],","[false]","[node.val],","[p.val,","\\","])","_","__init__(self,","_helper(self,","_helper_generator(self,","_helpercopypaste(self,","```pi","a]","absolut","abstract","accept","accept,","actual","add","addit","addnums(node,","addnums(node.left,","addnums(node.right,","addnums(root,","adjacent/","afterwards.","again","algorithm","algorithms.","alien","allow","alreadi","altern","alway","always,","amaz","ancestor","anoth","answer","answer.","answer:","apend","append","appli","approach","archives:","arr:","arr[mid]","array","array.","arrow","arsenal.","attribut","avoid","b","back","backtrack","backtracker([],","backtracker(bucket,","backtracker(bucket:","bag_weight","bag_weight):","balanc","balloons/discuss/93735/a","base","basic","basically,","be","befor","behavior","better","between","bf","bfs(i):","bfs(s):","bfs)","bifurc","binari","binarysearch(start","binarysearch(start,","binarytreepaths(self,","bipartite/","bipartition/","bit","blue","blue,","blue])","blue_edges:","board:","book","bool:","boolean","bottom,","bracket","break","break,","brute","bst","bstfrompreorder(self,","bucket","bucket.append('(')","bucket.append(')')","bucket.append(arr[k])","bucket.pop()","built","burst","buy","c","c,","c.most_common(n)","calcul","call","can't","canfinish(self,","canjumpfromposition(int","canmeasurewater(self,","canvisitallrooms(self,","care","case","case)","cases.","cash","cash,","cash.","catch:","caus","cc","cell","cell.","cell_column)","cells,","challeng","challenge/528/week","challenge/535/week","chang","change,","characters/","cheat","check","checks:","children","choices,","choices:","choos","class","class,","climb","code","coin","collect","collections.dequ","colleg","color","color)","color))","color,","color:","color_left","color_left))","colors.pop()","colors.remove(color)","colors/","column","combin","combinations:","combinator","combo","come","comment","common","compact","comparison","competit","complet","complex","complexity:","concis","condit","conditionally:","constraint","construct","construct(0,","construct(l,","construct(max_index","constructmaximumbinarytree(self,","constructtree(0,","constructtree(arr:","constructtree(pivot,","constructtree(start","constructtree(start,","contest","continu","convert","copied))","copied,","copied:","correct","cost","count","counter","counter(list/string)","cours","course)","cover","creat","criteria,","curat","current","current),","current):","current,","current.left","current.left:","current.right","current.right:","current.v","current.val))","current:","current_sum","current_sum):","customer?","cycl","cycle,","d","d,","data","day","day,","de","deal","decent","decid","decod","decor","deep","deepestleavessum(self,","def","defaultdict","defaultdict(int)","defaultdict(list)","defaultdict(set)","defaultdict,","definit","delay","deliv","depend","depth","dequ","deque()","deque([(0,","deque([[0,","deque,","desir","df","dfs(0,","dfs(i):","dfs(j):","dfs(letter,","dfs(self,","dfs(start,","dfs(x","dfs(x,","dfs(x:","diagram","dict()","dictionari","didn't","differ","difference,","direct","direction,","disconnect","divid","do:","do?","docstr","domain","domain)","domain:","don't","done","don’t","down","dp","dp:","dp[0]","dp[1]","dp[2]","dp[i","dp[i]","dp[n","dp[n]","dp[x","dp[x][i","dp[x][y]","drawn","dure","dynam","e.g.","each","easi","easier","edg","edges[(none,","edges[(start,","edges[d,","effect","effici","eg.","element","element,","element/","element:","elements/","elif","elif(weight","elimination/","else:","empti","encount","end","end)","end):","end)]","end,","end:","equat","error","essenti","etc","even","everytim","everywhere,","exact","examples:","exceed","excel","except","exclud","exclude)","exhaust","exist","exist(self,","exists,","exists:","exit","expect","expected):","expected,","experience,","experience.","explaination\"","explaination:","extrem","faced?","fals","false,","far,","far.","far;","faster","fee","fee)","fee):","fee/","few","figur","fill","filter","final","final_answ","find","findfrequenttreesum(self,","finditinerary(self,","findorder(self,","finit","first","flag","float('","float('inf')","float('inf'))","float('inf')]","flower","flowers.pop()","flowers.remove(planted[n","flowers:","fo","follow","for,","forc","forget","found","frequenc","frequent","fulli","function","further","furthestjump","g_visit","g_visited.add(i)","g_visited:","game","game/","gardennoadj(self,","geek","gener","generateparenthesis(self,","get","getmaximumgold(self,","getter","give","given","global","globally,","globals/","go","go:","goe","gold/","graduat","graph","graph:","graph[c].add(p)","graph[c].append(p)","graph[d].append(a)","graph[end].append(start)","graph[i]","graph[i]:","graph[node]:","graph[s]","graph[s].append([d,","graph[start].append(end)","graph[u].append((v,","greater","greater,","greatest","greedi","grid","grid:","grid[i][j]","grid[x][y]:","half","hash","hashing)","heap","heap.append((0,","heap:","heapq","heapq.heappop(heap)","heapq.heappush(heap,","help","helper","helperncr(","helperncr(0,","helperncr(s,","helperncr(s:","here,","hire","hold","hold,","https://blog.usejournal.com/top","https://leetcode.com/contest/weekli","https://leetcode.com/explore/challenge/card/30","https://leetcode.com/explore/challenge/card/may","https://leetcode.com/problems/2","https://leetcode.com/problems/3sum/","https://leetcode.com/problems/array","https://leetcode.com/problems/bal","https://leetcode.com/problems/best","https://leetcode.com/problems/binari","https://leetcode.com/problems/combin","https://leetcode.com/problems/construct","https://leetcode.com/problems/contain","https://leetcode.com/problems/cours","https://leetcode.com/problems/cousin","https://leetcode.com/problems/deepest","https://leetcode.com/problems/flow","https://leetcode.com/problems/gener","https://leetcode.com/problems/hous","https://leetcode.com/problems/i","https://leetcode.com/problems/jump","https://leetcode.com/problems/key","https://leetcode.com/problems/longest","https://leetcode.com/problems/lowest","https://leetcode.com/problems/maximum","https://leetcode.com/problems/minimum","https://leetcode.com/problems/most","https://leetcode.com/problems/network","https://leetcode.com/problems/next","https://leetcode.com/problems/path","https://leetcode.com/problems/poss","https://leetcode.com/problems/reconstruct","https://leetcode.com/problems/shortest","https://leetcode.com/problems/slid","https://leetcode.com/problems/sum","https://leetcode.com/problems/two","https://leetcode.com/problems/uniqu","https://leetcode.com/problems/valid","https://leetcode.com/problems/wat","https://leetcode.com/problems/word","https://medium.com/@codingfreak/binari","https://www.geeksforgeeks.org/maximum","https://www.geeksforgeeks.org/next","https://www.geeksforgeeks.org/numb","https://www.geeksforgeeks.org/partit","https://www.geeksforgeeks.org/stock","https://www.geeksforgeeks.org/tag/subset/","https://www.geeksforgeeks.org/xor","https://www.techiedelight.com/longest","i)","i+1","i:","if(","if((len(bucket)","if(curr","if(failure_base_case):","if(i","if(k","if(len(bucket)","if(n","if(opencount","if(self.accepted[i]):","if(success_base_case):","ii","ii/","iii/","implement","impli","import","improv","includ","incom","incoming[nei].remove(node)","incoming[nei]:","incoming[p].add(c)","increas","independently.","index","inf')","inf'),","inord","insert","instanti","instead","instruct","instructions:","insur","int","int)","int,","int:","int[]","int_max","int_max:","int_min","int_min:","interact","interest","interv","interview","intmax","intmin","introduct","intuit","isbipartite(self,","iscousins(self,","issubsetsum(list,","isvalidbst(self,","item","item))","item:","item[1:]","item[1])}","iter","iteration.","iterative)","ith","itinerary/","iv/discuss/54117/clean","j","j)","j))","j)):","j),","j,","j:","java","job","jug","jump","k","k))","k,","k/","k:","k]])","k_left","kadan","keep","key","key)","key,","key:","key=lambda","keyboard/submissions/","knapsack","knapsack(self,","knapsack,","k’","l","larg","largest","lc","lcs(len(text1),","lcs(m","lcs(m,","leaf","leav","leave,","leaves/","leetcod","leetcode:","left","left,","left/","left:","left=none,","left_max,","left_min","len(arr)","len(board)","len(board[0])","len(domain)","len(graph)):","len(graph))]","len(grid)","len(grid),","len(grid[0])","len(list):","len(nums)","len(nums))","len(preorder)","len(prices)):","len(queue)","len(rooms)","len(s)","len(text1)","len(text2)","len(text2))","len(topo)","len(values)+","len(visited)","len(word):","length","length)","length):","less","letter","level","level_sum","levelwis","levelwise,","lexograph","li","librari","like:","limit","limit,","lis,","list","list)","list,","list.","list:","list[i","list[i]","list[int])","list[int]:","list[list[int]])","list[list[int]],","list[list[int]]:","list[list[str]])","list[list[str]],","list[n","list[str]:","list}","littl","local","long","longest","longestcommonsubsequence(self,","longestpalindromesubseq(self,","longestzigzag(self,","look","loop","lot","lowestcommonancestor(self,","lps(0,","lps(m","lps(m,","m","m,","m:","made","maintain","make","matched:","math.min(posit","matrix","max","max(","max(cash,","max(dp[x","max(hold,","max(include,","max(lcs(m","max(lps(m","max(max_time,","max(memo[i","max(nums[0],","max(self.dfs(i,","max(self.dfs(x,","max(self.max_count,","max(self.max_length,","max/min.","max/min:","max_count","max_heap","max_index","max_index)","max_tim","maxima","maximum","maximum/discuss/111560/python","maximumsum","maximumsum)","maxprofit(self,","maxval","meet","memo","memo:","memo[(m,","memo[0]","memo[1]","memo[i","memo[i]","memo[n","memo[x","memo[x][i","memo[x][y]","memoiz","memori","mention","merg","method:","methods,","mid","min","min(2","min.","mind","minima","minimum","minsteps(self,","minval","miscellan","miss","mistak","modulo","more","move","move:","movezeroes(self,","multi,","multipl","myriad","n","n)","n),","n):","n)]","n,","n:","ncr","ncr.append(bucket[:])","necessari","necessary.","need","negative,","nei","neigh","neigh:","nesting/","networkdelaytime(self,","new","next","nextposit","node","node'","node,","node.","node.left","node.left:","node.right","node.right:","node.v","node.val)","node.val):","node.val]","node.val])","node/","node:","nodes.","non","none","none:","normal","normalsubset(self,","note","note:","notes:","nth","num","number","numbers/","numcours","numcourses))","numcourses):","numcourses:","nums)","nums.length","nums:","nums[0]","nums[1])","nums[i]","nums[i])","nums[i],","nums[max_index]","nums[max_index]:","nums[p]","nums[p],","nums[position],","nums[z]","nums[z],","o(2^n)","o(n)","obstacl","obstruction.","odd","of.","older","on","onc","one:","oop:","opencount","opencount)","opencount:","oper","optim","optimally.","option","orang","order","otherwise)","out","over","overlap","own","p","p:","pages.","pair","palindrom","param","paranthesis,","parent","parentheses/","part","partial","particular","particularli","partitions:","pass","path","path):","path,","path.append(node.val)","paths.","paths/","paths/submissions/","paths:","pathsum(self,","perfect","perform","perm_recur(self,","permut","permutation/solution/","permutation:","pivot","plant","planted[i","planted[n","pointer","pointers:","pop","popleft","posit","position,","possibl","possible.","possible:","post","postord","power","practic","practice:","pre","prefix","prefix_arr[0]","prefix_arr[1]","preorder","preorder:","preorder[end","preorder[mid","preorder[start","preorder[start]","preorder[start])","prerequisites:","present","previou","prices,","prices[0]","prices[i]","prices[i])","prioriti","problem","problems)","problems.","problemset:","process","process:","produc","product","profit","program","program:","programming)","programming/","programming:","project,","prop","proper","properti","properties,","properties;","property,","public","push","python","q.val])","q.val]))","q:","quantiti","question","questions*","questions,","questions:","queue","queue)","queue.","queue.append((0,","queue.append((current.left,","queue.append((current.right,","queue.append((i,","queue.append((root,","queue.append((v,","queue.append(0)","queue.append(current.left)","queue.append(current.right)","queue.append(nei)","queue.append(node)","queue.append(root)","queue.append(v)","queue.popleft()","queue:","quickest","quicksort","r","r)","r):","r:","range(0,","range(1,","range(2,","range(3,","range(l,","range(m))","range(n)","range(x)]","reach","readabl","realli","recent","record","record/upd","recur","recurs","recurse(0,","recurse(curr","recurse(current,","recurse(current:","recurse(node.left)","recurse(node.right)","recurse(node:","recursion)","recursion,","recursion:","red","red,","red])","red_edges:","reduc","refer","reference:","relat","rememb","remov","repeat","repetit","repetition)","repetition,","replac","represent","requir","rest","result","result,","result.append(key)","result.append(path","result.append(path)","result[node]","return","return(l","revert","right","right,","right:","right=none):","right_max,","right_min","rightmost","rightmost,","rob(self,","robber/","room","rooms/","rooms:","rooms[room]:","root","root.left","root.right,","root.right:","root:","rotten","row","row[i","row[i]","run","runtim","s","s,","s:","s[m]","s[n]:","same","satisfi","scenario","schedul","schedule/","search","section)","sections.","see","seen","seen),","seen):","seen.add((i,","seen.add((node,","seen.discard((i,","seen:","select","select.","selected):","self._helpercopypaste(n,","self.accept","self.accepted[i]","self.bucket","self.bucket.append(domain[i])","self.bucket.pop()","self.constructtree(arr[:mid])","self.constructtree(arr[mid","self.lca","self.left","self.max_count","self.max_length","self.n","self.n):","self.perm_recur(0,","self.perm_recur(k","self.permut","self.permutations.append(''.join(bucket))","self.permutations.append(self.bucket[:])","self.powerset","self.powerset.append(self.subset[:])","self.recurse(k,","self.result","self.right","self.solution_function(case_one,","self.solution_function(case_two,","self.solution_search(0,","self.solution_search(k","self.subset","self.subset.append(domain[k])","self.subset.pop()","self.tot","self.val","self.valid","sell","sell/","set","set()","set())","set([1,","set([red,","set(range(0,","set)","setter","share","sheet","shortestalternatingpaths(self,","shortestpath(self,","similar","simpl","situations,","size","size:","slide","slower","small","smaller,","smallest","solut","solution(object):","solution,","solution.","solution:","solution_function(self,","solution_search(self,","solutiongenerator:","solutions.","solutions:","solv","someth","sometim","somewher","sort","sort:","sorted(graph[s])","sorted(x.items(),","specifics,","squar","squares,","stack","stack.append(current)","stack.pop()","stair","stairs:","standard","start","start)","start,","start:","step","step,","steps,","stock","stock,","stock.","store","str(node.val)","str(node.val))","str)","str,","strictli","string","structur","structure:","stupid","sub","subarray","subarray.","subarray/","subarrays,","subarrays:","subproblem","subsequ","subsequence/","subsequences.","subset","subsets:","substitut","substr","substructur","subtre","subtree.","sum","sum,","sum/","sum/discuss/16510/python","sum:","sumnumbers(self,","sumofleftleaves(self,","sums.items():","sums[l","sure","swap","t:","tabl","table[i][weight]","take","taken","target","team/","team/discuss/539797/c%2b%2bpython","techniqu","tell","templat","temporari","text1:","text1[i","text1[m","text2:","text2[n","text2[x","th","theory:","there'","these,","thing","this:","throught","tickets:","till","time","time)","time,","time/","times,","times:","tips:","tool","top","topo","topo.append(node)","topo[::","topolog","total","total_sum","track","transact","transform","transit","travers","traversal/","traverse(node):","traverse(node,","traverse(node.left)","traverse(node.left,","traverse(node.right)","traverse(node.right,","traverse(root)","traverse(root,","tree","tree,","tree.","tree/","tree/discuss/540038/python","treenode()","treenode(arr[mid])","treenode(preorder[start])","treenode)","treenode,","treenode:","trick","true","true;","twice/","two","type","typic","u,","u_set","u_set.remove(p)","u_set:","understand","uniqu","uniquepaths(self,","unless","unnecessari","until","unvisit","up","updat","us","useful:","usually,","v","v))","v,","vagu","val","val=0,","valu","value.","value:","values,","variabl","variat","vertic","visit","visited.add(i)","visited.add(room)","visited.remove(i)","visited:","visited[node]","visited[node]:","visited[s]:","visited[x][y]","visited[x][y]:","visited[x][y][1]","visual","w","w))","w,","want","water/","way","weapon","weekli","weight","weights,","well","whole","window","wise","without","word","word:","work","workers/","write","x","x):","x)]","x,","x:","x;","x_found","xors/","y","y)","y))]","y):","y)]","y,","y:","y_found","y_found)","y_found):","z","z:","zigzag","zip","{","{item[0]:","{k:","{}","}","‘reject’"],"pipeline":["stopWordFilter","stemmer"]},"store":{"./":{"url":"./","title":"Introduction","keywords":"","body":"Introduction\nCompetitive coding notes\n"},"GeneralInstructions.html":{"url":"GeneralInstructions.html","title":"General Instructions","keywords":"","body":"General instructions\nProblem solving\n\nBrute-force approach first\nKeep on optimizing code\nRemember runtimes of python built-in functions and libraries\n\nCode writing\n\nOOP: use class, methods, and class variables\nUse docstrings if possible\nHelper functions to maintain some level of abstraction\nProperty, getters-setters to decorate code further\nUse brackets where ever possible: avoids stupid mistakes and improves code readability\n\n"},"DataStructures/":{"url":"DataStructures/","title":"Data Structures","keywords":"","body":"Data Structures & standard questions\n"},"DataStructures/Arrays/":{"url":"DataStructures/Arrays/","title":"Arrays","keywords":"","body":"Arrays\nGeneral instructions:\n\nFind 3 elements in array questions \nGenerally sort + hash or sort + Binary Search is a powerful weapon\n\nCheck if pre and post array can help \nhttps://www.geeksforgeeks.org/maximum-length-of-strictly-increasing-sub-array-after-removing-at-most-one-element/\n\n'Quirky' stack problems \nhttps://www.geeksforgeeks.org/next-greater-element/ : Position priority\n\nSimilar to stack problems (1) but value priority and then position \nhttps://leetcode.com/problems/next-permutation/solution/\n\n\n"},"DataStructures/Arrays/TwoPointers.html":{"url":"DataStructures/Arrays/TwoPointers.html","title":"Two Pointers","keywords":"","body":"2 Pointers technique\nhttps://leetcode.com/problems/container-with-most-water/  \nhttps://leetcode.com/problems/two-sum/\nhttps://leetcode.com/problems/3sum/\nTwo pointers is really an easy and effective technique which is typically used for searching pairs in an array.\n Two pointers:\nAt either ends and decide which one to move\nOne faster and one slower\nMaintain subarray size of K’s props\nGeneral solution structure: \nhttps://leetcode.com/explore/challenge/card/30-day-leetcoding-challenge/528/week-1/3286/\nclass Solution:\n    def moveZeroes(self, nums: List[int]) -> None:\n        n = len(nums)\n        z = 0\n        p = 0\n\n        while (not p == (n - 1)):\n            while z = n or z >= n:\n                break\n\n            nums[z], nums[p] = nums[p], nums[z]\n\n        return nums\n\n"},"DataStructures/Arrays/Subarrays.html":{"url":"DataStructures/Arrays/Subarrays.html","title":"Subarrays","keywords":"","body":"Subarrays\nOptimization checks: \n\nTwo pointers \nSliding window with running values \nPre and Post arrays\n\nFind subarray size K:\nRequires all subarrays of all sizes and find all where a constraint is matched: \nhttps://www.geeksforgeeks.org/number-subarrays-product-less-k/\nSliding window with two pointers \nLeft move: if product is more than the constraint \nRight move: everytime unless the product is more than the constraint \nCatch: Each addition of the element produces (end_index - (start_index - 1)) more subarrays \nCatch: Which implies -- subarray of size d produces d * (d + 1)/2 different subarrays\nhttps://www.geeksforgeeks.org/maximum-subarray-size-subarrays-size-sum-less-k/\nPrefix array to store constraint related data (sorted) \nBinary search + two pointers to find ALL subarrays of that size satisfying the constraint\nhttps://www.geeksforgeeks.org/number-of-subarrays-with-odd-sum/\nPrefix array but instead of sum, store sum modulo 2 \nfinal_answer = prefix_arr[0] * prefix_arr[1]\nOperation on all of subarrays:\nhttps://www.geeksforgeeks.org/xor-subarray-xors/\nCatch: ith element frequency in all subarrays: (i + 1) * (n - i) \nDesired quantity at the end of the whole domain traversal \nhttps://leetcode.com/problems/maximum-subarray/\nKeep current value running and max/min: \n\nIncluding the element \nExcluding the element: basically new subsequence start \n\nLooks like DP question but we don’t have to refer older values as we are dealing subarrays, not subsequences. Answer till  previous is stored in the comparison step of current and absolute max/min.\nhttps://www.geeksforgeeks.org/maximum-product-subarray-set-3/\nmaxVal and minVal at each value during iteration. If negative, swap them before multi, other things similar to maximum subarray sum\nPre and post array\nhttps://www.geeksforgeeks.org/maximum-length-of-strictly-increasing-sub-array-after-removing-at-most-one-element/\n"},"DataStructures/Arrays/Subsets.html":{"url":"DataStructures/Arrays/Subsets.html","title":"Subsets","keywords":"","body":"Subsets\nGeeks for Geeks archives: https://www.geeksforgeeks.org/tag/subset/ \nOptimization checks:\n\nSorting the whole array\nPriority queues (check Miscellaneous Problems section)\n\nFor each element, there are 2 choices: Take or leave \nTwo ways to implement this: \n\nRecursion\nDP\n\nStandard questions\nhttps://www.geeksforgeeks.org/partition-problem-dp-18/\n\nisSubsetSum(list, n, sum / 2) = isSubsetSum(list, n - 1, sum / 2) or isSubsetSum(list, n - 1, sum / 2 - list[n - 1])\n\n \n\n\n\n"},"DataStructures/Strings/":{"url":"DataStructures/Strings/","title":"Strings","keywords":"","body":"Strings\n"},"DataStructures/Strings/StandardQuestions.html":{"url":"DataStructures/Strings/StandardQuestions.html","title":"Standard Questions","keywords":"","body":"Standard Questions\nBrute -> Sliding Window -> Set\nhttps://leetcode.com/problems/longest-substring-without-repeating-characters/\n"},"DataStructures/Trees/":{"url":"DataStructures/Trees/","title":"Trees","keywords":"","body":"Trees\nDecent curated list: https://medium.com/@codingfreak/binary-tree-interview-questions-and-practice-problems-439df7e5ea1f\nTraversals\n\nInorder (Recursive and Iterative)\nPreorder (Recursive and Iterative)\nPostorder (Recursive and Iterative)\nLevelwise\nVertical order (Levelwise + Hashing)\n\nFinding a solution\n\nSee if you want to pass data down the tree or up the tree\n\nIf up the tree, postorder for recursive solution.\nIf down the tree, preorder for recursive solution, keep globals to record and update answer.  return for no node/ no left/ no right tree cases. If you don't want to encounter no left or no right situations, check before passing down the value.\n\n\nFor levelwise, make sure you check if the left node or right node is present before pushing to the queue. Do it level by level not node by node. popleft and append combo (collections.deque)\n\n\n"},"DataStructures/Trees/Inorder.html":{"url":"DataStructures/Trees/Inorder.html","title":"Inorder Traversal","keywords":"","body":"Inorder Traversal\nIt is useful when you just want to traverse the tree, if you find what you are looking for, set up a flag to make sure you don't recur unnecessary paths. Just return in the case of iterative \nParticularly useful in the case of BST as inorder will give you a sorted list\nIterative\nhttps://leetcode.com/problems/sum-of-left-leaves/\nclass Solution:\n    def sumOfLeftLeaves(self, root: TreeNode) -> int:\n        if not root:\n            return 0\n\n        stack = []\n        current = root\n        total_sum = 0\n\n        while stack or current:\n            while current:\n                stack.append(current)\n                current = current.left\n                if current and not current.left and not current.right:\n                    total_sum += current.val\n\n            current = stack.pop()\n            current = current.right\n\n        return total_sum\n\nRecursive\nhttps://leetcode.com/problems/binary-tree-paths/ \nReturn False only in the case of not satisfying the criteria, do not return True until the base case\nclass Solution:\n    def binaryTreePaths(self, root: TreeNode) -> List[str]:\n        result = []\n\n        def traverse(node, path):\n            if not node:\n                return\n\n            if not node.left and not node.right:\n                result.append(path + str(node.val))\n                return            \n\n            traverse(node.left, path + str(node.val) + \"->\")\n            traverse(node.right, path + str(node.val) + \"->\")\n\n        traverse(root, \"\")\n        return result\n\n"},"DataStructures/Trees/Preorder.html":{"url":"DataStructures/Trees/Preorder.html","title":"Preorder Traversal","keywords":"","body":"Preorder traversal\nPerfect for process node and pass value down the tree. \nSometimes replacement for levelwise (NOT ALWAYS, OF COURSE) \nIf we do not want to cover not root.left or not root.right, check if they exist and go down the tree. \nGeneral solution:\nhttps://leetcode.com/problems/sum-root-to-leaf-numbers/\nclass Solution:\n    def sumNumbers(self, root: TreeNode) -> int:\n        self.total = 0\n\n        if not root:\n            return 0\n\n        def addNums(node, current):\n            if not node.left and not node.right:\n                self.total += (current * 10 + node.val)\n                return\n\n            if node.left:\n                addNums(node.left, current * 10 + node.val)\n\n            if node.right:\n                addNums(node.right, current * 10 + node.val)\n\n        addNums(root, 0)\n        return self.total\n\nhttps://leetcode.com/problems/binary-tree-zigzag-level-order-traversal/\nclass Solution:\n    def longestZigZag(self, root: TreeNode) -> int:\n        if not root:\n            return 0\n\n        self.max_length = 0\n        left = -1\n        right = 1\n\n        def traverse(node, direction, length):\n            if not node:\n                return\n\n            self.max_length  = max(self.max_length, length)\n\n            if direction == left:\n                traverse(node.left, left, 1)\n                traverse(node.right, right, length + 1)\n\n            elif direction == right:\n                traverse(node.left, left, length + 1)\n                traverse(node.right, right, 1)\n\n            else:\n                traverse(node.left, left, 1)\n                traverse(node.right, right, 1)\n\n        traverse(root, 0, 0)\n        return self.max_length\n\nhttps://leetcode.com/problems/path-sum-ii/\nclass Solution:\n    def pathSum(self, root: TreeNode, sum: int) -> List[List[int]]:\n        result = []\n\n        def traverse(node, path, current_sum):\n            if not node:\n                return\n\n            if not node.left and not node.right:\n                if current_sum == (sum - node.val):\n                    path.append(node.val)\n                    result.append(path)\n                return\n\n            traverse(node.left, path + [node.val], current_sum + node.val)\n            traverse(node.right, path + [node.val], current_sum + node.val)\n\n        traverse(root, [], 0)\n        return result\n\n"},"DataStructures/Trees/Postorder.html":{"url":"DataStructures/Trees/Postorder.html","title":"Postorder Traversal","keywords":"","body":"Postorder traversal\nSometimes we need to pass some values back up the tree. \ne.g. node's position from the bottom, max from right and left, check if the node exists in the left or right subtree. sum of the left subtree and right subtree \nBased on these properties, we need to find values of some other properties; use globals/ class attributes to record/update their value.\nGeneral solution:\nhttps://leetcode.com/problems/lowest-common-ancestor-of-a-binary-tree/\nclass Solution:\n    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':\n        self.lca = None\n\n        def traverse(node):\n            if not node:\n                return False\n\n            L = traverse(node.left)\n            R = traverse(node.right)\n\n            if (L + R + (node.val in [p.val, q.val])) == 2:\n                self.lca = node\n\n            return L or R or (node.val in [p.val, q.val])\n\n        traverse(root)\n        return self.lca\n\nhttps://leetcode.com/problems/most-frequent-subtree-sum/ \nNote: Recording max_count while inserting so that finding max will be easier afterwards.\nfrom collections import deque, defaultdict\n\nclass Solution:\n    def findFrequentTreeSum(self, root: TreeNode) -> List[int]:\n        if not root:\n            return []\n\n        sums = defaultdict(int)\n        self.max_count = 0\n\n        def traverse(node):\n            if not node:\n                return 0\n\n            L = traverse(node.left)\n            R = traverse(node.right)\n\n            sums[L + R + node.val] += 1\n            self.max_count = max(self.max_count, sums[L + R + node.val])\n\n            return(L + R + node.val)\n\n        traverse(root)\n        result = []\n\n        for key, value in sums.items():\n            if self.max_count == value:\n                result.append(key)\n\n        return result\n\nhttps://leetcode.com/problems/validate-binary-search-tree/\nclass Solution:\n    def isValidBST(self, root: TreeNode) -> bool:\n        self.valid = True\n\n        if not root:\n            return self.valid\n\n        if not root.left and not root.right:\n            return self.valid\n\n        def recurse(node: TreeNode) -> int:\n            if not node:\n                return (float('-inf'), float('inf'))\n\n            left_max, left_min = recurse(node.left)\n            right_max, right_min = recurse(node.right)\n\n            if (left_max >= node.val) or (right_min \n"},"DataStructures/Trees/LevelWise.html":{"url":"DataStructures/Trees/LevelWise.html","title":"Level-wise Traversal","keywords":"","body":"Levelwise traversals\nGeneral solution: \nhttps://leetcode.com/problems/deepest-leaves-sum/\nfrom collections import deque\n\nclass Solution:\n    def deepestLeavesSum(self, root: TreeNode) -> int:\n        if not root:\n            return 0\n\n        queue = deque()\n        queue.append(root)\n        current = root\n        level_sum = 0\n\n        while queue:\n            size = len(queue)\n            level_sum = 0\n\n            while size:\n                current = queue.popleft()\n                level_sum += current.val\n\n                if current.left:\n                    queue.append(current.left)\n\n                if current.right:\n                    queue.append(current.right)\n\n                size -= 1\n\n        return level_sum\n\nAppend more values into the queue node \nhttps://leetcode.com/problems/cousins-in-binary-tree/\nfrom collections import deque\n\n\nclass Solution:\n    def isCousins(self, root: TreeNode, x: int, y: int) -> bool:\n        if not root:\n            return False\n\n        queue = deque()\n        queue.append((root, -1))\n        current = root\n\n\n        while queue:\n            size = len(queue)\n\n            x_found = -1\n            y_found = -1\n\n            while size:\n\n                current, parent = queue.popleft()\n\n                if current.val == x:\n                    x_found = parent\n\n                if current.val == y:\n                    y_found = parent\n\n                if (x_found != -1) and (y_found != -1) and (x_found != y_found):\n                    return True\n\n                if (x_found == y_found) and (x_found != -1):\n                    return False\n\n                if current.left:\n                    queue.append((current.left, current.val))\n\n                if current.right:\n                    queue.append((current.right, current.val))\n\n                size -= 1\n\n        return False\n\n"},"DataStructures/Trees/ConstructTree.html":{"url":"DataStructures/Trees/ConstructTree.html","title":"Construct Trees","keywords":"","body":"Tree construction questions\nBalanced tree construction\nhttps://leetcode.com/problems/balance-a-binary-search-tree/discuss/540038/python-3-easy-to-understand\nclass Solution:\n    def constructTree(arr: list) -> TreeNode:\n        if not len(list):\n            return None\n\n        mid = len(arr) // 2\n\n        node = TreeNode(arr[mid])\n        node.left = self.constructTree(arr[:mid])\n        node.right = self.constructTree(arr[mid + 1: ])\n\n        return node\n\nConstruction from preorder\nhttps://leetcode.com/problems/construct-binary-search-tree-from-preorder-traversal/\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def bstFromPreorder(self, preorder: List[int]) -> TreeNode:\n\n        if not preorder:\n            return None\n\n        def binarySearch(start, end, key) -> int:\n\n            if start > end:\n                return end + 1\n\n            mid = start + (end - start) // 2\n\n            if preorder[start] > key and preorder[start - 1]  key and preorder[end - 1]  key and preorder[mid - 1]  key:\n                return binarySearch(start, mid - 1, key)\n\n        def constructTree(start, end) -> TreeNode:\n            if start > end:\n                return None\n\n            node = TreeNode(preorder[start])\n\n            pivot = binarySearch(start + 1, end, preorder[start])\n            node.left = constructTree(start + 1, pivot - 1)\n            node.right = constructTree(pivot, end)\n\n            return node\n\n        return constructTree(0, len(preorder) - 1)\n\nSome other constructions\nhttps://leetcode.com/problems/maximum-binary-tree/\nclass Solution:\n    def constructMaximumBinaryTree(self, nums: List[int]) -> TreeNode:\n        if not nums:\n            return None\n\n        def construct(l, r):\n            if l >= r:\n                return None\n\n            max_index = l\n            for i in range(l, r):\n                if nums[i] > nums[max_index]:\n                    max_index = i\n\n            node = TreeNode()\n            node.val = nums[max_index]\n\n            node.left = construct(l, max_index)\n            node.right = construct(max_index + 1, r)\n\n            return node\n\n        return construct(0, len(nums))\n\n"},"DataStructures/Graphs/":{"url":"DataStructures/Graphs/","title":"Graphs","keywords":"","body":"Graphs\n\nhttps://leetcode.com/problems/array-nesting/\n\n"},"DataStructures/Graphs/Coloring.html":{"url":"DataStructures/Graphs/Coloring.html","title":"Coloring","keywords":"","body":"Graph coloring\nBasically, bifurcation problems\n\nhttps://leetcode.com/problems/flower-planting-with-no-adjacent/ \nThese set of problems are extremely similar with a code-changing difference \nThe first one is solved with keeping in mind that the solution exists, we just have to find it \nFor the these, we want to see if the solution exists: (use BFS)\nhttps://leetcode.com/problems/is-graph-bipartite/\nhttps://leetcode.com/problems/shortest-path-with-alternating-colors/\nhttps://leetcode.com/problems/possible-bipartition/  \n\nTips: \nMake sure you have a proper representation of graph \nRun the first loop over all vertices so that you don't miss disconnected sections.\nfrom collections import deque\n\nclass Solution:\n    def isBipartite(self, graph: List[List[int]]) -> bool:\n        visited = [0 for i in range(0, len(graph))]\n\n        def bfs(i):\n            queue = deque()\n            queue.append((i, 1))\n\n            while queue:\n                node, color = queue.popleft()\n\n                if visited[node] and visited[node] != color:\n                    return False\n\n                if visited[node]:\n                    continue\n\n                visited[node] = color\n\n                colors = set([1, 2])\n                colors.remove(color)\n                color_left = colors.pop()\n\n                for v in graph[node]:\n                    queue.append((v, color_left))\n\n            return True\n\n        for s in range(0, len(graph)):\n            if not visited[s]:\n                if not bfs(s):\n                    return False\n\n        return True\n\nEdge coloring \nThe key is to store color-node pairing in the seen set -> Allows us to traverse only \"meaningful\" cycles\nfrom collections import defaultdict, deque\n\nclass Solution:\n    def shortestAlternatingPaths(self, n: int, red_edges: List[List[int]], blue_edges: List[List[int]]) -> List[int]:\n        graph = defaultdict(list)\n        red = 1\n        blue = 2\n        queue = deque()\n        seen = set()\n        result = [-1 for i in range(0, n)]\n\n        for s, d in red_edges:\n            graph[s].append([d, red])\n\n        for s, d in blue_edges:\n            graph[s].append([d, blue])\n\n        queue.append((0, red, 0))\n        queue.append((0, blue, 0))\n        while queue:\n            node, color, length = queue.popleft()\n\n            if (node, color) in seen:\n                continue\n            seen.add((node, color))\n\n            if result[node] == -1:\n                result[node] = length\n\n            for v, c in graph[node]:\n                colors = set([red, blue])\n                colors.remove(color)\n                expected = colors.pop()\n                if (c == expected):\n                    queue.append((v, expected, length + 1))\n\n        return result\n\nSolution for the first one: \nJust filling up colors\nfrom collections import defaultdict\n\nclass Solution:\n    def gardenNoAdj(self, N: int, paths: List[List[int]]) -> List[int]:\n        graph = defaultdict(list)\n\n        for start, end in paths:\n            graph[start].append(end)\n            graph[end].append(start)\n\n        planted = [0 for i in range(0, N)]\n\n        for i in range(1, N + 1):\n            neigh = graph[i]\n            if planted[i - 1]:\n                continue\n\n            flowers = set([1, 2, 3, 4])\n            for n in neigh:\n                if planted[n - 1] in flowers:\n                    flowers.remove(planted[n - 1])\n\n            planted[i - 1] = flowers.pop()\n\n        return planted\n\n"},"DataStructures/Graphs/GraphBFS.html":{"url":"DataStructures/Graphs/GraphBFS.html","title":"Graph BFS","keywords":"","body":"Graph BFS\nExtremely powerful tool to have in the arsenal. \nUseful for a myriad of optimization problems. \nQuickest way to reach to X; even optimize cost function (Djikstra substitute using Priority Queue) \nhttps://leetcode.com/problems/keys-and-rooms/\nfrom collections import deque\n\nclass Solution:\n    def canVisitAllRooms(self, rooms: List[List[int]]) -> bool:\n        if not rooms:\n            return True\n\n        queue = deque()\n        visited = set()\n\n        queue.append(0)\n\n        while queue:\n            room = queue.popleft()\n            visited.add(room)\n\n            for v in rooms[room]:\n                if v not in visited:\n                    queue.append(v)\n\n        return True if len(visited) == len(rooms) else False\n\nAmazing priority queue method: \nhttps://leetcode.com/problems/network-delay-time/\nimport heapq\nfrom collections import deque, defaultdict\n\nclass Solution:\n    def networkDelayTime(self, times: List[List[int]], N: int, K: int) -> int:\n        graph = defaultdict(list)\n        heap = []\n        visited = {}\n\n        if not N:\n            return 0\n\n        if K > N:\n            return -1\n\n        for u, v, w in times:\n            graph[u].append((v, w))\n\n        heap.append((0, K))\n        max_time = 0\n\n        while heap:\n            time, node = heapq.heappop(heap)\n\n            if node in visited:\n                continue\n\n            visited[node] = time\n            max_time = max(max_time, time)\n\n            for v, w in graph[node]:\n                if v not in visited:\n                    heapq.heappush(heap, (time + w, v))\n\n        return max_time if len(visited) == N else -1\n\nhttps://leetcode.com/problems/water-and-jug-problem\nfrom collections import deque\n\nclass Solution:\n    def canMeasureWater(self, x: int, y: int, z: int) -> bool:\n        queue = deque([(0, 0)])\n        seen = set()\n\n        if (x + y) \n"},"DataStructures/Graphs/GraphDFS.html":{"url":"DataStructures/Graphs/GraphDFS.html","title":"Graph DFS","keywords":"","body":"Graph DFS\nOne path at a time type questions eg. Course Scheduling \nVisit the node -> process children -> unvisit it \nIf there's a cycle, we visit the already locally visited node again \nIf we have visited the node before globally, just exit with True as we have already checked and didn't find any cycle \nhttps://leetcode.com/problems/course-schedule/\nfrom collections import defaultdict\n\nclass Solution:\n    def canFinish(self, numCourses: int, prerequisites: List[List[int]]) -> bool:\n        graph = defaultdict(list)\n        g_visited = set()\n\n        for c, p in prerequisites:\n            graph[c].append(p)\n\n        def dfs(i):\n            if i in visited:\n                return False\n\n            if i in g_visited:\n                return True\n\n            if i not in g_visited:\n                g_visited.add(i)\n\n            visited.add(i)\n\n            for j in graph[i]:\n                if not dfs(j):\n                    return False\n\n            visited.remove(i)\n            return True\n\n        for i in range(0, numCourses):\n            if i not in g_visited:\n                visited = set()\n                if not dfs(i):\n                    return False\n\n        return True\n\nhttps://leetcode.com/problems/reconstruct-itinerary/ \nWe need to store visited edges instead of visited nodes. \nEdges are stored as defaultdicts because the possibility of them repeating \nEdges are sorted because we need to return the result that comes first lexographically\nimport heapq\nfrom collections import defaultdict\n\nclass Solution:\n    def findItinerary(self, tickets: List[List[str]]) -> List[str]:\n        if not tickets:\n            return []\n\n        graph = defaultdict(list)\n        self.result = []\n        edges = defaultdict(int)\n\n        for d, a in tickets:\n            graph[d].append(a)\n            edges[d, a] += 1\n\n        for s in graph:\n            graph[s] = sorted(graph[s])\n\n        edges[(None, \"JFK\")] += 1\n\n        def dfs(start, end, result, selected):\n            if edges[(start, end)] \n"},"DataStructures/Graphs/TopologySort.html":{"url":"DataStructures/Graphs/TopologySort.html","title":"Topology Sort","keywords":"","body":"Topology Sort\n \nhttps://leetcode.com/problems/course-schedule-ii/\nfrom collections import deque, defaultdict\n\nclass Solution:\n    def findOrder(self, numCourses: int, prerequisites: List[List[int]]) -> List[int]:\n        graph = defaultdict(set)\n        incoming = defaultdict(set)\n        queue = deque()\n        u_set = set(range(0, numCourses))\n        topo = []\n\n        for c, p in prerequisites:\n            graph[c].add(p)\n            incoming[p].add(c)\n\n            if p in u_set:\n                u_set.remove(p)\n\n        for node in u_set:\n            queue.append(node)\n\n        while queue:\n            node = queue.popleft()\n            topo.append(node)\n\n            for nei in graph[node]:\n                incoming[nei].remove(node)\n\n                if not incoming[nei]:\n                    queue.append(nei)\n\n        return topo[::-1] if len(topo) == numCourses else []\n\n"},"Algorithms/":{"url":"Algorithms/","title":"Algorithms","keywords":"","body":"Algorithms\nTo Do:\n\nPalindrome questions\n\nString questions: Alien dictionary\n\nKadane questions* \nMay weekly contest \nK repetition maximum sum \n\nParanthesis, stocks and intervals\n\nMatrix traversal questions \nhttps://leetcode.com/contest/weekly-contest-180/problems/lucky-numbers-in-a-matrix \nUnderstand zip function\n\nhttps://leetcode.com/explore/challenge/card/may-leetcoding-challenge/535/week-2-may-8th-may-14th/3328/ \nhttps://leetcode.com/problems/sliding-window-maximum/discuss/111560/Python-O(n)-solution-using-deque-with-comments\n\nNext greater, next smaller, greatest rightmost, smallest rightmost in an array\n\n\nBinary search\ndef binarySearch(start, end):\n    if end >= start:\n        mid = start + (end - start) // 2\n        if arr[mid] == k:\n            return mid\n        if arr[mid] > k:\n            return binarySearch(start, mid - 1)\n        if arr[mid] \n"},"Algorithms/DFSandBFS.html":{"url":"Algorithms/DFSandBFS.html","title":"DFS and BFS","keywords":"","body":"DFS and BFS\nFew notes:\n\nUse BFS if there's a need to go somewhere optimally. \neg. Minimum steps required to reach from A to B type questions, jump game questions\n\n\nUse DFS for exhaustive search in the grid where you have search everywhere, not optimal condition \neg. Find if you can create word X from the grid \n\n\nDo not forget the visited grid\n\nGeneral solutions:\nBFS\n\ncollections.deque is extremely useful: use apend and popleft for queue operations\nRun operations as long as the queue is not empty\nvisited array is an important part of the solution to avoid repetition\n\nExcellent questions:\n\nhttps://leetcode.com/problems/jump-game/ \nDFS is a little bit slower but gets the job done \nBeing greedy from the end to start works well \nhttps://leetcode.com/problems/jump-game-ii/\nRotten oranges\nhttps://leetcode.com/problems/shortest-path-in-a-grid-with-obstacles-elimination/\n```py\nfrom collections import deque\n\nclass Solution:\n    def shortestPath(self, grid: List[List[int]], k: int) -> int:\n        X = len(grid)\n        Y = len(grid[0])\n    visited = [[[-1, float('inf')] for i in range(0, Y)] for j in range(0, X)]\n    # x, y, steps, k-left\n    queue = deque([[0, 0, 0, k]])\n\n    while queue:\n        x, y, steps, k_left = queue.popleft()\n\n        if x = X or y = Y:\n            continue\n\n        if grid[x][y]:\n            k_left -= 1\n\n        if k_left = k_left and visited[x][y][1] \n\n#### DFS\n\n* Do not forget the visited array (you'll end up with stack limit exceeded error otherwise)\n\nhttps://leetcode.com/problems/word-search\n```py\nclass Solution:\n    def exist(self, board: List[List[str]], word: str) -> bool:\n        X = len(board)\n        Y = len(board[0])\n\n        visited = [[False for y in range(0, Y))] for x in range(X)]\n\n        def dfs(letter, x, y) -> bool:\n        # base case should be first\n            if letter == len(word):\n                return True\n\n            if x >= X or x = Y or y "},"Algorithms/Combinatorics.html":{"url":"Algorithms/Combinatorics.html","title":"Combinatorics","keywords":"","body":"Combinatorics\nSubsets\nReference: CC Cheat sheet book \nNote the number of recursive calls made\nTwo choices:\n\nDon't choose the element: Just make a recursive call \nChoose the element\nSelect step\nGo to the next depth\nPop out so that we don't have to instantiate the bucket\n\n\n\nclass SolutionGenerator:\n    def solution_search(self, k : int, domain: list) -> None:\n        if (k == self.n):\n            self.powerset.append(self.subset[:])\n            return\n        self.solution_search(k + 1, domain)\n        self.subset.append(domain[k])\n        self.solution_search(k + 1, domain)\n        self.subset.pop()\n\n    def _helper_generator(self, domain: list) -> list:\n        self.powerset = []\n        self.subset = []\n        self.n = len(domain)\n        self.solution_search(0, domain)\n        return self.powerset\n\nCombinations: select r out of n (nCr)\n\nRecursion base case change (==r)\nParams of recursion: s: number of selected so far; k: array item index to be processed in that call\nSimilar to normal combinations\n\nclass T:\n    def normalSubset(self, arr: list, r: int) -> list:\n        nCr = []\n        bucket = []\n        n = len(arr)\n\n        def helperNCR(s: int, k: int) -> None:\n            if(s == r):\n                nCr.append(bucket[:])\n                return\n\n            if(s > r or k == n):\n                return\n\n            helperNCR(s, k + 1)\n            bucket.append(arr[k])\n            helperNCR(s + 1, k + 1)\n            bucket.pop()\n\n        helperNCR(0, 0)\n        return nCr\n\nPermutations\nRecursive calls for every element in the loop \nNo need to add a ‘reject’ scenario \nAccept, make changes and revert after going a level deep \nFilter right after the loop using a helper array used for tracking \nclass Permutation:\n    def perm_recur(self, k : int, domain: list) -> None:\n        if(k == self.n):\n            self.permutations.append(self.bucket[:])\n            return\n        for i in range(0, self.n):\n            if(self.accepted[i]):\n                continue\n            self.accepted[i] = True\n            self.bucket.append(domain[i])\n            self.perm_recur(k + 1, domain)\n            self.accepted[i] = False\n            self.bucket.pop()\n\n    def _helper(self, domain: list) -> list:\n        self.n = len(domain)\n        self.accepted = [False] * self.n\n        self.permutations = []\n        self.bucket = []\n        self.perm_recur(0, domain)\n        return self.permutations\n\nAdditional questions:\nhttps://leetcode.com/problems/combination-sum/discuss/16510/Python-dfs-solution.\nTo allow repetition, go to the same node after select. \nself.recurse(k, domain)\nPermutation over a limited set of values (with repetition)\n\nSelect one option and de-select it\nSimilar for other options \nThere are finite number of options at each step\nRecurse based on your selection\n\nhttps://leetcode.com/problems/generate-parentheses/\nclass Solution:\n    def generateParenthesis(self, n: int) -> int:\n        def backtracker(bucket: list, openCount: int) -> None:\n            if((len(bucket) - openCount) > openCount or \\\n               openCount > self.n):\n                return\n\n            if(len(bucket) == self.n * 2):\n                if(openCount == self.n):\n                    self.permutations.append(''.join(bucket))\n                return\n\n            bucket.append('(')\n            backtracker(bucket, openCount + 1)\n            bucket.pop()\n            bucket.append(')')\n            backtracker(bucket, openCount)\n            bucket.pop()\n\n        self.permutations = []\n        self.n = n\n        if n == 0:\n            return 0\n\n        backtracker([], 0)\n        return self.permutations\n\n"},"Algorithms/Backtracking.html":{"url":"Algorithms/Backtracking.html","title":"Backtracking and Complete Search","keywords":"","body":"Backtracking and Complete Search\nExhaustive search for an answer:\nCheck every possible option and see if a solution exists: (very similar to permutation problems) \nhttps://leetcode.com/problems/jump-game \nAccept one of the options at each step \nEmptying the bucket is not necessary \npublic class Solution {\n    public boolean canJumpFromPosition(int position, int[] nums) {\n        if (position == nums.length - 1) {\n            return true;\n        }\n\n        int furthestJump = Math.min(position + nums[position], nums.length - 1);\n        for (int nextPosition = position + 1; nextPosition \nGrid DFS\nSolution of https://leetcode.com/problems/path-with-maximum-gold/ :\ndef dfs(self, i: int, j: int, sum: int, seen: set) -> int:\n    # constraints\n    if(i = m or j = n or not grid[i][j] or (i, j) in seen):\n        return sum\n    # add to the 'visited' set\n    seen.add((i, j))\n    # update current target\n    sum += grid[i][j]\n    # set maximum target\n    maximumSum = 0\n\n    # directions to move in\n    for x, y in ((i, j + 1), (i , j - 1), (i + 1, j), (i - 1, j)):\n    # The actual recursion step\n        maximumSum = max(self.dfs(x, y, sum, seen), maximumSum)\n    # remove from the 'visited' set after recursion \n    seen.discard((i, j))\n    return maximumSum\n\ndef getMaximumGold(self, grid: List[List[int]]) -> int:\n    m, n = len(grid), len(grid[0])\n    return max(self.dfs(i, j, 0, set()) for j in range(n) for i in range(m))\n\nhttps://leetcode.com/problems/2-keys-keyboard/submissions/ \nReturn types should be taken care of. \n\nBase condition\nLimiting condition if required (Use INTMAX for min recursion, INTMIN for max recursion)\nActual recursion\n\nclass Solution:\n    def _helperCopyPaste(self, n: int, current: int, copied: int) -> int:\n        if(current == n):\n            return 0\n        if(current > n):\n            return 3000\n        return min(2 + self._helperCopyPaste(n, current + current, current),\n                   1 + self._helperCopyPaste(n, current + copied, copied))\n\n    def minSteps(self, n: int) -> int:\n        if(n == 1):\n            return 0\n        return 1 + self._helperCopyPaste(n, 1, 1)\n\n"},"Algorithms/DynamicProgramming-T.html":{"url":"Algorithms/DynamicProgramming-T.html","title":"Theory: Dynamic Programming","keywords":"","body":"Dynamic Programming\nDynamic programming is a technique that combines the correctness of complete search and the efficiency of greedy algorithms. Dynamic programming can be applied if the problem can be divided into overlapping subproblems that can be solved independently.\nWe should always go: recursive solution -> memoization -> Dynamic Programming \nThere are a lot of memoization solved problems in leetcode -> Top interview questions -> DP \nMemoization basically insures that we solve a particular subproblem only once to improve runtime\nRecursive solution: For problems with structure of take or leave, check how it depends on previous values and recurse conditionally: make except and include cases and take max or min. eg. coin-change, LIS, perfect squares, word break, etc  \nHalf the problem is solved once you figure out that the problem is a DP one\nThere are two uses for dynamic programming:\n\nFinding an optimal solution: We want to find a solution that is as large as possible or as small as possible.\nCounting the number of solutions: We want to calculate the total number of possible solutions.\n\n1. Optimal Solution\neg. 0/1 Knapsack, partitions: exact sum, minimum sum difference, leetcode 1035\nKnapsack program:\nclass Solution:\n    def knapsack(self, weights, values, bag_weight):\n        table = [[0] * (bag_weight + 1)] for _ in (len(values) + 1)]\n\n        for i in range(0, len(values)+ 1):\n            for weight in range(0, bag_weight + 1):\n                if(i == 0 or weight == 0):\n                    table[i][weight] = 0\n                elif(weight \nSimilar problem for a 1D array\nhttps://leetcode.com/problems/house-robber/ \nRecursive solution is intuitive\nclass Solution:\n    def rob(self, nums: List[int]) -> int:\n        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return nums[0]\n\n        def recurse(current: int, i: int) -> int:\n            if i >= n:\n                return current\n\n            return max(\n                recurse(current, i + 1),\n                recurse(current + nums[i], i + 2)\n            )\n\n        return recurse(0, 0)\n\nSolution using DP:\nclass Solution:\n    def rob(self, nums: List[int]) -> int:\n        n = len(nums)\n\n        if n == 0:\n            return 0\n        if n == 1:\n            return nums[0]\n\n        memo = [0] * n\n        memo[0] = nums[0]\n        memo[1] = max(nums[0], nums[1])\n\n        for i in range(2, n):\n            memo[i] = max(memo[i - 1], memo[i - 2] + nums[i])\n\n        return memo[n - 1]\n\nFor exact sum subsets and minimum difference subsets: \nTrue or False for each cell. Use or instead of max(include, exclude)\nNeed to have another loop over the table to find the 'pivot'\nFor minimum difference, find a True cell and that causes the least difference \n(total_sum - 2 * cell_column)\nFor the minimum number of squares required to get the sum, similar to the exact sum subarray. Rather than True or False, maintain the number of squares required for the sum\n2. Number of solutions\neg. Climbing stairs (LeetCode 70), unique-paths \nhttps://leetcode.com/problems/unique-paths/submissions/ \nRecursive solution: \nclass Solution:\n    def uniquePaths(self, m: int, n: int) -> int:\n        X = n\n        Y = m\n        visited = [[False for i in range(0, Y)] for j in range(0, X)]\n\n        def dfs(x: int, y: int) -> int:\n            if x = X or y = Y:\n                return 0\n\n            if visited[x][y]:\n                return 0\n\n            if x == (X - 1) and y == (Y - 1):\n                return 1\n\n            visited[x][y] = True\n\n            total = dfs(x + 1, y) + \\\n                    dfs(x, y + 1) \n\n            visited[x][y] = False\n\n            return total\n\n        return dfs(0, 0)\n\nDP Solution: \nclass Solution:\n    def uniquePaths(self, m: int, n: int) -> int:\n        X = n\n        Y = m\n\n        if X == 0 and Y == 0:\n            return 0\n\n        if X == 1 and Y == 1:\n            return 1\n\n        if X == 1:\n            return 1\n\n        if Y == 1:\n            return 1\n\n        memo = [[0 for y in range(0, Y)] for x in range(0, X)]\n\n        for x in range(0, X):\n            for y in range(0, Y):\n                if x == 0 and y == 0:\n                    memo[x][y] = 1\n                    continue\n\n                if x == 0 or y == 0:\n                    memo[x][y] = 1\n                    continue\n\n                memo[x][y] = memo[x - 1][y] + memo[x][y - 1]\n\n        return memo[X - 1][Y - 1]\n\nUnique paths II is similar but we set count to 0 in case there is an obstruction. \nFor row and column cells, row[i] = row[i - 1] and similar to columns \nRest is similar\nSimilar problem for a 1D array\nClimbing stairs: \nFor each step, there are multiple choices, generally 2. \nBrute force solution goes something like this:\nclass Solution:\n    def solution_function(self, n):\n        if(success_base_case):\n           return 1\n        if(failure_base_case):\n           return 0\n\n    return self.solution_function(case_one, n) + self.solution_function(case_two, n)\n\nTime Complexity: O(2^n) - tree size\nCheck if the problem satisfies Optimal Substructure Property \nFind an equation for the answer \nHere,\ndp[n] = dp[n  -  1] + dp[n - 2] #(climb stairs case)\n\ndp = [0] * (n + 1)\ndp[0] = 0\ndp[1] = 1\ndp[2] = 2\n\nfor i in range(3, n):\n            dp[i] = dp[i - 1] + dp[i - 2]\nreturn dp[n]\n\nFrom Leetcode:\n\nUsually, solving and fully understanding a dynamic programming problem is a 4 step process: \n\nStart with the recursive backtracking solution\nOptimize by using a memoization table (top-down dynamic programming)\nRemove the need for recursion (bottom-up dynamic programming)\nApply final tricks to reduce the time / memory complexity\n\n\n"},"Algorithms/DynamicProgramming-E.html":{"url":"Algorithms/DynamicProgramming-E.html","title":"Examples: Dynamic Programming","keywords":"","body":"Step-by-step solved DP problems\nEssential leetcode questions for practice:\nDecode Ways \nWord Break \nPerfect Squares \nCoin-change \nLIS \nLCS  \nDecent problemset: https://blog.usejournal.com/top-50-dynamic-programming-practice-problems-4208fed71aa3 \nVisualize the overlap with the recursion tree diagram given on the \"Solution explaination\" pages. \nLongest Common Subsequence\nhttps://leetcode.com/problems/longest-common-subsequence/ \nSolution explaination: https://www.techiedelight.com/longest-common-subsequence/ \nRecursion:\nclass Solution:\n    def longestCommonSubsequence(self, text1: str, text2: str) -> int:\n        def LCS(m, n):\n            if not m or not n:\n                return 0\n\n            if text1[m - 1] == text2[n - 1]:\n                return LCS(m - 1, n - 1) + 1\n\n            return max(LCS(m - 1, n), \\\n                       LCS(m, n - 1))\n\n        return LCS(len(text1), len(text2))\n\nRecursion + Memoization\nclass Solution:\n    def longestCommonSubsequence(self, text1: str, text2: str) -> int:\n        memo = dict()\n\n        def LCS(m, n):\n            if (m, n) in memo:\n                return memo[(m, n)]\n\n            if not m or not n:\n                memo[(m, n)] = 0\n                return memo[(m, n)]\n\n            if text1[m - 1] == text2[n - 1]:\n                memo[(m, n)] = LCS(m - 1, n - 1) + 1\n            else:\n                memo[(m, n)] =  max(LCS(m - 1, n), \\\n                                    LCS(m, n - 1))\n\n            return memo[(m, n)]\n\n        return LCS(len(text1), len(text2))\n\nDP\nclass Solution:\n    def longestCommonSubsequence(self, text1: str, text2: str) -> int:\n        X = len(text2)\n        Y = len(text1)\n\n        dp = [[0 if x == 0 or y == 0 else -1 for y in range(0, Y + 1)] \\\n              for x in range(0, X + 1)]\n\n        for x in range(1, X + 1):\n            for y in range(1, Y + 1):\n                if text1[y - 1] == text2[x - 1]:\n                    dp[x][y] = 1 + dp[x - 1][y - 1]\n                else:\n                    dp[x][y] = max(dp[x - 1][y], dp[x][y - 1])\n\n        return dp[X][Y]\n\nLongest Palindromic Subsequence\nhttps://leetcode.com/problems/longest-palindromic-subsequence/ \nSolution explaination: https://www.techiedelight.com/longest-palindromic-subsequence-using-dynamic-programming/ \nRecursion:\nclass Solution:\n    def longestPalindromeSubseq(self, s: str) -> int:\n        n = len(s)\n\n        def LPS(m, n):\n            if m > n:\n                return 0\n\n            if m == n:\n                return 1\n\n            if s[m] == s[n]:\n                return LPS(m + 1, n - 1) + 2\n            else:\n                return max(LPS(m + 1, n), \\\n                           LPS(m, n - 1))\n\n        return LPS(0, n - 1)\n\nRecursion + Memoization\nclass Solution:\n    def longestPalindromeSubseq(self, s: str) -> int:\n        n = len(s)\n        memo = dict()\n\n        def LPS(m, n):\n            if m > n:\n                return 0\n\n            if (m, n) in memo:\n                return memo[(m, n)]\n\n            if m == n:\n                memo[(m, n)] = 1\n                return memo[(m, n)]\n\n            if s[m] == s[n]:\n                memo[(m, n)] = LPS(m + 1, n - 1) + 2\n            else:\n                memo[(m, n)] = max(LPS(m + 1, n), \\\n                                   LPS(m, n - 1))\n\n            return memo[(m, n)]\n\n        return LPS(0, n - 1)\n\n"},"Miscellaneous/":{"url":"Miscellaneous/","title":"Miscellaneous","keywords":"","body":"Miscellaneous\n"},"Miscellaneous/Stocks.html":{"url":"Miscellaneous/Stocks.html","title":"Stocks","keywords":"","body":"Stocks\n1 transaction\nhttps://www.geeksforgeeks.org/maximum-difference-between-two-elements/ \nKeep track of the minimum element found so far, calculate the difference between the current and minimum found so far. \nUpdate the maximum difference if necessary.\nAt most 2 transactions\nhttps://www.geeksforgeeks.org/maximum-profit-by-buying-and-selling-a-share-at-most-twice/ \nA similar approach to one transaction limit, maintain the minimum till that element and similar for i + 1 and till the end of the List.\nAny number of transactions\nhttps://www.geeksforgeeks.org/stock-buy-sell/ \nLocal minima List[i] = List[i + 1]\nBuy at local minima and sell at local maxima\nAny number of transactions with transaction fee\n\nCan use this for any number of transactions with fee == 0 \nhttps://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/ \nAt the end of the i-th day, we maintain cash, the maximum profit we could have if we did not have a share of stock, and hold, the maximum profit we could have if we owned a share of stock.\n\nTo transition from the i-th day to the i+1-th day, we either sell our stock \ncash = max(cash, hold + prices[i] - fee) or \nbuy a stock \nhold = max(hold, cash - prices[i]) \nAt the end, we want to return cash. We can transform cash first without using temporary variables because selling and buying on the same day can't be better than just continuing to hold the stock.\nclass Solution(object):\n    def maxProfit(self, prices, fee):\n        cash, hold = 0, -prices[0]\n        for i in range(1, len(prices)):\n            cash = max(cash, hold + prices[i] - fee)\n            hold = max(hold, cash - prices[i])\n        return cash\n\nK number of transactions\nhttps://leetcode.com/problems/best-time-to-buy-and-sell-stock-iv/discuss/54117/Clean-Java-DP-solution-with-comment \nDynamic programming\n"},"Miscellaneous/Intervals.html":{"url":"Miscellaneous/Intervals.html","title":"Intervals","keywords":"","body":"Interval problems\nTemplate for simple questions like: \n\n435 Non-overlapping Intervals \n56 Merge Intervals \n252 Meeting Rooms\n253 Meeting Rooms II \nhttps://leetcode.com/problems/minimum-number-of-arrows-to-burst-balloons/discuss/93735/a-concise-template-for-overlapping-interval-problem \n\nhttps://leetcode.com/problems/course-schedule-iii/ \nSorting + max_heap \nSort based on ending times, accept courses if possible \nIf we can't check if we can remove something from the accepted set and select the one which makes our time compact\n"},"Miscellaneous/InterestingMiscellaneous.html":{"url":"Miscellaneous/InterestingMiscellaneous.html","title":"Interesting Miscellaneous","keywords":"","body":"Need to find nth smallest or largest\nUse max or min-heap or partial sort: quicksort variation\nPriority queues\n1383: https://leetcode.com/contest/weekly-contest-180/problems/maximum-performance-of-a-team/ \nSolution: https://leetcode.com/problems/maximum-performance-of-a-team/discuss/539797/C%2B%2BPython-Priority-Queue\n857: https://leetcode.com/problems/minimum-cost-to-hire-k-workers/\n"},"PythonicTricks/":{"url":"PythonicTricks/","title":"Pythonic Tricks","keywords":"","body":"Pythonic Tricks\nINT_MAX:\nINT_MAX = float('inf')\n\nINT_MIN:\nINT_MIN = float('-inf')\n\nConvert list into a dictionary\n{item[0]: item[1:] for item in list}\n\nSort dictionary by value\n{k: v fo r k, v in sorted(x.items(), key=lambda item: item[1])}\n\nMost frequent in an array or a string\nfrom collections import Counter\nC = Counter(list/string)\nC.most_common(n) #returns a list of top n\n\nOr we can just keep track of the most frequent element while going throught the list\nheapq insert with priority\nimport heapq\nheap = []\nheapq.heappush(heap, (priority, item))\n"},"BehavioralQuestions.html":{"url":"BehavioralQuestions.html","title":"Behavioral Questions","keywords":"","body":"Behavioral Questions\n\nWhat was a challenge or problem that you faced?\nTell me about a time when you were not able to deliver on time and what did you do?\nIs it better to have direct interaction with the customer?\nAnd some follow up questions based on my answers \n\n\nAll my answers were drawn from experience, I made sure I mentioned specifics, not just a vague answer. One answer from my recent graduate college project, two from my previous work experience.\n\n"}}}